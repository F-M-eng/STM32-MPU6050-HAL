
MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb54  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001178  0800cc68  0800cc68  0000dc68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dde0  0800dde0  0000f20c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800dde0  0800dde0  0000ede0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dde8  0800dde8  0000f20c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dde8  0800dde8  0000ede8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ddec  0800ddec  0000edec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  0800ddf0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  2000020c  0800dffc  0000f20c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  0800dffc  0000f434  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f20c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0d6  00000000  00000000  0000f235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023df  00000000  00000000  0001c30b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  0001e6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a38  00000000  00000000  0001f420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a94b  00000000  00000000  0001fe58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ce8  00000000  00000000  0003a7a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d1de  00000000  00000000  0004d48b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da669  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e64  00000000  00000000  000da6ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000df510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000020c 	.word	0x2000020c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cc4c 	.word	0x0800cc4c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000210 	.word	0x20000210
 800014c:	0800cc4c 	.word	0x0800cc4c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <__aeabi_ldivmod>:
 800119c:	b97b      	cbnz	r3, 80011be <__aeabi_ldivmod+0x22>
 800119e:	b972      	cbnz	r2, 80011be <__aeabi_ldivmod+0x22>
 80011a0:	2900      	cmp	r1, #0
 80011a2:	bfbe      	ittt	lt
 80011a4:	2000      	movlt	r0, #0
 80011a6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80011aa:	e006      	blt.n	80011ba <__aeabi_ldivmod+0x1e>
 80011ac:	bf08      	it	eq
 80011ae:	2800      	cmpeq	r0, #0
 80011b0:	bf1c      	itt	ne
 80011b2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80011b6:	f04f 30ff 	movne.w	r0, #4294967295
 80011ba:	f000 b9f5 	b.w	80015a8 <__aeabi_idiv0>
 80011be:	f1ad 0c08 	sub.w	ip, sp, #8
 80011c2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011c6:	2900      	cmp	r1, #0
 80011c8:	db09      	blt.n	80011de <__aeabi_ldivmod+0x42>
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	db1a      	blt.n	8001204 <__aeabi_ldivmod+0x68>
 80011ce:	f000 f86b 	bl	80012a8 <__udivmoddi4>
 80011d2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011da:	b004      	add	sp, #16
 80011dc:	4770      	bx	lr
 80011de:	4240      	negs	r0, r0
 80011e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	db1b      	blt.n	8001220 <__aeabi_ldivmod+0x84>
 80011e8:	f000 f85e 	bl	80012a8 <__udivmoddi4>
 80011ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011f4:	b004      	add	sp, #16
 80011f6:	4240      	negs	r0, r0
 80011f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011fc:	4252      	negs	r2, r2
 80011fe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001202:	4770      	bx	lr
 8001204:	4252      	negs	r2, r2
 8001206:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800120a:	f000 f84d 	bl	80012a8 <__udivmoddi4>
 800120e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001212:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001216:	b004      	add	sp, #16
 8001218:	4240      	negs	r0, r0
 800121a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800121e:	4770      	bx	lr
 8001220:	4252      	negs	r2, r2
 8001222:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001226:	f000 f83f 	bl	80012a8 <__udivmoddi4>
 800122a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800122e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001232:	b004      	add	sp, #16
 8001234:	4252      	negs	r2, r2
 8001236:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800123a:	4770      	bx	lr

0800123c <__aeabi_d2lz>:
 800123c:	b538      	push	{r3, r4, r5, lr}
 800123e:	2200      	movs	r2, #0
 8001240:	2300      	movs	r3, #0
 8001242:	4604      	mov	r4, r0
 8001244:	460d      	mov	r5, r1
 8001246:	f7ff fbb9 	bl	80009bc <__aeabi_dcmplt>
 800124a:	b928      	cbnz	r0, 8001258 <__aeabi_d2lz+0x1c>
 800124c:	4620      	mov	r0, r4
 800124e:	4629      	mov	r1, r5
 8001250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001254:	f000 b80a 	b.w	800126c <__aeabi_d2ulz>
 8001258:	4620      	mov	r0, r4
 800125a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800125e:	f000 f805 	bl	800126c <__aeabi_d2ulz>
 8001262:	4240      	negs	r0, r0
 8001264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001268:	bd38      	pop	{r3, r4, r5, pc}
 800126a:	bf00      	nop

0800126c <__aeabi_d2ulz>:
 800126c:	b5d0      	push	{r4, r6, r7, lr}
 800126e:	2200      	movs	r2, #0
 8001270:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <__aeabi_d2ulz+0x34>)
 8001272:	4606      	mov	r6, r0
 8001274:	460f      	mov	r7, r1
 8001276:	f7ff f92f 	bl	80004d8 <__aeabi_dmul>
 800127a:	f7ff fc05 	bl	8000a88 <__aeabi_d2uiz>
 800127e:	4604      	mov	r4, r0
 8001280:	f7ff f8b0 	bl	80003e4 <__aeabi_ui2d>
 8001284:	2200      	movs	r2, #0
 8001286:	4b07      	ldr	r3, [pc, #28]	@ (80012a4 <__aeabi_d2ulz+0x38>)
 8001288:	f7ff f926 	bl	80004d8 <__aeabi_dmul>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4630      	mov	r0, r6
 8001292:	4639      	mov	r1, r7
 8001294:	f7fe ff68 	bl	8000168 <__aeabi_dsub>
 8001298:	f7ff fbf6 	bl	8000a88 <__aeabi_d2uiz>
 800129c:	4621      	mov	r1, r4
 800129e:	bdd0      	pop	{r4, r6, r7, pc}
 80012a0:	3df00000 	.word	0x3df00000
 80012a4:	41f00000 	.word	0x41f00000

080012a8 <__udivmoddi4>:
 80012a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012ac:	9d08      	ldr	r5, [sp, #32]
 80012ae:	468e      	mov	lr, r1
 80012b0:	4604      	mov	r4, r0
 80012b2:	4688      	mov	r8, r1
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d14a      	bne.n	800134e <__udivmoddi4+0xa6>
 80012b8:	428a      	cmp	r2, r1
 80012ba:	4617      	mov	r7, r2
 80012bc:	d962      	bls.n	8001384 <__udivmoddi4+0xdc>
 80012be:	fab2 f682 	clz	r6, r2
 80012c2:	b14e      	cbz	r6, 80012d8 <__udivmoddi4+0x30>
 80012c4:	f1c6 0320 	rsb	r3, r6, #32
 80012c8:	fa01 f806 	lsl.w	r8, r1, r6
 80012cc:	fa20 f303 	lsr.w	r3, r0, r3
 80012d0:	40b7      	lsls	r7, r6
 80012d2:	ea43 0808 	orr.w	r8, r3, r8
 80012d6:	40b4      	lsls	r4, r6
 80012d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80012dc:	fbb8 f1fe 	udiv	r1, r8, lr
 80012e0:	fa1f fc87 	uxth.w	ip, r7
 80012e4:	fb0e 8811 	mls	r8, lr, r1, r8
 80012e8:	fb01 f20c 	mul.w	r2, r1, ip
 80012ec:	0c23      	lsrs	r3, r4, #16
 80012ee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d909      	bls.n	800130a <__udivmoddi4+0x62>
 80012f6:	18fb      	adds	r3, r7, r3
 80012f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80012fc:	f080 80eb 	bcs.w	80014d6 <__udivmoddi4+0x22e>
 8001300:	429a      	cmp	r2, r3
 8001302:	f240 80e8 	bls.w	80014d6 <__udivmoddi4+0x22e>
 8001306:	3902      	subs	r1, #2
 8001308:	443b      	add	r3, r7
 800130a:	1a9a      	subs	r2, r3, r2
 800130c:	fbb2 f0fe 	udiv	r0, r2, lr
 8001310:	fb0e 2210 	mls	r2, lr, r0, r2
 8001314:	fb00 fc0c 	mul.w	ip, r0, ip
 8001318:	b2a3      	uxth	r3, r4
 800131a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800131e:	459c      	cmp	ip, r3
 8001320:	d909      	bls.n	8001336 <__udivmoddi4+0x8e>
 8001322:	18fb      	adds	r3, r7, r3
 8001324:	f100 32ff 	add.w	r2, r0, #4294967295
 8001328:	f080 80d7 	bcs.w	80014da <__udivmoddi4+0x232>
 800132c:	459c      	cmp	ip, r3
 800132e:	f240 80d4 	bls.w	80014da <__udivmoddi4+0x232>
 8001332:	443b      	add	r3, r7
 8001334:	3802      	subs	r0, #2
 8001336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800133a:	2100      	movs	r1, #0
 800133c:	eba3 030c 	sub.w	r3, r3, ip
 8001340:	b11d      	cbz	r5, 800134a <__udivmoddi4+0xa2>
 8001342:	2200      	movs	r2, #0
 8001344:	40f3      	lsrs	r3, r6
 8001346:	e9c5 3200 	strd	r3, r2, [r5]
 800134a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800134e:	428b      	cmp	r3, r1
 8001350:	d905      	bls.n	800135e <__udivmoddi4+0xb6>
 8001352:	b10d      	cbz	r5, 8001358 <__udivmoddi4+0xb0>
 8001354:	e9c5 0100 	strd	r0, r1, [r5]
 8001358:	2100      	movs	r1, #0
 800135a:	4608      	mov	r0, r1
 800135c:	e7f5      	b.n	800134a <__udivmoddi4+0xa2>
 800135e:	fab3 f183 	clz	r1, r3
 8001362:	2900      	cmp	r1, #0
 8001364:	d146      	bne.n	80013f4 <__udivmoddi4+0x14c>
 8001366:	4573      	cmp	r3, lr
 8001368:	d302      	bcc.n	8001370 <__udivmoddi4+0xc8>
 800136a:	4282      	cmp	r2, r0
 800136c:	f200 8108 	bhi.w	8001580 <__udivmoddi4+0x2d8>
 8001370:	1a84      	subs	r4, r0, r2
 8001372:	eb6e 0203 	sbc.w	r2, lr, r3
 8001376:	2001      	movs	r0, #1
 8001378:	4690      	mov	r8, r2
 800137a:	2d00      	cmp	r5, #0
 800137c:	d0e5      	beq.n	800134a <__udivmoddi4+0xa2>
 800137e:	e9c5 4800 	strd	r4, r8, [r5]
 8001382:	e7e2      	b.n	800134a <__udivmoddi4+0xa2>
 8001384:	2a00      	cmp	r2, #0
 8001386:	f000 8091 	beq.w	80014ac <__udivmoddi4+0x204>
 800138a:	fab2 f682 	clz	r6, r2
 800138e:	2e00      	cmp	r6, #0
 8001390:	f040 80a5 	bne.w	80014de <__udivmoddi4+0x236>
 8001394:	1a8a      	subs	r2, r1, r2
 8001396:	2101      	movs	r1, #1
 8001398:	0c03      	lsrs	r3, r0, #16
 800139a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800139e:	b280      	uxth	r0, r0
 80013a0:	b2bc      	uxth	r4, r7
 80013a2:	fbb2 fcfe 	udiv	ip, r2, lr
 80013a6:	fb0e 221c 	mls	r2, lr, ip, r2
 80013aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80013ae:	fb04 f20c 	mul.w	r2, r4, ip
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d907      	bls.n	80013c6 <__udivmoddi4+0x11e>
 80013b6:	18fb      	adds	r3, r7, r3
 80013b8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80013bc:	d202      	bcs.n	80013c4 <__udivmoddi4+0x11c>
 80013be:	429a      	cmp	r2, r3
 80013c0:	f200 80e3 	bhi.w	800158a <__udivmoddi4+0x2e2>
 80013c4:	46c4      	mov	ip, r8
 80013c6:	1a9b      	subs	r3, r3, r2
 80013c8:	fbb3 f2fe 	udiv	r2, r3, lr
 80013cc:	fb0e 3312 	mls	r3, lr, r2, r3
 80013d0:	fb02 f404 	mul.w	r4, r2, r4
 80013d4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80013d8:	429c      	cmp	r4, r3
 80013da:	d907      	bls.n	80013ec <__udivmoddi4+0x144>
 80013dc:	18fb      	adds	r3, r7, r3
 80013de:	f102 30ff 	add.w	r0, r2, #4294967295
 80013e2:	d202      	bcs.n	80013ea <__udivmoddi4+0x142>
 80013e4:	429c      	cmp	r4, r3
 80013e6:	f200 80cd 	bhi.w	8001584 <__udivmoddi4+0x2dc>
 80013ea:	4602      	mov	r2, r0
 80013ec:	1b1b      	subs	r3, r3, r4
 80013ee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80013f2:	e7a5      	b.n	8001340 <__udivmoddi4+0x98>
 80013f4:	f1c1 0620 	rsb	r6, r1, #32
 80013f8:	408b      	lsls	r3, r1
 80013fa:	fa22 f706 	lsr.w	r7, r2, r6
 80013fe:	431f      	orrs	r7, r3
 8001400:	fa2e fa06 	lsr.w	sl, lr, r6
 8001404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001408:	fbba f8f9 	udiv	r8, sl, r9
 800140c:	fa0e fe01 	lsl.w	lr, lr, r1
 8001410:	fa20 f306 	lsr.w	r3, r0, r6
 8001414:	fb09 aa18 	mls	sl, r9, r8, sl
 8001418:	fa1f fc87 	uxth.w	ip, r7
 800141c:	ea43 030e 	orr.w	r3, r3, lr
 8001420:	fa00 fe01 	lsl.w	lr, r0, r1
 8001424:	fb08 f00c 	mul.w	r0, r8, ip
 8001428:	0c1c      	lsrs	r4, r3, #16
 800142a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800142e:	42a0      	cmp	r0, r4
 8001430:	fa02 f201 	lsl.w	r2, r2, r1
 8001434:	d90a      	bls.n	800144c <__udivmoddi4+0x1a4>
 8001436:	193c      	adds	r4, r7, r4
 8001438:	f108 3aff 	add.w	sl, r8, #4294967295
 800143c:	f080 809e 	bcs.w	800157c <__udivmoddi4+0x2d4>
 8001440:	42a0      	cmp	r0, r4
 8001442:	f240 809b 	bls.w	800157c <__udivmoddi4+0x2d4>
 8001446:	f1a8 0802 	sub.w	r8, r8, #2
 800144a:	443c      	add	r4, r7
 800144c:	1a24      	subs	r4, r4, r0
 800144e:	b298      	uxth	r0, r3
 8001450:	fbb4 f3f9 	udiv	r3, r4, r9
 8001454:	fb09 4413 	mls	r4, r9, r3, r4
 8001458:	fb03 fc0c 	mul.w	ip, r3, ip
 800145c:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001460:	45a4      	cmp	ip, r4
 8001462:	d909      	bls.n	8001478 <__udivmoddi4+0x1d0>
 8001464:	193c      	adds	r4, r7, r4
 8001466:	f103 30ff 	add.w	r0, r3, #4294967295
 800146a:	f080 8085 	bcs.w	8001578 <__udivmoddi4+0x2d0>
 800146e:	45a4      	cmp	ip, r4
 8001470:	f240 8082 	bls.w	8001578 <__udivmoddi4+0x2d0>
 8001474:	3b02      	subs	r3, #2
 8001476:	443c      	add	r4, r7
 8001478:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800147c:	eba4 040c 	sub.w	r4, r4, ip
 8001480:	fba0 8c02 	umull	r8, ip, r0, r2
 8001484:	4564      	cmp	r4, ip
 8001486:	4643      	mov	r3, r8
 8001488:	46e1      	mov	r9, ip
 800148a:	d364      	bcc.n	8001556 <__udivmoddi4+0x2ae>
 800148c:	d061      	beq.n	8001552 <__udivmoddi4+0x2aa>
 800148e:	b15d      	cbz	r5, 80014a8 <__udivmoddi4+0x200>
 8001490:	ebbe 0203 	subs.w	r2, lr, r3
 8001494:	eb64 0409 	sbc.w	r4, r4, r9
 8001498:	fa04 f606 	lsl.w	r6, r4, r6
 800149c:	fa22 f301 	lsr.w	r3, r2, r1
 80014a0:	431e      	orrs	r6, r3
 80014a2:	40cc      	lsrs	r4, r1
 80014a4:	e9c5 6400 	strd	r6, r4, [r5]
 80014a8:	2100      	movs	r1, #0
 80014aa:	e74e      	b.n	800134a <__udivmoddi4+0xa2>
 80014ac:	fbb1 fcf2 	udiv	ip, r1, r2
 80014b0:	0c01      	lsrs	r1, r0, #16
 80014b2:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80014b6:	b280      	uxth	r0, r0
 80014b8:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80014bc:	463b      	mov	r3, r7
 80014be:	fbb1 f1f7 	udiv	r1, r1, r7
 80014c2:	4638      	mov	r0, r7
 80014c4:	463c      	mov	r4, r7
 80014c6:	46b8      	mov	r8, r7
 80014c8:	46be      	mov	lr, r7
 80014ca:	2620      	movs	r6, #32
 80014cc:	eba2 0208 	sub.w	r2, r2, r8
 80014d0:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80014d4:	e765      	b.n	80013a2 <__udivmoddi4+0xfa>
 80014d6:	4601      	mov	r1, r0
 80014d8:	e717      	b.n	800130a <__udivmoddi4+0x62>
 80014da:	4610      	mov	r0, r2
 80014dc:	e72b      	b.n	8001336 <__udivmoddi4+0x8e>
 80014de:	f1c6 0120 	rsb	r1, r6, #32
 80014e2:	fa2e fc01 	lsr.w	ip, lr, r1
 80014e6:	40b7      	lsls	r7, r6
 80014e8:	fa0e fe06 	lsl.w	lr, lr, r6
 80014ec:	fa20 f101 	lsr.w	r1, r0, r1
 80014f0:	ea41 010e 	orr.w	r1, r1, lr
 80014f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80014f8:	fbbc f8fe 	udiv	r8, ip, lr
 80014fc:	b2bc      	uxth	r4, r7
 80014fe:	fb0e cc18 	mls	ip, lr, r8, ip
 8001502:	fb08 f904 	mul.w	r9, r8, r4
 8001506:	0c0a      	lsrs	r2, r1, #16
 8001508:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800150c:	40b0      	lsls	r0, r6
 800150e:	4591      	cmp	r9, r2
 8001510:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001514:	b280      	uxth	r0, r0
 8001516:	d93e      	bls.n	8001596 <__udivmoddi4+0x2ee>
 8001518:	18ba      	adds	r2, r7, r2
 800151a:	f108 3cff 	add.w	ip, r8, #4294967295
 800151e:	d201      	bcs.n	8001524 <__udivmoddi4+0x27c>
 8001520:	4591      	cmp	r9, r2
 8001522:	d81f      	bhi.n	8001564 <__udivmoddi4+0x2bc>
 8001524:	eba2 0209 	sub.w	r2, r2, r9
 8001528:	fbb2 f9fe 	udiv	r9, r2, lr
 800152c:	fb09 f804 	mul.w	r8, r9, r4
 8001530:	fb0e 2a19 	mls	sl, lr, r9, r2
 8001534:	b28a      	uxth	r2, r1
 8001536:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 800153a:	4542      	cmp	r2, r8
 800153c:	d229      	bcs.n	8001592 <__udivmoddi4+0x2ea>
 800153e:	18ba      	adds	r2, r7, r2
 8001540:	f109 31ff 	add.w	r1, r9, #4294967295
 8001544:	d2c2      	bcs.n	80014cc <__udivmoddi4+0x224>
 8001546:	4542      	cmp	r2, r8
 8001548:	d2c0      	bcs.n	80014cc <__udivmoddi4+0x224>
 800154a:	f1a9 0102 	sub.w	r1, r9, #2
 800154e:	443a      	add	r2, r7
 8001550:	e7bc      	b.n	80014cc <__udivmoddi4+0x224>
 8001552:	45c6      	cmp	lr, r8
 8001554:	d29b      	bcs.n	800148e <__udivmoddi4+0x1e6>
 8001556:	ebb8 0302 	subs.w	r3, r8, r2
 800155a:	eb6c 0c07 	sbc.w	ip, ip, r7
 800155e:	3801      	subs	r0, #1
 8001560:	46e1      	mov	r9, ip
 8001562:	e794      	b.n	800148e <__udivmoddi4+0x1e6>
 8001564:	eba7 0909 	sub.w	r9, r7, r9
 8001568:	444a      	add	r2, r9
 800156a:	fbb2 f9fe 	udiv	r9, r2, lr
 800156e:	f1a8 0c02 	sub.w	ip, r8, #2
 8001572:	fb09 f804 	mul.w	r8, r9, r4
 8001576:	e7db      	b.n	8001530 <__udivmoddi4+0x288>
 8001578:	4603      	mov	r3, r0
 800157a:	e77d      	b.n	8001478 <__udivmoddi4+0x1d0>
 800157c:	46d0      	mov	r8, sl
 800157e:	e765      	b.n	800144c <__udivmoddi4+0x1a4>
 8001580:	4608      	mov	r0, r1
 8001582:	e6fa      	b.n	800137a <__udivmoddi4+0xd2>
 8001584:	443b      	add	r3, r7
 8001586:	3a02      	subs	r2, #2
 8001588:	e730      	b.n	80013ec <__udivmoddi4+0x144>
 800158a:	f1ac 0c02 	sub.w	ip, ip, #2
 800158e:	443b      	add	r3, r7
 8001590:	e719      	b.n	80013c6 <__udivmoddi4+0x11e>
 8001592:	4649      	mov	r1, r9
 8001594:	e79a      	b.n	80014cc <__udivmoddi4+0x224>
 8001596:	eba2 0209 	sub.w	r2, r2, r9
 800159a:	fbb2 f9fe 	udiv	r9, r2, lr
 800159e:	46c4      	mov	ip, r8
 80015a0:	fb09 f804 	mul.w	r8, r9, r4
 80015a4:	e7c4      	b.n	8001530 <__udivmoddi4+0x288>
 80015a6:	bf00      	nop

080015a8 <__aeabi_idiv0>:
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop

080015ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b2:	f107 0310 	add.w	r3, r7, #16
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001678 <MX_GPIO_Init+0xcc>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	4a2c      	ldr	r2, [pc, #176]	@ (8001678 <MX_GPIO_Init+0xcc>)
 80015c6:	f043 0310 	orr.w	r3, r3, #16
 80015ca:	6193      	str	r3, [r2, #24]
 80015cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001678 <MX_GPIO_Init+0xcc>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f003 0310 	and.w	r3, r3, #16
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d8:	4b27      	ldr	r3, [pc, #156]	@ (8001678 <MX_GPIO_Init+0xcc>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	4a26      	ldr	r2, [pc, #152]	@ (8001678 <MX_GPIO_Init+0xcc>)
 80015de:	f043 0320 	orr.w	r3, r3, #32
 80015e2:	6193      	str	r3, [r2, #24]
 80015e4:	4b24      	ldr	r3, [pc, #144]	@ (8001678 <MX_GPIO_Init+0xcc>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	f003 0320 	and.w	r3, r3, #32
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f0:	4b21      	ldr	r3, [pc, #132]	@ (8001678 <MX_GPIO_Init+0xcc>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	4a20      	ldr	r2, [pc, #128]	@ (8001678 <MX_GPIO_Init+0xcc>)
 80015f6:	f043 0304 	orr.w	r3, r3, #4
 80015fa:	6193      	str	r3, [r2, #24]
 80015fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001678 <MX_GPIO_Init+0xcc>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001608:	4b1b      	ldr	r3, [pc, #108]	@ (8001678 <MX_GPIO_Init+0xcc>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	4a1a      	ldr	r2, [pc, #104]	@ (8001678 <MX_GPIO_Init+0xcc>)
 800160e:	f043 0308 	orr.w	r3, r3, #8
 8001612:	6193      	str	r3, [r2, #24]
 8001614:	4b18      	ldr	r3, [pc, #96]	@ (8001678 <MX_GPIO_Init+0xcc>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	603b      	str	r3, [r7, #0]
 800161e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001620:	2200      	movs	r2, #0
 8001622:	2110      	movs	r1, #16
 8001624:	4815      	ldr	r0, [pc, #84]	@ (800167c <MX_GPIO_Init+0xd0>)
 8001626:	f004 fb95 	bl	8005d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INT_GPIO_Port, INT_Pin, GPIO_PIN_SET);
 800162a:	2201      	movs	r2, #1
 800162c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001630:	4812      	ldr	r0, [pc, #72]	@ (800167c <MX_GPIO_Init+0xd0>)
 8001632:	f004 fb8f 	bl	8005d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001636:	2310      	movs	r3, #16
 8001638:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163a:	2301      	movs	r3, #1
 800163c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001642:	2302      	movs	r3, #2
 8001644:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001646:	f107 0310 	add.w	r3, r7, #16
 800164a:	4619      	mov	r1, r3
 800164c:	480b      	ldr	r0, [pc, #44]	@ (800167c <MX_GPIO_Init+0xd0>)
 800164e:	f004 f9fd 	bl	8005a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8001652:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001658:	2301      	movs	r3, #1
 800165a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001660:	2303      	movs	r3, #3
 8001662:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8001664:	f107 0310 	add.w	r3, r7, #16
 8001668:	4619      	mov	r1, r3
 800166a:	4804      	ldr	r0, [pc, #16]	@ (800167c <MX_GPIO_Init+0xd0>)
 800166c:	f004 f9ee 	bl	8005a4c <HAL_GPIO_Init>

}
 8001670:	bf00      	nop
 8001672:	3720      	adds	r7, #32
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40021000 	.word	0x40021000
 800167c:	40010800 	.word	0x40010800

08001680 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001684:	4b12      	ldr	r3, [pc, #72]	@ (80016d0 <MX_I2C1_Init+0x50>)
 8001686:	4a13      	ldr	r2, [pc, #76]	@ (80016d4 <MX_I2C1_Init+0x54>)
 8001688:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800168a:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <MX_I2C1_Init+0x50>)
 800168c:	4a12      	ldr	r2, [pc, #72]	@ (80016d8 <MX_I2C1_Init+0x58>)
 800168e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001690:	4b0f      	ldr	r3, [pc, #60]	@ (80016d0 <MX_I2C1_Init+0x50>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001696:	4b0e      	ldr	r3, [pc, #56]	@ (80016d0 <MX_I2C1_Init+0x50>)
 8001698:	2200      	movs	r2, #0
 800169a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800169c:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <MX_I2C1_Init+0x50>)
 800169e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016a4:	4b0a      	ldr	r3, [pc, #40]	@ (80016d0 <MX_I2C1_Init+0x50>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016aa:	4b09      	ldr	r3, [pc, #36]	@ (80016d0 <MX_I2C1_Init+0x50>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016b0:	4b07      	ldr	r3, [pc, #28]	@ (80016d0 <MX_I2C1_Init+0x50>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016b6:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <MX_I2C1_Init+0x50>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016bc:	4804      	ldr	r0, [pc, #16]	@ (80016d0 <MX_I2C1_Init+0x50>)
 80016be:	f004 fb61 	bl	8005d84 <HAL_I2C_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016c8:	f000 f95d 	bl	8001986 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000228 	.word	0x20000228
 80016d4:	40005400 	.word	0x40005400
 80016d8:	000186a0 	.word	0x000186a0

080016dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	@ 0x28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a1d      	ldr	r2, [pc, #116]	@ (800176c <HAL_I2C_MspInit+0x90>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d132      	bne.n	8001762 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001770 <HAL_I2C_MspInit+0x94>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	4a1b      	ldr	r2, [pc, #108]	@ (8001770 <HAL_I2C_MspInit+0x94>)
 8001702:	f043 0308 	orr.w	r3, r3, #8
 8001706:	6193      	str	r3, [r2, #24]
 8001708:	4b19      	ldr	r3, [pc, #100]	@ (8001770 <HAL_I2C_MspInit+0x94>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001714:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800171a:	2312      	movs	r3, #18
 800171c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800171e:	2303      	movs	r3, #3
 8001720:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	4812      	ldr	r0, [pc, #72]	@ (8001774 <HAL_I2C_MspInit+0x98>)
 800172a:	f004 f98f 	bl	8005a4c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800172e:	4b12      	ldr	r3, [pc, #72]	@ (8001778 <HAL_I2C_MspInit+0x9c>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	627b      	str	r3, [r7, #36]	@ 0x24
 8001734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001736:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800173a:	627b      	str	r3, [r7, #36]	@ 0x24
 800173c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173e:	f043 0302 	orr.w	r3, r3, #2
 8001742:	627b      	str	r3, [r7, #36]	@ 0x24
 8001744:	4a0c      	ldr	r2, [pc, #48]	@ (8001778 <HAL_I2C_MspInit+0x9c>)
 8001746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001748:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800174a:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <HAL_I2C_MspInit+0x94>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	4a08      	ldr	r2, [pc, #32]	@ (8001770 <HAL_I2C_MspInit+0x94>)
 8001750:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001754:	61d3      	str	r3, [r2, #28]
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <HAL_I2C_MspInit+0x94>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001762:	bf00      	nop
 8001764:	3728      	adds	r7, #40	@ 0x28
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40005400 	.word	0x40005400
 8001770:	40021000 	.word	0x40021000
 8001774:	40010c00 	.word	0x40010c00
 8001778:	40010000 	.word	0x40010000
 800177c:	00000000 	.word	0x00000000

08001780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001780:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001784:	b0aa      	sub	sp, #168	@ 0xa8
 8001786:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001788:	f003 fff6 	bl	8005778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800178c:	f000 f8b6 	bl	80018fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001790:	f7ff ff0c 	bl	80015ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001794:	f000 fa24 	bl	8001be0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001798:	f7ff ff72 	bl	8001680 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Init();
 800179c:	f003 fd08 	bl	80051b0 <MPU6050_Init>
  MPU6050_ZeroOffsetCalibrated();
 80017a0:	f003 fd0c 	bl	80051bc <MPU6050_ZeroOffsetCalibrated>

  float Roll = 0, Yaw = 0, Pitch = 0;
 80017a4:	f04f 0300 	mov.w	r3, #0
 80017a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80017b4:	f04f 0300 	mov.w	r3, #0
 80017b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  float Pitch_A = 0, Roll_A;
 80017bc:	f04f 0300 	mov.w	r3, #0
 80017c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t Timer = HAL_GetTick();
 80017c4:	f004 f830 	bl	8005828 <HAL_GetTick>
 80017c8:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MPU6050_GetEularAngle();
 80017cc:	f003 fcfc 	bl	80051c8 <MPU6050_GetEularAngle>
	  Pitch = MPU6050_GetPitch();
 80017d0:	f003 fd2a 	bl	8005228 <MPU6050_GetPitch>
 80017d4:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	  Roll = MPU6050_GetRoll();
 80017d8:	f003 fd30 	bl	800523c <MPU6050_GetRoll>
 80017dc:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	  Yaw = MPU6050_GetYaw();
 80017e0:	f003 fd18 	bl	8005214 <MPU6050_GetYaw>
 80017e4:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

	  Pitch_A =  atan2(MPU6050_GetAy(),MPU6050_GetAz()) / 3.14159 * 180.0f;
 80017e8:	f003 fd05 	bl	80051f6 <MPU6050_GetAy>
 80017ec:	4603      	mov	r3, r0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe fe1a 	bl	8000428 <__aeabi_f2d>
 80017f4:	4604      	mov	r4, r0
 80017f6:	460d      	mov	r5, r1
 80017f8:	f003 fd04 	bl	8005204 <MPU6050_GetAz>
 80017fc:	4603      	mov	r3, r0
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fe12 	bl	8000428 <__aeabi_f2d>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4620      	mov	r0, r4
 800180a:	4629      	mov	r1, r5
 800180c:	f00a fce6 	bl	800c1dc <atan2>
 8001810:	a335      	add	r3, pc, #212	@ (adr r3, 80018e8 <main+0x168>)
 8001812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001816:	f7fe ff89 	bl	800072c <__aeabi_ddiv>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4610      	mov	r0, r2
 8001820:	4619      	mov	r1, r3
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	4b32      	ldr	r3, [pc, #200]	@ (80018f0 <main+0x170>)
 8001828:	f7fe fe56 	bl	80004d8 <__aeabi_dmul>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	f7ff f948 	bl	8000ac8 <__aeabi_d2f>
 8001838:	4603      	mov	r3, r0
 800183a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	  Roll_A =  atan2(MPU6050_GetAx(),MPU6050_GetAz()) / 3.14159 * 180.0f;
 800183e:	f003 fcd3 	bl	80051e8 <MPU6050_GetAx>
 8001842:	4603      	mov	r3, r0
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fdef 	bl	8000428 <__aeabi_f2d>
 800184a:	4604      	mov	r4, r0
 800184c:	460d      	mov	r5, r1
 800184e:	f003 fcd9 	bl	8005204 <MPU6050_GetAz>
 8001852:	4603      	mov	r3, r0
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fde7 	bl	8000428 <__aeabi_f2d>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4620      	mov	r0, r4
 8001860:	4629      	mov	r1, r5
 8001862:	f00a fcbb 	bl	800c1dc <atan2>
 8001866:	a320      	add	r3, pc, #128	@ (adr r3, 80018e8 <main+0x168>)
 8001868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186c:	f7fe ff5e 	bl	800072c <__aeabi_ddiv>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4610      	mov	r0, r2
 8001876:	4619      	mov	r1, r3
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	4b1c      	ldr	r3, [pc, #112]	@ (80018f0 <main+0x170>)
 800187e:	f7fe fe2b 	bl	80004d8 <__aeabi_dmul>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	f7ff f91d 	bl	8000ac8 <__aeabi_d2f>
 800188e:	4603      	mov	r3, r0
 8001890:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

	  char buffer[128];
	  sprintf(buffer, "%f, %f, %f\n",Roll, Yaw, Pitch);
 8001894:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8001898:	f7fe fdc6 	bl	8000428 <__aeabi_f2d>
 800189c:	4680      	mov	r8, r0
 800189e:	4689      	mov	r9, r1
 80018a0:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80018a4:	f7fe fdc0 	bl	8000428 <__aeabi_f2d>
 80018a8:	4604      	mov	r4, r0
 80018aa:	460d      	mov	r5, r1
 80018ac:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80018b0:	f7fe fdba 	bl	8000428 <__aeabi_f2d>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4638      	mov	r0, r7
 80018ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018be:	e9cd 4500 	strd	r4, r5, [sp]
 80018c2:	4642      	mov	r2, r8
 80018c4:	464b      	mov	r3, r9
 80018c6:	490b      	ldr	r1, [pc, #44]	@ (80018f4 <main+0x174>)
 80018c8:	f007 f81c 	bl	8008904 <siprintf>
//	  sprintf(buffer, "%f, %f\n",Roll, Roll_A);
	  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80018cc:	463b      	mov	r3, r7
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fc3e 	bl	8000150 <strlen>
 80018d4:	4603      	mov	r3, r0
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	4639      	mov	r1, r7
 80018da:	f04f 33ff 	mov.w	r3, #4294967295
 80018de:	4806      	ldr	r0, [pc, #24]	@ (80018f8 <main+0x178>)
 80018e0:	f005 ff16 	bl	8007710 <HAL_UART_Transmit>
  {
 80018e4:	bf00      	nop
 80018e6:	e771      	b.n	80017cc <main+0x4c>
 80018e8:	f01b866e 	.word	0xf01b866e
 80018ec:	400921f9 	.word	0x400921f9
 80018f0:	40668000 	.word	0x40668000
 80018f4:	0800cc68 	.word	0x0800cc68
 80018f8:	20000280 	.word	0x20000280

080018fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b090      	sub	sp, #64	@ 0x40
 8001900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001902:	f107 0318 	add.w	r3, r7, #24
 8001906:	2228      	movs	r2, #40	@ 0x28
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f007 f86f 	bl	80089ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
 800191c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800191e:	2301      	movs	r3, #1
 8001920:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001922:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001926:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001928:	2300      	movs	r3, #0
 800192a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800192c:	2301      	movs	r3, #1
 800192e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001930:	2302      	movs	r3, #2
 8001932:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001934:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001938:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800193a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800193e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001940:	f107 0318 	add.w	r3, r7, #24
 8001944:	4618      	mov	r0, r3
 8001946:	f005 fa83 	bl	8006e50 <HAL_RCC_OscConfig>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001950:	f000 f819 	bl	8001986 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001954:	230f      	movs	r3, #15
 8001956:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001958:	2302      	movs	r3, #2
 800195a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001960:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001964:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	2102      	movs	r1, #2
 800196e:	4618      	mov	r0, r3
 8001970:	f005 fcf0 	bl	8007354 <HAL_RCC_ClockConfig>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800197a:	f000 f804 	bl	8001986 <Error_Handler>
  }
}
 800197e:	bf00      	nop
 8001980:	3740      	adds	r7, #64	@ 0x40
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800198a:	b672      	cpsid	i
}
 800198c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800198e:	bf00      	nop
 8001990:	e7fd      	b.n	800198e <Error_Handler+0x8>
	...

08001994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800199a:	4b15      	ldr	r3, [pc, #84]	@ (80019f0 <HAL_MspInit+0x5c>)
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	4a14      	ldr	r2, [pc, #80]	@ (80019f0 <HAL_MspInit+0x5c>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6193      	str	r3, [r2, #24]
 80019a6:	4b12      	ldr	r3, [pc, #72]	@ (80019f0 <HAL_MspInit+0x5c>)
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b2:	4b0f      	ldr	r3, [pc, #60]	@ (80019f0 <HAL_MspInit+0x5c>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	4a0e      	ldr	r2, [pc, #56]	@ (80019f0 <HAL_MspInit+0x5c>)
 80019b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019bc:	61d3      	str	r3, [r2, #28]
 80019be:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <HAL_MspInit+0x5c>)
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019ca:	4b0a      	ldr	r3, [pc, #40]	@ (80019f4 <HAL_MspInit+0x60>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	4a04      	ldr	r2, [pc, #16]	@ (80019f4 <HAL_MspInit+0x60>)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e6:	bf00      	nop
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40010000 	.word	0x40010000

080019f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019fc:	bf00      	nop
 80019fe:	e7fd      	b.n	80019fc <NMI_Handler+0x4>

08001a00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a04:	bf00      	nop
 8001a06:	e7fd      	b.n	8001a04 <HardFault_Handler+0x4>

08001a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a0c:	bf00      	nop
 8001a0e:	e7fd      	b.n	8001a0c <MemManage_Handler+0x4>

08001a10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a14:	bf00      	nop
 8001a16:	e7fd      	b.n	8001a14 <BusFault_Handler+0x4>

08001a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a1c:	bf00      	nop
 8001a1e:	e7fd      	b.n	8001a1c <UsageFault_Handler+0x4>

08001a20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr

08001a2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a48:	f003 fedc 	bl	8005804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return 1;
 8001a54:	2301      	movs	r3, #1
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr

08001a5e <_kill>:

int _kill(int pid, int sig)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a68:	f007 f814 	bl	8008a94 <__errno>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2216      	movs	r2, #22
 8001a70:	601a      	str	r2, [r3, #0]
  return -1;
 8001a72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <_exit>:

void _exit (int status)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a86:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff ffe7 	bl	8001a5e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a90:	bf00      	nop
 8001a92:	e7fd      	b.n	8001a90 <_exit+0x12>

08001a94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	e00a      	b.n	8001abc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aa6:	f3af 8000 	nop.w
 8001aaa:	4601      	mov	r1, r0
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	60ba      	str	r2, [r7, #8]
 8001ab2:	b2ca      	uxtb	r2, r1
 8001ab4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	dbf0      	blt.n	8001aa6 <_read+0x12>
  }

  return len;
 8001ac4:	687b      	ldr	r3, [r7, #4]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b086      	sub	sp, #24
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	60f8      	str	r0, [r7, #12]
 8001ad6:	60b9      	str	r1, [r7, #8]
 8001ad8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	e009      	b.n	8001af4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	60ba      	str	r2, [r7, #8]
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	3301      	adds	r3, #1
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	dbf1      	blt.n	8001ae0 <_write+0x12>
  }
  return len;
 8001afc:	687b      	ldr	r3, [r7, #4]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <_close>:

int _close(int file)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b2c:	605a      	str	r2, [r3, #4]
  return 0;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr

08001b3a <_isatty>:

int _isatty(int file)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b42:	2301      	movs	r3, #1
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr

08001b4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b085      	sub	sp, #20
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	60f8      	str	r0, [r7, #12]
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
	...

08001b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b70:	4a14      	ldr	r2, [pc, #80]	@ (8001bc4 <_sbrk+0x5c>)
 8001b72:	4b15      	ldr	r3, [pc, #84]	@ (8001bc8 <_sbrk+0x60>)
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b7c:	4b13      	ldr	r3, [pc, #76]	@ (8001bcc <_sbrk+0x64>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d102      	bne.n	8001b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b84:	4b11      	ldr	r3, [pc, #68]	@ (8001bcc <_sbrk+0x64>)
 8001b86:	4a12      	ldr	r2, [pc, #72]	@ (8001bd0 <_sbrk+0x68>)
 8001b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b8a:	4b10      	ldr	r3, [pc, #64]	@ (8001bcc <_sbrk+0x64>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d207      	bcs.n	8001ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b98:	f006 ff7c 	bl	8008a94 <__errno>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba6:	e009      	b.n	8001bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba8:	4b08      	ldr	r3, [pc, #32]	@ (8001bcc <_sbrk+0x64>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bae:	4b07      	ldr	r3, [pc, #28]	@ (8001bcc <_sbrk+0x64>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	4a05      	ldr	r2, [pc, #20]	@ (8001bcc <_sbrk+0x64>)
 8001bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bba:	68fb      	ldr	r3, [r7, #12]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20005000 	.word	0x20005000
 8001bc8:	00000400 	.word	0x00000400
 8001bcc:	2000027c 	.word	0x2000027c
 8001bd0:	20000438 	.word	0x20000438

08001bd4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001be4:	4b11      	ldr	r3, [pc, #68]	@ (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001be6:	4a12      	ldr	r2, [pc, #72]	@ (8001c30 <MX_USART2_UART_Init+0x50>)
 8001be8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bea:	4b10      	ldr	r3, [pc, #64]	@ (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001bec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c04:	4b09      	ldr	r3, [pc, #36]	@ (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001c06:	220c      	movs	r2, #12
 8001c08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c0a:	4b08      	ldr	r3, [pc, #32]	@ (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c10:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c16:	4805      	ldr	r0, [pc, #20]	@ (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001c18:	f005 fd2a 	bl	8007670 <HAL_UART_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c22:	f7ff feb0 	bl	8001986 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000280 	.word	0x20000280
 8001c30:	40004400 	.word	0x40004400

08001c34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b088      	sub	sp, #32
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 0310 	add.w	r3, r7, #16
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a1b      	ldr	r2, [pc, #108]	@ (8001cbc <HAL_UART_MspInit+0x88>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d12f      	bne.n	8001cb4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c54:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc0 <HAL_UART_MspInit+0x8c>)
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	4a19      	ldr	r2, [pc, #100]	@ (8001cc0 <HAL_UART_MspInit+0x8c>)
 8001c5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c5e:	61d3      	str	r3, [r2, #28]
 8001c60:	4b17      	ldr	r3, [pc, #92]	@ (8001cc0 <HAL_UART_MspInit+0x8c>)
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6c:	4b14      	ldr	r3, [pc, #80]	@ (8001cc0 <HAL_UART_MspInit+0x8c>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	4a13      	ldr	r2, [pc, #76]	@ (8001cc0 <HAL_UART_MspInit+0x8c>)
 8001c72:	f043 0304 	orr.w	r3, r3, #4
 8001c76:	6193      	str	r3, [r2, #24]
 8001c78:	4b11      	ldr	r3, [pc, #68]	@ (8001cc0 <HAL_UART_MspInit+0x8c>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c84:	2304      	movs	r3, #4
 8001c86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c90:	f107 0310 	add.w	r3, r7, #16
 8001c94:	4619      	mov	r1, r3
 8001c96:	480b      	ldr	r0, [pc, #44]	@ (8001cc4 <HAL_UART_MspInit+0x90>)
 8001c98:	f003 fed8 	bl	8005a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c9c:	2308      	movs	r3, #8
 8001c9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca8:	f107 0310 	add.w	r3, r7, #16
 8001cac:	4619      	mov	r1, r3
 8001cae:	4805      	ldr	r0, [pc, #20]	@ (8001cc4 <HAL_UART_MspInit+0x90>)
 8001cb0:	f003 fecc 	bl	8005a4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	3720      	adds	r7, #32
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40004400 	.word	0x40004400
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40010800 	.word	0x40010800

08001cc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cc8:	f7ff ff84 	bl	8001bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ccc:	480b      	ldr	r0, [pc, #44]	@ (8001cfc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001cce:	490c      	ldr	r1, [pc, #48]	@ (8001d00 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001cd0:	4a0c      	ldr	r2, [pc, #48]	@ (8001d04 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd4:	e002      	b.n	8001cdc <LoopCopyDataInit>

08001cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cda:	3304      	adds	r3, #4

08001cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce0:	d3f9      	bcc.n	8001cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ce2:	4a09      	ldr	r2, [pc, #36]	@ (8001d08 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ce4:	4c09      	ldr	r4, [pc, #36]	@ (8001d0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce8:	e001      	b.n	8001cee <LoopFillZerobss>

08001cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cec:	3204      	adds	r2, #4

08001cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf0:	d3fb      	bcc.n	8001cea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cf2:	f006 fed5 	bl	8008aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cf6:	f7ff fd43 	bl	8001780 <main>
  bx lr
 8001cfa:	4770      	bx	lr
  ldr r0, =_sdata
 8001cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d00:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8001d04:	0800ddf0 	.word	0x0800ddf0
  ldr r2, =_sbss
 8001d08:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8001d0c:	20000434 	.word	0x20000434

08001d10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d10:	e7fe      	b.n	8001d10 <ADC1_2_IRQHandler>
	...

08001d14 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af04      	add	r7, sp, #16
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 8001d1e:	4b32      	ldr	r3, [pc, #200]	@ (8001de8 <set_int_enable+0xd4>)
 8001d20:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d025      	beq.n	8001d74 <set_int_enable+0x60>
        if (enable)
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d002      	beq.n	8001d34 <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	73fb      	strb	r3, [r7, #15]
 8001d32:	e001      	b.n	8001d38 <set_int_enable+0x24>
        else
            tmp = 0x00;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001d38:	4b2b      	ldr	r3, [pc, #172]	@ (8001de8 <set_int_enable+0xd4>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4b29      	ldr	r3, [pc, #164]	@ (8001de8 <set_int_enable+0xd4>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	7c5b      	ldrb	r3, [r3, #17]
 8001d46:	461a      	mov	r2, r3
 8001d48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d4c:	9302      	str	r3, [sp, #8]
 8001d4e:	2301      	movs	r3, #1
 8001d50:	9301      	str	r3, [sp, #4]
 8001d52:	f107 030f 	add.w	r3, r7, #15
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	2301      	movs	r3, #1
 8001d5a:	4824      	ldr	r0, [pc, #144]	@ (8001dec <set_int_enable+0xd8>)
 8001d5c:	f004 f956 	bl	800600c <HAL_I2C_Mem_Write>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d002      	beq.n	8001d6c <set_int_enable+0x58>
            return -1;
 8001d66:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6a:	e039      	b.n	8001de0 <set_int_enable+0xcc>
        st.chip_cfg.int_enable = tmp;
 8001d6c:	7bfa      	ldrb	r2, [r7, #15]
 8001d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001de8 <set_int_enable+0xd4>)
 8001d70:	745a      	strb	r2, [r3, #17]
 8001d72:	e034      	b.n	8001dde <set_int_enable+0xca>
    } else {
        if (!st.chip_cfg.sensors)
 8001d74:	4b1c      	ldr	r3, [pc, #112]	@ (8001de8 <set_int_enable+0xd4>)
 8001d76:	7a9b      	ldrb	r3, [r3, #10]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d102      	bne.n	8001d82 <set_int_enable+0x6e>
            return -1;
 8001d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d80:	e02e      	b.n	8001de0 <set_int_enable+0xcc>
        if (enable && st.chip_cfg.int_enable)
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d005      	beq.n	8001d94 <set_int_enable+0x80>
 8001d88:	4b17      	ldr	r3, [pc, #92]	@ (8001de8 <set_int_enable+0xd4>)
 8001d8a:	7c5b      	ldrb	r3, [r3, #17]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <set_int_enable+0x80>
            return 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	e025      	b.n	8001de0 <set_int_enable+0xcc>
        if (enable)
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <set_int_enable+0x8c>
            tmp = BIT_DATA_RDY_EN;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	73fb      	strb	r3, [r7, #15]
 8001d9e:	e001      	b.n	8001da4 <set_int_enable+0x90>
        else
            tmp = 0x00;
 8001da0:	2300      	movs	r3, #0
 8001da2:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001da4:	4b10      	ldr	r3, [pc, #64]	@ (8001de8 <set_int_enable+0xd4>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	4619      	mov	r1, r3
 8001dac:	4b0e      	ldr	r3, [pc, #56]	@ (8001de8 <set_int_enable+0xd4>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	7c5b      	ldrb	r3, [r3, #17]
 8001db2:	461a      	mov	r2, r3
 8001db4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001db8:	9302      	str	r3, [sp, #8]
 8001dba:	2301      	movs	r3, #1
 8001dbc:	9301      	str	r3, [sp, #4]
 8001dbe:	f107 030f 	add.w	r3, r7, #15
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	4809      	ldr	r0, [pc, #36]	@ (8001dec <set_int_enable+0xd8>)
 8001dc8:	f004 f920 	bl	800600c <HAL_I2C_Mem_Write>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d002      	beq.n	8001dd8 <set_int_enable+0xc4>
            return -1;
 8001dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd6:	e003      	b.n	8001de0 <set_int_enable+0xcc>
        st.chip_cfg.int_enable = tmp;
 8001dd8:	7bfa      	ldrb	r2, [r7, #15]
 8001dda:	4b03      	ldr	r3, [pc, #12]	@ (8001de8 <set_int_enable+0xd4>)
 8001ddc:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000004 	.word	0x20000004
 8001dec:	20000228 	.word	0x20000228

08001df0 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af04      	add	r7, sp, #16
 8001df6:	6078      	str	r0, [r7, #4]
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
 8001df8:	2380      	movs	r3, #128	@ 0x80
 8001dfa:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001dfc:	4b58      	ldr	r3, [pc, #352]	@ (8001f60 <mpu_init+0x170>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	4619      	mov	r1, r3
 8001e04:	4b56      	ldr	r3, [pc, #344]	@ (8001f60 <mpu_init+0x170>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	7d5b      	ldrb	r3, [r3, #21]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e10:	9302      	str	r3, [sp, #8]
 8001e12:	2301      	movs	r3, #1
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	f107 0308 	add.w	r3, r7, #8
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	4851      	ldr	r0, [pc, #324]	@ (8001f64 <mpu_init+0x174>)
 8001e20:	f004 f8f4 	bl	800600c <HAL_I2C_Mem_Write>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d002      	beq.n	8001e30 <mpu_init+0x40>
        return -1;
 8001e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2e:	e093      	b.n	8001f58 <mpu_init+0x168>
    delay_ms(100);
 8001e30:	2064      	movs	r0, #100	@ 0x64
 8001e32:	f003 fd03 	bl	800583c <HAL_Delay>

    /* Wake up chip. */
    data[0] = 0x00;
 8001e36:	2300      	movs	r3, #0
 8001e38:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001e3a:	4b49      	ldr	r3, [pc, #292]	@ (8001f60 <mpu_init+0x170>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	4619      	mov	r1, r3
 8001e42:	4b47      	ldr	r3, [pc, #284]	@ (8001f60 <mpu_init+0x170>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	7d5b      	ldrb	r3, [r3, #21]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e4e:	9302      	str	r3, [sp, #8]
 8001e50:	2301      	movs	r3, #1
 8001e52:	9301      	str	r3, [sp, #4]
 8001e54:	f107 0308 	add.w	r3, r7, #8
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	4841      	ldr	r0, [pc, #260]	@ (8001f64 <mpu_init+0x174>)
 8001e5e:	f004 f8d5 	bl	800600c <HAL_I2C_Mem_Write>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d002      	beq.n	8001e6e <mpu_init+0x7e>
        return -1;
 8001e68:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6c:	e074      	b.n	8001f58 <mpu_init+0x168>

   st.chip_cfg.accel_half = 0;
 8001e6e:	4b3c      	ldr	r3, [pc, #240]	@ (8001f60 <mpu_init+0x170>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	74da      	strb	r2, [r3, #19]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 8001e74:	4b3a      	ldr	r3, [pc, #232]	@ (8001f60 <mpu_init+0x170>)
 8001e76:	22ff      	movs	r2, #255	@ 0xff
 8001e78:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 8001e7a:	4b39      	ldr	r3, [pc, #228]	@ (8001f60 <mpu_init+0x170>)
 8001e7c:	22ff      	movs	r2, #255	@ 0xff
 8001e7e:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 8001e80:	4b37      	ldr	r3, [pc, #220]	@ (8001f60 <mpu_init+0x170>)
 8001e82:	22ff      	movs	r2, #255	@ 0xff
 8001e84:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 8001e86:	4b36      	ldr	r3, [pc, #216]	@ (8001f60 <mpu_init+0x170>)
 8001e88:	22ff      	movs	r2, #255	@ 0xff
 8001e8a:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8001e8c:	4b34      	ldr	r3, [pc, #208]	@ (8001f60 <mpu_init+0x170>)
 8001e8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e92:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 8001e94:	4b32      	ldr	r3, [pc, #200]	@ (8001f60 <mpu_init+0x170>)
 8001e96:	22ff      	movs	r2, #255	@ 0xff
 8001e98:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 8001e9a:	4b31      	ldr	r3, [pc, #196]	@ (8001f60 <mpu_init+0x170>)
 8001e9c:	22ff      	movs	r2, #255	@ 0xff
 8001e9e:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8001ea0:	4b2f      	ldr	r3, [pc, #188]	@ (8001f60 <mpu_init+0x170>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 8001ea6:	4b2e      	ldr	r3, [pc, #184]	@ (8001f60 <mpu_init+0x170>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    st.chip_cfg.latched_int = 0;
 8001eae:	4b2c      	ldr	r3, [pc, #176]	@ (8001f60 <mpu_init+0x170>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    st.chip_cfg.int_motion_only = 0;
 8001eb6:	4b2a      	ldr	r3, [pc, #168]	@ (8001f60 <mpu_init+0x170>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 8001ebc:	4b28      	ldr	r3, [pc, #160]	@ (8001f60 <mpu_init+0x170>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	4828      	ldr	r0, [pc, #160]	@ (8001f68 <mpu_init+0x178>)
 8001ec8:	f006 fd91 	bl	80089ee <memset>
    st.chip_cfg.dmp_on = 0;
 8001ecc:	4b24      	ldr	r3, [pc, #144]	@ (8001f60 <mpu_init+0x170>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    st.chip_cfg.dmp_loaded = 0;
 8001ed4:	4b22      	ldr	r3, [pc, #136]	@ (8001f60 <mpu_init+0x170>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 8001edc:	4b20      	ldr	r3, [pc, #128]	@ (8001f60 <mpu_init+0x170>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	84da      	strh	r2, [r3, #38]	@ 0x26

    if (mpu_set_gyro_fsr(2000))
 8001ee2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001ee6:	f000 fa77 	bl	80023d8 <mpu_set_gyro_fsr>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d002      	beq.n	8001ef6 <mpu_init+0x106>
        return -1;
 8001ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef4:	e030      	b.n	8001f58 <mpu_init+0x168>
    if (mpu_set_accel_fsr(2))
 8001ef6:	2002      	movs	r0, #2
 8001ef8:	f000 fb08 	bl	800250c <mpu_set_accel_fsr>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d002      	beq.n	8001f08 <mpu_init+0x118>
        return -1;
 8001f02:	f04f 33ff 	mov.w	r3, #4294967295
 8001f06:	e027      	b.n	8001f58 <mpu_init+0x168>
    if (mpu_set_lpf(42))
 8001f08:	202a      	movs	r0, #42	@ 0x2a
 8001f0a:	f000 fbad 	bl	8002668 <mpu_set_lpf>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d002      	beq.n	8001f1a <mpu_init+0x12a>
        return -1;
 8001f14:	f04f 33ff 	mov.w	r3, #4294967295
 8001f18:	e01e      	b.n	8001f58 <mpu_init+0x168>
    if (mpu_set_sample_rate(50))
 8001f1a:	2032      	movs	r0, #50	@ 0x32
 8001f1c:	f000 fc16 	bl	800274c <mpu_set_sample_rate>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <mpu_init+0x13c>
        return -1;
 8001f26:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2a:	e015      	b.n	8001f58 <mpu_init+0x168>
    if (mpu_configure_fifo(0))
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	f000 fd03 	bl	8002938 <mpu_configure_fifo>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d002      	beq.n	8001f3e <mpu_init+0x14e>
        return -1;
 8001f38:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3c:	e00c      	b.n	8001f58 <mpu_init+0x168>
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
#else
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f000 fe82 	bl	8002c48 <mpu_set_bypass>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d002      	beq.n	8001f50 <mpu_init+0x160>
        return -1;
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4e:	e003      	b.n	8001f58 <mpu_init+0x168>
#endif

    mpu_set_sensors(0);
 8001f50:	2000      	movs	r0, #0
 8001f52:	f000 fd43 	bl	80029dc <mpu_set_sensors>
    return 0;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20000004 	.word	0x20000004
 8001f64:	20000228 	.word	0x20000228
 8001f68:	2000001a 	.word	0x2000001a

08001f6c <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b088      	sub	sp, #32
 8001f70:	af04      	add	r7, sp, #16
 8001f72:	4603      	mov	r3, r0
 8001f74:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    if (rate > 40)
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	2b28      	cmp	r3, #40	@ 0x28
 8001f7a:	d902      	bls.n	8001f82 <mpu_lp_accel_mode+0x16>
        return -1;
 8001f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f80:	e07d      	b.n	800207e <mpu_lp_accel_mode+0x112>

    if (!rate) {
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d125      	bne.n	8001fd4 <mpu_lp_accel_mode+0x68>
        mpu_set_int_latched(0);
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f000 ff5b 	bl	8002e44 <mpu_set_int_latched>
        tmp[0] = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 8001f92:	2307      	movs	r3, #7
 8001f94:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8001f96:	4b3c      	ldr	r3, [pc, #240]	@ (8002088 <mpu_lp_accel_mode+0x11c>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4b3a      	ldr	r3, [pc, #232]	@ (8002088 <mpu_lp_accel_mode+0x11c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	7d5b      	ldrb	r3, [r3, #21]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001faa:	9302      	str	r3, [sp, #8]
 8001fac:	2302      	movs	r3, #2
 8001fae:	9301      	str	r3, [sp, #4]
 8001fb0:	f107 030c 	add.w	r3, r7, #12
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	4834      	ldr	r0, [pc, #208]	@ (800208c <mpu_lp_accel_mode+0x120>)
 8001fba:	f004 f827 	bl	800600c <HAL_I2C_Mem_Write>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d002      	beq.n	8001fca <mpu_lp_accel_mode+0x5e>
            return -1;
 8001fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc8:	e059      	b.n	800207e <mpu_lp_accel_mode+0x112>
        st.chip_cfg.lp_accel_mode = 0;
 8001fca:	4b2f      	ldr	r3, [pc, #188]	@ (8002088 <mpu_lp_accel_mode+0x11c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	751a      	strb	r2, [r3, #20]
        return 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	e054      	b.n	800207e <mpu_lp_accel_mode+0x112>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	f000 ff35 	bl	8002e44 <mpu_set_int_latched>
#if defined MPU6050
    tmp[0] = BIT_LPA_CYCLE;
 8001fda:	2320      	movs	r3, #32
 8001fdc:	733b      	strb	r3, [r7, #12]
    if (rate == 1) {
 8001fde:	88fb      	ldrh	r3, [r7, #6]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d105      	bne.n	8001ff0 <mpu_lp_accel_mode+0x84>
        tmp[1] = INV_LPA_1_25HZ;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8001fe8:	2005      	movs	r0, #5
 8001fea:	f000 fb3d 	bl	8002668 <mpu_set_lpf>
 8001fee:	e016      	b.n	800201e <mpu_lp_accel_mode+0xb2>
    } else if (rate <= 5) {
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	2b05      	cmp	r3, #5
 8001ff4:	d805      	bhi.n	8002002 <mpu_lp_accel_mode+0x96>
        tmp[1] = INV_LPA_5HZ;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8001ffa:	2005      	movs	r0, #5
 8001ffc:	f000 fb34 	bl	8002668 <mpu_set_lpf>
 8002000:	e00d      	b.n	800201e <mpu_lp_accel_mode+0xb2>
    } else if (rate <= 20) {
 8002002:	88fb      	ldrh	r3, [r7, #6]
 8002004:	2b14      	cmp	r3, #20
 8002006:	d805      	bhi.n	8002014 <mpu_lp_accel_mode+0xa8>
        tmp[1] = INV_LPA_20HZ;
 8002008:	2302      	movs	r3, #2
 800200a:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(10);
 800200c:	200a      	movs	r0, #10
 800200e:	f000 fb2b 	bl	8002668 <mpu_set_lpf>
 8002012:	e004      	b.n	800201e <mpu_lp_accel_mode+0xb2>
    } else {
        tmp[1] = INV_LPA_40HZ;
 8002014:	2303      	movs	r3, #3
 8002016:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(20);
 8002018:	2014      	movs	r0, #20
 800201a:	f000 fb25 	bl	8002668 <mpu_set_lpf>
    }
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
 800201e:	7b7b      	ldrb	r3, [r7, #13]
 8002020:	b25b      	sxtb	r3, r3
 8002022:	019b      	lsls	r3, r3, #6
 8002024:	b25b      	sxtb	r3, r3
 8002026:	f043 0307 	orr.w	r3, r3, #7
 800202a:	b25b      	sxtb	r3, r3
 800202c:	b2db      	uxtb	r3, r3
 800202e:	737b      	strb	r3, [r7, #13]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8002030:	4b15      	ldr	r3, [pc, #84]	@ (8002088 <mpu_lp_accel_mode+0x11c>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	4619      	mov	r1, r3
 8002038:	4b13      	ldr	r3, [pc, #76]	@ (8002088 <mpu_lp_accel_mode+0x11c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	7d5b      	ldrb	r3, [r3, #21]
 800203e:	461a      	mov	r2, r3
 8002040:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002044:	9302      	str	r3, [sp, #8]
 8002046:	2302      	movs	r3, #2
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	f107 030c 	add.w	r3, r7, #12
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	2301      	movs	r3, #1
 8002052:	480e      	ldr	r0, [pc, #56]	@ (800208c <mpu_lp_accel_mode+0x120>)
 8002054:	f003 ffda 	bl	800600c <HAL_I2C_Mem_Write>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d002      	beq.n	8002064 <mpu_lp_accel_mode+0xf8>
        return -1;
 800205e:	f04f 33ff 	mov.w	r3, #4294967295
 8002062:	e00c      	b.n	800207e <mpu_lp_accel_mode+0x112>
        return -1;
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 8002064:	4b08      	ldr	r3, [pc, #32]	@ (8002088 <mpu_lp_accel_mode+0x11c>)
 8002066:	2208      	movs	r2, #8
 8002068:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 800206a:	4b07      	ldr	r3, [pc, #28]	@ (8002088 <mpu_lp_accel_mode+0x11c>)
 800206c:	2200      	movs	r2, #0
 800206e:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 8002070:	4b05      	ldr	r3, [pc, #20]	@ (8002088 <mpu_lp_accel_mode+0x11c>)
 8002072:	2201      	movs	r2, #1
 8002074:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 8002076:	2000      	movs	r0, #0
 8002078:	f000 fc5e 	bl	8002938 <mpu_configure_fifo>

    return 0;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000004 	.word	0x20000004
 800208c:	20000228 	.word	0x20000228

08002090 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af04      	add	r7, sp, #16
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8002096:	4ba2      	ldr	r3, [pc, #648]	@ (8002320 <mpu_reset_fifo+0x290>)
 8002098:	7a9b      	ldrb	r3, [r3, #10]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d102      	bne.n	80020a4 <mpu_reset_fifo+0x14>
        return -1;
 800209e:	f04f 33ff 	mov.w	r3, #4294967295
 80020a2:	e15b      	b.n	800235c <mpu_reset_fifo+0x2cc>

    data = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80020a8:	4b9d      	ldr	r3, [pc, #628]	@ (8002320 <mpu_reset_fifo+0x290>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	4619      	mov	r1, r3
 80020b0:	4b9b      	ldr	r3, [pc, #620]	@ (8002320 <mpu_reset_fifo+0x290>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	7c5b      	ldrb	r3, [r3, #17]
 80020b6:	461a      	mov	r2, r3
 80020b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020bc:	9302      	str	r3, [sp, #8]
 80020be:	2301      	movs	r3, #1
 80020c0:	9301      	str	r3, [sp, #4]
 80020c2:	1dfb      	adds	r3, r7, #7
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	2301      	movs	r3, #1
 80020c8:	4896      	ldr	r0, [pc, #600]	@ (8002324 <mpu_reset_fifo+0x294>)
 80020ca:	f003 ff9f 	bl	800600c <HAL_I2C_Mem_Write>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d002      	beq.n	80020da <mpu_reset_fifo+0x4a>
        return -1;
 80020d4:	f04f 33ff 	mov.w	r3, #4294967295
 80020d8:	e140      	b.n	800235c <mpu_reset_fifo+0x2cc>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 80020da:	4b91      	ldr	r3, [pc, #580]	@ (8002320 <mpu_reset_fifo+0x290>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	4619      	mov	r1, r3
 80020e2:	4b8f      	ldr	r3, [pc, #572]	@ (8002320 <mpu_reset_fifo+0x290>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	795b      	ldrb	r3, [r3, #5]
 80020e8:	461a      	mov	r2, r3
 80020ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020ee:	9302      	str	r3, [sp, #8]
 80020f0:	2301      	movs	r3, #1
 80020f2:	9301      	str	r3, [sp, #4]
 80020f4:	1dfb      	adds	r3, r7, #7
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	2301      	movs	r3, #1
 80020fa:	488a      	ldr	r0, [pc, #552]	@ (8002324 <mpu_reset_fifo+0x294>)
 80020fc:	f003 ff86 	bl	800600c <HAL_I2C_Mem_Write>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d002      	beq.n	800210c <mpu_reset_fifo+0x7c>
        return -1;
 8002106:	f04f 33ff 	mov.w	r3, #4294967295
 800210a:	e127      	b.n	800235c <mpu_reset_fifo+0x2cc>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800210c:	4b84      	ldr	r3, [pc, #528]	@ (8002320 <mpu_reset_fifo+0x290>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	4619      	mov	r1, r3
 8002114:	4b82      	ldr	r3, [pc, #520]	@ (8002320 <mpu_reset_fifo+0x290>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	791b      	ldrb	r3, [r3, #4]
 800211a:	461a      	mov	r2, r3
 800211c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002120:	9302      	str	r3, [sp, #8]
 8002122:	2301      	movs	r3, #1
 8002124:	9301      	str	r3, [sp, #4]
 8002126:	1dfb      	adds	r3, r7, #7
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	2301      	movs	r3, #1
 800212c:	487d      	ldr	r0, [pc, #500]	@ (8002324 <mpu_reset_fifo+0x294>)
 800212e:	f003 ff6d 	bl	800600c <HAL_I2C_Mem_Write>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d002      	beq.n	800213e <mpu_reset_fifo+0xae>
        return -1;
 8002138:	f04f 33ff 	mov.w	r3, #4294967295
 800213c:	e10e      	b.n	800235c <mpu_reset_fifo+0x2cc>

    if (st.chip_cfg.dmp_on) {
 800213e:	4b78      	ldr	r3, [pc, #480]	@ (8002320 <mpu_reset_fifo+0x290>)
 8002140:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 8082 	beq.w	800224e <mpu_reset_fifo+0x1be>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 800214a:	230c      	movs	r3, #12
 800214c:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800214e:	4b74      	ldr	r3, [pc, #464]	@ (8002320 <mpu_reset_fifo+0x290>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	4619      	mov	r1, r3
 8002156:	4b72      	ldr	r3, [pc, #456]	@ (8002320 <mpu_reset_fifo+0x290>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	791b      	ldrb	r3, [r3, #4]
 800215c:	461a      	mov	r2, r3
 800215e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002162:	9302      	str	r3, [sp, #8]
 8002164:	2301      	movs	r3, #1
 8002166:	9301      	str	r3, [sp, #4]
 8002168:	1dfb      	adds	r3, r7, #7
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	2301      	movs	r3, #1
 800216e:	486d      	ldr	r0, [pc, #436]	@ (8002324 <mpu_reset_fifo+0x294>)
 8002170:	f003 ff4c 	bl	800600c <HAL_I2C_Mem_Write>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <mpu_reset_fifo+0xf0>
            return -1;
 800217a:	f04f 33ff 	mov.w	r3, #4294967295
 800217e:	e0ed      	b.n	800235c <mpu_reset_fifo+0x2cc>
        delay_ms(50);
 8002180:	2032      	movs	r0, #50	@ 0x32
 8002182:	f003 fb5b 	bl	800583c <HAL_Delay>
        data = BIT_DMP_EN | BIT_FIFO_EN;
 8002186:	23c0      	movs	r3, #192	@ 0xc0
 8002188:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 800218a:	4b65      	ldr	r3, [pc, #404]	@ (8002320 <mpu_reset_fifo+0x290>)
 800218c:	7a9b      	ldrb	r3, [r3, #10]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d004      	beq.n	80021a0 <mpu_reset_fifo+0x110>
            data |= BIT_AUX_IF_EN;
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	f043 0320 	orr.w	r3, r3, #32
 800219c:	b2db      	uxtb	r3, r3
 800219e:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80021a0:	4b5f      	ldr	r3, [pc, #380]	@ (8002320 <mpu_reset_fifo+0x290>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	4619      	mov	r1, r3
 80021a8:	4b5d      	ldr	r3, [pc, #372]	@ (8002320 <mpu_reset_fifo+0x290>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	791b      	ldrb	r3, [r3, #4]
 80021ae:	461a      	mov	r2, r3
 80021b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021b4:	9302      	str	r3, [sp, #8]
 80021b6:	2301      	movs	r3, #1
 80021b8:	9301      	str	r3, [sp, #4]
 80021ba:	1dfb      	adds	r3, r7, #7
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	2301      	movs	r3, #1
 80021c0:	4858      	ldr	r0, [pc, #352]	@ (8002324 <mpu_reset_fifo+0x294>)
 80021c2:	f003 ff23 	bl	800600c <HAL_I2C_Mem_Write>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d002      	beq.n	80021d2 <mpu_reset_fifo+0x142>
            return -1;
 80021cc:	f04f 33ff 	mov.w	r3, #4294967295
 80021d0:	e0c4      	b.n	800235c <mpu_reset_fifo+0x2cc>
        if (st.chip_cfg.int_enable)
 80021d2:	4b53      	ldr	r3, [pc, #332]	@ (8002320 <mpu_reset_fifo+0x290>)
 80021d4:	7c5b      	ldrb	r3, [r3, #17]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d002      	beq.n	80021e0 <mpu_reset_fifo+0x150>
            data = BIT_DMP_INT_EN;
 80021da:	2302      	movs	r3, #2
 80021dc:	71fb      	strb	r3, [r7, #7]
 80021de:	e001      	b.n	80021e4 <mpu_reset_fifo+0x154>
        else
            data = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80021e4:	4b4e      	ldr	r3, [pc, #312]	@ (8002320 <mpu_reset_fifo+0x290>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	4619      	mov	r1, r3
 80021ec:	4b4c      	ldr	r3, [pc, #304]	@ (8002320 <mpu_reset_fifo+0x290>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	7c5b      	ldrb	r3, [r3, #17]
 80021f2:	461a      	mov	r2, r3
 80021f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021f8:	9302      	str	r3, [sp, #8]
 80021fa:	2301      	movs	r3, #1
 80021fc:	9301      	str	r3, [sp, #4]
 80021fe:	1dfb      	adds	r3, r7, #7
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	2301      	movs	r3, #1
 8002204:	4847      	ldr	r0, [pc, #284]	@ (8002324 <mpu_reset_fifo+0x294>)
 8002206:	f003 ff01 	bl	800600c <HAL_I2C_Mem_Write>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d002      	beq.n	8002216 <mpu_reset_fifo+0x186>
            return -1;
 8002210:	f04f 33ff 	mov.w	r3, #4294967295
 8002214:	e0a2      	b.n	800235c <mpu_reset_fifo+0x2cc>
        data = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 800221a:	4b41      	ldr	r3, [pc, #260]	@ (8002320 <mpu_reset_fifo+0x290>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	4619      	mov	r1, r3
 8002222:	4b3f      	ldr	r3, [pc, #252]	@ (8002320 <mpu_reset_fifo+0x290>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	795b      	ldrb	r3, [r3, #5]
 8002228:	461a      	mov	r2, r3
 800222a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800222e:	9302      	str	r3, [sp, #8]
 8002230:	2301      	movs	r3, #1
 8002232:	9301      	str	r3, [sp, #4]
 8002234:	1dfb      	adds	r3, r7, #7
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	2301      	movs	r3, #1
 800223a:	483a      	ldr	r0, [pc, #232]	@ (8002324 <mpu_reset_fifo+0x294>)
 800223c:	f003 fee6 	bl	800600c <HAL_I2C_Mem_Write>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 8089 	beq.w	800235a <mpu_reset_fifo+0x2ca>
            return -1;
 8002248:	f04f 33ff 	mov.w	r3, #4294967295
 800224c:	e086      	b.n	800235c <mpu_reset_fifo+0x2cc>
    } else {
        data = BIT_FIFO_RST;
 800224e:	2304      	movs	r3, #4
 8002250:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8002252:	4b33      	ldr	r3, [pc, #204]	@ (8002320 <mpu_reset_fifo+0x290>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	4619      	mov	r1, r3
 800225a:	4b31      	ldr	r3, [pc, #196]	@ (8002320 <mpu_reset_fifo+0x290>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	791b      	ldrb	r3, [r3, #4]
 8002260:	461a      	mov	r2, r3
 8002262:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002266:	9302      	str	r3, [sp, #8]
 8002268:	2301      	movs	r3, #1
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	1dfb      	adds	r3, r7, #7
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	2301      	movs	r3, #1
 8002272:	482c      	ldr	r0, [pc, #176]	@ (8002324 <mpu_reset_fifo+0x294>)
 8002274:	f003 feca 	bl	800600c <HAL_I2C_Mem_Write>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <mpu_reset_fifo+0x1f4>
            return -1;
 800227e:	f04f 33ff 	mov.w	r3, #4294967295
 8002282:	e06b      	b.n	800235c <mpu_reset_fifo+0x2cc>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8002284:	4b26      	ldr	r3, [pc, #152]	@ (8002320 <mpu_reset_fifo+0x290>)
 8002286:	7c9b      	ldrb	r3, [r3, #18]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d105      	bne.n	8002298 <mpu_reset_fifo+0x208>
 800228c:	4b24      	ldr	r3, [pc, #144]	@ (8002320 <mpu_reset_fifo+0x290>)
 800228e:	7a9b      	ldrb	r3, [r3, #10]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	d102      	bne.n	800229e <mpu_reset_fifo+0x20e>
            data = BIT_FIFO_EN;
 8002298:	2340      	movs	r3, #64	@ 0x40
 800229a:	71fb      	strb	r3, [r7, #7]
 800229c:	e001      	b.n	80022a2 <mpu_reset_fifo+0x212>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 800229e:	2360      	movs	r3, #96	@ 0x60
 80022a0:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80022a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002320 <mpu_reset_fifo+0x290>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	4619      	mov	r1, r3
 80022aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002320 <mpu_reset_fifo+0x290>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	791b      	ldrb	r3, [r3, #4]
 80022b0:	461a      	mov	r2, r3
 80022b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022b6:	9302      	str	r3, [sp, #8]
 80022b8:	2301      	movs	r3, #1
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	1dfb      	adds	r3, r7, #7
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	2301      	movs	r3, #1
 80022c2:	4818      	ldr	r0, [pc, #96]	@ (8002324 <mpu_reset_fifo+0x294>)
 80022c4:	f003 fea2 	bl	800600c <HAL_I2C_Mem_Write>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <mpu_reset_fifo+0x244>
            return -1;
 80022ce:	f04f 33ff 	mov.w	r3, #4294967295
 80022d2:	e043      	b.n	800235c <mpu_reset_fifo+0x2cc>
        delay_ms(50);
 80022d4:	2032      	movs	r0, #50	@ 0x32
 80022d6:	f003 fab1 	bl	800583c <HAL_Delay>
        if (st.chip_cfg.int_enable)
 80022da:	4b11      	ldr	r3, [pc, #68]	@ (8002320 <mpu_reset_fifo+0x290>)
 80022dc:	7c5b      	ldrb	r3, [r3, #17]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d002      	beq.n	80022e8 <mpu_reset_fifo+0x258>
            data = BIT_DATA_RDY_EN;
 80022e2:	2301      	movs	r3, #1
 80022e4:	71fb      	strb	r3, [r7, #7]
 80022e6:	e001      	b.n	80022ec <mpu_reset_fifo+0x25c>
        else
            data = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80022ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002320 <mpu_reset_fifo+0x290>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	4619      	mov	r1, r3
 80022f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002320 <mpu_reset_fifo+0x290>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	7c5b      	ldrb	r3, [r3, #17]
 80022fa:	461a      	mov	r2, r3
 80022fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002300:	9302      	str	r3, [sp, #8]
 8002302:	2301      	movs	r3, #1
 8002304:	9301      	str	r3, [sp, #4]
 8002306:	1dfb      	adds	r3, r7, #7
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	2301      	movs	r3, #1
 800230c:	4805      	ldr	r0, [pc, #20]	@ (8002324 <mpu_reset_fifo+0x294>)
 800230e:	f003 fe7d 	bl	800600c <HAL_I2C_Mem_Write>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d007      	beq.n	8002328 <mpu_reset_fifo+0x298>
            return -1;
 8002318:	f04f 33ff 	mov.w	r3, #4294967295
 800231c:	e01e      	b.n	800235c <mpu_reset_fifo+0x2cc>
 800231e:	bf00      	nop
 8002320:	20000004 	.word	0x20000004
 8002324:	20000228 	.word	0x20000228
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8002328:	4b0e      	ldr	r3, [pc, #56]	@ (8002364 <mpu_reset_fifo+0x2d4>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	4619      	mov	r1, r3
 8002330:	4b0c      	ldr	r3, [pc, #48]	@ (8002364 <mpu_reset_fifo+0x2d4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	795b      	ldrb	r3, [r3, #5]
 8002336:	461a      	mov	r2, r3
 8002338:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800233c:	9302      	str	r3, [sp, #8]
 800233e:	2301      	movs	r3, #1
 8002340:	9301      	str	r3, [sp, #4]
 8002342:	4b09      	ldr	r3, [pc, #36]	@ (8002368 <mpu_reset_fifo+0x2d8>)
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	2301      	movs	r3, #1
 8002348:	4808      	ldr	r0, [pc, #32]	@ (800236c <mpu_reset_fifo+0x2dc>)
 800234a:	f003 fe5f 	bl	800600c <HAL_I2C_Mem_Write>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d002      	beq.n	800235a <mpu_reset_fifo+0x2ca>
            return -1;
 8002354:	f04f 33ff 	mov.w	r3, #4294967295
 8002358:	e000      	b.n	800235c <mpu_reset_fifo+0x2cc>
    }
    return 0;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20000004 	.word	0x20000004
 8002368:	20000014 	.word	0x20000014
 800236c:	20000228 	.word	0x20000228

08002370 <mpu_get_gyro_fsr>:
 *  @brief      Get the gyro full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 8002378:	4b16      	ldr	r3, [pc, #88]	@ (80023d4 <mpu_get_gyro_fsr+0x64>)
 800237a:	7a1b      	ldrb	r3, [r3, #8]
 800237c:	2b03      	cmp	r3, #3
 800237e:	d81e      	bhi.n	80023be <mpu_get_gyro_fsr+0x4e>
 8002380:	a201      	add	r2, pc, #4	@ (adr r2, 8002388 <mpu_get_gyro_fsr+0x18>)
 8002382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002386:	bf00      	nop
 8002388:	08002399 	.word	0x08002399
 800238c:	080023a1 	.word	0x080023a1
 8002390:	080023ab 	.word	0x080023ab
 8002394:	080023b5 	.word	0x080023b5
    case INV_FSR_250DPS:
        fsr[0] = 250;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	22fa      	movs	r2, #250	@ 0xfa
 800239c:	801a      	strh	r2, [r3, #0]
        break;
 800239e:	e012      	b.n	80023c6 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_500DPS:
        fsr[0] = 500;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80023a6:	801a      	strh	r2, [r3, #0]
        break;
 80023a8:	e00d      	b.n	80023c6 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80023b0:	801a      	strh	r2, [r3, #0]
        break;
 80023b2:	e008      	b.n	80023c6 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80023ba:	801a      	strh	r2, [r3, #0]
        break;
 80023bc:	e003      	b.n	80023c6 <mpu_get_gyro_fsr+0x56>
    default:
        fsr[0] = 0;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	801a      	strh	r2, [r3, #0]
        break;
 80023c4:	bf00      	nop
    }
    return 0;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	20000004 	.word	0x20000004

080023d8 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b088      	sub	sp, #32
 80023dc:	af04      	add	r7, sp, #16
 80023de:	4603      	mov	r3, r0
 80023e0:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80023e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002490 <mpu_set_gyro_fsr+0xb8>)
 80023e4:	7a9b      	ldrb	r3, [r3, #10]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d102      	bne.n	80023f0 <mpu_set_gyro_fsr+0x18>
        return -1;
 80023ea:	f04f 33ff 	mov.w	r3, #4294967295
 80023ee:	e04a      	b.n	8002486 <mpu_set_gyro_fsr+0xae>

    switch (fsr) {
 80023f0:	88fb      	ldrh	r3, [r7, #6]
 80023f2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80023f6:	d017      	beq.n	8002428 <mpu_set_gyro_fsr+0x50>
 80023f8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80023fc:	dc17      	bgt.n	800242e <mpu_set_gyro_fsr+0x56>
 80023fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002402:	d00e      	beq.n	8002422 <mpu_set_gyro_fsr+0x4a>
 8002404:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002408:	dc11      	bgt.n	800242e <mpu_set_gyro_fsr+0x56>
 800240a:	2bfa      	cmp	r3, #250	@ 0xfa
 800240c:	d003      	beq.n	8002416 <mpu_set_gyro_fsr+0x3e>
 800240e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002412:	d003      	beq.n	800241c <mpu_set_gyro_fsr+0x44>
 8002414:	e00b      	b.n	800242e <mpu_set_gyro_fsr+0x56>
    case 250:
        data = INV_FSR_250DPS << 3;
 8002416:	2300      	movs	r3, #0
 8002418:	73fb      	strb	r3, [r7, #15]
        break;
 800241a:	e00b      	b.n	8002434 <mpu_set_gyro_fsr+0x5c>
    case 500:
        data = INV_FSR_500DPS << 3;
 800241c:	2308      	movs	r3, #8
 800241e:	73fb      	strb	r3, [r7, #15]
        break;
 8002420:	e008      	b.n	8002434 <mpu_set_gyro_fsr+0x5c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 8002422:	2310      	movs	r3, #16
 8002424:	73fb      	strb	r3, [r7, #15]
        break;
 8002426:	e005      	b.n	8002434 <mpu_set_gyro_fsr+0x5c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 8002428:	2318      	movs	r3, #24
 800242a:	73fb      	strb	r3, [r7, #15]
        break;
 800242c:	e002      	b.n	8002434 <mpu_set_gyro_fsr+0x5c>
    default:
        return -1;
 800242e:	f04f 33ff 	mov.w	r3, #4294967295
 8002432:	e028      	b.n	8002486 <mpu_set_gyro_fsr+0xae>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8002434:	4b16      	ldr	r3, [pc, #88]	@ (8002490 <mpu_set_gyro_fsr+0xb8>)
 8002436:	7a1a      	ldrb	r2, [r3, #8]
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	08db      	lsrs	r3, r3, #3
 800243c:	b2db      	uxtb	r3, r3
 800243e:	429a      	cmp	r2, r3
 8002440:	d101      	bne.n	8002446 <mpu_set_gyro_fsr+0x6e>
        return 0;
 8002442:	2300      	movs	r3, #0
 8002444:	e01f      	b.n	8002486 <mpu_set_gyro_fsr+0xae>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8002446:	4b12      	ldr	r3, [pc, #72]	@ (8002490 <mpu_set_gyro_fsr+0xb8>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	4619      	mov	r1, r3
 800244e:	4b10      	ldr	r3, [pc, #64]	@ (8002490 <mpu_set_gyro_fsr+0xb8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	799b      	ldrb	r3, [r3, #6]
 8002454:	461a      	mov	r2, r3
 8002456:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800245a:	9302      	str	r3, [sp, #8]
 800245c:	2301      	movs	r3, #1
 800245e:	9301      	str	r3, [sp, #4]
 8002460:	f107 030f 	add.w	r3, r7, #15
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	2301      	movs	r3, #1
 8002468:	480a      	ldr	r0, [pc, #40]	@ (8002494 <mpu_set_gyro_fsr+0xbc>)
 800246a:	f003 fdcf 	bl	800600c <HAL_I2C_Mem_Write>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <mpu_set_gyro_fsr+0xa2>
        return -1;
 8002474:	f04f 33ff 	mov.w	r3, #4294967295
 8002478:	e005      	b.n	8002486 <mpu_set_gyro_fsr+0xae>
    st.chip_cfg.gyro_fsr = data >> 3;
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	08db      	lsrs	r3, r3, #3
 800247e:	b2da      	uxtb	r2, r3
 8002480:	4b03      	ldr	r3, [pc, #12]	@ (8002490 <mpu_set_gyro_fsr+0xb8>)
 8002482:	721a      	strb	r2, [r3, #8]
    return 0;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20000004 	.word	0x20000004
 8002494:	20000228 	.word	0x20000228

08002498 <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 80024a0:	4b19      	ldr	r3, [pc, #100]	@ (8002508 <mpu_get_accel_fsr+0x70>)
 80024a2:	7a5b      	ldrb	r3, [r3, #9]
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d81b      	bhi.n	80024e0 <mpu_get_accel_fsr+0x48>
 80024a8:	a201      	add	r2, pc, #4	@ (adr r2, 80024b0 <mpu_get_accel_fsr+0x18>)
 80024aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ae:	bf00      	nop
 80024b0:	080024c1 	.word	0x080024c1
 80024b4:	080024c9 	.word	0x080024c9
 80024b8:	080024d1 	.word	0x080024d1
 80024bc:	080024d9 	.word	0x080024d9
    case INV_FSR_2G:
        fsr[0] = 2;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2202      	movs	r2, #2
 80024c4:	701a      	strb	r2, [r3, #0]
        break;
 80024c6:	e00e      	b.n	80024e6 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2204      	movs	r2, #4
 80024cc:	701a      	strb	r2, [r3, #0]
        break;
 80024ce:	e00a      	b.n	80024e6 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2208      	movs	r2, #8
 80024d4:	701a      	strb	r2, [r3, #0]
        break;
 80024d6:	e006      	b.n	80024e6 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2210      	movs	r2, #16
 80024dc:	701a      	strb	r2, [r3, #0]
        break;
 80024de:	e002      	b.n	80024e6 <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
 80024e0:	f04f 33ff 	mov.w	r3, #4294967295
 80024e4:	e00a      	b.n	80024fc <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
 80024e6:	4b08      	ldr	r3, [pc, #32]	@ (8002508 <mpu_get_accel_fsr+0x70>)
 80024e8:	7cdb      	ldrb	r3, [r3, #19]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d005      	beq.n	80024fa <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	701a      	strb	r2, [r3, #0]
    return 0;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20000004 	.word	0x20000004

0800250c <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b088      	sub	sp, #32
 8002510:	af04      	add	r7, sp, #16
 8002512:	4603      	mov	r3, r0
 8002514:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8002516:	4b34      	ldr	r3, [pc, #208]	@ (80025e8 <mpu_set_accel_fsr+0xdc>)
 8002518:	7a9b      	ldrb	r3, [r3, #10]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d102      	bne.n	8002524 <mpu_set_accel_fsr+0x18>
        return -1;
 800251e:	f04f 33ff 	mov.w	r3, #4294967295
 8002522:	e05d      	b.n	80025e0 <mpu_set_accel_fsr+0xd4>

    switch (fsr) {
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	3b02      	subs	r3, #2
 8002528:	2b0e      	cmp	r3, #14
 800252a:	d82d      	bhi.n	8002588 <mpu_set_accel_fsr+0x7c>
 800252c:	a201      	add	r2, pc, #4	@ (adr r2, 8002534 <mpu_set_accel_fsr+0x28>)
 800252e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002532:	bf00      	nop
 8002534:	08002571 	.word	0x08002571
 8002538:	08002589 	.word	0x08002589
 800253c:	08002577 	.word	0x08002577
 8002540:	08002589 	.word	0x08002589
 8002544:	08002589 	.word	0x08002589
 8002548:	08002589 	.word	0x08002589
 800254c:	0800257d 	.word	0x0800257d
 8002550:	08002589 	.word	0x08002589
 8002554:	08002589 	.word	0x08002589
 8002558:	08002589 	.word	0x08002589
 800255c:	08002589 	.word	0x08002589
 8002560:	08002589 	.word	0x08002589
 8002564:	08002589 	.word	0x08002589
 8002568:	08002589 	.word	0x08002589
 800256c:	08002583 	.word	0x08002583
    case 2:
        data = INV_FSR_2G << 3;
 8002570:	2300      	movs	r3, #0
 8002572:	73fb      	strb	r3, [r7, #15]
        break;
 8002574:	e00b      	b.n	800258e <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 8002576:	2308      	movs	r3, #8
 8002578:	73fb      	strb	r3, [r7, #15]
        break;
 800257a:	e008      	b.n	800258e <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 800257c:	2310      	movs	r3, #16
 800257e:	73fb      	strb	r3, [r7, #15]
        break;
 8002580:	e005      	b.n	800258e <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 8002582:	2318      	movs	r3, #24
 8002584:	73fb      	strb	r3, [r7, #15]
        break;
 8002586:	e002      	b.n	800258e <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 8002588:	f04f 33ff 	mov.w	r3, #4294967295
 800258c:	e028      	b.n	80025e0 <mpu_set_accel_fsr+0xd4>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 800258e:	4b16      	ldr	r3, [pc, #88]	@ (80025e8 <mpu_set_accel_fsr+0xdc>)
 8002590:	7a5a      	ldrb	r2, [r3, #9]
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	08db      	lsrs	r3, r3, #3
 8002596:	b2db      	uxtb	r3, r3
 8002598:	429a      	cmp	r2, r3
 800259a:	d101      	bne.n	80025a0 <mpu_set_accel_fsr+0x94>
        return 0;
 800259c:	2300      	movs	r3, #0
 800259e:	e01f      	b.n	80025e0 <mpu_set_accel_fsr+0xd4>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 80025a0:	4b11      	ldr	r3, [pc, #68]	@ (80025e8 <mpu_set_accel_fsr+0xdc>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	4619      	mov	r1, r3
 80025a8:	4b0f      	ldr	r3, [pc, #60]	@ (80025e8 <mpu_set_accel_fsr+0xdc>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	79db      	ldrb	r3, [r3, #7]
 80025ae:	461a      	mov	r2, r3
 80025b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025b4:	9302      	str	r3, [sp, #8]
 80025b6:	2301      	movs	r3, #1
 80025b8:	9301      	str	r3, [sp, #4]
 80025ba:	f107 030f 	add.w	r3, r7, #15
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	2301      	movs	r3, #1
 80025c2:	480a      	ldr	r0, [pc, #40]	@ (80025ec <mpu_set_accel_fsr+0xe0>)
 80025c4:	f003 fd22 	bl	800600c <HAL_I2C_Mem_Write>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d002      	beq.n	80025d4 <mpu_set_accel_fsr+0xc8>
        return -1;
 80025ce:	f04f 33ff 	mov.w	r3, #4294967295
 80025d2:	e005      	b.n	80025e0 <mpu_set_accel_fsr+0xd4>
    st.chip_cfg.accel_fsr = data >> 3;
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	08db      	lsrs	r3, r3, #3
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	4b03      	ldr	r3, [pc, #12]	@ (80025e8 <mpu_set_accel_fsr+0xdc>)
 80025dc:	725a      	strb	r2, [r3, #9]
    return 0;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000004 	.word	0x20000004
 80025ec:	20000228 	.word	0x20000228

080025f0 <mpu_get_lpf>:
 *  @brief      Get the current DLPF setting.
 *  @param[out] lpf Current LPF setting.
 *  0 if successful.
 */
int mpu_get_lpf(unsigned short *lpf)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.lpf) {
 80025f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002664 <mpu_get_lpf+0x74>)
 80025fa:	7adb      	ldrb	r3, [r3, #11]
 80025fc:	3b01      	subs	r3, #1
 80025fe:	2b05      	cmp	r3, #5
 8002600:	d826      	bhi.n	8002650 <mpu_get_lpf+0x60>
 8002602:	a201      	add	r2, pc, #4	@ (adr r2, 8002608 <mpu_get_lpf+0x18>)
 8002604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002608:	08002621 	.word	0x08002621
 800260c:	08002629 	.word	0x08002629
 8002610:	08002631 	.word	0x08002631
 8002614:	08002639 	.word	0x08002639
 8002618:	08002641 	.word	0x08002641
 800261c:	08002649 	.word	0x08002649
    case INV_FILTER_188HZ:
        lpf[0] = 188;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	22bc      	movs	r2, #188	@ 0xbc
 8002624:	801a      	strh	r2, [r3, #0]
        break;
 8002626:	e017      	b.n	8002658 <mpu_get_lpf+0x68>
    case INV_FILTER_98HZ:
        lpf[0] = 98;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2262      	movs	r2, #98	@ 0x62
 800262c:	801a      	strh	r2, [r3, #0]
        break;
 800262e:	e013      	b.n	8002658 <mpu_get_lpf+0x68>
    case INV_FILTER_42HZ:
        lpf[0] = 42;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	222a      	movs	r2, #42	@ 0x2a
 8002634:	801a      	strh	r2, [r3, #0]
        break;
 8002636:	e00f      	b.n	8002658 <mpu_get_lpf+0x68>
    case INV_FILTER_20HZ:
        lpf[0] = 20;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2214      	movs	r2, #20
 800263c:	801a      	strh	r2, [r3, #0]
        break;
 800263e:	e00b      	b.n	8002658 <mpu_get_lpf+0x68>
    case INV_FILTER_10HZ:
        lpf[0] = 10;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	220a      	movs	r2, #10
 8002644:	801a      	strh	r2, [r3, #0]
        break;
 8002646:	e007      	b.n	8002658 <mpu_get_lpf+0x68>
    case INV_FILTER_5HZ:
        lpf[0] = 5;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2205      	movs	r2, #5
 800264c:	801a      	strh	r2, [r3, #0]
        break;
 800264e:	e003      	b.n	8002658 <mpu_get_lpf+0x68>
    case INV_FILTER_256HZ_NOLPF2:
    case INV_FILTER_2100HZ_NOLPF:
    default:
        lpf[0] = 0;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	801a      	strh	r2, [r3, #0]
        break;
 8002656:	bf00      	nop
    }
    return 0;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr
 8002664:	20000004 	.word	0x20000004

08002668 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	af04      	add	r7, sp, #16
 800266e:	4603      	mov	r3, r0
 8002670:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8002672:	4b28      	ldr	r3, [pc, #160]	@ (8002714 <mpu_set_lpf+0xac>)
 8002674:	7a9b      	ldrb	r3, [r3, #10]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d102      	bne.n	8002680 <mpu_set_lpf+0x18>
        return -1;
 800267a:	f04f 33ff 	mov.w	r3, #4294967295
 800267e:	e044      	b.n	800270a <mpu_set_lpf+0xa2>

    if (lpf >= 188)
 8002680:	88fb      	ldrh	r3, [r7, #6]
 8002682:	2bbb      	cmp	r3, #187	@ 0xbb
 8002684:	d902      	bls.n	800268c <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 8002686:	2301      	movs	r3, #1
 8002688:	73fb      	strb	r3, [r7, #15]
 800268a:	e019      	b.n	80026c0 <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 800268c:	88fb      	ldrh	r3, [r7, #6]
 800268e:	2b61      	cmp	r3, #97	@ 0x61
 8002690:	d902      	bls.n	8002698 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 8002692:	2302      	movs	r3, #2
 8002694:	73fb      	strb	r3, [r7, #15]
 8002696:	e013      	b.n	80026c0 <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	2b29      	cmp	r3, #41	@ 0x29
 800269c:	d902      	bls.n	80026a4 <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 800269e:	2303      	movs	r3, #3
 80026a0:	73fb      	strb	r3, [r7, #15]
 80026a2:	e00d      	b.n	80026c0 <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 80026a4:	88fb      	ldrh	r3, [r7, #6]
 80026a6:	2b13      	cmp	r3, #19
 80026a8:	d902      	bls.n	80026b0 <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 80026aa:	2304      	movs	r3, #4
 80026ac:	73fb      	strb	r3, [r7, #15]
 80026ae:	e007      	b.n	80026c0 <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 80026b0:	88fb      	ldrh	r3, [r7, #6]
 80026b2:	2b09      	cmp	r3, #9
 80026b4:	d902      	bls.n	80026bc <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 80026b6:	2305      	movs	r3, #5
 80026b8:	73fb      	strb	r3, [r7, #15]
 80026ba:	e001      	b.n	80026c0 <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 80026bc:	2306      	movs	r3, #6
 80026be:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 80026c0:	4b14      	ldr	r3, [pc, #80]	@ (8002714 <mpu_set_lpf+0xac>)
 80026c2:	7ada      	ldrb	r2, [r3, #11]
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d101      	bne.n	80026ce <mpu_set_lpf+0x66>
        return 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	e01d      	b.n	800270a <mpu_set_lpf+0xa2>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 80026ce:	4b11      	ldr	r3, [pc, #68]	@ (8002714 <mpu_set_lpf+0xac>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	4619      	mov	r1, r3
 80026d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002714 <mpu_set_lpf+0xac>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	789b      	ldrb	r3, [r3, #2]
 80026dc:	461a      	mov	r2, r3
 80026de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026e2:	9302      	str	r3, [sp, #8]
 80026e4:	2301      	movs	r3, #1
 80026e6:	9301      	str	r3, [sp, #4]
 80026e8:	f107 030f 	add.w	r3, r7, #15
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	2301      	movs	r3, #1
 80026f0:	4809      	ldr	r0, [pc, #36]	@ (8002718 <mpu_set_lpf+0xb0>)
 80026f2:	f003 fc8b 	bl	800600c <HAL_I2C_Mem_Write>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d002      	beq.n	8002702 <mpu_set_lpf+0x9a>
        return -1;
 80026fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002700:	e003      	b.n	800270a <mpu_set_lpf+0xa2>
    st.chip_cfg.lpf = data;
 8002702:	7bfa      	ldrb	r2, [r7, #15]
 8002704:	4b03      	ldr	r3, [pc, #12]	@ (8002714 <mpu_set_lpf+0xac>)
 8002706:	72da      	strb	r2, [r3, #11]
    return 0;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000004 	.word	0x20000004
 8002718:	20000228 	.word	0x20000228

0800271c <mpu_get_sample_rate>:
 *  @brief      Get sampling rate.
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
    if (st.chip_cfg.dmp_on)
 8002724:	4b08      	ldr	r3, [pc, #32]	@ (8002748 <mpu_get_sample_rate+0x2c>)
 8002726:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <mpu_get_sample_rate+0x18>
        return -1;
 800272e:	f04f 33ff 	mov.w	r3, #4294967295
 8002732:	e004      	b.n	800273e <mpu_get_sample_rate+0x22>
    else
        rate[0] = st.chip_cfg.sample_rate;
 8002734:	4b04      	ldr	r3, [pc, #16]	@ (8002748 <mpu_get_sample_rate+0x2c>)
 8002736:	89da      	ldrh	r2, [r3, #14]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	801a      	strh	r2, [r3, #0]
    return 0;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr
 8002748:	20000004 	.word	0x20000004

0800274c <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af04      	add	r7, sp, #16
 8002752:	4603      	mov	r3, r0
 8002754:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8002756:	4b33      	ldr	r3, [pc, #204]	@ (8002824 <mpu_set_sample_rate+0xd8>)
 8002758:	7a9b      	ldrb	r3, [r3, #10]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d102      	bne.n	8002764 <mpu_set_sample_rate+0x18>
        return -1;
 800275e:	f04f 33ff 	mov.w	r3, #4294967295
 8002762:	e05b      	b.n	800281c <mpu_set_sample_rate+0xd0>

    if (st.chip_cfg.dmp_on)
 8002764:	4b2f      	ldr	r3, [pc, #188]	@ (8002824 <mpu_set_sample_rate+0xd8>)
 8002766:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800276a:	2b00      	cmp	r3, #0
 800276c:	d002      	beq.n	8002774 <mpu_set_sample_rate+0x28>
        return -1;
 800276e:	f04f 33ff 	mov.w	r3, #4294967295
 8002772:	e053      	b.n	800281c <mpu_set_sample_rate+0xd0>
    else {
        if (st.chip_cfg.lp_accel_mode) {
 8002774:	4b2b      	ldr	r3, [pc, #172]	@ (8002824 <mpu_set_sample_rate+0xd8>)
 8002776:	7d1b      	ldrb	r3, [r3, #20]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00e      	beq.n	800279a <mpu_set_sample_rate+0x4e>
            if (rate && (rate <= 40)) {
 800277c:	88fb      	ldrh	r3, [r7, #6]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d008      	beq.n	8002794 <mpu_set_sample_rate+0x48>
 8002782:	88fb      	ldrh	r3, [r7, #6]
 8002784:	2b28      	cmp	r3, #40	@ 0x28
 8002786:	d805      	bhi.n	8002794 <mpu_set_sample_rate+0x48>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff fbee 	bl	8001f6c <mpu_lp_accel_mode>
                return 0;
 8002790:	2300      	movs	r3, #0
 8002792:	e043      	b.n	800281c <mpu_set_sample_rate+0xd0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 8002794:	2000      	movs	r0, #0
 8002796:	f7ff fbe9 	bl	8001f6c <mpu_lp_accel_mode>
        }
        if (rate < 4)
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	2b03      	cmp	r3, #3
 800279e:	d802      	bhi.n	80027a6 <mpu_set_sample_rate+0x5a>
            rate = 4;
 80027a0:	2304      	movs	r3, #4
 80027a2:	80fb      	strh	r3, [r7, #6]
 80027a4:	e006      	b.n	80027b4 <mpu_set_sample_rate+0x68>
        else if (rate > 1000)
 80027a6:	88fb      	ldrh	r3, [r7, #6]
 80027a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027ac:	d902      	bls.n	80027b4 <mpu_set_sample_rate+0x68>
            rate = 1000;
 80027ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027b2:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 80027b4:	88fb      	ldrh	r3, [r7, #6]
 80027b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80027ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 80027c6:	4b17      	ldr	r3, [pc, #92]	@ (8002824 <mpu_set_sample_rate+0xd8>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	4619      	mov	r1, r3
 80027ce:	4b15      	ldr	r3, [pc, #84]	@ (8002824 <mpu_set_sample_rate+0xd8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	785b      	ldrb	r3, [r3, #1]
 80027d4:	461a      	mov	r2, r3
 80027d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027da:	9302      	str	r3, [sp, #8]
 80027dc:	2301      	movs	r3, #1
 80027de:	9301      	str	r3, [sp, #4]
 80027e0:	f107 030f 	add.w	r3, r7, #15
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	2301      	movs	r3, #1
 80027e8:	480f      	ldr	r0, [pc, #60]	@ (8002828 <mpu_set_sample_rate+0xdc>)
 80027ea:	f003 fc0f 	bl	800600c <HAL_I2C_Mem_Write>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d002      	beq.n	80027fa <mpu_set_sample_rate+0xae>
            return -1;
 80027f4:	f04f 33ff 	mov.w	r3, #4294967295
 80027f8:	e010      	b.n	800281c <mpu_set_sample_rate+0xd0>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
 80027fc:	3301      	adds	r3, #1
 80027fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002802:	fb92 f3f3 	sdiv	r3, r2, r3
 8002806:	b29a      	uxth	r2, r3
 8002808:	4b06      	ldr	r3, [pc, #24]	@ (8002824 <mpu_set_sample_rate+0xd8>)
 800280a:	81da      	strh	r2, [r3, #14]
#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 800280c:	4b05      	ldr	r3, [pc, #20]	@ (8002824 <mpu_set_sample_rate+0xd8>)
 800280e:	89db      	ldrh	r3, [r3, #14]
 8002810:	085b      	lsrs	r3, r3, #1
 8002812:	b29b      	uxth	r3, r3
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff ff27 	bl	8002668 <mpu_set_lpf>
        return 0;
 800281a:	2300      	movs	r3, #0
    }
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20000004 	.word	0x20000004
 8002828:	20000228 	.word	0x20000228

0800282c <mpu_get_gyro_sens>:
 *  @brief      Get gyro sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to dps.
 *  @return     0 if successful.
 */
int mpu_get_gyro_sens(float *sens)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 8002834:	4b14      	ldr	r3, [pc, #80]	@ (8002888 <mpu_get_gyro_sens+0x5c>)
 8002836:	7a1b      	ldrb	r3, [r3, #8]
 8002838:	2b03      	cmp	r3, #3
 800283a:	d81b      	bhi.n	8002874 <mpu_get_gyro_sens+0x48>
 800283c:	a201      	add	r2, pc, #4	@ (adr r2, 8002844 <mpu_get_gyro_sens+0x18>)
 800283e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002842:	bf00      	nop
 8002844:	08002855 	.word	0x08002855
 8002848:	0800285d 	.word	0x0800285d
 800284c:	08002865 	.word	0x08002865
 8002850:	0800286d 	.word	0x0800286d
    case INV_FSR_250DPS:
        sens[0] = 131.f;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a0d      	ldr	r2, [pc, #52]	@ (800288c <mpu_get_gyro_sens+0x60>)
 8002858:	601a      	str	r2, [r3, #0]
        break;
 800285a:	e00e      	b.n	800287a <mpu_get_gyro_sens+0x4e>
    case INV_FSR_500DPS:
        sens[0] = 65.5f;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a0c      	ldr	r2, [pc, #48]	@ (8002890 <mpu_get_gyro_sens+0x64>)
 8002860:	601a      	str	r2, [r3, #0]
        break;
 8002862:	e00a      	b.n	800287a <mpu_get_gyro_sens+0x4e>
    case INV_FSR_1000DPS:
        sens[0] = 32.8f;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a0b      	ldr	r2, [pc, #44]	@ (8002894 <mpu_get_gyro_sens+0x68>)
 8002868:	601a      	str	r2, [r3, #0]
        break;
 800286a:	e006      	b.n	800287a <mpu_get_gyro_sens+0x4e>
    case INV_FSR_2000DPS:
        sens[0] = 16.4f;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a0a      	ldr	r2, [pc, #40]	@ (8002898 <mpu_get_gyro_sens+0x6c>)
 8002870:	601a      	str	r2, [r3, #0]
        break;
 8002872:	e002      	b.n	800287a <mpu_get_gyro_sens+0x4e>
    default:
        return -1;
 8002874:	f04f 33ff 	mov.w	r3, #4294967295
 8002878:	e000      	b.n	800287c <mpu_get_gyro_sens+0x50>
    }
    return 0;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	20000004 	.word	0x20000004
 800288c:	43030000 	.word	0x43030000
 8002890:	42830000 	.word	0x42830000
 8002894:	42033333 	.word	0x42033333
 8002898:	41833333 	.word	0x41833333

0800289c <mpu_get_accel_sens>:
 *  @brief      Get accel sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to g's.
 *  @return     0 if successful.
 */
int mpu_get_accel_sens(unsigned short *sens)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 80028a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002914 <mpu_get_accel_sens+0x78>)
 80028a6:	7a5b      	ldrb	r3, [r3, #9]
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d81f      	bhi.n	80028ec <mpu_get_accel_sens+0x50>
 80028ac:	a201      	add	r2, pc, #4	@ (adr r2, 80028b4 <mpu_get_accel_sens+0x18>)
 80028ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b2:	bf00      	nop
 80028b4:	080028c5 	.word	0x080028c5
 80028b8:	080028cf 	.word	0x080028cf
 80028bc:	080028d9 	.word	0x080028d9
 80028c0:	080028e3 	.word	0x080028e3
    case INV_FSR_2G:
        sens[0] = 16384;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80028ca:	801a      	strh	r2, [r3, #0]
        break;
 80028cc:	e011      	b.n	80028f2 <mpu_get_accel_sens+0x56>
    case INV_FSR_4G:
        sens[0] = 8192;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028d4:	801a      	strh	r2, [r3, #0]
        break;
 80028d6:	e00c      	b.n	80028f2 <mpu_get_accel_sens+0x56>
    case INV_FSR_8G:
        sens[0] = 4096;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80028de:	801a      	strh	r2, [r3, #0]
        break;
 80028e0:	e007      	b.n	80028f2 <mpu_get_accel_sens+0x56>
    case INV_FSR_16G:
        sens[0] = 2048;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028e8:	801a      	strh	r2, [r3, #0]
        break;
 80028ea:	e002      	b.n	80028f2 <mpu_get_accel_sens+0x56>
    default:
        return -1;
 80028ec:	f04f 33ff 	mov.w	r3, #4294967295
 80028f0:	e00a      	b.n	8002908 <mpu_get_accel_sens+0x6c>
    }
    if (st.chip_cfg.accel_half)
 80028f2:	4b08      	ldr	r3, [pc, #32]	@ (8002914 <mpu_get_accel_sens+0x78>)
 80028f4:	7cdb      	ldrb	r3, [r3, #19]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d005      	beq.n	8002906 <mpu_get_accel_sens+0x6a>
        sens[0] >>= 1;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	085b      	lsrs	r3, r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	801a      	strh	r2, [r3, #0]
    return 0;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	20000004 	.word	0x20000004

08002918 <mpu_get_fifo_config>:
 *  \n INV_XYZ_ACCEL
 *  @param[out] sensors Mask of sensors in FIFO.
 *  @return     0 if successful.
 */
int mpu_get_fifo_config(unsigned char *sensors)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
    sensors[0] = st.chip_cfg.fifo_enable;
 8002920:	4b04      	ldr	r3, [pc, #16]	@ (8002934 <mpu_get_fifo_config+0x1c>)
 8002922:	7c1a      	ldrb	r2, [r3, #16]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	701a      	strb	r2, [r3, #0]
    return 0;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr
 8002934:	20000004 	.word	0x20000004

08002938 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 8002942:	2300      	movs	r3, #0
 8002944:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 8002946:	79fb      	ldrb	r3, [r7, #7]
 8002948:	f023 0301 	bic.w	r3, r3, #1
 800294c:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 800294e:	4b22      	ldr	r3, [pc, #136]	@ (80029d8 <mpu_configure_fifo+0xa0>)
 8002950:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <mpu_configure_fifo+0x24>
        return 0;
 8002958:	2300      	movs	r3, #0
 800295a:	e038      	b.n	80029ce <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
 800295c:	4b1e      	ldr	r3, [pc, #120]	@ (80029d8 <mpu_configure_fifo+0xa0>)
 800295e:	7a9b      	ldrb	r3, [r3, #10]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d102      	bne.n	800296a <mpu_configure_fifo+0x32>
            return -1;
 8002964:	f04f 33ff 	mov.w	r3, #4294967295
 8002968:	e031      	b.n	80029ce <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 800296a:	4b1b      	ldr	r3, [pc, #108]	@ (80029d8 <mpu_configure_fifo+0xa0>)
 800296c:	7c1b      	ldrb	r3, [r3, #16]
 800296e:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8002970:	4b19      	ldr	r3, [pc, #100]	@ (80029d8 <mpu_configure_fifo+0xa0>)
 8002972:	7a9a      	ldrb	r2, [r3, #10]
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	4013      	ands	r3, r2
 8002978:	b2da      	uxtb	r2, r3
 800297a:	4b17      	ldr	r3, [pc, #92]	@ (80029d8 <mpu_configure_fifo+0xa0>)
 800297c:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 800297e:	4b16      	ldr	r3, [pc, #88]	@ (80029d8 <mpu_configure_fifo+0xa0>)
 8002980:	7c1b      	ldrb	r3, [r3, #16]
 8002982:	79fa      	ldrb	r2, [r7, #7]
 8002984:	429a      	cmp	r2, r3
 8002986:	d003      	beq.n	8002990 <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 8002988:	f04f 33ff 	mov.w	r3, #4294967295
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	e001      	b.n	8002994 <mpu_configure_fifo+0x5c>
        else
            result = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d103      	bne.n	80029a2 <mpu_configure_fifo+0x6a>
 800299a:	4b0f      	ldr	r3, [pc, #60]	@ (80029d8 <mpu_configure_fifo+0xa0>)
 800299c:	7d1b      	ldrb	r3, [r3, #20]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <mpu_configure_fifo+0x72>
            set_int_enable(1);
 80029a2:	2001      	movs	r0, #1
 80029a4:	f7ff f9b6 	bl	8001d14 <set_int_enable>
 80029a8:	e002      	b.n	80029b0 <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 80029aa:	2000      	movs	r0, #0
 80029ac:	f7ff f9b2 	bl	8001d14 <set_int_enable>
        if (sensors) {
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
 80029b6:	f7ff fb6b 	bl	8002090 <mpu_reset_fifo>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d005      	beq.n	80029cc <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
 80029c0:	4a05      	ldr	r2, [pc, #20]	@ (80029d8 <mpu_configure_fifo+0xa0>)
 80029c2:	7afb      	ldrb	r3, [r7, #11]
 80029c4:	7413      	strb	r3, [r2, #16]
                return -1;
 80029c6:	f04f 33ff 	mov.w	r3, #4294967295
 80029ca:	e000      	b.n	80029ce <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 80029cc:	68fb      	ldr	r3, [r7, #12]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000004 	.word	0x20000004

080029dc <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af04      	add	r7, sp, #16
 80029e2:	4603      	mov	r3, r0
 80029e4:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d002      	beq.n	80029f6 <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 80029f0:	2301      	movs	r3, #1
 80029f2:	73fb      	strb	r3, [r7, #15]
 80029f4:	e007      	b.n	8002a06 <mpu_set_sensors+0x2a>
    else if (sensors)
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d002      	beq.n	8002a02 <mpu_set_sensors+0x26>
        data = 0;
 80029fc:	2300      	movs	r3, #0
 80029fe:	73fb      	strb	r3, [r7, #15]
 8002a00:	e001      	b.n	8002a06 <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 8002a02:	2340      	movs	r3, #64	@ 0x40
 8002a04:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8002a06:	4b40      	ldr	r3, [pc, #256]	@ (8002b08 <mpu_set_sensors+0x12c>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4b3e      	ldr	r3, [pc, #248]	@ (8002b08 <mpu_set_sensors+0x12c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	7d5b      	ldrb	r3, [r3, #21]
 8002a14:	461a      	mov	r2, r3
 8002a16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a1a:	9302      	str	r3, [sp, #8]
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	9301      	str	r3, [sp, #4]
 8002a20:	f107 030f 	add.w	r3, r7, #15
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	2301      	movs	r3, #1
 8002a28:	4838      	ldr	r0, [pc, #224]	@ (8002b0c <mpu_set_sensors+0x130>)
 8002a2a:	f003 faef 	bl	800600c <HAL_I2C_Mem_Write>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d005      	beq.n	8002a40 <mpu_set_sensors+0x64>
        st.chip_cfg.sensors = 0;
 8002a34:	4b34      	ldr	r3, [pc, #208]	@ (8002b08 <mpu_set_sensors+0x12c>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	729a      	strb	r2, [r3, #10]
        return -1;
 8002a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3e:	e05f      	b.n	8002b00 <mpu_set_sensors+0x124>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	4b2f      	ldr	r3, [pc, #188]	@ (8002b08 <mpu_set_sensors+0x12c>)
 8002a4a:	731a      	strb	r2, [r3, #12]

    data = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d104      	bne.n	8002a64 <mpu_set_sensors+0x88>
        data |= BIT_STBY_XG;
 8002a5a:	7bfb      	ldrb	r3, [r7, #15]
 8002a5c:	f043 0304 	orr.w	r3, r3, #4
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	f003 0320 	and.w	r3, r3, #32
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d104      	bne.n	8002a78 <mpu_set_sensors+0x9c>
        data |= BIT_STBY_YG;
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	f043 0302 	orr.w	r3, r3, #2
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 8002a78:	79fb      	ldrb	r3, [r7, #7]
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d104      	bne.n	8002a8c <mpu_set_sensors+0xb0>
        data |= BIT_STBY_ZG;
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 8002a8c:	79fb      	ldrb	r3, [r7, #7]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d104      	bne.n	8002aa0 <mpu_set_sensors+0xc4>
        data |= BIT_STBY_XYZA;
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8002aa0:	4b19      	ldr	r3, [pc, #100]	@ (8002b08 <mpu_set_sensors+0x12c>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4b17      	ldr	r3, [pc, #92]	@ (8002b08 <mpu_set_sensors+0x12c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	7d9b      	ldrb	r3, [r3, #22]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ab4:	9302      	str	r3, [sp, #8]
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	9301      	str	r3, [sp, #4]
 8002aba:	f107 030f 	add.w	r3, r7, #15
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	4812      	ldr	r0, [pc, #72]	@ (8002b0c <mpu_set_sensors+0x130>)
 8002ac4:	f003 faa2 	bl	800600c <HAL_I2C_Mem_Write>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d005      	beq.n	8002ada <mpu_set_sensors+0xfe>
        st.chip_cfg.sensors = 0;
 8002ace:	4b0e      	ldr	r3, [pc, #56]	@ (8002b08 <mpu_set_sensors+0x12c>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	729a      	strb	r2, [r3, #10]
        return -1;
 8002ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad8:	e012      	b.n	8002b00 <mpu_set_sensors+0x124>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 8002ada:	79fb      	ldrb	r3, [r7, #7]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d005      	beq.n	8002aec <mpu_set_sensors+0x110>
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d002      	beq.n	8002aec <mpu_set_sensors+0x110>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	f000 f9ac 	bl	8002e44 <mpu_set_int_latched>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
 8002aec:	4a06      	ldr	r2, [pc, #24]	@ (8002b08 <mpu_set_sensors+0x12c>)
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 8002af2:	4b05      	ldr	r3, [pc, #20]	@ (8002b08 <mpu_set_sensors+0x12c>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 8002af8:	2032      	movs	r0, #50	@ 0x32
 8002afa:	f002 fe9f 	bl	800583c <HAL_Delay>
    return 0;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	20000004 	.word	0x20000004
 8002b0c:	20000228 	.word	0x20000228

08002b10 <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08a      	sub	sp, #40	@ 0x28
 8002b14:	af04      	add	r7, sp, #16
 8002b16:	4603      	mov	r3, r0
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
 8002b1c:	81fb      	strh	r3, [r7, #14]
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 8002b1e:	4b48      	ldr	r3, [pc, #288]	@ (8002c40 <mpu_read_fifo_stream+0x130>)
 8002b20:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d102      	bne.n	8002b2e <mpu_read_fifo_stream+0x1e>
        return -1;
 8002b28:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2c:	e083      	b.n	8002c36 <mpu_read_fifo_stream+0x126>
    if (!st.chip_cfg.sensors)
 8002b2e:	4b44      	ldr	r3, [pc, #272]	@ (8002c40 <mpu_read_fifo_stream+0x130>)
 8002b30:	7a9b      	ldrb	r3, [r3, #10]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d102      	bne.n	8002b3c <mpu_read_fifo_stream+0x2c>
        return -1;
 8002b36:	f04f 33ff 	mov.w	r3, #4294967295
 8002b3a:	e07c      	b.n	8002c36 <mpu_read_fifo_stream+0x126>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 8002b3c:	4b40      	ldr	r3, [pc, #256]	@ (8002c40 <mpu_read_fifo_stream+0x130>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	4619      	mov	r1, r3
 8002b44:	4b3e      	ldr	r3, [pc, #248]	@ (8002c40 <mpu_read_fifo_stream+0x130>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	7b1b      	ldrb	r3, [r3, #12]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b50:	9302      	str	r3, [sp, #8]
 8002b52:	2302      	movs	r3, #2
 8002b54:	9301      	str	r3, [sp, #4]
 8002b56:	f107 0314 	add.w	r3, r7, #20
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	4839      	ldr	r0, [pc, #228]	@ (8002c44 <mpu_read_fifo_stream+0x134>)
 8002b60:	f003 fb4e 	bl	8006200 <HAL_I2C_Mem_Read>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <mpu_read_fifo_stream+0x60>
        return -1;
 8002b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6e:	e062      	b.n	8002c36 <mpu_read_fifo_stream+0x126>
    fifo_count = (tmp[0] << 8) | tmp[1];
 8002b70:	7d3b      	ldrb	r3, [r7, #20]
 8002b72:	b21b      	sxth	r3, r3
 8002b74:	021b      	lsls	r3, r3, #8
 8002b76:	b21a      	sxth	r2, r3
 8002b78:	7d7b      	ldrb	r3, [r7, #21]
 8002b7a:	b21b      	sxth	r3, r3
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	b21b      	sxth	r3, r3
 8002b80:	82fb      	strh	r3, [r7, #22]
    if (fifo_count < length) {
 8002b82:	8afa      	ldrh	r2, [r7, #22]
 8002b84:	89fb      	ldrh	r3, [r7, #14]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d205      	bcs.n	8002b96 <mpu_read_fifo_stream+0x86>
        more[0] = 0;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
        return -1;
 8002b90:	f04f 33ff 	mov.w	r3, #4294967295
 8002b94:	e04f      	b.n	8002c36 <mpu_read_fifo_stream+0x126>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 8002b96:	4b2a      	ldr	r3, [pc, #168]	@ (8002c40 <mpu_read_fifo_stream+0x130>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	885b      	ldrh	r3, [r3, #2]
 8002b9c:	085b      	lsrs	r3, r3, #1
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	8afa      	ldrh	r2, [r7, #22]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d923      	bls.n	8002bee <mpu_read_fifo_stream+0xde>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 8002ba6:	4b26      	ldr	r3, [pc, #152]	@ (8002c40 <mpu_read_fifo_stream+0x130>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	4619      	mov	r1, r3
 8002bae:	4b24      	ldr	r3, [pc, #144]	@ (8002c40 <mpu_read_fifo_stream+0x130>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	7cdb      	ldrb	r3, [r3, #19]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bba:	9302      	str	r3, [sp, #8]
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	9301      	str	r3, [sp, #4]
 8002bc0:	f107 0314 	add.w	r3, r7, #20
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	481e      	ldr	r0, [pc, #120]	@ (8002c44 <mpu_read_fifo_stream+0x134>)
 8002bca:	f003 fb19 	bl	8006200 <HAL_I2C_Mem_Read>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d002      	beq.n	8002bda <mpu_read_fifo_stream+0xca>
            return -1;
 8002bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd8:	e02d      	b.n	8002c36 <mpu_read_fifo_stream+0x126>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 8002bda:	7d3b      	ldrb	r3, [r7, #20]
 8002bdc:	f003 0310 	and.w	r3, r3, #16
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d004      	beq.n	8002bee <mpu_read_fifo_stream+0xde>
            mpu_reset_fifo();
 8002be4:	f7ff fa54 	bl	8002090 <mpu_reset_fifo>
            return -2;
 8002be8:	f06f 0301 	mvn.w	r3, #1
 8002bec:	e023      	b.n	8002c36 <mpu_read_fifo_stream+0x126>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 8002bee:	4b14      	ldr	r3, [pc, #80]	@ (8002c40 <mpu_read_fifo_stream+0x130>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4b12      	ldr	r3, [pc, #72]	@ (8002c40 <mpu_read_fifo_stream+0x130>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	7b5b      	ldrb	r3, [r3, #13]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c02:	9302      	str	r3, [sp, #8]
 8002c04:	89fb      	ldrh	r3, [r7, #14]
 8002c06:	9301      	str	r3, [sp, #4]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	480d      	ldr	r0, [pc, #52]	@ (8002c44 <mpu_read_fifo_stream+0x134>)
 8002c10:	f003 faf6 	bl	8006200 <HAL_I2C_Mem_Read>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <mpu_read_fifo_stream+0x110>
        return -1;
 8002c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c1e:	e00a      	b.n	8002c36 <mpu_read_fifo_stream+0x126>
    more[0] = fifo_count / length - 1;
 8002c20:	8afa      	ldrh	r2, [r7, #22]
 8002c22:	89fb      	ldrh	r3, [r7, #14]
 8002c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	701a      	strb	r2, [r3, #0]
    return 0;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000004 	.word	0x20000004
 8002c44:	20000228 	.word	0x20000228

08002c48 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af04      	add	r7, sp, #16
 8002c4e:	4603      	mov	r3, r0
 8002c50:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 8002c52:	4b7a      	ldr	r3, [pc, #488]	@ (8002e3c <mpu_set_bypass+0x1f4>)
 8002c54:	7c9b      	ldrb	r3, [r3, #18]
 8002c56:	79fa      	ldrb	r2, [r7, #7]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d101      	bne.n	8002c60 <mpu_set_bypass+0x18>
        return 0;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	e0e8      	b.n	8002e32 <mpu_set_bypass+0x1ea>

    if (bypass_on) {
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d06b      	beq.n	8002d3e <mpu_set_bypass+0xf6>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8002c66:	4b75      	ldr	r3, [pc, #468]	@ (8002e3c <mpu_set_bypass+0x1f4>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4b73      	ldr	r3, [pc, #460]	@ (8002e3c <mpu_set_bypass+0x1f4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	791b      	ldrb	r3, [r3, #4]
 8002c74:	461a      	mov	r2, r3
 8002c76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c7a:	9302      	str	r3, [sp, #8]
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	f107 030f 	add.w	r3, r7, #15
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	2301      	movs	r3, #1
 8002c88:	486d      	ldr	r0, [pc, #436]	@ (8002e40 <mpu_set_bypass+0x1f8>)
 8002c8a:	f003 fab9 	bl	8006200 <HAL_I2C_Mem_Read>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d002      	beq.n	8002c9a <mpu_set_bypass+0x52>
            return -1;
 8002c94:	f04f 33ff 	mov.w	r3, #4294967295
 8002c98:	e0cb      	b.n	8002e32 <mpu_set_bypass+0x1ea>
        tmp &= ~BIT_AUX_IF_EN;
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
 8002c9c:	f023 0320 	bic.w	r3, r3, #32
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8002ca4:	4b65      	ldr	r3, [pc, #404]	@ (8002e3c <mpu_set_bypass+0x1f4>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	4619      	mov	r1, r3
 8002cac:	4b63      	ldr	r3, [pc, #396]	@ (8002e3c <mpu_set_bypass+0x1f4>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	791b      	ldrb	r3, [r3, #4]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cb8:	9302      	str	r3, [sp, #8]
 8002cba:	2301      	movs	r3, #1
 8002cbc:	9301      	str	r3, [sp, #4]
 8002cbe:	f107 030f 	add.w	r3, r7, #15
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	485e      	ldr	r0, [pc, #376]	@ (8002e40 <mpu_set_bypass+0x1f8>)
 8002cc8:	f003 f9a0 	bl	800600c <HAL_I2C_Mem_Write>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <mpu_set_bypass+0x90>
            return -1;
 8002cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd6:	e0ac      	b.n	8002e32 <mpu_set_bypass+0x1ea>
        delay_ms(3);
 8002cd8:	2003      	movs	r0, #3
 8002cda:	f002 fdaf 	bl	800583c <HAL_Delay>
        tmp = BIT_BYPASS_EN;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 8002ce2:	4b56      	ldr	r3, [pc, #344]	@ (8002e3c <mpu_set_bypass+0x1f4>)
 8002ce4:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d004      	beq.n	8002cf6 <mpu_set_bypass+0xae>
            tmp |= BIT_ACTL;
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8002cf6:	4b51      	ldr	r3, [pc, #324]	@ (8002e3c <mpu_set_bypass+0x1f4>)
 8002cf8:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d004      	beq.n	8002d0a <mpu_set_bypass+0xc2>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8002d0a:	4b4c      	ldr	r3, [pc, #304]	@ (8002e3c <mpu_set_bypass+0x1f4>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	4619      	mov	r1, r3
 8002d12:	4b4a      	ldr	r3, [pc, #296]	@ (8002e3c <mpu_set_bypass+0x1f4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	7ddb      	ldrb	r3, [r3, #23]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d1e:	9302      	str	r3, [sp, #8]
 8002d20:	2301      	movs	r3, #1
 8002d22:	9301      	str	r3, [sp, #4]
 8002d24:	f107 030f 	add.w	r3, r7, #15
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	4844      	ldr	r0, [pc, #272]	@ (8002e40 <mpu_set_bypass+0x1f8>)
 8002d2e:	f003 f96d 	bl	800600c <HAL_I2C_Mem_Write>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d078      	beq.n	8002e2a <mpu_set_bypass+0x1e2>
            return -1;
 8002d38:	f04f 33ff 	mov.w	r3, #4294967295
 8002d3c:	e079      	b.n	8002e32 <mpu_set_bypass+0x1ea>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8002d3e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e3c <mpu_set_bypass+0x1f4>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	4619      	mov	r1, r3
 8002d46:	4b3d      	ldr	r3, [pc, #244]	@ (8002e3c <mpu_set_bypass+0x1f4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	791b      	ldrb	r3, [r3, #4]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d52:	9302      	str	r3, [sp, #8]
 8002d54:	2301      	movs	r3, #1
 8002d56:	9301      	str	r3, [sp, #4]
 8002d58:	f107 030f 	add.w	r3, r7, #15
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	2301      	movs	r3, #1
 8002d60:	4837      	ldr	r0, [pc, #220]	@ (8002e40 <mpu_set_bypass+0x1f8>)
 8002d62:	f003 fa4d 	bl	8006200 <HAL_I2C_Mem_Read>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <mpu_set_bypass+0x12a>
            return -1;
 8002d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d70:	e05f      	b.n	8002e32 <mpu_set_bypass+0x1ea>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8002d72:	4b32      	ldr	r3, [pc, #200]	@ (8002e3c <mpu_set_bypass+0x1f4>)
 8002d74:	7a9b      	ldrb	r3, [r3, #10]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d005      	beq.n	8002d8a <mpu_set_bypass+0x142>
            tmp |= BIT_AUX_IF_EN;
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
 8002d80:	f043 0320 	orr.w	r3, r3, #32
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	73fb      	strb	r3, [r7, #15]
 8002d88:	e004      	b.n	8002d94 <mpu_set_bypass+0x14c>
        else
            tmp &= ~BIT_AUX_IF_EN;
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
 8002d8c:	f023 0320 	bic.w	r3, r3, #32
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8002d94:	4b29      	ldr	r3, [pc, #164]	@ (8002e3c <mpu_set_bypass+0x1f4>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4b27      	ldr	r3, [pc, #156]	@ (8002e3c <mpu_set_bypass+0x1f4>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	791b      	ldrb	r3, [r3, #4]
 8002da2:	461a      	mov	r2, r3
 8002da4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002da8:	9302      	str	r3, [sp, #8]
 8002daa:	2301      	movs	r3, #1
 8002dac:	9301      	str	r3, [sp, #4]
 8002dae:	f107 030f 	add.w	r3, r7, #15
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	2301      	movs	r3, #1
 8002db6:	4822      	ldr	r0, [pc, #136]	@ (8002e40 <mpu_set_bypass+0x1f8>)
 8002db8:	f003 f928 	bl	800600c <HAL_I2C_Mem_Write>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d002      	beq.n	8002dc8 <mpu_set_bypass+0x180>
            return -1;
 8002dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc6:	e034      	b.n	8002e32 <mpu_set_bypass+0x1ea>
        delay_ms(3);
 8002dc8:	2003      	movs	r0, #3
 8002dca:	f002 fd37 	bl	800583c <HAL_Delay>
        if (st.chip_cfg.active_low_int)
 8002dce:	4b1b      	ldr	r3, [pc, #108]	@ (8002e3c <mpu_set_bypass+0x1f4>)
 8002dd0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <mpu_set_bypass+0x196>
            tmp = BIT_ACTL;
 8002dd8:	2380      	movs	r3, #128	@ 0x80
 8002dda:	73fb      	strb	r3, [r7, #15]
 8002ddc:	e001      	b.n	8002de2 <mpu_set_bypass+0x19a>
        else
            tmp = 0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8002de2:	4b16      	ldr	r3, [pc, #88]	@ (8002e3c <mpu_set_bypass+0x1f4>)
 8002de4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d004      	beq.n	8002df6 <mpu_set_bypass+0x1ae>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
 8002dee:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8002df6:	4b11      	ldr	r3, [pc, #68]	@ (8002e3c <mpu_set_bypass+0x1f4>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8002e3c <mpu_set_bypass+0x1f4>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	7ddb      	ldrb	r3, [r3, #23]
 8002e04:	461a      	mov	r2, r3
 8002e06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e0a:	9302      	str	r3, [sp, #8]
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	9301      	str	r3, [sp, #4]
 8002e10:	f107 030f 	add.w	r3, r7, #15
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	2301      	movs	r3, #1
 8002e18:	4809      	ldr	r0, [pc, #36]	@ (8002e40 <mpu_set_bypass+0x1f8>)
 8002e1a:	f003 f8f7 	bl	800600c <HAL_I2C_Mem_Write>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <mpu_set_bypass+0x1e2>
            return -1;
 8002e24:	f04f 33ff 	mov.w	r3, #4294967295
 8002e28:	e003      	b.n	8002e32 <mpu_set_bypass+0x1ea>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 8002e2a:	4a04      	ldr	r2, [pc, #16]	@ (8002e3c <mpu_set_bypass+0x1f4>)
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	7493      	strb	r3, [r2, #18]
    return 0;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20000004 	.word	0x20000004
 8002e40:	20000228 	.word	0x20000228

08002e44 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af04      	add	r7, sp, #16
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 8002e4e:	4b23      	ldr	r3, [pc, #140]	@ (8002edc <mpu_set_int_latched+0x98>)
 8002e50:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002e54:	79fa      	ldrb	r2, [r7, #7]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d101      	bne.n	8002e5e <mpu_set_int_latched+0x1a>
        return 0;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	e039      	b.n	8002ed2 <mpu_set_int_latched+0x8e>

    if (enable)
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d002      	beq.n	8002e6a <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8002e64:	2330      	movs	r3, #48	@ 0x30
 8002e66:	73fb      	strb	r3, [r7, #15]
 8002e68:	e001      	b.n	8002e6e <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 8002e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8002edc <mpu_set_int_latched+0x98>)
 8002e70:	7c9b      	ldrb	r3, [r3, #18]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d004      	beq.n	8002e80 <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
 8002e78:	f043 0302 	orr.w	r3, r3, #2
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 8002e80:	4b16      	ldr	r3, [pc, #88]	@ (8002edc <mpu_set_int_latched+0x98>)
 8002e82:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d004      	beq.n	8002e94 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
 8002e8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8002e94:	4b11      	ldr	r3, [pc, #68]	@ (8002edc <mpu_set_int_latched+0x98>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002edc <mpu_set_int_latched+0x98>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	7ddb      	ldrb	r3, [r3, #23]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ea8:	9302      	str	r3, [sp, #8]
 8002eaa:	2301      	movs	r3, #1
 8002eac:	9301      	str	r3, [sp, #4]
 8002eae:	f107 030f 	add.w	r3, r7, #15
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	480a      	ldr	r0, [pc, #40]	@ (8002ee0 <mpu_set_int_latched+0x9c>)
 8002eb8:	f003 f8a8 	bl	800600c <HAL_I2C_Mem_Write>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <mpu_set_int_latched+0x84>
        return -1;
 8002ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec6:	e004      	b.n	8002ed2 <mpu_set_int_latched+0x8e>
    st.chip_cfg.latched_int = enable;
 8002ec8:	4a04      	ldr	r2, [pc, #16]	@ (8002edc <mpu_set_int_latched+0x98>)
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	f882 3023 	strb.w	r3, [r2, #35]	@ 0x23
    return 0;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20000004 	.word	0x20000004
 8002ee0:	20000228 	.word	0x20000228

08002ee4 <get_accel_prod_shift>:

#ifdef MPU6050
static int get_accel_prod_shift(float *st_shift)
{
 8002ee4:	b590      	push	{r4, r7, lr}
 8002ee6:	b08b      	sub	sp, #44	@ 0x2c
 8002ee8:	af04      	add	r7, sp, #16
 8002eea:	6078      	str	r0, [r7, #4]
    unsigned char tmp[4], shift_code[3], ii;

    if (i2c_read(st.hw->addr, 0x0D, 4, tmp))
 8002eec:	4b44      	ldr	r3, [pc, #272]	@ (8003000 <get_accel_prod_shift+0x11c>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ef8:	9302      	str	r3, [sp, #8]
 8002efa:	2304      	movs	r3, #4
 8002efc:	9301      	str	r3, [sp, #4]
 8002efe:	f107 0310 	add.w	r3, r7, #16
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	2301      	movs	r3, #1
 8002f06:	220d      	movs	r2, #13
 8002f08:	483e      	ldr	r0, [pc, #248]	@ (8003004 <get_accel_prod_shift+0x120>)
 8002f0a:	f003 f979 	bl	8006200 <HAL_I2C_Mem_Read>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <get_accel_prod_shift+0x34>
        return 0x07;
 8002f14:	2307      	movs	r3, #7
 8002f16:	e06f      	b.n	8002ff8 <get_accel_prod_shift+0x114>

    shift_code[0] = ((tmp[0] & 0xE0) >> 3) | ((tmp[3] & 0x30) >> 4);
 8002f18:	7c3b      	ldrb	r3, [r7, #16]
 8002f1a:	10db      	asrs	r3, r3, #3
 8002f1c:	b25b      	sxtb	r3, r3
 8002f1e:	f003 031c 	and.w	r3, r3, #28
 8002f22:	b25a      	sxtb	r2, r3
 8002f24:	7cfb      	ldrb	r3, [r7, #19]
 8002f26:	111b      	asrs	r3, r3, #4
 8002f28:	b25b      	sxtb	r3, r3
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	b25b      	sxtb	r3, r3
 8002f30:	4313      	orrs	r3, r2
 8002f32:	b25b      	sxtb	r3, r3
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	733b      	strb	r3, [r7, #12]
    shift_code[1] = ((tmp[1] & 0xE0) >> 3) | ((tmp[3] & 0x0C) >> 2);
 8002f38:	7c7b      	ldrb	r3, [r7, #17]
 8002f3a:	10db      	asrs	r3, r3, #3
 8002f3c:	b25b      	sxtb	r3, r3
 8002f3e:	f003 031c 	and.w	r3, r3, #28
 8002f42:	b25a      	sxtb	r2, r3
 8002f44:	7cfb      	ldrb	r3, [r7, #19]
 8002f46:	109b      	asrs	r3, r3, #2
 8002f48:	b25b      	sxtb	r3, r3
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	b25b      	sxtb	r3, r3
 8002f50:	4313      	orrs	r3, r2
 8002f52:	b25b      	sxtb	r3, r3
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	737b      	strb	r3, [r7, #13]
    shift_code[2] = ((tmp[2] & 0xE0) >> 3) | (tmp[3] & 0x03);
 8002f58:	7cbb      	ldrb	r3, [r7, #18]
 8002f5a:	10db      	asrs	r3, r3, #3
 8002f5c:	b25b      	sxtb	r3, r3
 8002f5e:	f003 031c 	and.w	r3, r3, #28
 8002f62:	b25a      	sxtb	r2, r3
 8002f64:	7cfb      	ldrb	r3, [r7, #19]
 8002f66:	b25b      	sxtb	r3, r3
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	b25b      	sxtb	r3, r3
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	b25b      	sxtb	r3, r3
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	73bb      	strb	r3, [r7, #14]
    for (ii = 0; ii < 3; ii++) {
 8002f76:	2300      	movs	r3, #0
 8002f78:	75fb      	strb	r3, [r7, #23]
 8002f7a:	e039      	b.n	8002ff0 <get_accel_prod_shift+0x10c>
        if (!shift_code[ii]) {
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]
 8002f7e:	3318      	adds	r3, #24
 8002f80:	443b      	add	r3, r7
 8002f82:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d107      	bne.n	8002f9a <get_accel_prod_shift+0xb6>
            st_shift[ii] = 0.f;
 8002f8a:	7dfb      	ldrb	r3, [r7, #23]
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	4413      	add	r3, r2
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
            continue;
 8002f98:	e027      	b.n	8002fea <get_accel_prod_shift+0x106>
        }
        /* Equivalent to..
         * st_shift[ii] = 0.34f * powf(0.92f/0.34f, (shift_code[ii]-1) / 30.f)
         */
        st_shift[ii] = 0.34f;
 8002f9a:	7dfb      	ldrb	r3, [r7, #23]
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	4a19      	ldr	r2, [pc, #100]	@ (8003008 <get_accel_prod_shift+0x124>)
 8002fa4:	601a      	str	r2, [r3, #0]
        while (--shift_code[ii])
 8002fa6:	e00d      	b.n	8002fc4 <get_accel_prod_shift+0xe0>
            st_shift[ii] *= 1.034f;
 8002fa8:	7dfb      	ldrb	r3, [r7, #23]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	4413      	add	r3, r2
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	7dfb      	ldrb	r3, [r7, #23]
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	18d4      	adds	r4, r2, r3
 8002fba:	4914      	ldr	r1, [pc, #80]	@ (800300c <get_accel_prod_shift+0x128>)
 8002fbc:	f7fd fee2 	bl	8000d84 <__aeabi_fmul>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	6023      	str	r3, [r4, #0]
        while (--shift_code[ii])
 8002fc4:	7dfb      	ldrb	r3, [r7, #23]
 8002fc6:	f103 0218 	add.w	r2, r3, #24
 8002fca:	443a      	add	r2, r7
 8002fcc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8002fd0:	3a01      	subs	r2, #1
 8002fd2:	b2d1      	uxtb	r1, r2
 8002fd4:	f103 0218 	add.w	r2, r3, #24
 8002fd8:	443a      	add	r2, r7
 8002fda:	f802 1c0c 	strb.w	r1, [r2, #-12]
 8002fde:	3318      	adds	r3, #24
 8002fe0:	443b      	add	r3, r7
 8002fe2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1de      	bne.n	8002fa8 <get_accel_prod_shift+0xc4>
    for (ii = 0; ii < 3; ii++) {
 8002fea:	7dfb      	ldrb	r3, [r7, #23]
 8002fec:	3301      	adds	r3, #1
 8002fee:	75fb      	strb	r3, [r7, #23]
 8002ff0:	7dfb      	ldrb	r3, [r7, #23]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d9c2      	bls.n	8002f7c <get_accel_prod_shift+0x98>
    }
    return 0;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	371c      	adds	r7, #28
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd90      	pop	{r4, r7, pc}
 8003000:	20000004 	.word	0x20000004
 8003004:	20000228 	.word	0x20000228
 8003008:	3eae147b 	.word	0x3eae147b
 800300c:	3f845a1d 	.word	0x3f845a1d

08003010 <accel_self_test>:

static int accel_self_test(long *bias_regular, long *bias_st)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08a      	sub	sp, #40	@ 0x28
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 800301a:	2300      	movs	r3, #0
 800301c:	623b      	str	r3, [r7, #32]
    float st_shift[3], st_shift_cust, st_shift_var;

    get_accel_prod_shift(st_shift);
 800301e:	f107 030c 	add.w	r3, r7, #12
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff ff5e 	bl	8002ee4 <get_accel_prod_shift>
    for(jj = 0; jj < 3; jj++) {
 8003028:	2300      	movs	r3, #0
 800302a:	627b      	str	r3, [r7, #36]	@ 0x24
 800302c:	e065      	b.n	80030fa <accel_self_test+0xea>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 800302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	4413      	add	r3, r2
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	6839      	ldr	r1, [r7, #0]
 800303e:	440b      	add	r3, r1
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	bfb8      	it	lt
 8003048:	425b      	neglt	r3, r3
 800304a:	4618      	mov	r0, r3
 800304c:	f7fd fe46 	bl	8000cdc <__aeabi_i2f>
 8003050:	4603      	mov	r3, r0
 8003052:	f04f 418f 	mov.w	r1, #1199570944	@ 0x47800000
 8003056:	4618      	mov	r0, r3
 8003058:	f7fd ff48 	bl	8000eec <__aeabi_fdiv>
 800305c:	4603      	mov	r3, r0
 800305e:	61fb      	str	r3, [r7, #28]
        if (st_shift[jj]) {
 8003060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	3328      	adds	r3, #40	@ 0x28
 8003066:	443b      	add	r3, r7
 8003068:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800306c:	f04f 0100 	mov.w	r1, #0
 8003070:	4618      	mov	r0, r3
 8003072:	f7fe f81b 	bl	80010ac <__aeabi_fcmpeq>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d124      	bne.n	80030c6 <accel_self_test+0xb6>
            st_shift_var = st_shift_cust / st_shift[jj] - 1.f;
 800307c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	3328      	adds	r3, #40	@ 0x28
 8003082:	443b      	add	r3, r7
 8003084:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8003088:	4619      	mov	r1, r3
 800308a:	69f8      	ldr	r0, [r7, #28]
 800308c:	f7fd ff2e 	bl	8000eec <__aeabi_fdiv>
 8003090:	4603      	mov	r3, r0
 8003092:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003096:	4618      	mov	r0, r3
 8003098:	f7fd fd6a 	bl	8000b70 <__aeabi_fsub>
 800309c:	4603      	mov	r3, r0
 800309e:	61bb      	str	r3, [r7, #24]
            if (fabs(st_shift_var) > test.max_accel_var)
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80030a6:	4a19      	ldr	r2, [pc, #100]	@ (800310c <accel_self_test+0xfc>)
 80030a8:	4611      	mov	r1, r2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fe f826 	bl	80010fc <__aeabi_fcmpgt>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d01e      	beq.n	80030f4 <accel_self_test+0xe4>
                result |= 1 << jj;
 80030b6:	2201      	movs	r2, #1
 80030b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	6a3a      	ldr	r2, [r7, #32]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	623b      	str	r3, [r7, #32]
 80030c4:	e016      	b.n	80030f4 <accel_self_test+0xe4>
        } else if ((st_shift_cust < test.min_g) ||
 80030c6:	4b12      	ldr	r3, [pc, #72]	@ (8003110 <accel_self_test+0x100>)
 80030c8:	4619      	mov	r1, r3
 80030ca:	69f8      	ldr	r0, [r7, #28]
 80030cc:	f7fd fff8 	bl	80010c0 <__aeabi_fcmplt>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d107      	bne.n	80030e6 <accel_self_test+0xd6>
            (st_shift_cust > test.max_g))
 80030d6:	4b0f      	ldr	r3, [pc, #60]	@ (8003114 <accel_self_test+0x104>)
        } else if ((st_shift_cust < test.min_g) ||
 80030d8:	4619      	mov	r1, r3
 80030da:	69f8      	ldr	r0, [r7, #28]
 80030dc:	f7fe f80e 	bl	80010fc <__aeabi_fcmpgt>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d006      	beq.n	80030f4 <accel_self_test+0xe4>
            result |= 1 << jj;
 80030e6:	2201      	movs	r2, #1
 80030e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	6a3a      	ldr	r2, [r7, #32]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	623b      	str	r3, [r7, #32]
    for(jj = 0; jj < 3; jj++) {
 80030f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f6:	3301      	adds	r3, #1
 80030f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	dd96      	ble.n	800302e <accel_self_test+0x1e>
    }

    return result;
 8003100:	6a3b      	ldr	r3, [r7, #32]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3728      	adds	r7, #40	@ 0x28
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	3e0f5c29 	.word	0x3e0f5c29
 8003110:	3e99999a 	.word	0x3e99999a
 8003114:	3f733333 	.word	0x3f733333

08003118 <gyro_self_test>:

static int gyro_self_test(long *bias_regular, long *bias_st)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08c      	sub	sp, #48	@ 0x30
 800311c:	af04      	add	r7, sp, #16
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 8003122:	2300      	movs	r3, #0
 8003124:	61bb      	str	r3, [r7, #24]
    unsigned char tmp[3];
    float st_shift, st_shift_cust, st_shift_var;

    if (i2c_read(st.hw->addr, 0x0D, 3, tmp))
 8003126:	4b58      	ldr	r3, [pc, #352]	@ (8003288 <gyro_self_test+0x170>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	4619      	mov	r1, r3
 800312e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003132:	9302      	str	r3, [sp, #8]
 8003134:	2303      	movs	r3, #3
 8003136:	9301      	str	r3, [sp, #4]
 8003138:	f107 0308 	add.w	r3, r7, #8
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	2301      	movs	r3, #1
 8003140:	220d      	movs	r2, #13
 8003142:	4852      	ldr	r0, [pc, #328]	@ (800328c <gyro_self_test+0x174>)
 8003144:	f003 f85c 	bl	8006200 <HAL_I2C_Mem_Read>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <gyro_self_test+0x3a>
        return 0x07;
 800314e:	2307      	movs	r3, #7
 8003150:	e095      	b.n	800327e <gyro_self_test+0x166>

    tmp[0] &= 0x1F;
 8003152:	7a3b      	ldrb	r3, [r7, #8]
 8003154:	f003 031f 	and.w	r3, r3, #31
 8003158:	b2db      	uxtb	r3, r3
 800315a:	723b      	strb	r3, [r7, #8]
    tmp[1] &= 0x1F;
 800315c:	7a7b      	ldrb	r3, [r7, #9]
 800315e:	f003 031f 	and.w	r3, r3, #31
 8003162:	b2db      	uxtb	r3, r3
 8003164:	727b      	strb	r3, [r7, #9]
    tmp[2] &= 0x1F;
 8003166:	7abb      	ldrb	r3, [r7, #10]
 8003168:	f003 031f 	and.w	r3, r3, #31
 800316c:	b2db      	uxtb	r3, r3
 800316e:	72bb      	strb	r3, [r7, #10]

    for (jj = 0; jj < 3; jj++) {
 8003170:	2300      	movs	r3, #0
 8003172:	61fb      	str	r3, [r7, #28]
 8003174:	e07e      	b.n	8003274 <gyro_self_test+0x15c>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	4413      	add	r3, r2
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	6839      	ldr	r1, [r7, #0]
 8003186:	440b      	add	r3, r1
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	bfb8      	it	lt
 8003190:	425b      	neglt	r3, r3
 8003192:	4618      	mov	r0, r3
 8003194:	f7fd fda2 	bl	8000cdc <__aeabi_i2f>
 8003198:	4603      	mov	r3, r0
 800319a:	f04f 418f 	mov.w	r1, #1199570944	@ 0x47800000
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fd fea4 	bl	8000eec <__aeabi_fdiv>
 80031a4:	4603      	mov	r3, r0
 80031a6:	613b      	str	r3, [r7, #16]
        if (tmp[jj]) {
 80031a8:	f107 0208 	add.w	r2, r7, #8
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	4413      	add	r3, r2
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d044      	beq.n	8003240 <gyro_self_test+0x128>
            st_shift = 3275.f / test.gyro_sens;
 80031b6:	2383      	movs	r3, #131	@ 0x83
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7fd fd8b 	bl	8000cd4 <__aeabi_ui2f>
 80031be:	4603      	mov	r3, r0
 80031c0:	4619      	mov	r1, r3
 80031c2:	4833      	ldr	r0, [pc, #204]	@ (8003290 <gyro_self_test+0x178>)
 80031c4:	f7fd fe92 	bl	8000eec <__aeabi_fdiv>
 80031c8:	4603      	mov	r3, r0
 80031ca:	617b      	str	r3, [r7, #20]
            while (--tmp[jj])
 80031cc:	e005      	b.n	80031da <gyro_self_test+0xc2>
                st_shift *= 1.046f;
 80031ce:	4931      	ldr	r1, [pc, #196]	@ (8003294 <gyro_self_test+0x17c>)
 80031d0:	6978      	ldr	r0, [r7, #20]
 80031d2:	f7fd fdd7 	bl	8000d84 <__aeabi_fmul>
 80031d6:	4603      	mov	r3, r0
 80031d8:	617b      	str	r3, [r7, #20]
            while (--tmp[jj])
 80031da:	f107 0208 	add.w	r2, r7, #8
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	4413      	add	r3, r2
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b2d9      	uxtb	r1, r3
 80031e8:	f107 0208 	add.w	r2, r7, #8
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	4413      	add	r3, r2
 80031f0:	460a      	mov	r2, r1
 80031f2:	701a      	strb	r2, [r3, #0]
 80031f4:	f107 0208 	add.w	r2, r7, #8
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	4413      	add	r3, r2
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1e5      	bne.n	80031ce <gyro_self_test+0xb6>
            st_shift_var = st_shift_cust / st_shift - 1.f;
 8003202:	6979      	ldr	r1, [r7, #20]
 8003204:	6938      	ldr	r0, [r7, #16]
 8003206:	f7fd fe71 	bl	8000eec <__aeabi_fdiv>
 800320a:	4603      	mov	r3, r0
 800320c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003210:	4618      	mov	r0, r3
 8003212:	f7fd fcad 	bl	8000b70 <__aeabi_fsub>
 8003216:	4603      	mov	r3, r0
 8003218:	60fb      	str	r3, [r7, #12]
            if (fabs(st_shift_var) > test.max_gyro_var)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003220:	4a1d      	ldr	r2, [pc, #116]	@ (8003298 <gyro_self_test+0x180>)
 8003222:	4611      	mov	r1, r2
 8003224:	4618      	mov	r0, r3
 8003226:	f7fd ff69 	bl	80010fc <__aeabi_fcmpgt>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d01e      	beq.n	800326e <gyro_self_test+0x156>
                result |= 1 << jj;
 8003230:	2201      	movs	r2, #1
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
 800323e:	e016      	b.n	800326e <gyro_self_test+0x156>
        } else if ((st_shift_cust < test.min_dps) ||
 8003240:	4b16      	ldr	r3, [pc, #88]	@ (800329c <gyro_self_test+0x184>)
 8003242:	4619      	mov	r1, r3
 8003244:	6938      	ldr	r0, [r7, #16]
 8003246:	f7fd ff3b 	bl	80010c0 <__aeabi_fcmplt>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d107      	bne.n	8003260 <gyro_self_test+0x148>
            (st_shift_cust > test.max_dps))
 8003250:	4b13      	ldr	r3, [pc, #76]	@ (80032a0 <gyro_self_test+0x188>)
        } else if ((st_shift_cust < test.min_dps) ||
 8003252:	4619      	mov	r1, r3
 8003254:	6938      	ldr	r0, [r7, #16]
 8003256:	f7fd ff51 	bl	80010fc <__aeabi_fcmpgt>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d006      	beq.n	800326e <gyro_self_test+0x156>
            result |= 1 << jj;
 8003260:	2201      	movs	r2, #1
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4313      	orrs	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
    for (jj = 0; jj < 3; jj++) {
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	3301      	adds	r3, #1
 8003272:	61fb      	str	r3, [r7, #28]
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	2b02      	cmp	r3, #2
 8003278:	f77f af7d 	ble.w	8003176 <gyro_self_test+0x5e>
    }
    return result;
 800327c:	69bb      	ldr	r3, [r7, #24]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3720      	adds	r7, #32
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20000004 	.word	0x20000004
 800328c:	20000228 	.word	0x20000228
 8003290:	454cb000 	.word	0x454cb000
 8003294:	3f85e354 	.word	0x3f85e354
 8003298:	3e0f5c29 	.word	0x3e0f5c29
 800329c:	41200000 	.word	0x41200000
 80032a0:	42d20000 	.word	0x42d20000

080032a4 <get_st_biases>:
    return result;
}
#endif

static int get_st_biases(long *gyro, long *accel, unsigned char hw_test)
{
 80032a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032a8:	b0bc      	sub	sp, #240	@ 0xf0
 80032aa:	af04      	add	r7, sp, #16
 80032ac:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
 80032b0:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80032b4:	4613      	mov	r3, r2
 80032b6:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_count, ii;
    unsigned short fifo_count;

    data[0] = 0x01;
 80032ba:	2301      	movs	r3, #1
 80032bc:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    data[1] = 0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	f887 30cd 	strb.w	r3, [r7, #205]	@ 0xcd
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
 80032c6:	4bab      	ldr	r3, [pc, #684]	@ (8003574 <get_st_biases+0x2d0>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	4619      	mov	r1, r3
 80032ce:	4ba9      	ldr	r3, [pc, #676]	@ (8003574 <get_st_biases+0x2d0>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	7d5b      	ldrb	r3, [r3, #21]
 80032d4:	461a      	mov	r2, r3
 80032d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032da:	9302      	str	r3, [sp, #8]
 80032dc:	2302      	movs	r3, #2
 80032de:	9301      	str	r3, [sp, #4]
 80032e0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	2301      	movs	r3, #1
 80032e8:	48a3      	ldr	r0, [pc, #652]	@ (8003578 <get_st_biases+0x2d4>)
 80032ea:	f002 fe8f 	bl	800600c <HAL_I2C_Mem_Write>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d002      	beq.n	80032fa <get_st_biases+0x56>
        return -1;
 80032f4:	f04f 33ff 	mov.w	r3, #4294967295
 80032f8:	e3de      	b.n	8003ab8 <get_st_biases+0x814>
    delay_ms(200);
 80032fa:	20c8      	movs	r0, #200	@ 0xc8
 80032fc:	f002 fa9e 	bl	800583c <HAL_Delay>
    data[0] = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
 8003306:	4b9b      	ldr	r3, [pc, #620]	@ (8003574 <get_st_biases+0x2d0>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	4619      	mov	r1, r3
 800330e:	4b99      	ldr	r3, [pc, #612]	@ (8003574 <get_st_biases+0x2d0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	7c5b      	ldrb	r3, [r3, #17]
 8003314:	461a      	mov	r2, r3
 8003316:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800331a:	9302      	str	r3, [sp, #8]
 800331c:	2301      	movs	r3, #1
 800331e:	9301      	str	r3, [sp, #4]
 8003320:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	2301      	movs	r3, #1
 8003328:	4893      	ldr	r0, [pc, #588]	@ (8003578 <get_st_biases+0x2d4>)
 800332a:	f002 fe6f 	bl	800600c <HAL_I2C_Mem_Write>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <get_st_biases+0x96>
        return -1;
 8003334:	f04f 33ff 	mov.w	r3, #4294967295
 8003338:	e3be      	b.n	8003ab8 <get_st_biases+0x814>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 800333a:	4b8e      	ldr	r3, [pc, #568]	@ (8003574 <get_st_biases+0x2d0>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	4619      	mov	r1, r3
 8003342:	4b8c      	ldr	r3, [pc, #560]	@ (8003574 <get_st_biases+0x2d0>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	795b      	ldrb	r3, [r3, #5]
 8003348:	461a      	mov	r2, r3
 800334a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800334e:	9302      	str	r3, [sp, #8]
 8003350:	2301      	movs	r3, #1
 8003352:	9301      	str	r3, [sp, #4]
 8003354:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	2301      	movs	r3, #1
 800335c:	4886      	ldr	r0, [pc, #536]	@ (8003578 <get_st_biases+0x2d4>)
 800335e:	f002 fe55 	bl	800600c <HAL_I2C_Mem_Write>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <get_st_biases+0xca>
        return -1;
 8003368:	f04f 33ff 	mov.w	r3, #4294967295
 800336c:	e3a4      	b.n	8003ab8 <get_st_biases+0x814>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 800336e:	4b81      	ldr	r3, [pc, #516]	@ (8003574 <get_st_biases+0x2d0>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	4619      	mov	r1, r3
 8003376:	4b7f      	ldr	r3, [pc, #508]	@ (8003574 <get_st_biases+0x2d0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	7d5b      	ldrb	r3, [r3, #21]
 800337c:	461a      	mov	r2, r3
 800337e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003382:	9302      	str	r3, [sp, #8]
 8003384:	2301      	movs	r3, #1
 8003386:	9301      	str	r3, [sp, #4]
 8003388:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	2301      	movs	r3, #1
 8003390:	4879      	ldr	r0, [pc, #484]	@ (8003578 <get_st_biases+0x2d4>)
 8003392:	f002 fe3b 	bl	800600c <HAL_I2C_Mem_Write>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d002      	beq.n	80033a2 <get_st_biases+0xfe>
        return -1;
 800339c:	f04f 33ff 	mov.w	r3, #4294967295
 80033a0:	e38a      	b.n	8003ab8 <get_st_biases+0x814>
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 80033a2:	4b74      	ldr	r3, [pc, #464]	@ (8003574 <get_st_biases+0x2d0>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	4619      	mov	r1, r3
 80033aa:	4b72      	ldr	r3, [pc, #456]	@ (8003574 <get_st_biases+0x2d0>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	7e9b      	ldrb	r3, [r3, #26]
 80033b0:	461a      	mov	r2, r3
 80033b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033b6:	9302      	str	r3, [sp, #8]
 80033b8:	2301      	movs	r3, #1
 80033ba:	9301      	str	r3, [sp, #4]
 80033bc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	2301      	movs	r3, #1
 80033c4:	486c      	ldr	r0, [pc, #432]	@ (8003578 <get_st_biases+0x2d4>)
 80033c6:	f002 fe21 	bl	800600c <HAL_I2C_Mem_Write>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d002      	beq.n	80033d6 <get_st_biases+0x132>
        return -1;
 80033d0:	f04f 33ff 	mov.w	r3, #4294967295
 80033d4:	e370      	b.n	8003ab8 <get_st_biases+0x814>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 80033d6:	4b67      	ldr	r3, [pc, #412]	@ (8003574 <get_st_biases+0x2d0>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	4619      	mov	r1, r3
 80033de:	4b65      	ldr	r3, [pc, #404]	@ (8003574 <get_st_biases+0x2d0>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	791b      	ldrb	r3, [r3, #4]
 80033e4:	461a      	mov	r2, r3
 80033e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033ea:	9302      	str	r3, [sp, #8]
 80033ec:	2301      	movs	r3, #1
 80033ee:	9301      	str	r3, [sp, #4]
 80033f0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	2301      	movs	r3, #1
 80033f8:	485f      	ldr	r0, [pc, #380]	@ (8003578 <get_st_biases+0x2d4>)
 80033fa:	f002 fe07 	bl	800600c <HAL_I2C_Mem_Write>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <get_st_biases+0x166>
        return -1;
 8003404:	f04f 33ff 	mov.w	r3, #4294967295
 8003408:	e356      	b.n	8003ab8 <get_st_biases+0x814>
    data[0] = BIT_FIFO_RST | BIT_DMP_RST;
 800340a:	230c      	movs	r3, #12
 800340c:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 8003410:	4b58      	ldr	r3, [pc, #352]	@ (8003574 <get_st_biases+0x2d0>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	4619      	mov	r1, r3
 8003418:	4b56      	ldr	r3, [pc, #344]	@ (8003574 <get_st_biases+0x2d0>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	791b      	ldrb	r3, [r3, #4]
 800341e:	461a      	mov	r2, r3
 8003420:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003424:	9302      	str	r3, [sp, #8]
 8003426:	2301      	movs	r3, #1
 8003428:	9301      	str	r3, [sp, #4]
 800342a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	2301      	movs	r3, #1
 8003432:	4851      	ldr	r0, [pc, #324]	@ (8003578 <get_st_biases+0x2d4>)
 8003434:	f002 fdea 	bl	800600c <HAL_I2C_Mem_Write>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <get_st_biases+0x1a0>
        return -1;
 800343e:	f04f 33ff 	mov.w	r3, #4294967295
 8003442:	e339      	b.n	8003ab8 <get_st_biases+0x814>
    delay_ms(15);
 8003444:	200f      	movs	r0, #15
 8003446:	f002 f9f9 	bl	800583c <HAL_Delay>
    data[0] = st.test->reg_lpf;
 800344a:	4b4a      	ldr	r3, [pc, #296]	@ (8003574 <get_st_biases+0x2d0>)
 800344c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800344e:	7a5b      	ldrb	r3, [r3, #9]
 8003450:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
 8003454:	4b47      	ldr	r3, [pc, #284]	@ (8003574 <get_st_biases+0x2d0>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	4619      	mov	r1, r3
 800345c:	4b45      	ldr	r3, [pc, #276]	@ (8003574 <get_st_biases+0x2d0>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	789b      	ldrb	r3, [r3, #2]
 8003462:	461a      	mov	r2, r3
 8003464:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003468:	9302      	str	r3, [sp, #8]
 800346a:	2301      	movs	r3, #1
 800346c:	9301      	str	r3, [sp, #4]
 800346e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	2301      	movs	r3, #1
 8003476:	4840      	ldr	r0, [pc, #256]	@ (8003578 <get_st_biases+0x2d4>)
 8003478:	f002 fdc8 	bl	800600c <HAL_I2C_Mem_Write>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d002      	beq.n	8003488 <get_st_biases+0x1e4>
        return -1;
 8003482:	f04f 33ff 	mov.w	r3, #4294967295
 8003486:	e317      	b.n	8003ab8 <get_st_biases+0x814>
    data[0] = st.test->reg_rate_div;
 8003488:	4b3a      	ldr	r3, [pc, #232]	@ (8003574 <get_st_biases+0x2d0>)
 800348a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800348c:	7a1b      	ldrb	r3, [r3, #8]
 800348e:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
 8003492:	4b38      	ldr	r3, [pc, #224]	@ (8003574 <get_st_biases+0x2d0>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	4619      	mov	r1, r3
 800349a:	4b36      	ldr	r3, [pc, #216]	@ (8003574 <get_st_biases+0x2d0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	785b      	ldrb	r3, [r3, #1]
 80034a0:	461a      	mov	r2, r3
 80034a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034a6:	9302      	str	r3, [sp, #8]
 80034a8:	2301      	movs	r3, #1
 80034aa:	9301      	str	r3, [sp, #4]
 80034ac:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	2301      	movs	r3, #1
 80034b4:	4830      	ldr	r0, [pc, #192]	@ (8003578 <get_st_biases+0x2d4>)
 80034b6:	f002 fda9 	bl	800600c <HAL_I2C_Mem_Write>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <get_st_biases+0x222>
        return -1;
 80034c0:	f04f 33ff 	mov.w	r3, #4294967295
 80034c4:	e2f8      	b.n	8003ab8 <get_st_biases+0x814>
    if (hw_test)
 80034c6:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d008      	beq.n	80034e0 <get_st_biases+0x23c>
        data[0] = st.test->reg_gyro_fsr | 0xE0;
 80034ce:	4b29      	ldr	r3, [pc, #164]	@ (8003574 <get_st_biases+0x2d0>)
 80034d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d2:	7a9b      	ldrb	r3, [r3, #10]
 80034d4:	f063 031f 	orn	r3, r3, #31
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
 80034de:	e004      	b.n	80034ea <get_st_biases+0x246>
    else
        data[0] = st.test->reg_gyro_fsr;
 80034e0:	4b24      	ldr	r3, [pc, #144]	@ (8003574 <get_st_biases+0x2d0>)
 80034e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e4:	7a9b      	ldrb	r3, [r3, #10]
 80034e6:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, data))
 80034ea:	4b22      	ldr	r3, [pc, #136]	@ (8003574 <get_st_biases+0x2d0>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	4619      	mov	r1, r3
 80034f2:	4b20      	ldr	r3, [pc, #128]	@ (8003574 <get_st_biases+0x2d0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	799b      	ldrb	r3, [r3, #6]
 80034f8:	461a      	mov	r2, r3
 80034fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034fe:	9302      	str	r3, [sp, #8]
 8003500:	2301      	movs	r3, #1
 8003502:	9301      	str	r3, [sp, #4]
 8003504:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	2301      	movs	r3, #1
 800350c:	481a      	ldr	r0, [pc, #104]	@ (8003578 <get_st_biases+0x2d4>)
 800350e:	f002 fd7d 	bl	800600c <HAL_I2C_Mem_Write>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <get_st_biases+0x27a>
        return -1;
 8003518:	f04f 33ff 	mov.w	r3, #4294967295
 800351c:	e2cc      	b.n	8003ab8 <get_st_biases+0x814>

    if (hw_test)
 800351e:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8003522:	2b00      	cmp	r3, #0
 8003524:	d008      	beq.n	8003538 <get_st_biases+0x294>
        data[0] = st.test->reg_accel_fsr | 0xE0;
 8003526:	4b13      	ldr	r3, [pc, #76]	@ (8003574 <get_st_biases+0x2d0>)
 8003528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800352a:	7adb      	ldrb	r3, [r3, #11]
 800352c:	f063 031f 	orn	r3, r3, #31
 8003530:	b2db      	uxtb	r3, r3
 8003532:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
 8003536:	e002      	b.n	800353e <get_st_biases+0x29a>
    else
        data[0] = test.reg_accel_fsr;
 8003538:	2318      	movs	r3, #24
 800353a:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, data))
 800353e:	4b0d      	ldr	r3, [pc, #52]	@ (8003574 <get_st_biases+0x2d0>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	4619      	mov	r1, r3
 8003546:	4b0b      	ldr	r3, [pc, #44]	@ (8003574 <get_st_biases+0x2d0>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	79db      	ldrb	r3, [r3, #7]
 800354c:	461a      	mov	r2, r3
 800354e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003552:	9302      	str	r3, [sp, #8]
 8003554:	2301      	movs	r3, #1
 8003556:	9301      	str	r3, [sp, #4]
 8003558:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	2301      	movs	r3, #1
 8003560:	4805      	ldr	r0, [pc, #20]	@ (8003578 <get_st_biases+0x2d4>)
 8003562:	f002 fd53 	bl	800600c <HAL_I2C_Mem_Write>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d007      	beq.n	800357c <get_st_biases+0x2d8>
        return -1;
 800356c:	f04f 33ff 	mov.w	r3, #4294967295
 8003570:	e2a2      	b.n	8003ab8 <get_st_biases+0x814>
 8003572:	bf00      	nop
 8003574:	20000004 	.word	0x20000004
 8003578:	20000228 	.word	0x20000228
    if (hw_test)
 800357c:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <get_st_biases+0x2e6>
        delay_ms(200);
 8003584:	20c8      	movs	r0, #200	@ 0xc8
 8003586:	f002 f959 	bl	800583c <HAL_Delay>

    /* Fill FIFO for test.wait_ms milliseconds. */
    data[0] = BIT_FIFO_EN;
 800358a:	2340      	movs	r3, #64	@ 0x40
 800358c:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 8003590:	4b61      	ldr	r3, [pc, #388]	@ (8003718 <get_st_biases+0x474>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	4619      	mov	r1, r3
 8003598:	4b5f      	ldr	r3, [pc, #380]	@ (8003718 <get_st_biases+0x474>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	791b      	ldrb	r3, [r3, #4]
 800359e:	461a      	mov	r2, r3
 80035a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035a4:	9302      	str	r3, [sp, #8]
 80035a6:	2301      	movs	r3, #1
 80035a8:	9301      	str	r3, [sp, #4]
 80035aa:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	2301      	movs	r3, #1
 80035b2:	485a      	ldr	r0, [pc, #360]	@ (800371c <get_st_biases+0x478>)
 80035b4:	f002 fd2a 	bl	800600c <HAL_I2C_Mem_Write>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <get_st_biases+0x320>
        return -1;
 80035be:	f04f 33ff 	mov.w	r3, #4294967295
 80035c2:	e279      	b.n	8003ab8 <get_st_biases+0x814>

    data[0] = INV_XYZ_GYRO | INV_XYZ_ACCEL;
 80035c4:	2378      	movs	r3, #120	@ 0x78
 80035c6:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 80035ca:	4b53      	ldr	r3, [pc, #332]	@ (8003718 <get_st_biases+0x474>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	4619      	mov	r1, r3
 80035d2:	4b51      	ldr	r3, [pc, #324]	@ (8003718 <get_st_biases+0x474>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	795b      	ldrb	r3, [r3, #5]
 80035d8:	461a      	mov	r2, r3
 80035da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035de:	9302      	str	r3, [sp, #8]
 80035e0:	2301      	movs	r3, #1
 80035e2:	9301      	str	r3, [sp, #4]
 80035e4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	2301      	movs	r3, #1
 80035ec:	484b      	ldr	r0, [pc, #300]	@ (800371c <get_st_biases+0x478>)
 80035ee:	f002 fd0d 	bl	800600c <HAL_I2C_Mem_Write>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d002      	beq.n	80035fe <get_st_biases+0x35a>
        return -1;
 80035f8:	f04f 33ff 	mov.w	r3, #4294967295
 80035fc:	e25c      	b.n	8003ab8 <get_st_biases+0x814>
    delay_ms(test.wait_ms);
 80035fe:	2332      	movs	r3, #50	@ 0x32
 8003600:	4618      	mov	r0, r3
 8003602:	f002 f91b 	bl	800583c <HAL_Delay>
    data[0] = 0;
 8003606:	2300      	movs	r3, #0
 8003608:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 800360c:	4b42      	ldr	r3, [pc, #264]	@ (8003718 <get_st_biases+0x474>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	4619      	mov	r1, r3
 8003614:	4b40      	ldr	r3, [pc, #256]	@ (8003718 <get_st_biases+0x474>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	795b      	ldrb	r3, [r3, #5]
 800361a:	461a      	mov	r2, r3
 800361c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003620:	9302      	str	r3, [sp, #8]
 8003622:	2301      	movs	r3, #1
 8003624:	9301      	str	r3, [sp, #4]
 8003626:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	2301      	movs	r3, #1
 800362e:	483b      	ldr	r0, [pc, #236]	@ (800371c <get_st_biases+0x478>)
 8003630:	f002 fcec 	bl	800600c <HAL_I2C_Mem_Write>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <get_st_biases+0x39c>
        return -1;
 800363a:	f04f 33ff 	mov.w	r3, #4294967295
 800363e:	e23b      	b.n	8003ab8 <get_st_biases+0x814>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
 8003640:	4b35      	ldr	r3, [pc, #212]	@ (8003718 <get_st_biases+0x474>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	4619      	mov	r1, r3
 8003648:	4b33      	ldr	r3, [pc, #204]	@ (8003718 <get_st_biases+0x474>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	7b1b      	ldrb	r3, [r3, #12]
 800364e:	461a      	mov	r2, r3
 8003650:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003654:	9302      	str	r3, [sp, #8]
 8003656:	2302      	movs	r3, #2
 8003658:	9301      	str	r3, [sp, #4]
 800365a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	2301      	movs	r3, #1
 8003662:	482e      	ldr	r0, [pc, #184]	@ (800371c <get_st_biases+0x478>)
 8003664:	f002 fdcc 	bl	8006200 <HAL_I2C_Mem_Read>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <get_st_biases+0x3d0>
        return -1;
 800366e:	f04f 33ff 	mov.w	r3, #4294967295
 8003672:	e221      	b.n	8003ab8 <get_st_biases+0x814>

    fifo_count = (data[0] << 8) | data[1];
 8003674:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 8003678:	b21b      	sxth	r3, r3
 800367a:	021b      	lsls	r3, r3, #8
 800367c:	b21a      	sxth	r2, r3
 800367e:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 8003682:	b21b      	sxth	r3, r3
 8003684:	4313      	orrs	r3, r2
 8003686:	b21b      	sxth	r3, r3
 8003688:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
    packet_count = fifo_count / MAX_PACKET_LENGTH;
 800368c:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	@ 0xdc
 8003690:	4b23      	ldr	r3, [pc, #140]	@ (8003720 <get_st_biases+0x47c>)
 8003692:	fba3 2302 	umull	r2, r3, r3, r2
 8003696:	08db      	lsrs	r3, r3, #3
 8003698:	b29b      	uxth	r3, r3
 800369a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    gyro[0] = gyro[1] = gyro[2] = 0;
 800369e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80036a2:	f103 0108 	add.w	r1, r3, #8
 80036a6:	2300      	movs	r3, #0
 80036a8:	600b      	str	r3, [r1, #0]
 80036aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80036ae:	1d1a      	adds	r2, r3, #4
 80036b0:	680b      	ldr	r3, [r1, #0]
 80036b2:	6013      	str	r3, [r2, #0]
 80036b4:	6812      	ldr	r2, [r2, #0]
 80036b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80036ba:	601a      	str	r2, [r3, #0]
    accel[0] = accel[1] = accel[2] = 0;
 80036bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80036c0:	f103 0108 	add.w	r1, r3, #8
 80036c4:	2300      	movs	r3, #0
 80036c6:	600b      	str	r3, [r1, #0]
 80036c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80036cc:	1d1a      	adds	r2, r3, #4
 80036ce:	680b      	ldr	r3, [r1, #0]
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	6812      	ldr	r2, [r2, #0]
 80036d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80036d8:	601a      	str	r2, [r3, #0]

    for (ii = 0; ii < packet_count; ii++) {
 80036da:	2300      	movs	r3, #0
 80036dc:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 80036e0:	e0b1      	b.n	8003846 <get_st_biases+0x5a2>
        short accel_cur[3], gyro_cur[3];
        if (i2c_read(st.hw->addr, st.reg->fifo_r_w, MAX_PACKET_LENGTH, data))
 80036e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003718 <get_st_biases+0x474>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	4619      	mov	r1, r3
 80036ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003718 <get_st_biases+0x474>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	7b5b      	ldrb	r3, [r3, #13]
 80036f0:	461a      	mov	r2, r3
 80036f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80036f6:	9302      	str	r3, [sp, #8]
 80036f8:	230c      	movs	r3, #12
 80036fa:	9301      	str	r3, [sp, #4]
 80036fc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	2301      	movs	r3, #1
 8003704:	4805      	ldr	r0, [pc, #20]	@ (800371c <get_st_biases+0x478>)
 8003706:	f002 fd7b 	bl	8006200 <HAL_I2C_Mem_Read>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d009      	beq.n	8003724 <get_st_biases+0x480>
            return -1;
 8003710:	f04f 33ff 	mov.w	r3, #4294967295
 8003714:	e1d0      	b.n	8003ab8 <get_st_biases+0x814>
 8003716:	bf00      	nop
 8003718:	20000004 	.word	0x20000004
 800371c:	20000228 	.word	0x20000228
 8003720:	aaaaaaab 	.word	0xaaaaaaab
        accel_cur[0] = ((short)data[0] << 8) | data[1];
 8003724:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 8003728:	b21b      	sxth	r3, r3
 800372a:	021b      	lsls	r3, r3, #8
 800372c:	b21a      	sxth	r2, r3
 800372e:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 8003732:	b21b      	sxth	r3, r3
 8003734:	4313      	orrs	r3, r2
 8003736:	b21b      	sxth	r3, r3
 8003738:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
        accel_cur[1] = ((short)data[2] << 8) | data[3];
 800373c:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 8003740:	b21b      	sxth	r3, r3
 8003742:	021b      	lsls	r3, r3, #8
 8003744:	b21a      	sxth	r2, r3
 8003746:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 800374a:	b21b      	sxth	r3, r3
 800374c:	4313      	orrs	r3, r2
 800374e:	b21b      	sxth	r3, r3
 8003750:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
        accel_cur[2] = ((short)data[4] << 8) | data[5];
 8003754:	f897 30d0 	ldrb.w	r3, [r7, #208]	@ 0xd0
 8003758:	b21b      	sxth	r3, r3
 800375a:	021b      	lsls	r3, r3, #8
 800375c:	b21a      	sxth	r2, r3
 800375e:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 8003762:	b21b      	sxth	r3, r3
 8003764:	4313      	orrs	r3, r2
 8003766:	b21b      	sxth	r3, r3
 8003768:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
        accel[0] += (long)accel_cur[0];
 800376c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	@ 0xc4
 8003776:	441a      	add	r2, r3
 8003778:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800377c:	601a      	str	r2, [r3, #0]
        accel[1] += (long)accel_cur[1];
 800377e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003782:	3304      	adds	r3, #4
 8003784:	6819      	ldr	r1, [r3, #0]
 8003786:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 800378a:	4618      	mov	r0, r3
 800378c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003790:	1d1a      	adds	r2, r3, #4
 8003792:	180b      	adds	r3, r1, r0
 8003794:	6013      	str	r3, [r2, #0]
        accel[2] += (long)accel_cur[2];
 8003796:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800379a:	3308      	adds	r3, #8
 800379c:	6819      	ldr	r1, [r3, #0]
 800379e:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	@ 0xc8
 80037a2:	4618      	mov	r0, r3
 80037a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80037a8:	f103 0208 	add.w	r2, r3, #8
 80037ac:	180b      	adds	r3, r1, r0
 80037ae:	6013      	str	r3, [r2, #0]
        gyro_cur[0] = (((short)data[6] << 8) | data[7]);
 80037b0:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
 80037b4:	b21b      	sxth	r3, r3
 80037b6:	021b      	lsls	r3, r3, #8
 80037b8:	b21a      	sxth	r2, r3
 80037ba:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80037be:	b21b      	sxth	r3, r3
 80037c0:	4313      	orrs	r3, r2
 80037c2:	b21b      	sxth	r3, r3
 80037c4:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
        gyro_cur[1] = (((short)data[8] << 8) | data[9]);
 80037c8:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 80037cc:	b21b      	sxth	r3, r3
 80037ce:	021b      	lsls	r3, r3, #8
 80037d0:	b21a      	sxth	r2, r3
 80037d2:	f897 30d5 	ldrb.w	r3, [r7, #213]	@ 0xd5
 80037d6:	b21b      	sxth	r3, r3
 80037d8:	4313      	orrs	r3, r2
 80037da:	b21b      	sxth	r3, r3
 80037dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
        gyro_cur[2] = (((short)data[10] << 8) | data[11]);
 80037e0:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 80037e4:	b21b      	sxth	r3, r3
 80037e6:	021b      	lsls	r3, r3, #8
 80037e8:	b21a      	sxth	r2, r3
 80037ea:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 80037ee:	b21b      	sxth	r3, r3
 80037f0:	4313      	orrs	r3, r2
 80037f2:	b21b      	sxth	r3, r3
 80037f4:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
        gyro[0] += (long)gyro_cur[0];
 80037f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	@ 0xbc
 8003802:	441a      	add	r2, r3
 8003804:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003808:	601a      	str	r2, [r3, #0]
        gyro[1] += (long)gyro_cur[1];
 800380a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800380e:	3304      	adds	r3, #4
 8003810:	6819      	ldr	r1, [r3, #0]
 8003812:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	@ 0xbe
 8003816:	4618      	mov	r0, r3
 8003818:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800381c:	1d1a      	adds	r2, r3, #4
 800381e:	180b      	adds	r3, r1, r0
 8003820:	6013      	str	r3, [r2, #0]
        gyro[2] += (long)gyro_cur[2];
 8003822:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003826:	3308      	adds	r3, #8
 8003828:	6819      	ldr	r1, [r3, #0]
 800382a:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	@ 0xc0
 800382e:	4618      	mov	r0, r3
 8003830:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003834:	f103 0208 	add.w	r2, r3, #8
 8003838:	180b      	adds	r3, r1, r0
 800383a:	6013      	str	r3, [r2, #0]
    for (ii = 0; ii < packet_count; ii++) {
 800383c:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8003840:	3301      	adds	r3, #1
 8003842:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8003846:	f897 20df 	ldrb.w	r2, [r7, #223]	@ 0xdf
 800384a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800384e:	429a      	cmp	r2, r3
 8003850:	f4ff af47 	bcc.w	80036e2 <get_st_biases+0x43e>
            packet_count);
        /* Don't remove gravity! */
        accel[2] -= 65536L;
    }
#else
    gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / packet_count);
 8003854:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	17da      	asrs	r2, r3, #31
 800385c:	461c      	mov	r4, r3
 800385e:	4615      	mov	r5, r2
 8003860:	1423      	asrs	r3, r4, #16
 8003862:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003866:	0423      	lsls	r3, r4, #16
 8003868:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800386c:	2283      	movs	r2, #131	@ 0x83
 800386e:	2300      	movs	r3, #0
 8003870:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8003874:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003878:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800387c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8003880:	f7fd fc8c 	bl	800119c <__aeabi_ldivmod>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4610      	mov	r0, r2
 800388a:	4619      	mov	r1, r3
 800388c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003890:	2200      	movs	r2, #0
 8003892:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003896:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800389a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800389e:	f7fd fc7d 	bl	800119c <__aeabi_ldivmod>
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80038aa:	601a      	str	r2, [r3, #0]
    gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / packet_count);
 80038ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80038b0:	3304      	adds	r3, #4
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	17da      	asrs	r2, r3, #31
 80038b6:	4698      	mov	r8, r3
 80038b8:	4691      	mov	r9, r2
 80038ba:	ea4f 4328 	mov.w	r3, r8, asr #16
 80038be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80038c2:	ea4f 4308 	mov.w	r3, r8, lsl #16
 80038c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80038ca:	2283      	movs	r2, #131	@ 0x83
 80038cc:	2300      	movs	r3, #0
 80038ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80038d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80038d6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80038da:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80038de:	f7fd fc5d 	bl	800119c <__aeabi_ldivmod>
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	4610      	mov	r0, r2
 80038e8:	4619      	mov	r1, r3
 80038ea:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80038ee:	2200      	movs	r2, #0
 80038f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80038f4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80038f8:	f7fd fc50 	bl	800119c <__aeabi_ldivmod>
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	4610      	mov	r0, r2
 8003902:	4619      	mov	r1, r3
 8003904:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003908:	1d1a      	adds	r2, r3, #4
 800390a:	4603      	mov	r3, r0
 800390c:	6013      	str	r3, [r2, #0]
    gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / packet_count);
 800390e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003912:	3308      	adds	r3, #8
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	17da      	asrs	r2, r3, #31
 8003918:	469a      	mov	sl, r3
 800391a:	4693      	mov	fp, r2
 800391c:	ea4f 432a 	mov.w	r3, sl, asr #16
 8003920:	677b      	str	r3, [r7, #116]	@ 0x74
 8003922:	ea4f 430a 	mov.w	r3, sl, lsl #16
 8003926:	673b      	str	r3, [r7, #112]	@ 0x70
 8003928:	2283      	movs	r2, #131	@ 0x83
 800392a:	2300      	movs	r3, #0
 800392c:	66ba      	str	r2, [r7, #104]	@ 0x68
 800392e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003930:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8003934:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003938:	f7fd fc30 	bl	800119c <__aeabi_ldivmod>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4610      	mov	r0, r2
 8003942:	4619      	mov	r1, r3
 8003944:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003948:	2200      	movs	r2, #0
 800394a:	663b      	str	r3, [r7, #96]	@ 0x60
 800394c:	667a      	str	r2, [r7, #100]	@ 0x64
 800394e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8003952:	f7fd fc23 	bl	800119c <__aeabi_ldivmod>
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
 800395a:	4610      	mov	r0, r2
 800395c:	4619      	mov	r1, r3
 800395e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003962:	f103 0208 	add.w	r2, r3, #8
 8003966:	4603      	mov	r3, r0
 8003968:	6013      	str	r3, [r2, #0]
    accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens /
 800396a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	17da      	asrs	r2, r3, #31
 8003972:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003974:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003976:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800397a:	460b      	mov	r3, r1
 800397c:	141b      	asrs	r3, r3, #16
 800397e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003980:	460b      	mov	r3, r1
 8003982:	041b      	lsls	r3, r3, #16
 8003984:	653b      	str	r3, [r7, #80]	@ 0x50
 8003986:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800398a:	2300      	movs	r3, #0
 800398c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800398e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003990:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003994:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8003998:	f7fd fc00 	bl	800119c <__aeabi_ldivmod>
 800399c:	4602      	mov	r2, r0
 800399e:	460b      	mov	r3, r1
 80039a0:	4610      	mov	r0, r2
 80039a2:	4619      	mov	r1, r3
 80039a4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80039a8:	2200      	movs	r2, #0
 80039aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80039ac:	647a      	str	r2, [r7, #68]	@ 0x44
 80039ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80039b2:	f7fd fbf3 	bl	800119c <__aeabi_ldivmod>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80039be:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens /
 80039c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80039c4:	3304      	adds	r3, #4
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	17da      	asrs	r2, r3, #31
 80039ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80039ce:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80039d2:	460b      	mov	r3, r1
 80039d4:	141b      	asrs	r3, r3, #16
 80039d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80039d8:	460b      	mov	r3, r1
 80039da:	041b      	lsls	r3, r3, #16
 80039dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80039de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039e2:	2300      	movs	r3, #0
 80039e4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80039e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039ec:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80039f0:	f7fd fbd4 	bl	800119c <__aeabi_ldivmod>
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
 80039f8:	4610      	mov	r0, r2
 80039fa:	4619      	mov	r1, r3
 80039fc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003a00:	2200      	movs	r2, #0
 8003a02:	623b      	str	r3, [r7, #32]
 8003a04:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a0a:	f7fd fbc7 	bl	800119c <__aeabi_ldivmod>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	460b      	mov	r3, r1
 8003a12:	4610      	mov	r0, r2
 8003a14:	4619      	mov	r1, r3
 8003a16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens /
 8003a20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003a24:	3308      	adds	r3, #8
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	17da      	asrs	r2, r3, #31
 8003a2a:	61bb      	str	r3, [r7, #24]
 8003a2c:	61fa      	str	r2, [r7, #28]
 8003a2e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003a32:	460b      	mov	r3, r1
 8003a34:	141b      	asrs	r3, r3, #16
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	041b      	lsls	r3, r3, #16
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a42:	2300      	movs	r3, #0
 8003a44:	60ba      	str	r2, [r7, #8]
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a50:	f7fd fba4 	bl	800119c <__aeabi_ldivmod>
 8003a54:	4602      	mov	r2, r0
 8003a56:	460b      	mov	r3, r1
 8003a58:	4610      	mov	r0, r2
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003a60:	2200      	movs	r2, #0
 8003a62:	603b      	str	r3, [r7, #0]
 8003a64:	607a      	str	r2, [r7, #4]
 8003a66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a6a:	f7fd fb97 	bl	800119c <__aeabi_ldivmod>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	4610      	mov	r0, r2
 8003a74:	4619      	mov	r1, r3
 8003a76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003a7a:	3308      	adds	r3, #8
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	601a      	str	r2, [r3, #0]
        packet_count);
    /* Don't remove gravity! */
    if (accel[2] > 0L)
 8003a80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003a84:	3308      	adds	r3, #8
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	dd0a      	ble.n	8003aa2 <get_st_biases+0x7fe>
        accel[2] -= 65536L;
 8003a8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003a90:	3308      	adds	r3, #8
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003a98:	3308      	adds	r3, #8
 8003a9a:	f5a2 3280 	sub.w	r2, r2, #65536	@ 0x10000
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	e009      	b.n	8003ab6 <get_st_biases+0x812>
    else
        accel[2] += 65536L;
 8003aa2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003aa6:	3308      	adds	r3, #8
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003aae:	3308      	adds	r3, #8
 8003ab0:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 8003ab4:	601a      	str	r2, [r3, #0]
#endif

    return 0;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	37e0      	adds	r7, #224	@ 0xe0
 8003abc:	46bd      	mov	sp, r7
 8003abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ac2:	bf00      	nop

08003ac4 <mpu_run_self_test>:
 *  @param[out] gyro        Gyro biases in q16 format.
 *  @param[out] accel       Accel biases (if applicable) in q16 format.
 *  @return     Result mask (see above).
 */
int mpu_run_self_test(long *gyro, long *accel)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08e      	sub	sp, #56	@ 0x38
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
#ifdef MPU6050
    const unsigned char tries = 2;
 8003ace:	2302      	movs	r3, #2
 8003ad0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int result;
    unsigned char accel_fsr, fifo_sensors, sensors_on;
    unsigned short gyro_fsr, sample_rate, lpf;
    unsigned char dmp_was_on;

    if (st.chip_cfg.dmp_on) {
 8003ad4:	4b64      	ldr	r3, [pc, #400]	@ (8003c68 <mpu_run_self_test+0x1a4>)
 8003ad6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d006      	beq.n	8003aec <mpu_run_self_test+0x28>
        mpu_set_dmp_state(0);
 8003ade:	2000      	movs	r0, #0
 8003ae0:	f000 fa18 	bl	8003f14 <mpu_set_dmp_state>
        dmp_was_on = 1;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003aea:	e002      	b.n	8003af2 <mpu_run_self_test+0x2e>
    } else
        dmp_was_on = 0;
 8003aec:	2300      	movs	r3, #0
 8003aee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Get initial settings. */
    mpu_get_gyro_fsr(&gyro_fsr);
 8003af2:	f107 030c 	add.w	r3, r7, #12
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fe fc3a 	bl	8002370 <mpu_get_gyro_fsr>
    mpu_get_accel_fsr(&accel_fsr);
 8003afc:	f107 030f 	add.w	r3, r7, #15
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fe fcc9 	bl	8002498 <mpu_get_accel_fsr>
    mpu_get_lpf(&lpf);
 8003b06:	f107 0308 	add.w	r3, r7, #8
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fe fd70 	bl	80025f0 <mpu_get_lpf>
    mpu_get_sample_rate(&sample_rate);
 8003b10:	f107 030a 	add.w	r3, r7, #10
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7fe fe01 	bl	800271c <mpu_get_sample_rate>
    sensors_on = st.chip_cfg.sensors;
 8003b1a:	4b53      	ldr	r3, [pc, #332]	@ (8003c68 <mpu_run_self_test+0x1a4>)
 8003b1c:	7a9b      	ldrb	r3, [r3, #10]
 8003b1e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    mpu_get_fifo_config(&fifo_sensors);
 8003b22:	f107 030e 	add.w	r3, r7, #14
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fe fef6 	bl	8002918 <mpu_get_fifo_config>

    /* For older chips, the self-test will be different. */
#if defined MPU6050
    for (ii = 0; ii < tries; ii++)
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b30:	e00a      	b.n	8003b48 <mpu_run_self_test+0x84>
        if (!get_st_biases(gyro, accel, 0))
 8003b32:	2200      	movs	r2, #0
 8003b34:	6839      	ldr	r1, [r7, #0]
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7ff fbb4 	bl	80032a4 <get_st_biases>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d008      	beq.n	8003b54 <mpu_run_self_test+0x90>
    for (ii = 0; ii < tries; ii++)
 8003b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b44:	3301      	adds	r3, #1
 8003b46:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b48:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003b4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	dbef      	blt.n	8003b32 <mpu_run_self_test+0x6e>
 8003b52:	e000      	b.n	8003b56 <mpu_run_self_test+0x92>
            break;
 8003b54:	bf00      	nop
    if (ii == tries) {
 8003b56:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003b5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d102      	bne.n	8003b66 <mpu_run_self_test+0xa2>
        /* If we reach this point, we most likely encountered an I2C error.
         * We'll just report an error for all three sensors.
         */
        result = 0;
 8003b60:	2300      	movs	r3, #0
 8003b62:	633b      	str	r3, [r7, #48]	@ 0x30
        goto restore;
 8003b64:	e045      	b.n	8003bf2 <mpu_run_self_test+0x12e>
    }
    for (ii = 0; ii < tries; ii++)
 8003b66:	2300      	movs	r3, #0
 8003b68:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b6a:	e00d      	b.n	8003b88 <mpu_run_self_test+0xc4>
        if (!get_st_biases(gyro_st, accel_st, 1))
 8003b6c:	f107 0110 	add.w	r1, r7, #16
 8003b70:	f107 031c 	add.w	r3, r7, #28
 8003b74:	2201      	movs	r2, #1
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff fb94 	bl	80032a4 <get_st_biases>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d008      	beq.n	8003b94 <mpu_run_self_test+0xd0>
    for (ii = 0; ii < tries; ii++)
 8003b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b84:	3301      	adds	r3, #1
 8003b86:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b88:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003b8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	dbec      	blt.n	8003b6c <mpu_run_self_test+0xa8>
 8003b92:	e000      	b.n	8003b96 <mpu_run_self_test+0xd2>
            break;
 8003b94:	bf00      	nop
    if (ii == tries) {
 8003b96:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003b9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d102      	bne.n	8003ba6 <mpu_run_self_test+0xe2>
        /* Again, probably an I2C error. */
        result = 0;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	633b      	str	r3, [r7, #48]	@ 0x30
        goto restore;
 8003ba4:	e025      	b.n	8003bf2 <mpu_run_self_test+0x12e>
    }
    accel_result = accel_self_test(accel, accel_st);
 8003ba6:	f107 0310 	add.w	r3, r7, #16
 8003baa:	4619      	mov	r1, r3
 8003bac:	6838      	ldr	r0, [r7, #0]
 8003bae:	f7ff fa2f 	bl	8003010 <accel_self_test>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    gyro_result = gyro_self_test(gyro, gyro_st);
 8003bb8:	f107 031c 	add.w	r3, r7, #28
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7ff faaa 	bl	8003118 <gyro_self_test>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    result = 0;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	633b      	str	r3, [r7, #48]	@ 0x30
    if (!gyro_result)
 8003bce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d103      	bne.n	8003bde <mpu_run_self_test+0x11a>
        result |= 0x01;
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd8:	f043 0301 	orr.w	r3, r3, #1
 8003bdc:	633b      	str	r3, [r7, #48]	@ 0x30
    if (!accel_result)
 8003bde:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d104      	bne.n	8003bf0 <mpu_run_self_test+0x12c>
        result |= 0x02;
 8003be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be8:	f043 0302 	orr.w	r3, r3, #2
 8003bec:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bee:	e000      	b.n	8003bf2 <mpu_run_self_test+0x12e>
//    if (!compass_result)
//        result |= 0x04;
//#else
//        result |= 0x04;
//#endif
restore:
 8003bf0:	bf00      	nop
     */
    get_st_biases(gyro, accel, 0);
    result = 0x7;
#endif
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.gyro_fsr = 0xFF;
 8003bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8003c68 <mpu_run_self_test+0x1a4>)
 8003bf4:	22ff      	movs	r2, #255	@ 0xff
 8003bf6:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 8003bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c68 <mpu_run_self_test+0x1a4>)
 8003bfa:	22ff      	movs	r2, #255	@ 0xff
 8003bfc:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 8003bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8003c68 <mpu_run_self_test+0x1a4>)
 8003c00:	22ff      	movs	r2, #255	@ 0xff
 8003c02:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8003c04:	4b18      	ldr	r3, [pc, #96]	@ (8003c68 <mpu_run_self_test+0x1a4>)
 8003c06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c0a:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.sensors = 0xFF;
 8003c0c:	4b16      	ldr	r3, [pc, #88]	@ (8003c68 <mpu_run_self_test+0x1a4>)
 8003c0e:	22ff      	movs	r2, #255	@ 0xff
 8003c10:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.fifo_enable = 0xFF;
 8003c12:	4b15      	ldr	r3, [pc, #84]	@ (8003c68 <mpu_run_self_test+0x1a4>)
 8003c14:	22ff      	movs	r2, #255	@ 0xff
 8003c16:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8003c18:	4b13      	ldr	r3, [pc, #76]	@ (8003c68 <mpu_run_self_test+0x1a4>)
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	731a      	strb	r2, [r3, #12]
    mpu_set_gyro_fsr(gyro_fsr);
 8003c1e:	89bb      	ldrh	r3, [r7, #12]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fe fbd9 	bl	80023d8 <mpu_set_gyro_fsr>
    mpu_set_accel_fsr(accel_fsr);
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7fe fc6f 	bl	800250c <mpu_set_accel_fsr>
    mpu_set_lpf(lpf);
 8003c2e:	893b      	ldrh	r3, [r7, #8]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7fe fd19 	bl	8002668 <mpu_set_lpf>
    mpu_set_sample_rate(sample_rate);
 8003c36:	897b      	ldrh	r3, [r7, #10]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fe fd87 	bl	800274c <mpu_set_sample_rate>
    mpu_set_sensors(sensors_on);
 8003c3e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fe feca 	bl	80029dc <mpu_set_sensors>
    mpu_configure_fifo(fifo_sensors);
 8003c48:	7bbb      	ldrb	r3, [r7, #14]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fe fe74 	bl	8002938 <mpu_configure_fifo>

    if (dmp_was_on)
 8003c50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <mpu_run_self_test+0x19a>
        mpu_set_dmp_state(1);
 8003c58:	2001      	movs	r0, #1
 8003c5a:	f000 f95b 	bl	8003f14 <mpu_set_dmp_state>

    return result;
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3738      	adds	r7, #56	@ 0x38
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	20000004 	.word	0x20000004

08003c6c <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b088      	sub	sp, #32
 8003c70:	af04      	add	r7, sp, #16
 8003c72:	4603      	mov	r3, r0
 8003c74:	603a      	str	r2, [r7, #0]
 8003c76:	80fb      	strh	r3, [r7, #6]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d102      	bne.n	8003c88 <mpu_write_mem+0x1c>
        return -1;
 8003c82:	f04f 33ff 	mov.w	r3, #4294967295
 8003c86:	e04e      	b.n	8003d26 <mpu_write_mem+0xba>
    if (!st.chip_cfg.sensors)
 8003c88:	4b29      	ldr	r3, [pc, #164]	@ (8003d30 <mpu_write_mem+0xc4>)
 8003c8a:	7a9b      	ldrb	r3, [r3, #10]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d102      	bne.n	8003c96 <mpu_write_mem+0x2a>
        return -1;
 8003c90:	f04f 33ff 	mov.w	r3, #4294967295
 8003c94:	e047      	b.n	8003d26 <mpu_write_mem+0xba>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 8003c96:	88fb      	ldrh	r3, [r7, #6]
 8003c98:	0a1b      	lsrs	r3, r3, #8
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8003ca0:	88fb      	ldrh	r3, [r7, #6]
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 8003ca6:	7b7b      	ldrb	r3, [r7, #13]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	88bb      	ldrh	r3, [r7, #4]
 8003cac:	4413      	add	r3, r2
 8003cae:	4a20      	ldr	r2, [pc, #128]	@ (8003d30 <mpu_write_mem+0xc4>)
 8003cb0:	6852      	ldr	r2, [r2, #4]
 8003cb2:	8952      	ldrh	r2, [r2, #10]
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	dd02      	ble.n	8003cbe <mpu_write_mem+0x52>
        return -1;
 8003cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cbc:	e033      	b.n	8003d26 <mpu_write_mem+0xba>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8003cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8003d30 <mpu_write_mem+0xc4>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d30 <mpu_write_mem+0xc4>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	7edb      	ldrb	r3, [r3, #27]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003cd2:	9302      	str	r3, [sp, #8]
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	9301      	str	r3, [sp, #4]
 8003cd8:	f107 030c 	add.w	r3, r7, #12
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	2301      	movs	r3, #1
 8003ce0:	4814      	ldr	r0, [pc, #80]	@ (8003d34 <mpu_write_mem+0xc8>)
 8003ce2:	f002 f993 	bl	800600c <HAL_I2C_Mem_Write>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <mpu_write_mem+0x86>
        return -1;
 8003cec:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf0:	e019      	b.n	8003d26 <mpu_write_mem+0xba>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 8003cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8003d30 <mpu_write_mem+0xc4>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8003d30 <mpu_write_mem+0xc4>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	7e1b      	ldrb	r3, [r3, #24]
 8003d00:	461a      	mov	r2, r3
 8003d02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d06:	9302      	str	r3, [sp, #8]
 8003d08:	88bb      	ldrh	r3, [r7, #4]
 8003d0a:	9301      	str	r3, [sp, #4]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	2301      	movs	r3, #1
 8003d12:	4808      	ldr	r0, [pc, #32]	@ (8003d34 <mpu_write_mem+0xc8>)
 8003d14:	f002 f97a 	bl	800600c <HAL_I2C_Mem_Write>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d002      	beq.n	8003d24 <mpu_write_mem+0xb8>
        return -1;
 8003d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d22:	e000      	b.n	8003d26 <mpu_write_mem+0xba>
    return 0;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	20000004 	.word	0x20000004
 8003d34:	20000228 	.word	0x20000228

08003d38 <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af04      	add	r7, sp, #16
 8003d3e:	4603      	mov	r3, r0
 8003d40:	603a      	str	r2, [r7, #0]
 8003d42:	80fb      	strh	r3, [r7, #6]
 8003d44:	460b      	mov	r3, r1
 8003d46:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d102      	bne.n	8003d54 <mpu_read_mem+0x1c>
        return -1;
 8003d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d52:	e04e      	b.n	8003df2 <mpu_read_mem+0xba>
    if (!st.chip_cfg.sensors)
 8003d54:	4b29      	ldr	r3, [pc, #164]	@ (8003dfc <mpu_read_mem+0xc4>)
 8003d56:	7a9b      	ldrb	r3, [r3, #10]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d102      	bne.n	8003d62 <mpu_read_mem+0x2a>
        return -1;
 8003d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d60:	e047      	b.n	8003df2 <mpu_read_mem+0xba>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 8003d62:	88fb      	ldrh	r3, [r7, #6]
 8003d64:	0a1b      	lsrs	r3, r3, #8
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8003d6c:	88fb      	ldrh	r3, [r7, #6]
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 8003d72:	7b7b      	ldrb	r3, [r7, #13]
 8003d74:	461a      	mov	r2, r3
 8003d76:	88bb      	ldrh	r3, [r7, #4]
 8003d78:	4413      	add	r3, r2
 8003d7a:	4a20      	ldr	r2, [pc, #128]	@ (8003dfc <mpu_read_mem+0xc4>)
 8003d7c:	6852      	ldr	r2, [r2, #4]
 8003d7e:	8952      	ldrh	r2, [r2, #10]
 8003d80:	4293      	cmp	r3, r2
 8003d82:	dd02      	ble.n	8003d8a <mpu_read_mem+0x52>
        return -1;
 8003d84:	f04f 33ff 	mov.w	r3, #4294967295
 8003d88:	e033      	b.n	8003df2 <mpu_read_mem+0xba>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8003d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8003dfc <mpu_read_mem+0xc4>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	4619      	mov	r1, r3
 8003d92:	4b1a      	ldr	r3, [pc, #104]	@ (8003dfc <mpu_read_mem+0xc4>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	7edb      	ldrb	r3, [r3, #27]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d9e:	9302      	str	r3, [sp, #8]
 8003da0:	2302      	movs	r3, #2
 8003da2:	9301      	str	r3, [sp, #4]
 8003da4:	f107 030c 	add.w	r3, r7, #12
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	2301      	movs	r3, #1
 8003dac:	4814      	ldr	r0, [pc, #80]	@ (8003e00 <mpu_read_mem+0xc8>)
 8003dae:	f002 f92d 	bl	800600c <HAL_I2C_Mem_Write>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <mpu_read_mem+0x86>
        return -1;
 8003db8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dbc:	e019      	b.n	8003df2 <mpu_read_mem+0xba>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 8003dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8003dfc <mpu_read_mem+0xc4>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003dfc <mpu_read_mem+0xc4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	7e1b      	ldrb	r3, [r3, #24]
 8003dcc:	461a      	mov	r2, r3
 8003dce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003dd2:	9302      	str	r3, [sp, #8]
 8003dd4:	88bb      	ldrh	r3, [r7, #4]
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	2301      	movs	r3, #1
 8003dde:	4808      	ldr	r0, [pc, #32]	@ (8003e00 <mpu_read_mem+0xc8>)
 8003de0:	f002 fa0e 	bl	8006200 <HAL_I2C_Mem_Read>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <mpu_read_mem+0xb8>
        return -1;
 8003dea:	f04f 33ff 	mov.w	r3, #4294967295
 8003dee:	e000      	b.n	8003df2 <mpu_read_mem+0xba>
    return 0;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20000004 	.word	0x20000004
 8003e00:	20000228 	.word	0x20000228

08003e04 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08e      	sub	sp, #56	@ 0x38
 8003e08:	af04      	add	r7, sp, #16
 8003e0a:	60b9      	str	r1, [r7, #8]
 8003e0c:	4611      	mov	r1, r2
 8003e0e:	461a      	mov	r2, r3
 8003e10:	4603      	mov	r3, r0
 8003e12:	81fb      	strh	r3, [r7, #14]
 8003e14:	460b      	mov	r3, r1
 8003e16:	81bb      	strh	r3, [r7, #12]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 8003e1c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f0c <mpu_load_firmware+0x108>)
 8003e1e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
 8003e26:	f04f 33ff 	mov.w	r3, #4294967295
 8003e2a:	e06b      	b.n	8003f04 <mpu_load_firmware+0x100>

    if (!firmware)
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d102      	bne.n	8003e38 <mpu_load_firmware+0x34>
        return -1;
 8003e32:	f04f 33ff 	mov.w	r3, #4294967295
 8003e36:	e065      	b.n	8003f04 <mpu_load_firmware+0x100>
    for (ii = 0; ii < length; ii += this_write) {
 8003e38:	2300      	movs	r3, #0
 8003e3a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003e3c:	e034      	b.n	8003ea8 <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
 8003e3e:	89fa      	ldrh	r2, [r7, #14]
 8003e40:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b10      	cmp	r3, #16
 8003e46:	bfa8      	it	ge
 8003e48:	2310      	movge	r3, #16
 8003e4a:	84bb      	strh	r3, [r7, #36]	@ 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 8003e4c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	441a      	add	r2, r3
 8003e52:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8003e54:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff ff08 	bl	8003c6c <mpu_write_mem>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <mpu_load_firmware+0x64>
            return -1;
 8003e62:	f04f 33ff 	mov.w	r3, #4294967295
 8003e66:	e04d      	b.n	8003f04 <mpu_load_firmware+0x100>
        if (mpu_read_mem(ii, this_write, cur))
 8003e68:	f107 0214 	add.w	r2, r7, #20
 8003e6c:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8003e6e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff ff61 	bl	8003d38 <mpu_read_mem>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <mpu_load_firmware+0x7e>
            return -1;
 8003e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e80:	e040      	b.n	8003f04 <mpu_load_firmware+0x100>
        if (memcmp(firmware+ii, cur, this_write))
 8003e82:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	4413      	add	r3, r2
 8003e88:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003e8a:	f107 0114 	add.w	r1, r7, #20
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f004 fd9d 	bl	80089ce <memcmp>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <mpu_load_firmware+0x9c>
            return -2;
 8003e9a:	f06f 0301 	mvn.w	r3, #1
 8003e9e:	e031      	b.n	8003f04 <mpu_load_firmware+0x100>
    for (ii = 0; ii < length; ii += this_write) {
 8003ea0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003ea2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003ea4:	4413      	add	r3, r2
 8003ea6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003ea8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003eaa:	89fb      	ldrh	r3, [r7, #14]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d3c6      	bcc.n	8003e3e <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 8003eb0:	89bb      	ldrh	r3, [r7, #12]
 8003eb2:	0a1b      	lsrs	r3, r3, #8
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
 8003eba:	89bb      	ldrh	r3, [r7, #12]
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 8003ec0:	4b12      	ldr	r3, [pc, #72]	@ (8003f0c <mpu_load_firmware+0x108>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4b10      	ldr	r3, [pc, #64]	@ (8003f0c <mpu_load_firmware+0x108>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	7f5b      	ldrb	r3, [r3, #29]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ed4:	9302      	str	r3, [sp, #8]
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	9301      	str	r3, [sp, #4]
 8003eda:	f107 0310 	add.w	r3, r7, #16
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	480b      	ldr	r0, [pc, #44]	@ (8003f10 <mpu_load_firmware+0x10c>)
 8003ee4:	f002 f892 	bl	800600c <HAL_I2C_Mem_Write>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d002      	beq.n	8003ef4 <mpu_load_firmware+0xf0>
        return -1;
 8003eee:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef2:	e007      	b.n	8003f04 <mpu_load_firmware+0x100>

    st.chip_cfg.dmp_loaded = 1;
 8003ef4:	4b05      	ldr	r3, [pc, #20]	@ (8003f0c <mpu_load_firmware+0x108>)
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 8003efc:	4a03      	ldr	r2, [pc, #12]	@ (8003f0c <mpu_load_firmware+0x108>)
 8003efe:	88fb      	ldrh	r3, [r7, #6]
 8003f00:	84d3      	strh	r3, [r2, #38]	@ 0x26
    return 0;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3728      	adds	r7, #40	@ 0x28
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	20000004 	.word	0x20000004
 8003f10:	20000228 	.word	0x20000228

08003f14 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af04      	add	r7, sp, #16
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 8003f1e:	4b2e      	ldr	r3, [pc, #184]	@ (8003fd8 <mpu_set_dmp_state+0xc4>)
 8003f20:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f24:	79fa      	ldrb	r2, [r7, #7]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d101      	bne.n	8003f2e <mpu_set_dmp_state+0x1a>
        return 0;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	e050      	b.n	8003fd0 <mpu_set_dmp_state+0xbc>

    if (enable) {
 8003f2e:	79fb      	ldrb	r3, [r7, #7]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d02f      	beq.n	8003f94 <mpu_set_dmp_state+0x80>
        if (!st.chip_cfg.dmp_loaded)
 8003f34:	4b28      	ldr	r3, [pc, #160]	@ (8003fd8 <mpu_set_dmp_state+0xc4>)
 8003f36:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d102      	bne.n	8003f44 <mpu_set_dmp_state+0x30>
            return -1;
 8003f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f42:	e045      	b.n	8003fd0 <mpu_set_dmp_state+0xbc>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 8003f44:	2000      	movs	r0, #0
 8003f46:	f7fd fee5 	bl	8001d14 <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	f7fe fe7c 	bl	8002c48 <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 8003f50:	4b21      	ldr	r3, [pc, #132]	@ (8003fd8 <mpu_set_dmp_state+0xc4>)
 8003f52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fe fbf9 	bl	800274c <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8003f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003fd8 <mpu_set_dmp_state+0xc4>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	4619      	mov	r1, r3
 8003f66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f6a:	9302      	str	r3, [sp, #8]
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	9301      	str	r3, [sp, #4]
 8003f70:	f107 030f 	add.w	r3, r7, #15
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	2301      	movs	r3, #1
 8003f78:	2223      	movs	r2, #35	@ 0x23
 8003f7a:	4818      	ldr	r0, [pc, #96]	@ (8003fdc <mpu_set_dmp_state+0xc8>)
 8003f7c:	f002 f846 	bl	800600c <HAL_I2C_Mem_Write>
        st.chip_cfg.dmp_on = 1;
 8003f80:	4b15      	ldr	r3, [pc, #84]	@ (8003fd8 <mpu_set_dmp_state+0xc4>)
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 8003f88:	2001      	movs	r0, #1
 8003f8a:	f7fd fec3 	bl	8001d14 <set_int_enable>
        mpu_reset_fifo();
 8003f8e:	f7fe f87f 	bl	8002090 <mpu_reset_fifo>
 8003f92:	e01c      	b.n	8003fce <mpu_set_dmp_state+0xba>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 8003f94:	2000      	movs	r0, #0
 8003f96:	f7fd febd 	bl	8001d14 <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 8003f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8003fd8 <mpu_set_dmp_state+0xc4>)
 8003f9c:	7c1b      	ldrb	r3, [r3, #16]
 8003f9e:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8003fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8003fd8 <mpu_set_dmp_state+0xc4>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003fac:	9302      	str	r3, [sp, #8]
 8003fae:	2301      	movs	r3, #1
 8003fb0:	9301      	str	r3, [sp, #4]
 8003fb2:	f107 030f 	add.w	r3, r7, #15
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	2301      	movs	r3, #1
 8003fba:	2223      	movs	r2, #35	@ 0x23
 8003fbc:	4807      	ldr	r0, [pc, #28]	@ (8003fdc <mpu_set_dmp_state+0xc8>)
 8003fbe:	f002 f825 	bl	800600c <HAL_I2C_Mem_Write>
        st.chip_cfg.dmp_on = 0;
 8003fc2:	4b05      	ldr	r3, [pc, #20]	@ (8003fd8 <mpu_set_dmp_state+0xc4>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        mpu_reset_fifo();
 8003fca:	f7fe f861 	bl	8002090 <mpu_reset_fifo>
    }
    return 0;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	20000004 	.word	0x20000004
 8003fdc:	20000228 	.word	0x20000228

08003fe0 <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 8003fe4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003fe8:	23c8      	movs	r3, #200	@ 0xc8
 8003fea:	4904      	ldr	r1, [pc, #16]	@ (8003ffc <dmp_load_motion_driver_firmware+0x1c>)
 8003fec:	f640 30f6 	movw	r0, #3062	@ 0xbf6
 8003ff0:	f7ff ff08 	bl	8003e04 <mpu_load_firmware>
 8003ff4:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	0800cd2c 	.word	0x0800cd2c

08004000 <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af00      	add	r7, sp, #0
 8004006:	4603      	mov	r3, r0
 8004008:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 800400a:	4a6e      	ldr	r2, [pc, #440]	@ (80041c4 <dmp_set_orientation+0x1c4>)
 800400c:	f107 0314 	add.w	r3, r7, #20
 8004010:	6812      	ldr	r2, [r2, #0]
 8004012:	4611      	mov	r1, r2
 8004014:	8019      	strh	r1, [r3, #0]
 8004016:	3302      	adds	r3, #2
 8004018:	0c12      	lsrs	r2, r2, #16
 800401a:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 800401c:	4a6a      	ldr	r2, [pc, #424]	@ (80041c8 <dmp_set_orientation+0x1c8>)
 800401e:	f107 0310 	add.w	r3, r7, #16
 8004022:	6812      	ldr	r2, [r2, #0]
 8004024:	4611      	mov	r1, r2
 8004026:	8019      	strh	r1, [r3, #0]
 8004028:	3302      	adds	r3, #2
 800402a:	0c12      	lsrs	r2, r2, #16
 800402c:	701a      	strb	r2, [r3, #0]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 800402e:	4a67      	ldr	r2, [pc, #412]	@ (80041cc <dmp_set_orientation+0x1cc>)
 8004030:	f107 030c 	add.w	r3, r7, #12
 8004034:	6812      	ldr	r2, [r2, #0]
 8004036:	4611      	mov	r1, r2
 8004038:	8019      	strh	r1, [r3, #0]
 800403a:	3302      	adds	r3, #2
 800403c:	0c12      	lsrs	r2, r2, #16
 800403e:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 8004040:	4a63      	ldr	r2, [pc, #396]	@ (80041d0 <dmp_set_orientation+0x1d0>)
 8004042:	f107 0308 	add.w	r3, r7, #8
 8004046:	6812      	ldr	r2, [r2, #0]
 8004048:	4611      	mov	r1, r2
 800404a:	8019      	strh	r1, [r3, #0]
 800404c:	3302      	adds	r3, #2
 800404e:	0c12      	lsrs	r2, r2, #16
 8004050:	701a      	strb	r2, [r3, #0]

    gyro_regs[0] = gyro_axes[orient & 3];
 8004052:	88fb      	ldrh	r3, [r7, #6]
 8004054:	f003 0303 	and.w	r3, r3, #3
 8004058:	3320      	adds	r3, #32
 800405a:	443b      	add	r3, r7
 800405c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004060:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8004062:	88fb      	ldrh	r3, [r7, #6]
 8004064:	08db      	lsrs	r3, r3, #3
 8004066:	b29b      	uxth	r3, r3
 8004068:	f003 0303 	and.w	r3, r3, #3
 800406c:	3320      	adds	r3, #32
 800406e:	443b      	add	r3, r7
 8004070:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004074:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 8004076:	88fb      	ldrh	r3, [r7, #6]
 8004078:	099b      	lsrs	r3, r3, #6
 800407a:	b29b      	uxth	r3, r3
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	3320      	adds	r3, #32
 8004082:	443b      	add	r3, r7
 8004084:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004088:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
 800408a:	88fb      	ldrh	r3, [r7, #6]
 800408c:	f003 0303 	and.w	r3, r3, #3
 8004090:	3320      	adds	r3, #32
 8004092:	443b      	add	r3, r7
 8004094:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004098:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 800409a:	88fb      	ldrh	r3, [r7, #6]
 800409c:	08db      	lsrs	r3, r3, #3
 800409e:	b29b      	uxth	r3, r3
 80040a0:	f003 0303 	and.w	r3, r3, #3
 80040a4:	3320      	adds	r3, #32
 80040a6:	443b      	add	r3, r7
 80040a8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80040ac:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 80040ae:	88fb      	ldrh	r3, [r7, #6]
 80040b0:	099b      	lsrs	r3, r3, #6
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	f003 0303 	and.w	r3, r3, #3
 80040b8:	3320      	adds	r3, #32
 80040ba:	443b      	add	r3, r7
 80040bc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80040c0:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 80040c2:	f107 031c 	add.w	r3, r7, #28
 80040c6:	461a      	mov	r2, r3
 80040c8:	2103      	movs	r1, #3
 80040ca:	f240 4026 	movw	r0, #1062	@ 0x426
 80040ce:	f7ff fdcd 	bl	8003c6c <mpu_write_mem>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <dmp_set_orientation+0xde>
        return -1;
 80040d8:	f04f 33ff 	mov.w	r3, #4294967295
 80040dc:	e06e      	b.n	80041bc <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 80040de:	f107 0318 	add.w	r3, r7, #24
 80040e2:	461a      	mov	r2, r3
 80040e4:	2103      	movs	r1, #3
 80040e6:	f240 402a 	movw	r0, #1066	@ 0x42a
 80040ea:	f7ff fdbf 	bl	8003c6c <mpu_write_mem>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <dmp_set_orientation+0xfa>
        return -1;
 80040f4:	f04f 33ff 	mov.w	r3, #4294967295
 80040f8:	e060      	b.n	80041bc <dmp_set_orientation+0x1bc>

    memcpy(gyro_regs, gyro_sign, 3);
 80040fa:	f107 031c 	add.w	r3, r7, #28
 80040fe:	f107 020c 	add.w	r2, r7, #12
 8004102:	6812      	ldr	r2, [r2, #0]
 8004104:	4611      	mov	r1, r2
 8004106:	8019      	strh	r1, [r3, #0]
 8004108:	3302      	adds	r3, #2
 800410a:	0c12      	lsrs	r2, r2, #16
 800410c:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
 800410e:	f107 0318 	add.w	r3, r7, #24
 8004112:	f107 0208 	add.w	r2, r7, #8
 8004116:	6812      	ldr	r2, [r2, #0]
 8004118:	4611      	mov	r1, r2
 800411a:	8019      	strh	r1, [r3, #0]
 800411c:	3302      	adds	r3, #2
 800411e:	0c12      	lsrs	r2, r2, #16
 8004120:	701a      	strb	r2, [r3, #0]
    if (orient & 4) {
 8004122:	88fb      	ldrh	r3, [r7, #6]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	d009      	beq.n	8004140 <dmp_set_orientation+0x140>
        gyro_regs[0] |= 1;
 800412c:	7f3b      	ldrb	r3, [r7, #28]
 800412e:	f043 0301 	orr.w	r3, r3, #1
 8004132:	b2db      	uxtb	r3, r3
 8004134:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
 8004136:	7e3b      	ldrb	r3, [r7, #24]
 8004138:	f043 0301 	orr.w	r3, r3, #1
 800413c:	b2db      	uxtb	r3, r3
 800413e:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
 8004140:	88fb      	ldrh	r3, [r7, #6]
 8004142:	f003 0320 	and.w	r3, r3, #32
 8004146:	2b00      	cmp	r3, #0
 8004148:	d009      	beq.n	800415e <dmp_set_orientation+0x15e>
        gyro_regs[1] |= 1;
 800414a:	7f7b      	ldrb	r3, [r7, #29]
 800414c:	f043 0301 	orr.w	r3, r3, #1
 8004150:	b2db      	uxtb	r3, r3
 8004152:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
 8004154:	7e7b      	ldrb	r3, [r7, #25]
 8004156:	f043 0301 	orr.w	r3, r3, #1
 800415a:	b2db      	uxtb	r3, r3
 800415c:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
 800415e:	88fb      	ldrh	r3, [r7, #6]
 8004160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004164:	2b00      	cmp	r3, #0
 8004166:	d009      	beq.n	800417c <dmp_set_orientation+0x17c>
        gyro_regs[2] |= 1;
 8004168:	7fbb      	ldrb	r3, [r7, #30]
 800416a:	f043 0301 	orr.w	r3, r3, #1
 800416e:	b2db      	uxtb	r3, r3
 8004170:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
 8004172:	7ebb      	ldrb	r3, [r7, #26]
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	b2db      	uxtb	r3, r3
 800417a:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 800417c:	f107 031c 	add.w	r3, r7, #28
 8004180:	461a      	mov	r2, r3
 8004182:	2103      	movs	r1, #3
 8004184:	f44f 6088 	mov.w	r0, #1088	@ 0x440
 8004188:	f7ff fd70 	bl	8003c6c <mpu_write_mem>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d002      	beq.n	8004198 <dmp_set_orientation+0x198>
        return -1;
 8004192:	f04f 33ff 	mov.w	r3, #4294967295
 8004196:	e011      	b.n	80041bc <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 8004198:	f107 0318 	add.w	r3, r7, #24
 800419c:	461a      	mov	r2, r3
 800419e:	2103      	movs	r1, #3
 80041a0:	f240 4031 	movw	r0, #1073	@ 0x431
 80041a4:	f7ff fd62 	bl	8003c6c <mpu_write_mem>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <dmp_set_orientation+0x1b4>
        return -1;
 80041ae:	f04f 33ff 	mov.w	r3, #4294967295
 80041b2:	e003      	b.n	80041bc <dmp_set_orientation+0x1bc>
    dmp.orient = orient;
 80041b4:	4a07      	ldr	r2, [pc, #28]	@ (80041d4 <dmp_set_orientation+0x1d4>)
 80041b6:	88fb      	ldrh	r3, [r7, #6]
 80041b8:	8113      	strh	r3, [r2, #8]
    return 0;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3720      	adds	r7, #32
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	0800cc74 	.word	0x0800cc74
 80041c8:	0800cc78 	.word	0x0800cc78
 80041cc:	0800cc7c 	.word	0x0800cc7c
 80041d0:	0800cc80 	.word	0x0800cc80
 80041d4:	200002c8 	.word	0x200002c8

080041d8 <dmp_set_gyro_bias>:
 *  overwrite the biases written to this location once a new one is computed.
 *  @param[in]  bias    Gyro biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_gyro_bias(long *bias)
{
 80041d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041dc:	b08c      	sub	sp, #48	@ 0x30
 80041de:	af00      	add	r7, sp, #0
 80041e0:	61f8      	str	r0, [r7, #28]
    long gyro_bias_body[3];
    unsigned char regs[4];

    gyro_bias_body[0] = bias[dmp.orient & 3];
 80041e2:	4b80      	ldr	r3, [pc, #512]	@ (80043e4 <dmp_set_gyro_bias+0x20c>)
 80041e4:	891b      	ldrh	r3, [r3, #8]
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	69fa      	ldr	r2, [r7, #28]
 80041ee:	4413      	add	r3, r2
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (dmp.orient & 4)
 80041f4:	4b7b      	ldr	r3, [pc, #492]	@ (80043e4 <dmp_set_gyro_bias+0x20c>)
 80041f6:	891b      	ldrh	r3, [r3, #8]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <dmp_set_gyro_bias+0x2e>
        gyro_bias_body[0] *= -1;
 8004200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004202:	425b      	negs	r3, r3
 8004204:	627b      	str	r3, [r7, #36]	@ 0x24
    gyro_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 8004206:	4b77      	ldr	r3, [pc, #476]	@ (80043e4 <dmp_set_gyro_bias+0x20c>)
 8004208:	891b      	ldrh	r3, [r3, #8]
 800420a:	08db      	lsrs	r3, r3, #3
 800420c:	b29b      	uxth	r3, r3
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	69fa      	ldr	r2, [r7, #28]
 8004216:	4413      	add	r3, r2
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (dmp.orient & 0x20)
 800421c:	4b71      	ldr	r3, [pc, #452]	@ (80043e4 <dmp_set_gyro_bias+0x20c>)
 800421e:	891b      	ldrh	r3, [r3, #8]
 8004220:	f003 0320 	and.w	r3, r3, #32
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <dmp_set_gyro_bias+0x56>
        gyro_bias_body[1] *= -1;
 8004228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800422a:	425b      	negs	r3, r3
 800422c:	62bb      	str	r3, [r7, #40]	@ 0x28
    gyro_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 800422e:	4b6d      	ldr	r3, [pc, #436]	@ (80043e4 <dmp_set_gyro_bias+0x20c>)
 8004230:	891b      	ldrh	r3, [r3, #8]
 8004232:	099b      	lsrs	r3, r3, #6
 8004234:	b29b      	uxth	r3, r3
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	69fa      	ldr	r2, [r7, #28]
 800423e:	4413      	add	r3, r2
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dmp.orient & 0x100)
 8004244:	4b67      	ldr	r3, [pc, #412]	@ (80043e4 <dmp_set_gyro_bias+0x20c>)
 8004246:	891b      	ldrh	r3, [r3, #8]
 8004248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <dmp_set_gyro_bias+0x7e>
        gyro_bias_body[2] *= -1;
 8004250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004252:	425b      	negs	r3, r3
 8004254:	62fb      	str	r3, [r7, #44]	@ 0x2c
#ifdef EMPL_NO_64BIT
    gyro_bias_body[0] = (long)(((float)gyro_bias_body[0] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[1] = (long)(((float)gyro_bias_body[1] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[2] = (long)(((float)gyro_bias_body[2] * GYRO_SF) / 1073741824.f);
#else
    gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
 8004256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004258:	17da      	asrs	r2, r3, #31
 800425a:	613b      	str	r3, [r7, #16]
 800425c:	617a      	str	r2, [r7, #20]
 800425e:	4b62      	ldr	r3, [pc, #392]	@ (80043e8 <dmp_set_gyro_bias+0x210>)
 8004260:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004264:	460a      	mov	r2, r1
 8004266:	fb03 f202 	mul.w	r2, r3, r2
 800426a:	2300      	movs	r3, #0
 800426c:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8004270:	4601      	mov	r1, r0
 8004272:	fb01 f303 	mul.w	r3, r1, r3
 8004276:	4413      	add	r3, r2
 8004278:	4a5b      	ldr	r2, [pc, #364]	@ (80043e8 <dmp_set_gyro_bias+0x210>)
 800427a:	6939      	ldr	r1, [r7, #16]
 800427c:	fba1 ab02 	umull	sl, fp, r1, r2
 8004280:	445b      	add	r3, fp
 8004282:	469b      	mov	fp, r3
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	f04f 0300 	mov.w	r3, #0
 800428c:	ea4f 729a 	mov.w	r2, sl, lsr #30
 8004290:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 8004294:	ea4f 73ab 	mov.w	r3, fp, asr #30
 8004298:	4613      	mov	r3, r2
 800429a:	627b      	str	r3, [r7, #36]	@ 0x24
    gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
 800429c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429e:	17da      	asrs	r2, r3, #31
 80042a0:	60bb      	str	r3, [r7, #8]
 80042a2:	60fa      	str	r2, [r7, #12]
 80042a4:	4b50      	ldr	r3, [pc, #320]	@ (80043e8 <dmp_set_gyro_bias+0x210>)
 80042a6:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80042aa:	465a      	mov	r2, fp
 80042ac:	fb03 f202 	mul.w	r2, r3, r2
 80042b0:	2300      	movs	r3, #0
 80042b2:	4651      	mov	r1, sl
 80042b4:	fb01 f303 	mul.w	r3, r1, r3
 80042b8:	4413      	add	r3, r2
 80042ba:	4a4b      	ldr	r2, [pc, #300]	@ (80043e8 <dmp_set_gyro_bias+0x210>)
 80042bc:	4651      	mov	r1, sl
 80042be:	fba1 8902 	umull	r8, r9, r1, r2
 80042c2:	444b      	add	r3, r9
 80042c4:	4699      	mov	r9, r3
 80042c6:	f04f 0200 	mov.w	r2, #0
 80042ca:	f04f 0300 	mov.w	r3, #0
 80042ce:	ea4f 7298 	mov.w	r2, r8, lsr #30
 80042d2:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 80042d6:	ea4f 73a9 	mov.w	r3, r9, asr #30
 80042da:	4613      	mov	r3, r2
 80042dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
 80042de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042e0:	17da      	asrs	r2, r3, #31
 80042e2:	603b      	str	r3, [r7, #0]
 80042e4:	607a      	str	r2, [r7, #4]
 80042e6:	4b40      	ldr	r3, [pc, #256]	@ (80043e8 <dmp_set_gyro_bias+0x210>)
 80042e8:	e9d7 8900 	ldrd	r8, r9, [r7]
 80042ec:	464a      	mov	r2, r9
 80042ee:	fb03 f202 	mul.w	r2, r3, r2
 80042f2:	2300      	movs	r3, #0
 80042f4:	4641      	mov	r1, r8
 80042f6:	fb01 f303 	mul.w	r3, r1, r3
 80042fa:	4413      	add	r3, r2
 80042fc:	4a3a      	ldr	r2, [pc, #232]	@ (80043e8 <dmp_set_gyro_bias+0x210>)
 80042fe:	4641      	mov	r1, r8
 8004300:	fba1 4502 	umull	r4, r5, r1, r2
 8004304:	442b      	add	r3, r5
 8004306:	461d      	mov	r5, r3
 8004308:	f04f 0200 	mov.w	r2, #0
 800430c:	f04f 0300 	mov.w	r3, #0
 8004310:	0fa2      	lsrs	r2, r4, #30
 8004312:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8004316:	17ab      	asrs	r3, r5, #30
 8004318:	4613      	mov	r3, r2
 800431a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif

    regs[0] = (unsigned char)((gyro_bias_body[0] >> 24) & 0xFF);
 800431c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431e:	161b      	asrs	r3, r3, #24
 8004320:	b2db      	uxtb	r3, r3
 8004322:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[0] >> 16) & 0xFF);
 8004326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004328:	141b      	asrs	r3, r3, #16
 800432a:	b2db      	uxtb	r3, r3
 800432c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    regs[2] = (unsigned char)((gyro_bias_body[0] >> 8) & 0xFF);
 8004330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004332:	121b      	asrs	r3, r3, #8
 8004334:	b2db      	uxtb	r3, r3
 8004336:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    regs[3] = (unsigned char)(gyro_bias_body[0] & 0xFF);
 800433a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433c:	b2db      	uxtb	r3, r3
 800433e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_X, 4, regs))
 8004342:	f107 0320 	add.w	r3, r7, #32
 8004346:	461a      	mov	r2, r3
 8004348:	2104      	movs	r1, #4
 800434a:	f44f 7074 	mov.w	r0, #976	@ 0x3d0
 800434e:	f7ff fc8d 	bl	8003c6c <mpu_write_mem>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d002      	beq.n	800435e <dmp_set_gyro_bias+0x186>
        return -1;
 8004358:	f04f 33ff 	mov.w	r3, #4294967295
 800435c:	e03c      	b.n	80043d8 <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[1] >> 24) & 0xFF);
 800435e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004360:	161b      	asrs	r3, r3, #24
 8004362:	b2db      	uxtb	r3, r3
 8004364:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[1] >> 16) & 0xFF);
 8004368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800436a:	141b      	asrs	r3, r3, #16
 800436c:	b2db      	uxtb	r3, r3
 800436e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    regs[2] = (unsigned char)((gyro_bias_body[1] >> 8) & 0xFF);
 8004372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004374:	121b      	asrs	r3, r3, #8
 8004376:	b2db      	uxtb	r3, r3
 8004378:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    regs[3] = (unsigned char)(gyro_bias_body[1] & 0xFF);
 800437c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437e:	b2db      	uxtb	r3, r3
 8004380:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
 8004384:	f107 0320 	add.w	r3, r7, #32
 8004388:	461a      	mov	r2, r3
 800438a:	2104      	movs	r1, #4
 800438c:	f44f 7075 	mov.w	r0, #980	@ 0x3d4
 8004390:	f7ff fc6c 	bl	8003c6c <mpu_write_mem>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <dmp_set_gyro_bias+0x1c8>
        return -1;
 800439a:	f04f 33ff 	mov.w	r3, #4294967295
 800439e:	e01b      	b.n	80043d8 <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[2] >> 24) & 0xFF);
 80043a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043a2:	161b      	asrs	r3, r3, #24
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[2] >> 16) & 0xFF);
 80043aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ac:	141b      	asrs	r3, r3, #16
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    regs[2] = (unsigned char)((gyro_bias_body[2] >> 8) & 0xFF);
 80043b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043b6:	121b      	asrs	r3, r3, #8
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    regs[3] = (unsigned char)(gyro_bias_body[2] & 0xFF);
 80043be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
 80043c6:	f107 0320 	add.w	r3, r7, #32
 80043ca:	461a      	mov	r2, r3
 80043cc:	2104      	movs	r1, #4
 80043ce:	f44f 7076 	mov.w	r0, #984	@ 0x3d8
 80043d2:	f7ff fc4b 	bl	8003c6c <mpu_write_mem>
 80043d6:	4603      	mov	r3, r0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3730      	adds	r7, #48	@ 0x30
 80043dc:	46bd      	mov	sp, r7
 80043de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043e2:	bf00      	nop
 80043e4:	200002c8 	.word	0x200002c8
 80043e8:	02cae309 	.word	0x02cae309

080043ec <dmp_set_accel_bias>:
 *  These biases will be removed from the DMP 6-axis quaternion.
 *  @param[in]  bias    Accel biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_accel_bias(long *bias)
{
 80043ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043f0:	b094      	sub	sp, #80	@ 0x50
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6278      	str	r0, [r7, #36]	@ 0x24
    long accel_bias_body[3];
    unsigned char regs[12];
    long long accel_sf;
    unsigned short accel_sens;

    mpu_get_accel_sens(&accel_sens);
 80043f6:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fe fa4e 	bl	800289c <mpu_get_accel_sens>
    accel_sf = (long long)accel_sens << 15;
 8004400:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004402:	b29b      	uxth	r3, r3
 8004404:	2200      	movs	r2, #0
 8004406:	613b      	str	r3, [r7, #16]
 8004408:	617a      	str	r2, [r7, #20]
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	f04f 0300 	mov.w	r3, #0
 8004412:	6979      	ldr	r1, [r7, #20]
 8004414:	03cb      	lsls	r3, r1, #15
 8004416:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800441a:	4684      	mov	ip, r0
 800441c:	ea43 435c 	orr.w	r3, r3, ip, lsr #17
 8004420:	4601      	mov	r1, r0
 8004422:	03ca      	lsls	r2, r1, #15
 8004424:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    //__no_operation();
    __NOP();
 8004428:	bf00      	nop

    accel_bias_body[0] = bias[dmp.orient & 3];
 800442a:	4b72      	ldr	r3, [pc, #456]	@ (80045f4 <dmp_set_accel_bias+0x208>)
 800442c:	891b      	ldrh	r3, [r3, #8]
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004436:	4413      	add	r3, r2
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (dmp.orient & 4)
 800443c:	4b6d      	ldr	r3, [pc, #436]	@ (80045f4 <dmp_set_accel_bias+0x208>)
 800443e:	891b      	ldrh	r3, [r3, #8]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <dmp_set_accel_bias+0x62>
        accel_bias_body[0] *= -1;
 8004448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800444a:	425b      	negs	r3, r3
 800444c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    accel_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 800444e:	4b69      	ldr	r3, [pc, #420]	@ (80045f4 <dmp_set_accel_bias+0x208>)
 8004450:	891b      	ldrh	r3, [r3, #8]
 8004452:	08db      	lsrs	r3, r3, #3
 8004454:	b29b      	uxth	r3, r3
 8004456:	f003 0303 	and.w	r3, r3, #3
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800445e:	4413      	add	r3, r2
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	643b      	str	r3, [r7, #64]	@ 0x40
    if (dmp.orient & 0x20)
 8004464:	4b63      	ldr	r3, [pc, #396]	@ (80045f4 <dmp_set_accel_bias+0x208>)
 8004466:	891b      	ldrh	r3, [r3, #8]
 8004468:	f003 0320 	and.w	r3, r3, #32
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <dmp_set_accel_bias+0x8a>
        accel_bias_body[1] *= -1;
 8004470:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004472:	425b      	negs	r3, r3
 8004474:	643b      	str	r3, [r7, #64]	@ 0x40
    accel_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 8004476:	4b5f      	ldr	r3, [pc, #380]	@ (80045f4 <dmp_set_accel_bias+0x208>)
 8004478:	891b      	ldrh	r3, [r3, #8]
 800447a:	099b      	lsrs	r3, r3, #6
 800447c:	b29b      	uxth	r3, r3
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004486:	4413      	add	r3, r2
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	647b      	str	r3, [r7, #68]	@ 0x44
    if (dmp.orient & 0x100)
 800448c:	4b59      	ldr	r3, [pc, #356]	@ (80045f4 <dmp_set_accel_bias+0x208>)
 800448e:	891b      	ldrh	r3, [r3, #8]
 8004490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <dmp_set_accel_bias+0xb2>
        accel_bias_body[2] *= -1;
 8004498:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800449a:	425b      	negs	r3, r3
 800449c:	647b      	str	r3, [r7, #68]	@ 0x44
#ifdef EMPL_NO_64BIT
    accel_bias_body[0] = (long)(((float)accel_bias_body[0] * accel_sf) / 1073741824.f);
    accel_bias_body[1] = (long)(((float)accel_bias_body[1] * accel_sf) / 1073741824.f);
    accel_bias_body[2] = (long)(((float)accel_bias_body[2] * accel_sf) / 1073741824.f);
#else
    accel_bias_body[0] = (long)(((long long)accel_bias_body[0] * accel_sf) >> 30);
 800449e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044a0:	17da      	asrs	r2, r3, #31
 80044a2:	61bb      	str	r3, [r7, #24]
 80044a4:	61fa      	str	r2, [r7, #28]
 80044a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044a8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80044ac:	460a      	mov	r2, r1
 80044ae:	fb02 f203 	mul.w	r2, r2, r3
 80044b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044b4:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80044b8:	4601      	mov	r1, r0
 80044ba:	fb01 f303 	mul.w	r3, r1, r3
 80044be:	4413      	add	r3, r2
 80044c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044c2:	69b9      	ldr	r1, [r7, #24]
 80044c4:	fba2 ab01 	umull	sl, fp, r2, r1
 80044c8:	445b      	add	r3, fp
 80044ca:	469b      	mov	fp, r3
 80044cc:	f04f 0200 	mov.w	r2, #0
 80044d0:	f04f 0300 	mov.w	r3, #0
 80044d4:	ea4f 729a 	mov.w	r2, sl, lsr #30
 80044d8:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 80044dc:	ea4f 73ab 	mov.w	r3, fp, asr #30
 80044e0:	4613      	mov	r3, r2
 80044e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
 80044e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044e6:	17da      	asrs	r2, r3, #31
 80044e8:	60bb      	str	r3, [r7, #8]
 80044ea:	60fa      	str	r2, [r7, #12]
 80044ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044ee:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80044f2:	465a      	mov	r2, fp
 80044f4:	fb02 f203 	mul.w	r2, r2, r3
 80044f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044fa:	4651      	mov	r1, sl
 80044fc:	fb01 f303 	mul.w	r3, r1, r3
 8004500:	4413      	add	r3, r2
 8004502:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004504:	4651      	mov	r1, sl
 8004506:	fba2 8901 	umull	r8, r9, r2, r1
 800450a:	444b      	add	r3, r9
 800450c:	4699      	mov	r9, r3
 800450e:	f04f 0200 	mov.w	r2, #0
 8004512:	f04f 0300 	mov.w	r3, #0
 8004516:	ea4f 7298 	mov.w	r2, r8, lsr #30
 800451a:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 800451e:	ea4f 73a9 	mov.w	r3, r9, asr #30
 8004522:	4613      	mov	r3, r2
 8004524:	643b      	str	r3, [r7, #64]	@ 0x40
    accel_bias_body[2] = (long)(((long long)accel_bias_body[2] * accel_sf) >> 30);
 8004526:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004528:	17da      	asrs	r2, r3, #31
 800452a:	603b      	str	r3, [r7, #0]
 800452c:	607a      	str	r2, [r7, #4]
 800452e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004530:	e9d7 8900 	ldrd	r8, r9, [r7]
 8004534:	464a      	mov	r2, r9
 8004536:	fb02 f203 	mul.w	r2, r2, r3
 800453a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800453c:	4641      	mov	r1, r8
 800453e:	fb01 f303 	mul.w	r3, r1, r3
 8004542:	4413      	add	r3, r2
 8004544:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004546:	4641      	mov	r1, r8
 8004548:	fba2 4501 	umull	r4, r5, r2, r1
 800454c:	442b      	add	r3, r5
 800454e:	461d      	mov	r5, r3
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	0fa2      	lsrs	r2, r4, #30
 800455a:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 800455e:	17ab      	asrs	r3, r5, #30
 8004560:	4613      	mov	r3, r2
 8004562:	647b      	str	r3, [r7, #68]	@ 0x44
#endif

    regs[0] = (unsigned char)((accel_bias_body[0] >> 24) & 0xFF);
 8004564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004566:	161b      	asrs	r3, r3, #24
 8004568:	b2db      	uxtb	r3, r3
 800456a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    regs[1] = (unsigned char)((accel_bias_body[0] >> 16) & 0xFF);
 800456e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004570:	141b      	asrs	r3, r3, #16
 8004572:	b2db      	uxtb	r3, r3
 8004574:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    regs[2] = (unsigned char)((accel_bias_body[0] >> 8) & 0xFF);
 8004578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800457a:	121b      	asrs	r3, r3, #8
 800457c:	b2db      	uxtb	r3, r3
 800457e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    regs[3] = (unsigned char)(accel_bias_body[0] & 0xFF);
 8004582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004584:	b2db      	uxtb	r3, r3
 8004586:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    regs[4] = (unsigned char)((accel_bias_body[1] >> 24) & 0xFF);
 800458a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800458c:	161b      	asrs	r3, r3, #24
 800458e:	b2db      	uxtb	r3, r3
 8004590:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    regs[5] = (unsigned char)((accel_bias_body[1] >> 16) & 0xFF);
 8004594:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004596:	141b      	asrs	r3, r3, #16
 8004598:	b2db      	uxtb	r3, r3
 800459a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    regs[6] = (unsigned char)((accel_bias_body[1] >> 8) & 0xFF);
 800459e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045a0:	121b      	asrs	r3, r3, #8
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    regs[7] = (unsigned char)(accel_bias_body[1] & 0xFF);
 80045a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    regs[8] = (unsigned char)((accel_bias_body[2] >> 24) & 0xFF);
 80045b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045b2:	161b      	asrs	r3, r3, #24
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    regs[9] = (unsigned char)((accel_bias_body[2] >> 16) & 0xFF);
 80045ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045bc:	141b      	asrs	r3, r3, #16
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    regs[10] = (unsigned char)((accel_bias_body[2] >> 8) & 0xFF);
 80045c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045c6:	121b      	asrs	r3, r3, #8
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    regs[11] = (unsigned char)(accel_bias_body[2] & 0xFF);
 80045ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    return mpu_write_mem(D_ACCEL_BIAS, 12, regs);
 80045d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80045da:	461a      	mov	r2, r3
 80045dc:	210c      	movs	r1, #12
 80045de:	f44f 7025 	mov.w	r0, #660	@ 0x294
 80045e2:	f7ff fb43 	bl	8003c6c <mpu_write_mem>
 80045e6:	4603      	mov	r3, r0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3750      	adds	r7, #80	@ 0x50
 80045ec:	46bd      	mov	sp, r7
 80045ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045f2:	bf00      	nop
 80045f4:	200002c8 	.word	0x200002c8

080045f8 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b088      	sub	sp, #32
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	4603      	mov	r3, r0
 8004600:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8004602:	4a1f      	ldr	r2, [pc, #124]	@ (8004680 <dmp_set_fifo_rate+0x88>)
 8004604:	f107 0310 	add.w	r3, r7, #16
 8004608:	ca07      	ldmia	r2, {r0, r1, r2}
 800460a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 800460e:	88fb      	ldrh	r3, [r7, #6]
 8004610:	2bc8      	cmp	r3, #200	@ 0xc8
 8004612:	d902      	bls.n	800461a <dmp_set_fifo_rate+0x22>
        return -1;
 8004614:	f04f 33ff 	mov.w	r3, #4294967295
 8004618:	e02e      	b.n	8004678 <dmp_set_fifo_rate+0x80>
    div = DMP_SAMPLE_RATE / rate - 1;
 800461a:	88fb      	ldrh	r3, [r7, #6]
 800461c:	22c8      	movs	r2, #200	@ 0xc8
 800461e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004622:	b29b      	uxth	r3, r3
 8004624:	3b01      	subs	r3, #1
 8004626:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 8004628:	8bfb      	ldrh	r3, [r7, #30]
 800462a:	0a1b      	lsrs	r3, r3, #8
 800462c:	b29b      	uxth	r3, r3
 800462e:	b2db      	uxtb	r3, r3
 8004630:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
 8004632:	8bfb      	ldrh	r3, [r7, #30]
 8004634:	b2db      	uxtb	r3, r3
 8004636:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
 8004638:	f107 0308 	add.w	r3, r7, #8
 800463c:	461a      	mov	r2, r3
 800463e:	2102      	movs	r1, #2
 8004640:	f240 2016 	movw	r0, #534	@ 0x216
 8004644:	f7ff fb12 	bl	8003c6c <mpu_write_mem>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <dmp_set_fifo_rate+0x5c>
        return -1;
 800464e:	f04f 33ff 	mov.w	r3, #4294967295
 8004652:	e011      	b.n	8004678 <dmp_set_fifo_rate+0x80>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 8004654:	f107 0310 	add.w	r3, r7, #16
 8004658:	461a      	mov	r2, r3
 800465a:	210c      	movs	r1, #12
 800465c:	f640 20c1 	movw	r0, #2753	@ 0xac1
 8004660:	f7ff fb04 	bl	8003c6c <mpu_write_mem>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d002      	beq.n	8004670 <dmp_set_fifo_rate+0x78>
        return -1;
 800466a:	f04f 33ff 	mov.w	r3, #4294967295
 800466e:	e003      	b.n	8004678 <dmp_set_fifo_rate+0x80>

    dmp.fifo_rate = rate;
 8004670:	4a04      	ldr	r2, [pc, #16]	@ (8004684 <dmp_set_fifo_rate+0x8c>)
 8004672:	88fb      	ldrh	r3, [r7, #6]
 8004674:	8193      	strh	r3, [r2, #12]
    return 0;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3720      	adds	r7, #32
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	0800cc84 	.word	0x0800cc84
 8004684:	200002c8 	.word	0x200002c8

08004688 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	4603      	mov	r3, r0
 8004690:	460a      	mov	r2, r1
 8004692:	71fb      	strb	r3, [r7, #7]
 8004694:	4613      	mov	r3, r2
 8004696:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 8004698:	79fb      	ldrb	r3, [r7, #7]
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <dmp_set_tap_thresh+0x22>
 80046a2:	88bb      	ldrh	r3, [r7, #4]
 80046a4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80046a8:	d902      	bls.n	80046b0 <dmp_set_tap_thresh+0x28>
        return -1;
 80046aa:	f04f 33ff 	mov.w	r3, #4294967295
 80046ae:	e107      	b.n	80048c0 <dmp_set_tap_thresh+0x238>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 80046b0:	88bb      	ldrh	r3, [r7, #4]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fc fb0e 	bl	8000cd4 <__aeabi_ui2f>
 80046b8:	4603      	mov	r3, r0
 80046ba:	4983      	ldr	r1, [pc, #524]	@ (80048c8 <dmp_set_tap_thresh+0x240>)
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fc fc15 	bl	8000eec <__aeabi_fdiv>
 80046c2:	4603      	mov	r3, r0
 80046c4:	613b      	str	r3, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 80046c6:	f107 030b 	add.w	r3, r7, #11
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fd fee4 	bl	8002498 <mpu_get_accel_fsr>
    switch (accel_fsr) {
 80046d0:	7afb      	ldrb	r3, [r7, #11]
 80046d2:	3b02      	subs	r3, #2
 80046d4:	2b0e      	cmp	r3, #14
 80046d6:	d879      	bhi.n	80047cc <dmp_set_tap_thresh+0x144>
 80046d8:	a201      	add	r2, pc, #4	@ (adr r2, 80046e0 <dmp_set_tap_thresh+0x58>)
 80046da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046de:	bf00      	nop
 80046e0:	0800471d 	.word	0x0800471d
 80046e4:	080047cd 	.word	0x080047cd
 80046e8:	08004749 	.word	0x08004749
 80046ec:	080047cd 	.word	0x080047cd
 80046f0:	080047cd 	.word	0x080047cd
 80046f4:	080047cd 	.word	0x080047cd
 80046f8:	08004775 	.word	0x08004775
 80046fc:	080047cd 	.word	0x080047cd
 8004700:	080047cd 	.word	0x080047cd
 8004704:	080047cd 	.word	0x080047cd
 8004708:	080047cd 	.word	0x080047cd
 800470c:	080047cd 	.word	0x080047cd
 8004710:	080047cd 	.word	0x080047cd
 8004714:	080047cd 	.word	0x080047cd
 8004718:	080047a1 	.word	0x080047a1
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 800471c:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8004720:	6938      	ldr	r0, [r7, #16]
 8004722:	f7fc fb2f 	bl	8000d84 <__aeabi_fmul>
 8004726:	4603      	mov	r3, r0
 8004728:	4618      	mov	r0, r3
 800472a:	f7fc fd17 	bl	800115c <__aeabi_f2uiz>
 800472e:	4603      	mov	r3, r0
 8004730:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 8004732:	4966      	ldr	r1, [pc, #408]	@ (80048cc <dmp_set_tap_thresh+0x244>)
 8004734:	6938      	ldr	r0, [r7, #16]
 8004736:	f7fc fb25 	bl	8000d84 <__aeabi_fmul>
 800473a:	4603      	mov	r3, r0
 800473c:	4618      	mov	r0, r3
 800473e:	f7fc fd0d 	bl	800115c <__aeabi_f2uiz>
 8004742:	4603      	mov	r3, r0
 8004744:	82bb      	strh	r3, [r7, #20]
        break;
 8004746:	e044      	b.n	80047d2 <dmp_set_tap_thresh+0x14a>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 8004748:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 800474c:	6938      	ldr	r0, [r7, #16]
 800474e:	f7fc fb19 	bl	8000d84 <__aeabi_fmul>
 8004752:	4603      	mov	r3, r0
 8004754:	4618      	mov	r0, r3
 8004756:	f7fc fd01 	bl	800115c <__aeabi_f2uiz>
 800475a:	4603      	mov	r3, r0
 800475c:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 800475e:	495c      	ldr	r1, [pc, #368]	@ (80048d0 <dmp_set_tap_thresh+0x248>)
 8004760:	6938      	ldr	r0, [r7, #16]
 8004762:	f7fc fb0f 	bl	8000d84 <__aeabi_fmul>
 8004766:	4603      	mov	r3, r0
 8004768:	4618      	mov	r0, r3
 800476a:	f7fc fcf7 	bl	800115c <__aeabi_f2uiz>
 800476e:	4603      	mov	r3, r0
 8004770:	82bb      	strh	r3, [r7, #20]
        break;
 8004772:	e02e      	b.n	80047d2 <dmp_set_tap_thresh+0x14a>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 8004774:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8004778:	6938      	ldr	r0, [r7, #16]
 800477a:	f7fc fb03 	bl	8000d84 <__aeabi_fmul>
 800477e:	4603      	mov	r3, r0
 8004780:	4618      	mov	r0, r3
 8004782:	f7fc fceb 	bl	800115c <__aeabi_f2uiz>
 8004786:	4603      	mov	r3, r0
 8004788:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 800478a:	4952      	ldr	r1, [pc, #328]	@ (80048d4 <dmp_set_tap_thresh+0x24c>)
 800478c:	6938      	ldr	r0, [r7, #16]
 800478e:	f7fc faf9 	bl	8000d84 <__aeabi_fmul>
 8004792:	4603      	mov	r3, r0
 8004794:	4618      	mov	r0, r3
 8004796:	f7fc fce1 	bl	800115c <__aeabi_f2uiz>
 800479a:	4603      	mov	r3, r0
 800479c:	82bb      	strh	r3, [r7, #20]
        break;
 800479e:	e018      	b.n	80047d2 <dmp_set_tap_thresh+0x14a>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 80047a0:	f04f 418a 	mov.w	r1, #1157627904	@ 0x45000000
 80047a4:	6938      	ldr	r0, [r7, #16]
 80047a6:	f7fc faed 	bl	8000d84 <__aeabi_fmul>
 80047aa:	4603      	mov	r3, r0
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7fc fcd5 	bl	800115c <__aeabi_f2uiz>
 80047b2:	4603      	mov	r3, r0
 80047b4:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 80047b6:	4948      	ldr	r1, [pc, #288]	@ (80048d8 <dmp_set_tap_thresh+0x250>)
 80047b8:	6938      	ldr	r0, [r7, #16]
 80047ba:	f7fc fae3 	bl	8000d84 <__aeabi_fmul>
 80047be:	4603      	mov	r3, r0
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7fc fccb 	bl	800115c <__aeabi_f2uiz>
 80047c6:	4603      	mov	r3, r0
 80047c8:	82bb      	strh	r3, [r7, #20]
        break;
 80047ca:	e002      	b.n	80047d2 <dmp_set_tap_thresh+0x14a>
    default:
        return -1;
 80047cc:	f04f 33ff 	mov.w	r3, #4294967295
 80047d0:	e076      	b.n	80048c0 <dmp_set_tap_thresh+0x238>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 80047d2:	8afb      	ldrh	r3, [r7, #22]
 80047d4:	0a1b      	lsrs	r3, r3, #8
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 80047dc:	8afb      	ldrh	r3, [r7, #22]
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 80047e2:	8abb      	ldrh	r3, [r7, #20]
 80047e4:	0a1b      	lsrs	r3, r3, #8
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 80047ec:	8abb      	ldrh	r3, [r7, #20]
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
 80047f2:	79fb      	ldrb	r3, [r7, #7]
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d01c      	beq.n	8004836 <dmp_set_tap_thresh+0x1ae>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 80047fc:	f107 030c 	add.w	r3, r7, #12
 8004800:	461a      	mov	r2, r3
 8004802:	2102      	movs	r1, #2
 8004804:	f44f 70ea 	mov.w	r0, #468	@ 0x1d4
 8004808:	f7ff fa30 	bl	8003c6c <mpu_write_mem>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <dmp_set_tap_thresh+0x190>
            return -1;
 8004812:	f04f 33ff 	mov.w	r3, #4294967295
 8004816:	e053      	b.n	80048c0 <dmp_set_tap_thresh+0x238>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 8004818:	f107 030c 	add.w	r3, r7, #12
 800481c:	3302      	adds	r3, #2
 800481e:	461a      	mov	r2, r3
 8004820:	2102      	movs	r1, #2
 8004822:	f44f 7092 	mov.w	r0, #292	@ 0x124
 8004826:	f7ff fa21 	bl	8003c6c <mpu_write_mem>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d002      	beq.n	8004836 <dmp_set_tap_thresh+0x1ae>
            return -1;
 8004830:	f04f 33ff 	mov.w	r3, #4294967295
 8004834:	e044      	b.n	80048c0 <dmp_set_tap_thresh+0x238>
    }
    if (axis & TAP_Y) {
 8004836:	79fb      	ldrb	r3, [r7, #7]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d01c      	beq.n	800487a <dmp_set_tap_thresh+0x1f2>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 8004840:	f107 030c 	add.w	r3, r7, #12
 8004844:	461a      	mov	r2, r3
 8004846:	2102      	movs	r1, #2
 8004848:	f44f 70ec 	mov.w	r0, #472	@ 0x1d8
 800484c:	f7ff fa0e 	bl	8003c6c <mpu_write_mem>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <dmp_set_tap_thresh+0x1d4>
            return -1;
 8004856:	f04f 33ff 	mov.w	r3, #4294967295
 800485a:	e031      	b.n	80048c0 <dmp_set_tap_thresh+0x238>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 800485c:	f107 030c 	add.w	r3, r7, #12
 8004860:	3302      	adds	r3, #2
 8004862:	461a      	mov	r2, r3
 8004864:	2102      	movs	r1, #2
 8004866:	f44f 7094 	mov.w	r0, #296	@ 0x128
 800486a:	f7ff f9ff 	bl	8003c6c <mpu_write_mem>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <dmp_set_tap_thresh+0x1f2>
            return -1;
 8004874:	f04f 33ff 	mov.w	r3, #4294967295
 8004878:	e022      	b.n	80048c0 <dmp_set_tap_thresh+0x238>
    }
    if (axis & TAP_Z) {
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b00      	cmp	r3, #0
 8004882:	d01c      	beq.n	80048be <dmp_set_tap_thresh+0x236>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 8004884:	f107 030c 	add.w	r3, r7, #12
 8004888:	461a      	mov	r2, r3
 800488a:	2102      	movs	r1, #2
 800488c:	f44f 70ee 	mov.w	r0, #476	@ 0x1dc
 8004890:	f7ff f9ec 	bl	8003c6c <mpu_write_mem>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <dmp_set_tap_thresh+0x218>
            return -1;
 800489a:	f04f 33ff 	mov.w	r3, #4294967295
 800489e:	e00f      	b.n	80048c0 <dmp_set_tap_thresh+0x238>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 80048a0:	f107 030c 	add.w	r3, r7, #12
 80048a4:	3302      	adds	r3, #2
 80048a6:	461a      	mov	r2, r3
 80048a8:	2102      	movs	r1, #2
 80048aa:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80048ae:	f7ff f9dd 	bl	8003c6c <mpu_write_mem>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <dmp_set_tap_thresh+0x236>
            return -1;
 80048b8:	f04f 33ff 	mov.w	r3, #4294967295
 80048bc:	e000      	b.n	80048c0 <dmp_set_tap_thresh+0x238>
    }
    return 0;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3718      	adds	r7, #24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	43480000 	.word	0x43480000
 80048cc:	46400000 	.word	0x46400000
 80048d0:	45c00000 	.word	0x45c00000
 80048d4:	45400000 	.word	0x45400000
 80048d8:	44c00000 	.word	0x44c00000

080048dc <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	4603      	mov	r3, r0
 80048e4:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
 80048e6:	2300      	movs	r3, #0
 80048e8:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 80048ea:	79fb      	ldrb	r3, [r7, #7]
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d004      	beq.n	80048fe <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
 80048f6:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
 80048fe:	79fb      	ldrb	r3, [r7, #7]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d004      	beq.n	8004912 <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
 8004908:	7bfb      	ldrb	r3, [r7, #15]
 800490a:	f043 030c 	orr.w	r3, r3, #12
 800490e:	b2db      	uxtb	r3, r3
 8004910:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
 8004912:	79fb      	ldrb	r3, [r7, #7]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	d004      	beq.n	8004926 <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
 800491c:	7bfb      	ldrb	r3, [r7, #15]
 800491e:	f043 0303 	orr.w	r3, r3, #3
 8004922:	b2db      	uxtb	r3, r3
 8004924:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
 8004926:	f107 030f 	add.w	r3, r7, #15
 800492a:	461a      	mov	r2, r3
 800492c:	2101      	movs	r1, #1
 800492e:	f44f 70a4 	mov.w	r0, #328	@ 0x148
 8004932:	f7ff f99b 	bl	8003c6c <mpu_write_mem>
 8004936:	4603      	mov	r3, r0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	4603      	mov	r3, r0
 8004948:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
 800494a:	79fb      	ldrb	r3, [r7, #7]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d102      	bne.n	8004956 <dmp_set_tap_count+0x16>
        min_taps = 1;
 8004950:	2301      	movs	r3, #1
 8004952:	71fb      	strb	r3, [r7, #7]
 8004954:	e004      	b.n	8004960 <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
 8004956:	79fb      	ldrb	r3, [r7, #7]
 8004958:	2b04      	cmp	r3, #4
 800495a:	d901      	bls.n	8004960 <dmp_set_tap_count+0x20>
        min_taps = 4;
 800495c:	2304      	movs	r3, #4
 800495e:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
 8004960:	79fb      	ldrb	r3, [r7, #7]
 8004962:	3b01      	subs	r3, #1
 8004964:	b2db      	uxtb	r3, r3
 8004966:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
 8004968:	f107 030f 	add.w	r3, r7, #15
 800496c:	461a      	mov	r2, r3
 800496e:	2101      	movs	r1, #1
 8004970:	f240 104f 	movw	r0, #335	@ 0x14f
 8004974:	f7ff f97a 	bl	8003c6c <mpu_write_mem>
 8004978:	4603      	mov	r3, r0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
	...

08004984 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	4603      	mov	r3, r0
 800498c:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800498e:	88fb      	ldrh	r3, [r7, #6]
 8004990:	4a0c      	ldr	r2, [pc, #48]	@ (80049c4 <dmp_set_tap_time+0x40>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	089b      	lsrs	r3, r3, #2
 8004998:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 800499a:	89fb      	ldrh	r3, [r7, #14]
 800499c:	0a1b      	lsrs	r3, r3, #8
 800499e:	b29b      	uxth	r3, r3
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 80049a4:	89fb      	ldrh	r3, [r7, #14]
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 80049aa:	f107 030c 	add.w	r3, r7, #12
 80049ae:	461a      	mov	r2, r3
 80049b0:	2102      	movs	r1, #2
 80049b2:	f44f 70ef 	mov.w	r0, #478	@ 0x1de
 80049b6:	f7ff f959 	bl	8003c6c <mpu_write_mem>
 80049ba:	4603      	mov	r3, r0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	cccccccd 	.word	0xcccccccd

080049c8 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	4603      	mov	r3, r0
 80049d0:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 80049d2:	88fb      	ldrh	r3, [r7, #6]
 80049d4:	4a0c      	ldr	r2, [pc, #48]	@ (8004a08 <dmp_set_tap_time_multi+0x40>)
 80049d6:	fba2 2303 	umull	r2, r3, r2, r3
 80049da:	089b      	lsrs	r3, r3, #2
 80049dc:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 80049de:	89fb      	ldrh	r3, [r7, #14]
 80049e0:	0a1b      	lsrs	r3, r3, #8
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 80049e8:	89fb      	ldrh	r3, [r7, #14]
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
 80049ee:	f107 030c 	add.w	r3, r7, #12
 80049f2:	461a      	mov	r2, r3
 80049f4:	2102      	movs	r1, #2
 80049f6:	f44f 70ed 	mov.w	r0, #474	@ 0x1da
 80049fa:	f7ff f937 	bl	8003c6c <mpu_write_mem>
 80049fe:	4603      	mov	r3, r0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	cccccccd 	.word	0xcccccccd

08004a0c <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	460b      	mov	r3, r1
 8004a16:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a13      	ldr	r2, [pc, #76]	@ (8004a68 <dmp_set_shake_reject_thresh+0x5c>)
 8004a1c:	fb82 1203 	smull	r1, r2, r2, r3
 8004a20:	1192      	asrs	r2, r2, #6
 8004a22:	17db      	asrs	r3, r3, #31
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	887a      	ldrh	r2, [r7, #2]
 8004a28:	fb02 f303 	mul.w	r3, r2, r3
 8004a2c:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	161b      	asrs	r3, r3, #24
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	141b      	asrs	r3, r3, #16
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	121b      	asrs	r3, r3, #8
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
 8004a4c:	f107 0308 	add.w	r3, r7, #8
 8004a50:	461a      	mov	r2, r3
 8004a52:	2104      	movs	r1, #4
 8004a54:	f44f 70ae 	mov.w	r0, #348	@ 0x15c
 8004a58:	f7ff f908 	bl	8003c6c <mpu_write_mem>
 8004a5c:	4603      	mov	r3, r0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	10624dd3 	.word	0x10624dd3

08004a6c <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	4603      	mov	r3, r0
 8004a74:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 8004a76:	88fb      	ldrh	r3, [r7, #6]
 8004a78:	4a0c      	ldr	r2, [pc, #48]	@ (8004aac <dmp_set_shake_reject_time+0x40>)
 8004a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7e:	089b      	lsrs	r3, r3, #2
 8004a80:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 8004a82:	88fb      	ldrh	r3, [r7, #6]
 8004a84:	0a1b      	lsrs	r3, r3, #8
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8004a8c:	88fb      	ldrh	r3, [r7, #6]
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
 8004a92:	f107 030c 	add.w	r3, r7, #12
 8004a96:	461a      	mov	r2, r3
 8004a98:	2102      	movs	r1, #2
 8004a9a:	f44f 70ad 	mov.w	r0, #346	@ 0x15a
 8004a9e:	f7ff f8e5 	bl	8003c6c <mpu_write_mem>
 8004aa2:	4603      	mov	r3, r0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	cccccccd 	.word	0xcccccccd

08004ab0 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 8004aba:	88fb      	ldrh	r3, [r7, #6]
 8004abc:	4a0c      	ldr	r2, [pc, #48]	@ (8004af0 <dmp_set_shake_reject_timeout+0x40>)
 8004abe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac2:	089b      	lsrs	r3, r3, #2
 8004ac4:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 8004ac6:	88fb      	ldrh	r3, [r7, #6]
 8004ac8:	0a1b      	lsrs	r3, r3, #8
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8004ad0:	88fb      	ldrh	r3, [r7, #6]
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
 8004ad6:	f107 030c 	add.w	r3, r7, #12
 8004ada:	461a      	mov	r2, r3
 8004adc:	2102      	movs	r1, #2
 8004ade:	f44f 70ac 	mov.w	r0, #344	@ 0x158
 8004ae2:	f7ff f8c3 	bl	8003c6c <mpu_write_mem>
 8004ae6:	4603      	mov	r3, r0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	cccccccd 	.word	0xcccccccd

08004af4 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	4603      	mov	r3, r0
 8004afc:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 8004afe:	2302      	movs	r3, #2
 8004b00:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 8004b02:	23ca      	movs	r3, #202	@ 0xca
 8004b04:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 8004b06:	23e3      	movs	r3, #227	@ 0xe3
 8004b08:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 8004b0a:	2309      	movs	r3, #9
 8004b0c:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
 8004b0e:	f107 030c 	add.w	r3, r7, #12
 8004b12:	461a      	mov	r2, r3
 8004b14:	2104      	movs	r1, #4
 8004b16:	2068      	movs	r0, #104	@ 0x68
 8004b18:	f7ff f8a8 	bl	8003c6c <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 8004b1c:	23a3      	movs	r3, #163	@ 0xa3
 8004b1e:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8004b20:	88fb      	ldrh	r3, [r7, #6]
 8004b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d006      	beq.n	8004b38 <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
 8004b2a:	23c0      	movs	r3, #192	@ 0xc0
 8004b2c:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
 8004b2e:	23c8      	movs	r3, #200	@ 0xc8
 8004b30:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
 8004b32:	23c2      	movs	r3, #194	@ 0xc2
 8004b34:	73fb      	strb	r3, [r7, #15]
 8004b36:	e005      	b.n	8004b44 <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
 8004b38:	23a3      	movs	r3, #163	@ 0xa3
 8004b3a:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
 8004b3c:	23a3      	movs	r3, #163	@ 0xa3
 8004b3e:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
 8004b40:	23a3      	movs	r3, #163	@ 0xa3
 8004b42:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8004b44:	88fb      	ldrh	r3, [r7, #6]
 8004b46:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d006      	beq.n	8004b5c <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
 8004b4e:	23c4      	movs	r3, #196	@ 0xc4
 8004b50:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
 8004b52:	23cc      	movs	r3, #204	@ 0xcc
 8004b54:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
 8004b56:	23c6      	movs	r3, #198	@ 0xc6
 8004b58:	74bb      	strb	r3, [r7, #18]
 8004b5a:	e005      	b.n	8004b68 <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
 8004b5c:	23a3      	movs	r3, #163	@ 0xa3
 8004b5e:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
 8004b60:	23a3      	movs	r3, #163	@ 0xa3
 8004b62:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
 8004b64:	23a3      	movs	r3, #163	@ 0xa3
 8004b66:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
 8004b68:	23a3      	movs	r3, #163	@ 0xa3
 8004b6a:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
 8004b6c:	23a3      	movs	r3, #163	@ 0xa3
 8004b6e:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
 8004b70:	23a3      	movs	r3, #163	@ 0xa3
 8004b72:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
 8004b74:	f107 030c 	add.w	r3, r7, #12
 8004b78:	461a      	mov	r2, r3
 8004b7a:	210a      	movs	r1, #10
 8004b7c:	f640 20a7 	movw	r0, #2727	@ 0xaa7
 8004b80:	f7ff f874 	bl	8003c6c <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8004b84:	88fb      	ldrh	r3, [r7, #6]
 8004b86:	f003 0303 	and.w	r3, r3, #3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
 8004b8e:	2320      	movs	r3, #32
 8004b90:	733b      	strb	r3, [r7, #12]
 8004b92:	e001      	b.n	8004b98 <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
 8004b94:	23d8      	movs	r3, #216	@ 0xd8
 8004b96:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
 8004b98:	f107 030c 	add.w	r3, r7, #12
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	2101      	movs	r1, #1
 8004ba0:	f640 20b6 	movw	r0, #2742	@ 0xab6
 8004ba4:	f7ff f862 	bl	8003c6c <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 8004ba8:	88fb      	ldrh	r3, [r7, #6]
 8004baa:	f003 0320 	and.w	r3, r3, #32
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
 8004bb2:	2001      	movs	r0, #1
 8004bb4:	f000 f8c6 	bl	8004d44 <dmp_enable_gyro_cal>
 8004bb8:	e002      	b.n	8004bc0 <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
 8004bba:	2000      	movs	r0, #0
 8004bbc:	f000 f8c2 	bl	8004d44 <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8004bc0:	88fb      	ldrh	r3, [r7, #6]
 8004bc2:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d01d      	beq.n	8004c06 <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 8004bca:	88fb      	ldrh	r3, [r7, #6]
 8004bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d008      	beq.n	8004be6 <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
 8004bd4:	23b2      	movs	r3, #178	@ 0xb2
 8004bd6:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
 8004bd8:	238b      	movs	r3, #139	@ 0x8b
 8004bda:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
 8004bdc:	23b6      	movs	r3, #182	@ 0xb6
 8004bde:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
 8004be0:	239b      	movs	r3, #155	@ 0x9b
 8004be2:	73fb      	strb	r3, [r7, #15]
 8004be4:	e007      	b.n	8004bf6 <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
 8004be6:	23b0      	movs	r3, #176	@ 0xb0
 8004be8:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
 8004bea:	2380      	movs	r3, #128	@ 0x80
 8004bec:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
 8004bee:	23b4      	movs	r3, #180	@ 0xb4
 8004bf0:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
 8004bf2:	2390      	movs	r3, #144	@ 0x90
 8004bf4:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8004bf6:	f107 030c 	add.w	r3, r7, #12
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	2104      	movs	r1, #4
 8004bfe:	f640 20a2 	movw	r0, #2722	@ 0xaa2
 8004c02:	f7ff f833 	bl	8003c6c <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
 8004c06:	88fb      	ldrh	r3, [r7, #6]
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d025      	beq.n	8004c5c <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
 8004c10:	23f8      	movs	r3, #248	@ 0xf8
 8004c12:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 8004c14:	f107 030c 	add.w	r3, r7, #12
 8004c18:	461a      	mov	r2, r3
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	f44f 600b 	mov.w	r0, #2224	@ 0x8b0
 8004c20:	f7ff f824 	bl	8003c6c <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 8004c24:	21fa      	movs	r1, #250	@ 0xfa
 8004c26:	2007      	movs	r0, #7
 8004c28:	f7ff fd2e 	bl	8004688 <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 8004c2c:	2007      	movs	r0, #7
 8004c2e:	f7ff fe55 	bl	80048dc <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 8004c32:	2001      	movs	r0, #1
 8004c34:	f7ff fe84 	bl	8004940 <dmp_set_tap_count>
        dmp_set_tap_time(100);
 8004c38:	2064      	movs	r0, #100	@ 0x64
 8004c3a:	f7ff fea3 	bl	8004984 <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 8004c3e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004c42:	f7ff fec1 	bl	80049c8 <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 8004c46:	21c8      	movs	r1, #200	@ 0xc8
 8004c48:	483c      	ldr	r0, [pc, #240]	@ (8004d3c <dmp_enable_feature+0x248>)
 8004c4a:	f7ff fedf 	bl	8004a0c <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 8004c4e:	2028      	movs	r0, #40	@ 0x28
 8004c50:	f7ff ff0c 	bl	8004a6c <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 8004c54:	200a      	movs	r0, #10
 8004c56:	f7ff ff2b 	bl	8004ab0 <dmp_set_shake_reject_timeout>
 8004c5a:	e009      	b.n	8004c70 <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
 8004c5c:	23d8      	movs	r3, #216	@ 0xd8
 8004c5e:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 8004c60:	f107 030c 	add.w	r3, r7, #12
 8004c64:	461a      	mov	r2, r3
 8004c66:	2101      	movs	r1, #1
 8004c68:	f44f 600b 	mov.w	r0, #2224	@ 0x8b0
 8004c6c:	f7fe fffe 	bl	8003c6c <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 8004c70:	88fb      	ldrh	r3, [r7, #6]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d002      	beq.n	8004c80 <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
 8004c7a:	23d9      	movs	r3, #217	@ 0xd9
 8004c7c:	733b      	strb	r3, [r7, #12]
 8004c7e:	e001      	b.n	8004c84 <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
 8004c80:	23d8      	movs	r3, #216	@ 0xd8
 8004c82:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 8004c84:	f107 030c 	add.w	r3, r7, #12
 8004c88:	461a      	mov	r2, r3
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	f240 703d 	movw	r0, #1853	@ 0x73d
 8004c90:	f7fe ffec 	bl	8003c6c <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 8004c94:	88fb      	ldrh	r3, [r7, #6]
 8004c96:	f003 0304 	and.w	r3, r3, #4
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
 8004c9e:	2001      	movs	r0, #1
 8004ca0:	f000 f880 	bl	8004da4 <dmp_enable_lp_quat>
 8004ca4:	e002      	b.n	8004cac <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	f000 f87c 	bl	8004da4 <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 8004cac:	88fb      	ldrh	r3, [r7, #6]
 8004cae:	f003 0310 	and.w	r3, r3, #16
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
 8004cb6:	2001      	movs	r0, #1
 8004cb8:	f000 f89b 	bl	8004df2 <dmp_enable_6x_lp_quat>
 8004cbc:	e002      	b.n	8004cc4 <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	f000 f897 	bl	8004df2 <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8004cc4:	88fb      	ldrh	r3, [r7, #6]
 8004cc6:	f043 0308 	orr.w	r3, r3, #8
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	4b1c      	ldr	r3, [pc, #112]	@ (8004d40 <dmp_enable_feature+0x24c>)
 8004cce:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 8004cd0:	f7fd f9de 	bl	8002090 <mpu_reset_fifo>

    dmp.packet_length = 0;
 8004cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8004d40 <dmp_enable_feature+0x24c>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 8004cda:	88fb      	ldrh	r3, [r7, #6]
 8004cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d005      	beq.n	8004cf0 <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
 8004ce4:	4b16      	ldr	r3, [pc, #88]	@ (8004d40 <dmp_enable_feature+0x24c>)
 8004ce6:	7b9b      	ldrb	r3, [r3, #14]
 8004ce8:	3306      	adds	r3, #6
 8004cea:	b2da      	uxtb	r2, r3
 8004cec:	4b14      	ldr	r3, [pc, #80]	@ (8004d40 <dmp_enable_feature+0x24c>)
 8004cee:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 8004cf0:	88fb      	ldrh	r3, [r7, #6]
 8004cf2:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d005      	beq.n	8004d06 <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
 8004cfa:	4b11      	ldr	r3, [pc, #68]	@ (8004d40 <dmp_enable_feature+0x24c>)
 8004cfc:	7b9b      	ldrb	r3, [r3, #14]
 8004cfe:	3306      	adds	r3, #6
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	4b0f      	ldr	r3, [pc, #60]	@ (8004d40 <dmp_enable_feature+0x24c>)
 8004d04:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 8004d06:	88fb      	ldrh	r3, [r7, #6]
 8004d08:	f003 0314 	and.w	r3, r3, #20
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d005      	beq.n	8004d1c <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
 8004d10:	4b0b      	ldr	r3, [pc, #44]	@ (8004d40 <dmp_enable_feature+0x24c>)
 8004d12:	7b9b      	ldrb	r3, [r3, #14]
 8004d14:	3310      	adds	r3, #16
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	4b09      	ldr	r3, [pc, #36]	@ (8004d40 <dmp_enable_feature+0x24c>)
 8004d1a:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8004d1c:	88fb      	ldrh	r3, [r7, #6]
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d005      	beq.n	8004d32 <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
 8004d26:	4b06      	ldr	r3, [pc, #24]	@ (8004d40 <dmp_enable_feature+0x24c>)
 8004d28:	7b9b      	ldrb	r3, [r3, #14]
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	4b04      	ldr	r3, [pc, #16]	@ (8004d40 <dmp_enable_feature+0x24c>)
 8004d30:	739a      	strb	r2, [r3, #14]

    return 0;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3718      	adds	r7, #24
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	02cae309 	.word	0x02cae309
 8004d40:	200002c8 	.word	0x200002c8

08004d44 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b088      	sub	sp, #32
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	71fb      	strb	r3, [r7, #7]
    if (enable) {
 8004d4e:	79fb      	ldrb	r3, [r7, #7]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00f      	beq.n	8004d74 <dmp_enable_gyro_cal+0x30>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8004d54:	4a11      	ldr	r2, [pc, #68]	@ (8004d9c <dmp_enable_gyro_cal+0x58>)
 8004d56:	f107 0314 	add.w	r3, r7, #20
 8004d5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8004d5c:	c303      	stmia	r3!, {r0, r1}
 8004d5e:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8004d60:	f107 0314 	add.w	r3, r7, #20
 8004d64:	461a      	mov	r2, r3
 8004d66:	2109      	movs	r1, #9
 8004d68:	f44f 6097 	mov.w	r0, #1208	@ 0x4b8
 8004d6c:	f7fe ff7e 	bl	8003c6c <mpu_write_mem>
 8004d70:	4603      	mov	r3, r0
 8004d72:	e00e      	b.n	8004d92 <dmp_enable_gyro_cal+0x4e>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8004d74:	4a0a      	ldr	r2, [pc, #40]	@ (8004da0 <dmp_enable_gyro_cal+0x5c>)
 8004d76:	f107 0308 	add.w	r3, r7, #8
 8004d7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8004d7c:	c303      	stmia	r3!, {r0, r1}
 8004d7e:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8004d80:	f107 0308 	add.w	r3, r7, #8
 8004d84:	461a      	mov	r2, r3
 8004d86:	2109      	movs	r1, #9
 8004d88:	f44f 6097 	mov.w	r0, #1208	@ 0x4b8
 8004d8c:	f7fe ff6e 	bl	8003c6c <mpu_write_mem>
 8004d90:	4603      	mov	r3, r0
    }
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3720      	adds	r7, #32
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	0800cc90 	.word	0x0800cc90
 8004da0:	0800cc9c 	.word	0x0800cc9c

08004da4 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	4603      	mov	r3, r0
 8004dac:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 8004dae:	79fb      	ldrb	r3, [r7, #7]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d008      	beq.n	8004dc6 <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
 8004db4:	23c0      	movs	r3, #192	@ 0xc0
 8004db6:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
 8004db8:	23c2      	movs	r3, #194	@ 0xc2
 8004dba:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
 8004dbc:	23c4      	movs	r3, #196	@ 0xc4
 8004dbe:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
 8004dc0:	23c6      	movs	r3, #198	@ 0xc6
 8004dc2:	73fb      	strb	r3, [r7, #15]
 8004dc4:	e006      	b.n	8004dd4 <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
 8004dc6:	f107 030c 	add.w	r3, r7, #12
 8004dca:	2204      	movs	r2, #4
 8004dcc:	218b      	movs	r1, #139	@ 0x8b
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f003 fe0d 	bl	80089ee <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8004dd4:	f107 030c 	add.w	r3, r7, #12
 8004dd8:	461a      	mov	r2, r3
 8004dda:	2104      	movs	r1, #4
 8004ddc:	f640 2098 	movw	r0, #2712	@ 0xa98
 8004de0:	f7fe ff44 	bl	8003c6c <mpu_write_mem>

    return mpu_reset_fifo();
 8004de4:	f7fd f954 	bl	8002090 <mpu_reset_fifo>
 8004de8:	4603      	mov	r3, r0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b084      	sub	sp, #16
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	4603      	mov	r3, r0
 8004dfa:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 8004dfc:	79fb      	ldrb	r3, [r7, #7]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d008      	beq.n	8004e14 <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
 8004e02:	2320      	movs	r3, #32
 8004e04:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
 8004e06:	2328      	movs	r3, #40	@ 0x28
 8004e08:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
 8004e0a:	2330      	movs	r3, #48	@ 0x30
 8004e0c:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
 8004e0e:	2338      	movs	r3, #56	@ 0x38
 8004e10:	73fb      	strb	r3, [r7, #15]
 8004e12:	e006      	b.n	8004e22 <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
 8004e14:	f107 030c 	add.w	r3, r7, #12
 8004e18:	2204      	movs	r2, #4
 8004e1a:	21a3      	movs	r1, #163	@ 0xa3
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f003 fde6 	bl	80089ee <memset>

    mpu_write_mem(CFG_8, 4, regs);
 8004e22:	f107 030c 	add.w	r3, r7, #12
 8004e26:	461a      	mov	r2, r3
 8004e28:	2104      	movs	r1, #4
 8004e2a:	f640 209e 	movw	r0, #2718	@ 0xa9e
 8004e2e:	f7fe ff1d 	bl	8003c6c <mpu_write_mem>

    return mpu_reset_fifo();
 8004e32:	f7fd f92d 	bl	8002090 <mpu_reset_fifo>
 8004e36:	4603      	mov	r3, r0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3303      	adds	r3, #3
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004e52:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	3303      	adds	r3, #3
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e5e:	73bb      	strb	r3, [r7, #14]

    if (gesture[1] & INT_SRC_TAP) {
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3301      	adds	r3, #1
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d012      	beq.n	8004e94 <decode_gesture+0x54>
        unsigned char direction, count;
        direction = tap >> 3;
 8004e6e:	7bbb      	ldrb	r3, [r7, #14]
 8004e70:	08db      	lsrs	r3, r3, #3
 8004e72:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;
 8004e74:	7bbb      	ldrb	r3, [r7, #14]
 8004e76:	f003 0307 	and.w	r3, r3, #7
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	733b      	strb	r3, [r7, #12]
        if (dmp.tap_cb)
 8004e80:	4b10      	ldr	r3, [pc, #64]	@ (8004ec4 <decode_gesture+0x84>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d005      	beq.n	8004e94 <decode_gesture+0x54>
            dmp.tap_cb(direction, count);
 8004e88:	4b0e      	ldr	r3, [pc, #56]	@ (8004ec4 <decode_gesture+0x84>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	7b39      	ldrb	r1, [r7, #12]
 8004e8e:	7b7a      	ldrb	r2, [r7, #13]
 8004e90:	4610      	mov	r0, r2
 8004e92:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3301      	adds	r3, #1
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	f003 0308 	and.w	r3, r3, #8
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00a      	beq.n	8004eb8 <decode_gesture+0x78>
        if (dmp.android_orient_cb)
 8004ea2:	4b08      	ldr	r3, [pc, #32]	@ (8004ec4 <decode_gesture+0x84>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d006      	beq.n	8004eb8 <decode_gesture+0x78>
            dmp.android_orient_cb(android_orient >> 6);
 8004eaa:	4b06      	ldr	r3, [pc, #24]	@ (8004ec4 <decode_gesture+0x84>)
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	7bfa      	ldrb	r2, [r7, #15]
 8004eb0:	0992      	lsrs	r2, r2, #6
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	4798      	blx	r3
    }

    return 0;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	200002c8 	.word	0x200002c8

08004ec8 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b092      	sub	sp, #72	@ 0x48
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
 8004ed4:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
 8004edc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ede:	2200      	movs	r2, #0
 8004ee0:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8004ee2:	4bb2      	ldr	r3, [pc, #712]	@ (80051ac <dmp_read_fifo+0x2e4>)
 8004ee4:	7b9b      	ldrb	r3, [r3, #14]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f107 0320 	add.w	r3, r7, #32
 8004eec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004eee:	4619      	mov	r1, r3
 8004ef0:	f7fd fe0e 	bl	8002b10 <mpu_read_fifo_stream>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <dmp_read_fifo+0x38>
        return -1;
 8004efa:	f04f 33ff 	mov.w	r3, #4294967295
 8004efe:	e150      	b.n	80051a2 <dmp_read_fifo+0x2da>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 8004f00:	4baa      	ldr	r3, [pc, #680]	@ (80051ac <dmp_read_fifo+0x2e4>)
 8004f02:	895b      	ldrh	r3, [r3, #10]
 8004f04:	f003 0314 	and.w	r3, r3, #20
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 808a 	beq.w	8005022 <dmp_read_fifo+0x15a>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8004f0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004f12:	061a      	lsls	r2, r3, #24
 8004f14:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004f18:	041b      	lsls	r3, r3, #16
 8004f1a:	431a      	orrs	r2, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
 8004f1c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8004f20:	021b      	lsls	r3, r3, #8
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8004f22:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
 8004f24:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004f28:	431a      	orrs	r2, r3
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	601a      	str	r2, [r3, #0]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8004f2e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004f32:	061a      	lsls	r2, r3, #24
 8004f34:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004f38:	041b      	lsls	r3, r3, #16
 8004f3a:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8004f3c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004f40:	021b      	lsls	r3, r3, #8
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8004f42:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8004f44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f48:	4619      	mov	r1, r3
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	3304      	adds	r3, #4
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8004f4e:	430a      	orrs	r2, r1
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8004f50:	601a      	str	r2, [r3, #0]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8004f52:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004f56:	061a      	lsls	r2, r3, #24
 8004f58:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004f5c:	041b      	lsls	r3, r3, #16
 8004f5e:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8004f60:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004f64:	021b      	lsls	r3, r3, #8
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8004f66:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8004f68:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004f6c:	4619      	mov	r1, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	3308      	adds	r3, #8
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8004f72:	430a      	orrs	r2, r1
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8004f74:	601a      	str	r2, [r3, #0]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8004f76:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004f7a:	061a      	lsls	r2, r3, #24
 8004f7c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8004f80:	041b      	lsls	r3, r3, #16
 8004f82:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8004f84:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004f88:	021b      	lsls	r3, r3, #8
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8004f8a:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8004f8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004f90:	4619      	mov	r1, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	330c      	adds	r3, #12
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8004f96:	430a      	orrs	r2, r1
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8004f98:	601a      	str	r2, [r3, #0]
        ii += 16;
 8004f9a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004f9e:	3310      	adds	r3, #16
 8004fa0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	141b      	asrs	r3, r3, #16
 8004faa:	613b      	str	r3, [r7, #16]
        quat_q14[1] = quat[1] >> 16;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3304      	adds	r3, #4
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	141b      	asrs	r3, r3, #16
 8004fb4:	617b      	str	r3, [r7, #20]
        quat_q14[2] = quat[2] >> 16;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3308      	adds	r3, #8
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	141b      	asrs	r3, r3, #16
 8004fbe:	61bb      	str	r3, [r7, #24]
        quat_q14[3] = quat[3] >> 16;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	330c      	adds	r3, #12
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	141b      	asrs	r3, r3, #16
 8004fc8:	61fb      	str	r3, [r7, #28]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	fb03 f202 	mul.w	r2, r3, r2
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	6979      	ldr	r1, [r7, #20]
 8004fd6:	fb01 f303 	mul.w	r3, r1, r3
 8004fda:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	69b9      	ldr	r1, [r7, #24]
 8004fe0:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8004fe4:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	69f9      	ldr	r1, [r7, #28]
 8004fea:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8004fee:	4413      	add	r3, r2
 8004ff0:	643b      	str	r3, [r7, #64]	@ 0x40
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 8004ff2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ff4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ff8:	db03      	blt.n	8005002 <dmp_read_fifo+0x13a>
 8004ffa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ffc:	f1b3 5f88 	cmp.w	r3, #285212672	@ 0x11000000
 8005000:	dd07      	ble.n	8005012 <dmp_read_fifo+0x14a>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 8005002:	f7fd f845 	bl	8002090 <mpu_reset_fifo>
            sensors[0] = 0;
 8005006:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005008:	2200      	movs	r2, #0
 800500a:	801a      	strh	r2, [r3, #0]
            return -1;
 800500c:	f04f 33ff 	mov.w	r3, #4294967295
 8005010:	e0c7      	b.n	80051a2 <dmp_read_fifo+0x2da>
        }
        sensors[0] |= INV_WXYZ_QUAT;
 8005012:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005014:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800501c:	b21a      	sxth	r2, r3
 800501e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005020:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8005022:	4b62      	ldr	r3, [pc, #392]	@ (80051ac <dmp_read_fifo+0x2e4>)
 8005024:	895b      	ldrh	r3, [r3, #10]
 8005026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800502a:	2b00      	cmp	r3, #0
 800502c:	d04f      	beq.n	80050ce <dmp_read_fifo+0x206>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 800502e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005032:	3348      	adds	r3, #72	@ 0x48
 8005034:	443b      	add	r3, r7
 8005036:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800503a:	b21b      	sxth	r3, r3
 800503c:	021b      	lsls	r3, r3, #8
 800503e:	b21a      	sxth	r2, r3
 8005040:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005044:	3301      	adds	r3, #1
 8005046:	3348      	adds	r3, #72	@ 0x48
 8005048:	443b      	add	r3, r7
 800504a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800504e:	b21b      	sxth	r3, r3
 8005050:	4313      	orrs	r3, r2
 8005052:	b21a      	sxth	r2, r3
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8005058:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800505c:	3302      	adds	r3, #2
 800505e:	3348      	adds	r3, #72	@ 0x48
 8005060:	443b      	add	r3, r7
 8005062:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005066:	b21b      	sxth	r3, r3
 8005068:	021b      	lsls	r3, r3, #8
 800506a:	b219      	sxth	r1, r3
 800506c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005070:	3303      	adds	r3, #3
 8005072:	3348      	adds	r3, #72	@ 0x48
 8005074:	443b      	add	r3, r7
 8005076:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800507a:	b21a      	sxth	r2, r3
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	3302      	adds	r3, #2
 8005080:	430a      	orrs	r2, r1
 8005082:	b212      	sxth	r2, r2
 8005084:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8005086:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800508a:	3304      	adds	r3, #4
 800508c:	3348      	adds	r3, #72	@ 0x48
 800508e:	443b      	add	r3, r7
 8005090:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005094:	b21b      	sxth	r3, r3
 8005096:	021b      	lsls	r3, r3, #8
 8005098:	b219      	sxth	r1, r3
 800509a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800509e:	3305      	adds	r3, #5
 80050a0:	3348      	adds	r3, #72	@ 0x48
 80050a2:	443b      	add	r3, r7
 80050a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80050a8:	b21a      	sxth	r2, r3
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	3304      	adds	r3, #4
 80050ae:	430a      	orrs	r2, r1
 80050b0:	b212      	sxth	r2, r2
 80050b2:	801a      	strh	r2, [r3, #0]
        ii += 6;
 80050b4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80050b8:	3306      	adds	r3, #6
 80050ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        sensors[0] |= INV_XYZ_ACCEL;
 80050be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050c4:	f043 0308 	orr.w	r3, r3, #8
 80050c8:	b21a      	sxth	r2, r3
 80050ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050cc:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 80050ce:	4b37      	ldr	r3, [pc, #220]	@ (80051ac <dmp_read_fifo+0x2e4>)
 80050d0:	895b      	ldrh	r3, [r3, #10]
 80050d2:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d04f      	beq.n	800517a <dmp_read_fifo+0x2b2>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80050da:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80050de:	3348      	adds	r3, #72	@ 0x48
 80050e0:	443b      	add	r3, r7
 80050e2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80050e6:	b21b      	sxth	r3, r3
 80050e8:	021b      	lsls	r3, r3, #8
 80050ea:	b21a      	sxth	r2, r3
 80050ec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80050f0:	3301      	adds	r3, #1
 80050f2:	3348      	adds	r3, #72	@ 0x48
 80050f4:	443b      	add	r3, r7
 80050f6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80050fa:	b21b      	sxth	r3, r3
 80050fc:	4313      	orrs	r3, r2
 80050fe:	b21a      	sxth	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8005104:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005108:	3302      	adds	r3, #2
 800510a:	3348      	adds	r3, #72	@ 0x48
 800510c:	443b      	add	r3, r7
 800510e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005112:	b21b      	sxth	r3, r3
 8005114:	021b      	lsls	r3, r3, #8
 8005116:	b219      	sxth	r1, r3
 8005118:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800511c:	3303      	adds	r3, #3
 800511e:	3348      	adds	r3, #72	@ 0x48
 8005120:	443b      	add	r3, r7
 8005122:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005126:	b21a      	sxth	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	3302      	adds	r3, #2
 800512c:	430a      	orrs	r2, r1
 800512e:	b212      	sxth	r2, r2
 8005130:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8005132:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005136:	3304      	adds	r3, #4
 8005138:	3348      	adds	r3, #72	@ 0x48
 800513a:	443b      	add	r3, r7
 800513c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005140:	b21b      	sxth	r3, r3
 8005142:	021b      	lsls	r3, r3, #8
 8005144:	b219      	sxth	r1, r3
 8005146:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800514a:	3305      	adds	r3, #5
 800514c:	3348      	adds	r3, #72	@ 0x48
 800514e:	443b      	add	r3, r7
 8005150:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005154:	b21a      	sxth	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	3304      	adds	r3, #4
 800515a:	430a      	orrs	r2, r1
 800515c:	b212      	sxth	r2, r2
 800515e:	801a      	strh	r2, [r3, #0]
        ii += 6;
 8005160:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005164:	3306      	adds	r3, #6
 8005166:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        sensors[0] |= INV_XYZ_GYRO;
 800516a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800516c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005170:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8005174:	b21a      	sxth	r2, r3
 8005176:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005178:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 800517a:	4b0c      	ldr	r3, [pc, #48]	@ (80051ac <dmp_read_fifo+0x2e4>)
 800517c:	895b      	ldrh	r3, [r3, #10]
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d007      	beq.n	8005196 <dmp_read_fifo+0x2ce>
        decode_gesture(fifo_data + ii);
 8005186:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800518a:	f107 0220 	add.w	r2, r7, #32
 800518e:	4413      	add	r3, r2
 8005190:	4618      	mov	r0, r3
 8005192:	f7ff fe55 	bl	8004e40 <decode_gesture>

    get_ms(timestamp);
 8005196:	f000 fb47 	bl	8005828 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	601a      	str	r2, [r3, #0]
    return 0;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3748      	adds	r7, #72	@ 0x48
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	200002c8 	.word	0x200002c8

080051b0 <MPU6050_Init>:
 * @brief MPU6050初始化
 * @param None
 * @retval None
 * */
void MPU6050_Init()
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0

	MPU6050_WriteReg(0x1B, 0x10);		//陀螺仪量程，+-1000°/s
	MPU6050_WriteReg(0x1C, 0x00);		//加速度计量程，+-2g

#else
	MPU6050_DMP_init();
 80051b4:	f000 f91e 	bl	80053f4 <MPU6050_DMP_init>

#endif
}
 80051b8:	bf00      	nop
 80051ba:	bd80      	pop	{r7, pc}

080051bc <MPU6050_ZeroOffsetCalibrated>:
#endif
}


void MPU6050_ZeroOffsetCalibrated()
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
	gx_offset = gx_sum / samples;
	gy_offset = gy_sum / samples;
	gz_offset = gz_sum / samples;

#endif
}
 80051c0:	bf00      	nop
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bc80      	pop	{r7}
 80051c6:	4770      	bx	lr

080051c8 <MPU6050_GetEularAngle>:
 * @brief 计算MPU6050 欧拉角
 * @param None
 * @retval None
 * */
void MPU6050_GetEularAngle()
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0

  #endif

#else GetEularAngle == 2

	MPU6050_DMP_Get_Date(&DMP_pitch, &DMP_roll, &DMP_yaw);
 80051cc:	4a03      	ldr	r2, [pc, #12]	@ (80051dc <MPU6050_GetEularAngle+0x14>)
 80051ce:	4904      	ldr	r1, [pc, #16]	@ (80051e0 <MPU6050_GetEularAngle+0x18>)
 80051d0:	4804      	ldr	r0, [pc, #16]	@ (80051e4 <MPU6050_GetEularAngle+0x1c>)
 80051d2:	f000 f981 	bl	80054d8 <MPU6050_DMP_Get_Date>

#endif

}
 80051d6:	bf00      	nop
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	200002d8 	.word	0x200002d8
 80051e0:	200002dc 	.word	0x200002dc
 80051e4:	200002e0 	.word	0x200002e0

080051e8 <MPU6050_GetAx>:
 * @brief 获取MPU6050 Ax数据
 * @param None
 * @retval Ax
 * */
float MPU6050_GetAx()
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
#if GetEularAngle !=2
	return ax;
#endif
}
 80051ec:	bf00      	nop
 80051ee:	4618      	mov	r0, r3
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bc80      	pop	{r7}
 80051f4:	4770      	bx	lr

080051f6 <MPU6050_GetAy>:
 * @brief 获取MPU6050 Ay数据
 * @param None
 * @retval Ay
 * */
float MPU6050_GetAy()
{
 80051f6:	b480      	push	{r7}
 80051f8:	af00      	add	r7, sp, #0
#if GetEularAngle !=2
	return ay;
#endif
}
 80051fa:	bf00      	nop
 80051fc:	4618      	mov	r0, r3
 80051fe:	46bd      	mov	sp, r7
 8005200:	bc80      	pop	{r7}
 8005202:	4770      	bx	lr

08005204 <MPU6050_GetAz>:
 * @brief 获取MPU6050 Az数据
 * @param None
 * @retval Az
 * */
float MPU6050_GetAz()
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
#if GetEularAngle !=2
	return az;
#endif
}
 8005208:	bf00      	nop
 800520a:	4618      	mov	r0, r3
 800520c:	46bd      	mov	sp, r7
 800520e:	bc80      	pop	{r7}
 8005210:	4770      	bx	lr
	...

08005214 <MPU6050_GetYaw>:
 * @brief 获取MPU6050 Yaw数据
 * @param None
 * @retval Yaw
 * */
float MPU6050_GetYaw()
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
#if GetEularAngle == 1
	return kalman_yaw;
#endif

#if GetEularAngle == 2
	return DMP_yaw;
 8005218:	4b02      	ldr	r3, [pc, #8]	@ (8005224 <MPU6050_GetYaw+0x10>)
 800521a:	681b      	ldr	r3, [r3, #0]
#endif
}
 800521c:	4618      	mov	r0, r3
 800521e:	46bd      	mov	sp, r7
 8005220:	bc80      	pop	{r7}
 8005222:	4770      	bx	lr
 8005224:	200002d8 	.word	0x200002d8

08005228 <MPU6050_GetPitch>:
 * @brief 获取MPU6050 Pitch数据
 * @param None
 * @retval Pitch
 * */
float MPU6050_GetPitch()
{
 8005228:	b480      	push	{r7}
 800522a:	af00      	add	r7, sp, #0
#if GetEularAngle == 1
	return kalman_pitch;
#endif

#if GetEularAngle == 2
	return DMP_pitch;
 800522c:	4b02      	ldr	r3, [pc, #8]	@ (8005238 <MPU6050_GetPitch+0x10>)
 800522e:	681b      	ldr	r3, [r3, #0]
#endif

}
 8005230:	4618      	mov	r0, r3
 8005232:	46bd      	mov	sp, r7
 8005234:	bc80      	pop	{r7}
 8005236:	4770      	bx	lr
 8005238:	200002e0 	.word	0x200002e0

0800523c <MPU6050_GetRoll>:
 * @brief 获取MPU6050 Roll数据
 * @param None
 * @retval Roll
 * */
float MPU6050_GetRoll()
{
 800523c:	b480      	push	{r7}
 800523e:	af00      	add	r7, sp, #0
#if GetEularAngle == 1
	return kalman_roll;
#endif

#if GetEularAngle == 2
	return DMP_roll;
 8005240:	4b02      	ldr	r3, [pc, #8]	@ (800524c <MPU6050_GetRoll+0x10>)
 8005242:	681b      	ldr	r3, [r3, #0]
#endif
}
 8005244:	4618      	mov	r0, r3
 8005246:	46bd      	mov	sp, r7
 8005248:	bc80      	pop	{r7}
 800524a:	4770      	bx	lr
 800524c:	200002dc 	.word	0x200002dc

08005250 <inv_row_2_scale>:
/* These next two functions converts the orientation matrix (see
 * gyro_orientation) to a scalar representation for use by the DMP.
 * NOTE: These functions are borrowed from Invensense's MPL.
 */
static unsigned short inv_row_2_scale(const signed char *row)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
    unsigned short b;

    if (row[0] > 0)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f993 3000 	ldrsb.w	r3, [r3]
 800525e:	2b00      	cmp	r3, #0
 8005260:	dd02      	ble.n	8005268 <inv_row_2_scale+0x18>
        b = 0;
 8005262:	2300      	movs	r3, #0
 8005264:	81fb      	strh	r3, [r7, #14]
 8005266:	e02d      	b.n	80052c4 <inv_row_2_scale+0x74>
    else if (row[0] < 0)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f993 3000 	ldrsb.w	r3, [r3]
 800526e:	2b00      	cmp	r3, #0
 8005270:	da02      	bge.n	8005278 <inv_row_2_scale+0x28>
        b = 4;
 8005272:	2304      	movs	r3, #4
 8005274:	81fb      	strh	r3, [r7, #14]
 8005276:	e025      	b.n	80052c4 <inv_row_2_scale+0x74>
    else if (row[1] > 0)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	3301      	adds	r3, #1
 800527c:	f993 3000 	ldrsb.w	r3, [r3]
 8005280:	2b00      	cmp	r3, #0
 8005282:	dd02      	ble.n	800528a <inv_row_2_scale+0x3a>
        b = 1;
 8005284:	2301      	movs	r3, #1
 8005286:	81fb      	strh	r3, [r7, #14]
 8005288:	e01c      	b.n	80052c4 <inv_row_2_scale+0x74>
    else if (row[1] < 0)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	3301      	adds	r3, #1
 800528e:	f993 3000 	ldrsb.w	r3, [r3]
 8005292:	2b00      	cmp	r3, #0
 8005294:	da02      	bge.n	800529c <inv_row_2_scale+0x4c>
        b = 5;
 8005296:	2305      	movs	r3, #5
 8005298:	81fb      	strh	r3, [r7, #14]
 800529a:	e013      	b.n	80052c4 <inv_row_2_scale+0x74>
    else if (row[2] > 0)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3302      	adds	r3, #2
 80052a0:	f993 3000 	ldrsb.w	r3, [r3]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	dd02      	ble.n	80052ae <inv_row_2_scale+0x5e>
        b = 2;
 80052a8:	2302      	movs	r3, #2
 80052aa:	81fb      	strh	r3, [r7, #14]
 80052ac:	e00a      	b.n	80052c4 <inv_row_2_scale+0x74>
    else if (row[2] < 0)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	3302      	adds	r3, #2
 80052b2:	f993 3000 	ldrsb.w	r3, [r3]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	da02      	bge.n	80052c0 <inv_row_2_scale+0x70>
        b = 6;
 80052ba:	2306      	movs	r3, #6
 80052bc:	81fb      	strh	r3, [r7, #14]
 80052be:	e001      	b.n	80052c4 <inv_row_2_scale+0x74>
    else
        b = 7;      // error
 80052c0:	2307      	movs	r3, #7
 80052c2:	81fb      	strh	r3, [r7, #14]
    return b;
 80052c4:	89fb      	ldrh	r3, [r7, #14]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bc80      	pop	{r7}
 80052ce:	4770      	bx	lr

080052d0 <inv_orientation_matrix_to_scalar>:

static unsigned short inv_orientation_matrix_to_scalar(
    const signed char *mtx)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
       YZX  000_010_001
       ZXY  001_000_010
       ZYX  000_001_010
     */

    scalar = inv_row_2_scale(mtx);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f7ff ffb9 	bl	8005250 <inv_row_2_scale>
 80052de:	4603      	mov	r3, r0
 80052e0:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 3) << 3;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	3303      	adds	r3, #3
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7ff ffb2 	bl	8005250 <inv_row_2_scale>
 80052ec:	4603      	mov	r3, r0
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	b21a      	sxth	r2, r3
 80052f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	b21b      	sxth	r3, r3
 80052fa:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 6) << 6;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3306      	adds	r3, #6
 8005300:	4618      	mov	r0, r3
 8005302:	f7ff ffa5 	bl	8005250 <inv_row_2_scale>
 8005306:	4603      	mov	r3, r0
 8005308:	019b      	lsls	r3, r3, #6
 800530a:	b21a      	sxth	r2, r3
 800530c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005310:	4313      	orrs	r3, r2
 8005312:	b21b      	sxth	r3, r3
 8005314:	81fb      	strh	r3, [r7, #14]


    return scalar;
 8005316:	89fb      	ldrh	r3, [r7, #14]
}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <run_self_test>:

static int run_self_test(void)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b08a      	sub	sp, #40	@ 0x28
 8005324:	af00      	add	r7, sp, #0
    int result;
    long gyro[3], accel[3];

    result = mpu_run_self_test(gyro, accel);
 8005326:	f107 020c 	add.w	r2, r7, #12
 800532a:	f107 0318 	add.w	r3, r7, #24
 800532e:	4611      	mov	r1, r2
 8005330:	4618      	mov	r0, r3
 8005332:	f7fe fbc7 	bl	8003ac4 <mpu_run_self_test>
 8005336:	6278      	str	r0, [r7, #36]	@ 0x24
    if (result == 0x3) {
 8005338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533a:	2b03      	cmp	r3, #3
 800533c:	d153      	bne.n	80053e6 <run_self_test+0xc6>
        /* Test passed. We can trust the gyro data here, so let's push it down
         * to the DMP.
         */
        float sens;
        unsigned short accel_sens;
        mpu_get_gyro_sens(&sens);
 800533e:	f107 0308 	add.w	r3, r7, #8
 8005342:	4618      	mov	r0, r3
 8005344:	f7fd fa72 	bl	800282c <mpu_get_gyro_sens>
        gyro[0] = (long)(gyro[0] * sens);
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	4618      	mov	r0, r3
 800534c:	f7fb fcc6 	bl	8000cdc <__aeabi_i2f>
 8005350:	4602      	mov	r2, r0
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	4619      	mov	r1, r3
 8005356:	4610      	mov	r0, r2
 8005358:	f7fb fd14 	bl	8000d84 <__aeabi_fmul>
 800535c:	4603      	mov	r3, r0
 800535e:	4618      	mov	r0, r3
 8005360:	f7fb fed6 	bl	8001110 <__aeabi_f2iz>
 8005364:	4603      	mov	r3, r0
 8005366:	61bb      	str	r3, [r7, #24]
        gyro[1] = (long)(gyro[1] * sens);
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	4618      	mov	r0, r3
 800536c:	f7fb fcb6 	bl	8000cdc <__aeabi_i2f>
 8005370:	4602      	mov	r2, r0
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	4619      	mov	r1, r3
 8005376:	4610      	mov	r0, r2
 8005378:	f7fb fd04 	bl	8000d84 <__aeabi_fmul>
 800537c:	4603      	mov	r3, r0
 800537e:	4618      	mov	r0, r3
 8005380:	f7fb fec6 	bl	8001110 <__aeabi_f2iz>
 8005384:	4603      	mov	r3, r0
 8005386:	61fb      	str	r3, [r7, #28]
        gyro[2] = (long)(gyro[2] * sens);
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	4618      	mov	r0, r3
 800538c:	f7fb fca6 	bl	8000cdc <__aeabi_i2f>
 8005390:	4602      	mov	r2, r0
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	4619      	mov	r1, r3
 8005396:	4610      	mov	r0, r2
 8005398:	f7fb fcf4 	bl	8000d84 <__aeabi_fmul>
 800539c:	4603      	mov	r3, r0
 800539e:	4618      	mov	r0, r3
 80053a0:	f7fb feb6 	bl	8001110 <__aeabi_f2iz>
 80053a4:	4603      	mov	r3, r0
 80053a6:	623b      	str	r3, [r7, #32]
        dmp_set_gyro_bias(gyro);
 80053a8:	f107 0318 	add.w	r3, r7, #24
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fe ff13 	bl	80041d8 <dmp_set_gyro_bias>
        mpu_get_accel_sens(&accel_sens);
 80053b2:	1dbb      	adds	r3, r7, #6
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7fd fa71 	bl	800289c <mpu_get_accel_sens>
        accel[0] *= accel_sens;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	88fa      	ldrh	r2, [r7, #6]
 80053be:	fb02 f303 	mul.w	r3, r2, r3
 80053c2:	60fb      	str	r3, [r7, #12]
        accel[1] *= accel_sens;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	88fa      	ldrh	r2, [r7, #6]
 80053c8:	fb02 f303 	mul.w	r3, r2, r3
 80053cc:	613b      	str	r3, [r7, #16]
        accel[2] *= accel_sens;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	88fa      	ldrh	r2, [r7, #6]
 80053d2:	fb02 f303 	mul.w	r3, r2, r3
 80053d6:	617b      	str	r3, [r7, #20]
        dmp_set_accel_bias(accel);
 80053d8:	f107 030c 	add.w	r3, r7, #12
 80053dc:	4618      	mov	r0, r3
 80053de:	f7ff f805 	bl	80043ec <dmp_set_accel_bias>
    } else {
        return -1;
    }

    return 0;
 80053e2:	2300      	movs	r3, #0
 80053e4:	e001      	b.n	80053ea <run_self_test+0xca>
        return -1;
 80053e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3728      	adds	r7, #40	@ 0x28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
	...

080053f4 <MPU6050_DMP_init>:

int MPU6050_DMP_init(void)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
    int ret;
    struct int_param_s int_param;
    //mpu_init
    ret = mpu_init(&int_param);
 80053fa:	463b      	mov	r3, r7
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7fc fcf7 	bl	8001df0 <mpu_init>
 8005402:	6078      	str	r0, [r7, #4]
    if(ret != 0)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <MPU6050_DMP_init+0x1c>
    {
        return ERROR_MPU_INIT;
 800540a:	f04f 33ff 	mov.w	r3, #4294967295
 800540e:	e05d      	b.n	80054cc <MPU6050_DMP_init+0xd8>
    }
    //设置传感器
    ret = mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL);
 8005410:	2078      	movs	r0, #120	@ 0x78
 8005412:	f7fd fae3 	bl	80029dc <mpu_set_sensors>
 8005416:	6078      	str	r0, [r7, #4]
    if(ret != 0)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d002      	beq.n	8005424 <MPU6050_DMP_init+0x30>
    {
        return ERROR_SET_SENSOR;
 800541e:	f06f 0301 	mvn.w	r3, #1
 8005422:	e053      	b.n	80054cc <MPU6050_DMP_init+0xd8>
    }
    //设置fifo
    ret = mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
 8005424:	2078      	movs	r0, #120	@ 0x78
 8005426:	f7fd fa87 	bl	8002938 <mpu_configure_fifo>
 800542a:	6078      	str	r0, [r7, #4]
    if(ret != 0)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d002      	beq.n	8005438 <MPU6050_DMP_init+0x44>
    {
        return ERROR_CONFIG_FIFO;
 8005432:	f06f 0302 	mvn.w	r3, #2
 8005436:	e049      	b.n	80054cc <MPU6050_DMP_init+0xd8>
    }
    //设置采样率
    ret = mpu_set_sample_rate(DEFAULT_MPU_HZ);
 8005438:	2064      	movs	r0, #100	@ 0x64
 800543a:	f7fd f987 	bl	800274c <mpu_set_sample_rate>
 800543e:	6078      	str	r0, [r7, #4]
    if(ret != 0)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d002      	beq.n	800544c <MPU6050_DMP_init+0x58>
    {
        return ERROR_SET_RATE;
 8005446:	f06f 0303 	mvn.w	r3, #3
 800544a:	e03f      	b.n	80054cc <MPU6050_DMP_init+0xd8>
    }
    //加载DMP固件
    ret = dmp_load_motion_driver_firmware();
 800544c:	f7fe fdc8 	bl	8003fe0 <dmp_load_motion_driver_firmware>
 8005450:	6078      	str	r0, [r7, #4]
    if(ret != 0)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <MPU6050_DMP_init+0x6a>
    {
        return ERROR_LOAD_MOTION_DRIVER;
 8005458:	f06f 0304 	mvn.w	r3, #4
 800545c:	e036      	b.n	80054cc <MPU6050_DMP_init+0xd8>
    }
    //设置陀螺仪方向
    ret = dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_orientation));
 800545e:	481d      	ldr	r0, [pc, #116]	@ (80054d4 <MPU6050_DMP_init+0xe0>)
 8005460:	f7ff ff36 	bl	80052d0 <inv_orientation_matrix_to_scalar>
 8005464:	4603      	mov	r3, r0
 8005466:	4618      	mov	r0, r3
 8005468:	f7fe fdca 	bl	8004000 <dmp_set_orientation>
 800546c:	6078      	str	r0, [r7, #4]
    if(ret != 0)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d002      	beq.n	800547a <MPU6050_DMP_init+0x86>
    {
        return ERROR_SET_ORIENTATION;
 8005474:	f06f 0305 	mvn.w	r3, #5
 8005478:	e028      	b.n	80054cc <MPU6050_DMP_init+0xd8>
    }
    //设置DMP功能
    ret = dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP |
 800547a:	f240 1073 	movw	r0, #371	@ 0x173
 800547e:	f7ff fb39 	bl	8004af4 <dmp_enable_feature>
 8005482:	6078      	str	r0, [r7, #4]
            DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL |
            DMP_FEATURE_SEND_CAL_GYRO | DMP_FEATURE_GYRO_CAL);
    if(ret != 0)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <MPU6050_DMP_init+0x9c>
    {
        return ERROR_ENABLE_FEATURE;
 800548a:	f06f 0306 	mvn.w	r3, #6
 800548e:	e01d      	b.n	80054cc <MPU6050_DMP_init+0xd8>
    }
    //设置输出速率
    ret = dmp_set_fifo_rate(DEFAULT_MPU_HZ);
 8005490:	2064      	movs	r0, #100	@ 0x64
 8005492:	f7ff f8b1 	bl	80045f8 <dmp_set_fifo_rate>
 8005496:	6078      	str	r0, [r7, #4]
    if(ret != 0)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d002      	beq.n	80054a4 <MPU6050_DMP_init+0xb0>
    {
        return ERROR_SET_FIFO_RATE;
 800549e:	f06f 0307 	mvn.w	r3, #7
 80054a2:	e013      	b.n	80054cc <MPU6050_DMP_init+0xd8>
    }
    //自检
    ret = run_self_test();
 80054a4:	f7ff ff3c 	bl	8005320 <run_self_test>
 80054a8:	6078      	str	r0, [r7, #4]
    if(ret != 0)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <MPU6050_DMP_init+0xc2>
    {
        return ERROR_SELF_TEST;
 80054b0:	f06f 0308 	mvn.w	r3, #8
 80054b4:	e00a      	b.n	80054cc <MPU6050_DMP_init+0xd8>
    }
    //使能DMP
    ret = mpu_set_dmp_state(1);
 80054b6:	2001      	movs	r0, #1
 80054b8:	f7fe fd2c 	bl	8003f14 <mpu_set_dmp_state>
 80054bc:	6078      	str	r0, [r7, #4]
    if(ret != 0)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d002      	beq.n	80054ca <MPU6050_DMP_init+0xd6>
    {
        return ERROR_DMP_STATE;
 80054c4:	f06f 0309 	mvn.w	r3, #9
 80054c8:	e000      	b.n	80054cc <MPU6050_DMP_init+0xd8>
    }

    return 0;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	20000030 	.word	0x20000030

080054d8 <MPU6050_DMP_Get_Date>:

int MPU6050_DMP_Get_Date(float *pitch, float *roll, float *yaw)
{
 80054d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054da:	b095      	sub	sp, #84	@ 0x54
 80054dc:	af02      	add	r7, sp, #8
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
    float q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;
 80054e4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80054e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80054ea:	f04f 0300 	mov.w	r3, #0
 80054ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80054f0:	f04f 0300 	mov.w	r3, #0
 80054f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054f6:	f04f 0300 	mov.w	r3, #0
 80054fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    short accel[3];
    long quat[4];
    unsigned long timestamp;
    short sensors;
    unsigned char more;
    if(dmp_read_fifo(gyro, accel, quat, &timestamp, &sensors, &more))
 80054fc:	f107 0414 	add.w	r4, r7, #20
 8005500:	f107 0218 	add.w	r2, r7, #24
 8005504:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8005508:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800550c:	f107 0311 	add.w	r3, r7, #17
 8005510:	9301      	str	r3, [sp, #4]
 8005512:	f107 0312 	add.w	r3, r7, #18
 8005516:	9300      	str	r3, [sp, #0]
 8005518:	4623      	mov	r3, r4
 800551a:	f7ff fcd5 	bl	8004ec8 <dmp_read_fifo>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d002      	beq.n	800552a <MPU6050_DMP_Get_Date+0x52>
    {
        return -1;
 8005524:	f04f 33ff 	mov.w	r3, #4294967295
 8005528:	e11c      	b.n	8005764 <MPU6050_DMP_Get_Date+0x28c>
    }

    if(sensors & INV_WXYZ_QUAT)
 800552a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800552e:	b29b      	uxth	r3, r3
 8005530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 8114 	beq.w	8005762 <MPU6050_DMP_Get_Date+0x28a>
    {
        q0 = quat[0] / Q30;
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	4618      	mov	r0, r3
 800553e:	f7fb fbcd 	bl	8000cdc <__aeabi_i2f>
 8005542:	4603      	mov	r3, r0
 8005544:	f04f 419d 	mov.w	r1, #1317011456	@ 0x4e800000
 8005548:	4618      	mov	r0, r3
 800554a:	f7fb fccf 	bl	8000eec <__aeabi_fdiv>
 800554e:	4603      	mov	r3, r0
 8005550:	647b      	str	r3, [r7, #68]	@ 0x44
        q1 = quat[1] / Q30;
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	4618      	mov	r0, r3
 8005556:	f7fb fbc1 	bl	8000cdc <__aeabi_i2f>
 800555a:	4603      	mov	r3, r0
 800555c:	f04f 419d 	mov.w	r1, #1317011456	@ 0x4e800000
 8005560:	4618      	mov	r0, r3
 8005562:	f7fb fcc3 	bl	8000eec <__aeabi_fdiv>
 8005566:	4603      	mov	r3, r0
 8005568:	643b      	str	r3, [r7, #64]	@ 0x40
        q2 = quat[2] / Q30;
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	4618      	mov	r0, r3
 800556e:	f7fb fbb5 	bl	8000cdc <__aeabi_i2f>
 8005572:	4603      	mov	r3, r0
 8005574:	f04f 419d 	mov.w	r1, #1317011456	@ 0x4e800000
 8005578:	4618      	mov	r0, r3
 800557a:	f7fb fcb7 	bl	8000eec <__aeabi_fdiv>
 800557e:	4603      	mov	r3, r0
 8005580:	63fb      	str	r3, [r7, #60]	@ 0x3c
        q3 = quat[3] / Q30;
 8005582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005584:	4618      	mov	r0, r3
 8005586:	f7fb fba9 	bl	8000cdc <__aeabi_i2f>
 800558a:	4603      	mov	r3, r0
 800558c:	f04f 419d 	mov.w	r1, #1317011456	@ 0x4e800000
 8005590:	4618      	mov	r0, r3
 8005592:	f7fb fcab 	bl	8000eec <__aeabi_fdiv>
 8005596:	4603      	mov	r3, r0
 8005598:	63bb      	str	r3, [r7, #56]	@ 0x38

        *pitch = asin(-2 * q1 * q3 + 2 * q0 * q2) * 57.3; // pitch
 800559a:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 800559e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80055a0:	f7fb fbf0 	bl	8000d84 <__aeabi_fmul>
 80055a4:	4603      	mov	r3, r0
 80055a6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7fb fbeb 	bl	8000d84 <__aeabi_fmul>
 80055ae:	4603      	mov	r3, r0
 80055b0:	461c      	mov	r4, r3
 80055b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055b4:	4619      	mov	r1, r3
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fb fadc 	bl	8000b74 <__addsf3>
 80055bc:	4603      	mov	r3, r0
 80055be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7fb fbdf 	bl	8000d84 <__aeabi_fmul>
 80055c6:	4603      	mov	r3, r0
 80055c8:	4619      	mov	r1, r3
 80055ca:	4620      	mov	r0, r4
 80055cc:	f7fb fad2 	bl	8000b74 <__addsf3>
 80055d0:	4603      	mov	r3, r0
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fa ff28 	bl	8000428 <__aeabi_f2d>
 80055d8:	4602      	mov	r2, r0
 80055da:	460b      	mov	r3, r1
 80055dc:	4610      	mov	r0, r2
 80055de:	4619      	mov	r1, r3
 80055e0:	f006 fdd4 	bl	800c18c <asin>
 80055e4:	a362      	add	r3, pc, #392	@ (adr r3, 8005770 <MPU6050_DMP_Get_Date+0x298>)
 80055e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ea:	f7fa ff75 	bl	80004d8 <__aeabi_dmul>
 80055ee:	4602      	mov	r2, r0
 80055f0:	460b      	mov	r3, r1
 80055f2:	4610      	mov	r0, r2
 80055f4:	4619      	mov	r1, r3
 80055f6:	f7fb fa67 	bl	8000ac8 <__aeabi_d2f>
 80055fa:	4602      	mov	r2, r0
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	601a      	str	r2, [r3, #0]
        *roll = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2 * q2 + 1) * 57.3; // roll
 8005600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005602:	4619      	mov	r1, r3
 8005604:	4618      	mov	r0, r3
 8005606:	f7fb fab5 	bl	8000b74 <__addsf3>
 800560a:	4603      	mov	r3, r0
 800560c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800560e:	4618      	mov	r0, r3
 8005610:	f7fb fbb8 	bl	8000d84 <__aeabi_fmul>
 8005614:	4603      	mov	r3, r0
 8005616:	461c      	mov	r4, r3
 8005618:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800561a:	4619      	mov	r1, r3
 800561c:	4618      	mov	r0, r3
 800561e:	f7fb faa9 	bl	8000b74 <__addsf3>
 8005622:	4603      	mov	r3, r0
 8005624:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005626:	4618      	mov	r0, r3
 8005628:	f7fb fbac 	bl	8000d84 <__aeabi_fmul>
 800562c:	4603      	mov	r3, r0
 800562e:	4619      	mov	r1, r3
 8005630:	4620      	mov	r0, r4
 8005632:	f7fb fa9f 	bl	8000b74 <__addsf3>
 8005636:	4603      	mov	r3, r0
 8005638:	4618      	mov	r0, r3
 800563a:	f7fa fef5 	bl	8000428 <__aeabi_f2d>
 800563e:	4604      	mov	r4, r0
 8005640:	460d      	mov	r5, r1
 8005642:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8005646:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8005648:	f7fb fb9c 	bl	8000d84 <__aeabi_fmul>
 800564c:	4603      	mov	r3, r0
 800564e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005650:	4618      	mov	r0, r3
 8005652:	f7fb fb97 	bl	8000d84 <__aeabi_fmul>
 8005656:	4603      	mov	r3, r0
 8005658:	461e      	mov	r6, r3
 800565a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800565c:	4619      	mov	r1, r3
 800565e:	4618      	mov	r0, r3
 8005660:	f7fb fa88 	bl	8000b74 <__addsf3>
 8005664:	4603      	mov	r3, r0
 8005666:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005668:	4618      	mov	r0, r3
 800566a:	f7fb fb8b 	bl	8000d84 <__aeabi_fmul>
 800566e:	4603      	mov	r3, r0
 8005670:	4619      	mov	r1, r3
 8005672:	4630      	mov	r0, r6
 8005674:	f7fb fa7c 	bl	8000b70 <__aeabi_fsub>
 8005678:	4603      	mov	r3, r0
 800567a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800567e:	4618      	mov	r0, r3
 8005680:	f7fb fa78 	bl	8000b74 <__addsf3>
 8005684:	4603      	mov	r3, r0
 8005686:	4618      	mov	r0, r3
 8005688:	f7fa fece 	bl	8000428 <__aeabi_f2d>
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	4620      	mov	r0, r4
 8005692:	4629      	mov	r1, r5
 8005694:	f006 fda2 	bl	800c1dc <atan2>
 8005698:	a335      	add	r3, pc, #212	@ (adr r3, 8005770 <MPU6050_DMP_Get_Date+0x298>)
 800569a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569e:	f7fa ff1b 	bl	80004d8 <__aeabi_dmul>
 80056a2:	4602      	mov	r2, r0
 80056a4:	460b      	mov	r3, r1
 80056a6:	4610      	mov	r0, r2
 80056a8:	4619      	mov	r1, r3
 80056aa:	f7fb fa0d 	bl	8000ac8 <__aeabi_d2f>
 80056ae:	4602      	mov	r2, r0
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	601a      	str	r2, [r3, #0]
        *yaw = atan2(2 * (q0 * q3 + q1 * q2), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3) * 57.3; // yaw
 80056b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80056b6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80056b8:	f7fb fb64 	bl	8000d84 <__aeabi_fmul>
 80056bc:	4603      	mov	r3, r0
 80056be:	461c      	mov	r4, r3
 80056c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056c2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80056c4:	f7fb fb5e 	bl	8000d84 <__aeabi_fmul>
 80056c8:	4603      	mov	r3, r0
 80056ca:	4619      	mov	r1, r3
 80056cc:	4620      	mov	r0, r4
 80056ce:	f7fb fa51 	bl	8000b74 <__addsf3>
 80056d2:	4603      	mov	r3, r0
 80056d4:	4619      	mov	r1, r3
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fb fa4c 	bl	8000b74 <__addsf3>
 80056dc:	4603      	mov	r3, r0
 80056de:	4618      	mov	r0, r3
 80056e0:	f7fa fea2 	bl	8000428 <__aeabi_f2d>
 80056e4:	4604      	mov	r4, r0
 80056e6:	460d      	mov	r5, r1
 80056e8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80056ea:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80056ec:	f7fb fb4a 	bl	8000d84 <__aeabi_fmul>
 80056f0:	4603      	mov	r3, r0
 80056f2:	461e      	mov	r6, r3
 80056f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056f6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80056f8:	f7fb fb44 	bl	8000d84 <__aeabi_fmul>
 80056fc:	4603      	mov	r3, r0
 80056fe:	4619      	mov	r1, r3
 8005700:	4630      	mov	r0, r6
 8005702:	f7fb fa37 	bl	8000b74 <__addsf3>
 8005706:	4603      	mov	r3, r0
 8005708:	461e      	mov	r6, r3
 800570a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800570c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800570e:	f7fb fb39 	bl	8000d84 <__aeabi_fmul>
 8005712:	4603      	mov	r3, r0
 8005714:	4619      	mov	r1, r3
 8005716:	4630      	mov	r0, r6
 8005718:	f7fb fa2a 	bl	8000b70 <__aeabi_fsub>
 800571c:	4603      	mov	r3, r0
 800571e:	461e      	mov	r6, r3
 8005720:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005722:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005724:	f7fb fb2e 	bl	8000d84 <__aeabi_fmul>
 8005728:	4603      	mov	r3, r0
 800572a:	4619      	mov	r1, r3
 800572c:	4630      	mov	r0, r6
 800572e:	f7fb fa1f 	bl	8000b70 <__aeabi_fsub>
 8005732:	4603      	mov	r3, r0
 8005734:	4618      	mov	r0, r3
 8005736:	f7fa fe77 	bl	8000428 <__aeabi_f2d>
 800573a:	4602      	mov	r2, r0
 800573c:	460b      	mov	r3, r1
 800573e:	4620      	mov	r0, r4
 8005740:	4629      	mov	r1, r5
 8005742:	f006 fd4b 	bl	800c1dc <atan2>
 8005746:	a30a      	add	r3, pc, #40	@ (adr r3, 8005770 <MPU6050_DMP_Get_Date+0x298>)
 8005748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574c:	f7fa fec4 	bl	80004d8 <__aeabi_dmul>
 8005750:	4602      	mov	r2, r0
 8005752:	460b      	mov	r3, r1
 8005754:	4610      	mov	r0, r2
 8005756:	4619      	mov	r1, r3
 8005758:	f7fb f9b6 	bl	8000ac8 <__aeabi_d2f>
 800575c:	4602      	mov	r2, r0
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	601a      	str	r2, [r3, #0]
    }

    return 0;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	374c      	adds	r7, #76	@ 0x4c
 8005768:	46bd      	mov	sp, r7
 800576a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800576c:	f3af 8000 	nop.w
 8005770:	66666666 	.word	0x66666666
 8005774:	404ca666 	.word	0x404ca666

08005778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800577c:	4b08      	ldr	r3, [pc, #32]	@ (80057a0 <HAL_Init+0x28>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a07      	ldr	r2, [pc, #28]	@ (80057a0 <HAL_Init+0x28>)
 8005782:	f043 0310 	orr.w	r3, r3, #16
 8005786:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005788:	2003      	movs	r0, #3
 800578a:	f000 f92b 	bl	80059e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800578e:	200f      	movs	r0, #15
 8005790:	f000 f808 	bl	80057a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005794:	f7fc f8fe 	bl	8001994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	40022000 	.word	0x40022000

080057a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80057ac:	4b12      	ldr	r3, [pc, #72]	@ (80057f8 <HAL_InitTick+0x54>)
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	4b12      	ldr	r3, [pc, #72]	@ (80057fc <HAL_InitTick+0x58>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	4619      	mov	r1, r3
 80057b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80057ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80057be:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 f935 	bl	8005a32 <HAL_SYSTICK_Config>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d001      	beq.n	80057d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e00e      	b.n	80057f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b0f      	cmp	r3, #15
 80057d6:	d80a      	bhi.n	80057ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80057d8:	2200      	movs	r2, #0
 80057da:	6879      	ldr	r1, [r7, #4]
 80057dc:	f04f 30ff 	mov.w	r0, #4294967295
 80057e0:	f000 f90b 	bl	80059fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80057e4:	4a06      	ldr	r2, [pc, #24]	@ (8005800 <HAL_InitTick+0x5c>)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	e000      	b.n	80057f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3708      	adds	r7, #8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	20000000 	.word	0x20000000
 80057fc:	20000040 	.word	0x20000040
 8005800:	2000003c 	.word	0x2000003c

08005804 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005804:	b480      	push	{r7}
 8005806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005808:	4b05      	ldr	r3, [pc, #20]	@ (8005820 <HAL_IncTick+0x1c>)
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	461a      	mov	r2, r3
 800580e:	4b05      	ldr	r3, [pc, #20]	@ (8005824 <HAL_IncTick+0x20>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4413      	add	r3, r2
 8005814:	4a03      	ldr	r2, [pc, #12]	@ (8005824 <HAL_IncTick+0x20>)
 8005816:	6013      	str	r3, [r2, #0]
}
 8005818:	bf00      	nop
 800581a:	46bd      	mov	sp, r7
 800581c:	bc80      	pop	{r7}
 800581e:	4770      	bx	lr
 8005820:	20000040 	.word	0x20000040
 8005824:	200002e4 	.word	0x200002e4

08005828 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005828:	b480      	push	{r7}
 800582a:	af00      	add	r7, sp, #0
  return uwTick;
 800582c:	4b02      	ldr	r3, [pc, #8]	@ (8005838 <HAL_GetTick+0x10>)
 800582e:	681b      	ldr	r3, [r3, #0]
}
 8005830:	4618      	mov	r0, r3
 8005832:	46bd      	mov	sp, r7
 8005834:	bc80      	pop	{r7}
 8005836:	4770      	bx	lr
 8005838:	200002e4 	.word	0x200002e4

0800583c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005844:	f7ff fff0 	bl	8005828 <HAL_GetTick>
 8005848:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005854:	d005      	beq.n	8005862 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005856:	4b0a      	ldr	r3, [pc, #40]	@ (8005880 <HAL_Delay+0x44>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4413      	add	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005862:	bf00      	nop
 8005864:	f7ff ffe0 	bl	8005828 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	429a      	cmp	r2, r3
 8005872:	d8f7      	bhi.n	8005864 <HAL_Delay+0x28>
  {
  }
}
 8005874:	bf00      	nop
 8005876:	bf00      	nop
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	20000040 	.word	0x20000040

08005884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f003 0307 	and.w	r3, r3, #7
 8005892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005894:	4b0c      	ldr	r3, [pc, #48]	@ (80058c8 <__NVIC_SetPriorityGrouping+0x44>)
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80058a0:	4013      	ands	r3, r2
 80058a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80058ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80058b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058b6:	4a04      	ldr	r2, [pc, #16]	@ (80058c8 <__NVIC_SetPriorityGrouping+0x44>)
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	60d3      	str	r3, [r2, #12]
}
 80058bc:	bf00      	nop
 80058be:	3714      	adds	r7, #20
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bc80      	pop	{r7}
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	e000ed00 	.word	0xe000ed00

080058cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80058cc:	b480      	push	{r7}
 80058ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058d0:	4b04      	ldr	r3, [pc, #16]	@ (80058e4 <__NVIC_GetPriorityGrouping+0x18>)
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	0a1b      	lsrs	r3, r3, #8
 80058d6:	f003 0307 	and.w	r3, r3, #7
}
 80058da:	4618      	mov	r0, r3
 80058dc:	46bd      	mov	sp, r7
 80058de:	bc80      	pop	{r7}
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	e000ed00 	.word	0xe000ed00

080058e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	4603      	mov	r3, r0
 80058f0:	6039      	str	r1, [r7, #0]
 80058f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	db0a      	blt.n	8005912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	b2da      	uxtb	r2, r3
 8005900:	490c      	ldr	r1, [pc, #48]	@ (8005934 <__NVIC_SetPriority+0x4c>)
 8005902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005906:	0112      	lsls	r2, r2, #4
 8005908:	b2d2      	uxtb	r2, r2
 800590a:	440b      	add	r3, r1
 800590c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005910:	e00a      	b.n	8005928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	b2da      	uxtb	r2, r3
 8005916:	4908      	ldr	r1, [pc, #32]	@ (8005938 <__NVIC_SetPriority+0x50>)
 8005918:	79fb      	ldrb	r3, [r7, #7]
 800591a:	f003 030f 	and.w	r3, r3, #15
 800591e:	3b04      	subs	r3, #4
 8005920:	0112      	lsls	r2, r2, #4
 8005922:	b2d2      	uxtb	r2, r2
 8005924:	440b      	add	r3, r1
 8005926:	761a      	strb	r2, [r3, #24]
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	bc80      	pop	{r7}
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	e000e100 	.word	0xe000e100
 8005938:	e000ed00 	.word	0xe000ed00

0800593c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800593c:	b480      	push	{r7}
 800593e:	b089      	sub	sp, #36	@ 0x24
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f003 0307 	and.w	r3, r3, #7
 800594e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	f1c3 0307 	rsb	r3, r3, #7
 8005956:	2b04      	cmp	r3, #4
 8005958:	bf28      	it	cs
 800595a:	2304      	movcs	r3, #4
 800595c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	3304      	adds	r3, #4
 8005962:	2b06      	cmp	r3, #6
 8005964:	d902      	bls.n	800596c <NVIC_EncodePriority+0x30>
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	3b03      	subs	r3, #3
 800596a:	e000      	b.n	800596e <NVIC_EncodePriority+0x32>
 800596c:	2300      	movs	r3, #0
 800596e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005970:	f04f 32ff 	mov.w	r2, #4294967295
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	fa02 f303 	lsl.w	r3, r2, r3
 800597a:	43da      	mvns	r2, r3
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	401a      	ands	r2, r3
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005984:	f04f 31ff 	mov.w	r1, #4294967295
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	fa01 f303 	lsl.w	r3, r1, r3
 800598e:	43d9      	mvns	r1, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005994:	4313      	orrs	r3, r2
         );
}
 8005996:	4618      	mov	r0, r3
 8005998:	3724      	adds	r7, #36	@ 0x24
 800599a:	46bd      	mov	sp, r7
 800599c:	bc80      	pop	{r7}
 800599e:	4770      	bx	lr

080059a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	3b01      	subs	r3, #1
 80059ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059b0:	d301      	bcc.n	80059b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80059b2:	2301      	movs	r3, #1
 80059b4:	e00f      	b.n	80059d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059b6:	4a0a      	ldr	r2, [pc, #40]	@ (80059e0 <SysTick_Config+0x40>)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	3b01      	subs	r3, #1
 80059bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80059be:	210f      	movs	r1, #15
 80059c0:	f04f 30ff 	mov.w	r0, #4294967295
 80059c4:	f7ff ff90 	bl	80058e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059c8:	4b05      	ldr	r3, [pc, #20]	@ (80059e0 <SysTick_Config+0x40>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059ce:	4b04      	ldr	r3, [pc, #16]	@ (80059e0 <SysTick_Config+0x40>)
 80059d0:	2207      	movs	r2, #7
 80059d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3708      	adds	r7, #8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	e000e010 	.word	0xe000e010

080059e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f7ff ff49 	bl	8005884 <__NVIC_SetPriorityGrouping>
}
 80059f2:	bf00      	nop
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b086      	sub	sp, #24
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	4603      	mov	r3, r0
 8005a02:	60b9      	str	r1, [r7, #8]
 8005a04:	607a      	str	r2, [r7, #4]
 8005a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a0c:	f7ff ff5e 	bl	80058cc <__NVIC_GetPriorityGrouping>
 8005a10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	68b9      	ldr	r1, [r7, #8]
 8005a16:	6978      	ldr	r0, [r7, #20]
 8005a18:	f7ff ff90 	bl	800593c <NVIC_EncodePriority>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a22:	4611      	mov	r1, r2
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7ff ff5f 	bl	80058e8 <__NVIC_SetPriority>
}
 8005a2a:	bf00      	nop
 8005a2c:	3718      	adds	r7, #24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b082      	sub	sp, #8
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7ff ffb0 	bl	80059a0 <SysTick_Config>
 8005a40:	4603      	mov	r3, r0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3708      	adds	r7, #8
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
	...

08005a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b08b      	sub	sp, #44	@ 0x2c
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005a56:	2300      	movs	r3, #0
 8005a58:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a5e:	e169      	b.n	8005d34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005a60:	2201      	movs	r2, #1
 8005a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a64:	fa02 f303 	lsl.w	r3, r2, r3
 8005a68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69fa      	ldr	r2, [r7, #28]
 8005a70:	4013      	ands	r3, r2
 8005a72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	f040 8158 	bne.w	8005d2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	4a9a      	ldr	r2, [pc, #616]	@ (8005cec <HAL_GPIO_Init+0x2a0>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d05e      	beq.n	8005b46 <HAL_GPIO_Init+0xfa>
 8005a88:	4a98      	ldr	r2, [pc, #608]	@ (8005cec <HAL_GPIO_Init+0x2a0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d875      	bhi.n	8005b7a <HAL_GPIO_Init+0x12e>
 8005a8e:	4a98      	ldr	r2, [pc, #608]	@ (8005cf0 <HAL_GPIO_Init+0x2a4>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d058      	beq.n	8005b46 <HAL_GPIO_Init+0xfa>
 8005a94:	4a96      	ldr	r2, [pc, #600]	@ (8005cf0 <HAL_GPIO_Init+0x2a4>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d86f      	bhi.n	8005b7a <HAL_GPIO_Init+0x12e>
 8005a9a:	4a96      	ldr	r2, [pc, #600]	@ (8005cf4 <HAL_GPIO_Init+0x2a8>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d052      	beq.n	8005b46 <HAL_GPIO_Init+0xfa>
 8005aa0:	4a94      	ldr	r2, [pc, #592]	@ (8005cf4 <HAL_GPIO_Init+0x2a8>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d869      	bhi.n	8005b7a <HAL_GPIO_Init+0x12e>
 8005aa6:	4a94      	ldr	r2, [pc, #592]	@ (8005cf8 <HAL_GPIO_Init+0x2ac>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d04c      	beq.n	8005b46 <HAL_GPIO_Init+0xfa>
 8005aac:	4a92      	ldr	r2, [pc, #584]	@ (8005cf8 <HAL_GPIO_Init+0x2ac>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d863      	bhi.n	8005b7a <HAL_GPIO_Init+0x12e>
 8005ab2:	4a92      	ldr	r2, [pc, #584]	@ (8005cfc <HAL_GPIO_Init+0x2b0>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d046      	beq.n	8005b46 <HAL_GPIO_Init+0xfa>
 8005ab8:	4a90      	ldr	r2, [pc, #576]	@ (8005cfc <HAL_GPIO_Init+0x2b0>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d85d      	bhi.n	8005b7a <HAL_GPIO_Init+0x12e>
 8005abe:	2b12      	cmp	r3, #18
 8005ac0:	d82a      	bhi.n	8005b18 <HAL_GPIO_Init+0xcc>
 8005ac2:	2b12      	cmp	r3, #18
 8005ac4:	d859      	bhi.n	8005b7a <HAL_GPIO_Init+0x12e>
 8005ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8005acc <HAL_GPIO_Init+0x80>)
 8005ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005acc:	08005b47 	.word	0x08005b47
 8005ad0:	08005b21 	.word	0x08005b21
 8005ad4:	08005b33 	.word	0x08005b33
 8005ad8:	08005b75 	.word	0x08005b75
 8005adc:	08005b7b 	.word	0x08005b7b
 8005ae0:	08005b7b 	.word	0x08005b7b
 8005ae4:	08005b7b 	.word	0x08005b7b
 8005ae8:	08005b7b 	.word	0x08005b7b
 8005aec:	08005b7b 	.word	0x08005b7b
 8005af0:	08005b7b 	.word	0x08005b7b
 8005af4:	08005b7b 	.word	0x08005b7b
 8005af8:	08005b7b 	.word	0x08005b7b
 8005afc:	08005b7b 	.word	0x08005b7b
 8005b00:	08005b7b 	.word	0x08005b7b
 8005b04:	08005b7b 	.word	0x08005b7b
 8005b08:	08005b7b 	.word	0x08005b7b
 8005b0c:	08005b7b 	.word	0x08005b7b
 8005b10:	08005b29 	.word	0x08005b29
 8005b14:	08005b3d 	.word	0x08005b3d
 8005b18:	4a79      	ldr	r2, [pc, #484]	@ (8005d00 <HAL_GPIO_Init+0x2b4>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d013      	beq.n	8005b46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005b1e:	e02c      	b.n	8005b7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	623b      	str	r3, [r7, #32]
          break;
 8005b26:	e029      	b.n	8005b7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	623b      	str	r3, [r7, #32]
          break;
 8005b30:	e024      	b.n	8005b7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	3308      	adds	r3, #8
 8005b38:	623b      	str	r3, [r7, #32]
          break;
 8005b3a:	e01f      	b.n	8005b7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	330c      	adds	r3, #12
 8005b42:	623b      	str	r3, [r7, #32]
          break;
 8005b44:	e01a      	b.n	8005b7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d102      	bne.n	8005b54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005b4e:	2304      	movs	r3, #4
 8005b50:	623b      	str	r3, [r7, #32]
          break;
 8005b52:	e013      	b.n	8005b7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d105      	bne.n	8005b68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005b5c:	2308      	movs	r3, #8
 8005b5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	69fa      	ldr	r2, [r7, #28]
 8005b64:	611a      	str	r2, [r3, #16]
          break;
 8005b66:	e009      	b.n	8005b7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005b68:	2308      	movs	r3, #8
 8005b6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	69fa      	ldr	r2, [r7, #28]
 8005b70:	615a      	str	r2, [r3, #20]
          break;
 8005b72:	e003      	b.n	8005b7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005b74:	2300      	movs	r3, #0
 8005b76:	623b      	str	r3, [r7, #32]
          break;
 8005b78:	e000      	b.n	8005b7c <HAL_GPIO_Init+0x130>
          break;
 8005b7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	2bff      	cmp	r3, #255	@ 0xff
 8005b80:	d801      	bhi.n	8005b86 <HAL_GPIO_Init+0x13a>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	e001      	b.n	8005b8a <HAL_GPIO_Init+0x13e>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	3304      	adds	r3, #4
 8005b8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	2bff      	cmp	r3, #255	@ 0xff
 8005b90:	d802      	bhi.n	8005b98 <HAL_GPIO_Init+0x14c>
 8005b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	e002      	b.n	8005b9e <HAL_GPIO_Init+0x152>
 8005b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9a:	3b08      	subs	r3, #8
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	210f      	movs	r1, #15
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bac:	43db      	mvns	r3, r3
 8005bae:	401a      	ands	r2, r3
 8005bb0:	6a39      	ldr	r1, [r7, #32]
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f000 80b1 	beq.w	8005d2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005bcc:	4b4d      	ldr	r3, [pc, #308]	@ (8005d04 <HAL_GPIO_Init+0x2b8>)
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	4a4c      	ldr	r2, [pc, #304]	@ (8005d04 <HAL_GPIO_Init+0x2b8>)
 8005bd2:	f043 0301 	orr.w	r3, r3, #1
 8005bd6:	6193      	str	r3, [r2, #24]
 8005bd8:	4b4a      	ldr	r3, [pc, #296]	@ (8005d04 <HAL_GPIO_Init+0x2b8>)
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	60bb      	str	r3, [r7, #8]
 8005be2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005be4:	4a48      	ldr	r2, [pc, #288]	@ (8005d08 <HAL_GPIO_Init+0x2bc>)
 8005be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be8:	089b      	lsrs	r3, r3, #2
 8005bea:	3302      	adds	r3, #2
 8005bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bf0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf4:	f003 0303 	and.w	r3, r3, #3
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	220f      	movs	r2, #15
 8005bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005c00:	43db      	mvns	r3, r3
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	4013      	ands	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a40      	ldr	r2, [pc, #256]	@ (8005d0c <HAL_GPIO_Init+0x2c0>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d013      	beq.n	8005c38 <HAL_GPIO_Init+0x1ec>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a3f      	ldr	r2, [pc, #252]	@ (8005d10 <HAL_GPIO_Init+0x2c4>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d00d      	beq.n	8005c34 <HAL_GPIO_Init+0x1e8>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a3e      	ldr	r2, [pc, #248]	@ (8005d14 <HAL_GPIO_Init+0x2c8>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d007      	beq.n	8005c30 <HAL_GPIO_Init+0x1e4>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a3d      	ldr	r2, [pc, #244]	@ (8005d18 <HAL_GPIO_Init+0x2cc>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d101      	bne.n	8005c2c <HAL_GPIO_Init+0x1e0>
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e006      	b.n	8005c3a <HAL_GPIO_Init+0x1ee>
 8005c2c:	2304      	movs	r3, #4
 8005c2e:	e004      	b.n	8005c3a <HAL_GPIO_Init+0x1ee>
 8005c30:	2302      	movs	r3, #2
 8005c32:	e002      	b.n	8005c3a <HAL_GPIO_Init+0x1ee>
 8005c34:	2301      	movs	r3, #1
 8005c36:	e000      	b.n	8005c3a <HAL_GPIO_Init+0x1ee>
 8005c38:	2300      	movs	r3, #0
 8005c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c3c:	f002 0203 	and.w	r2, r2, #3
 8005c40:	0092      	lsls	r2, r2, #2
 8005c42:	4093      	lsls	r3, r2
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005c4a:	492f      	ldr	r1, [pc, #188]	@ (8005d08 <HAL_GPIO_Init+0x2bc>)
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4e:	089b      	lsrs	r3, r3, #2
 8005c50:	3302      	adds	r3, #2
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d006      	beq.n	8005c72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005c64:	4b2d      	ldr	r3, [pc, #180]	@ (8005d1c <HAL_GPIO_Init+0x2d0>)
 8005c66:	689a      	ldr	r2, [r3, #8]
 8005c68:	492c      	ldr	r1, [pc, #176]	@ (8005d1c <HAL_GPIO_Init+0x2d0>)
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	608b      	str	r3, [r1, #8]
 8005c70:	e006      	b.n	8005c80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005c72:	4b2a      	ldr	r3, [pc, #168]	@ (8005d1c <HAL_GPIO_Init+0x2d0>)
 8005c74:	689a      	ldr	r2, [r3, #8]
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	43db      	mvns	r3, r3
 8005c7a:	4928      	ldr	r1, [pc, #160]	@ (8005d1c <HAL_GPIO_Init+0x2d0>)
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d006      	beq.n	8005c9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005c8c:	4b23      	ldr	r3, [pc, #140]	@ (8005d1c <HAL_GPIO_Init+0x2d0>)
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	4922      	ldr	r1, [pc, #136]	@ (8005d1c <HAL_GPIO_Init+0x2d0>)
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	60cb      	str	r3, [r1, #12]
 8005c98:	e006      	b.n	8005ca8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005c9a:	4b20      	ldr	r3, [pc, #128]	@ (8005d1c <HAL_GPIO_Init+0x2d0>)
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	43db      	mvns	r3, r3
 8005ca2:	491e      	ldr	r1, [pc, #120]	@ (8005d1c <HAL_GPIO_Init+0x2d0>)
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d006      	beq.n	8005cc2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005cb4:	4b19      	ldr	r3, [pc, #100]	@ (8005d1c <HAL_GPIO_Init+0x2d0>)
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	4918      	ldr	r1, [pc, #96]	@ (8005d1c <HAL_GPIO_Init+0x2d0>)
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	604b      	str	r3, [r1, #4]
 8005cc0:	e006      	b.n	8005cd0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005cc2:	4b16      	ldr	r3, [pc, #88]	@ (8005d1c <HAL_GPIO_Init+0x2d0>)
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	43db      	mvns	r3, r3
 8005cca:	4914      	ldr	r1, [pc, #80]	@ (8005d1c <HAL_GPIO_Init+0x2d0>)
 8005ccc:	4013      	ands	r3, r2
 8005cce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d021      	beq.n	8005d20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8005d1c <HAL_GPIO_Init+0x2d0>)
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	490e      	ldr	r1, [pc, #56]	@ (8005d1c <HAL_GPIO_Init+0x2d0>)
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	600b      	str	r3, [r1, #0]
 8005ce8:	e021      	b.n	8005d2e <HAL_GPIO_Init+0x2e2>
 8005cea:	bf00      	nop
 8005cec:	10320000 	.word	0x10320000
 8005cf0:	10310000 	.word	0x10310000
 8005cf4:	10220000 	.word	0x10220000
 8005cf8:	10210000 	.word	0x10210000
 8005cfc:	10120000 	.word	0x10120000
 8005d00:	10110000 	.word	0x10110000
 8005d04:	40021000 	.word	0x40021000
 8005d08:	40010000 	.word	0x40010000
 8005d0c:	40010800 	.word	0x40010800
 8005d10:	40010c00 	.word	0x40010c00
 8005d14:	40011000 	.word	0x40011000
 8005d18:	40011400 	.word	0x40011400
 8005d1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005d20:	4b0b      	ldr	r3, [pc, #44]	@ (8005d50 <HAL_GPIO_Init+0x304>)
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	43db      	mvns	r3, r3
 8005d28:	4909      	ldr	r1, [pc, #36]	@ (8005d50 <HAL_GPIO_Init+0x304>)
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d30:	3301      	adds	r3, #1
 8005d32:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f47f ae8e 	bne.w	8005a60 <HAL_GPIO_Init+0x14>
  }
}
 8005d44:	bf00      	nop
 8005d46:	bf00      	nop
 8005d48:	372c      	adds	r7, #44	@ 0x2c
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bc80      	pop	{r7}
 8005d4e:	4770      	bx	lr
 8005d50:	40010400 	.word	0x40010400

08005d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	807b      	strh	r3, [r7, #2]
 8005d60:	4613      	mov	r3, r2
 8005d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d64:	787b      	ldrb	r3, [r7, #1]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d6a:	887a      	ldrh	r2, [r7, #2]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005d70:	e003      	b.n	8005d7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005d72:	887b      	ldrh	r3, [r7, #2]
 8005d74:	041a      	lsls	r2, r3, #16
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	611a      	str	r2, [r3, #16]
}
 8005d7a:	bf00      	nop
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bc80      	pop	{r7}
 8005d82:	4770      	bx	lr

08005d84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e12b      	b.n	8005fee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d106      	bne.n	8005db0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7fb fc96 	bl	80016dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2224      	movs	r2, #36	@ 0x24
 8005db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0201 	bic.w	r2, r2, #1
 8005dc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005dd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005de6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005de8:	f001 fbfc 	bl	80075e4 <HAL_RCC_GetPCLK1Freq>
 8005dec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	4a81      	ldr	r2, [pc, #516]	@ (8005ff8 <HAL_I2C_Init+0x274>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d807      	bhi.n	8005e08 <HAL_I2C_Init+0x84>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4a80      	ldr	r2, [pc, #512]	@ (8005ffc <HAL_I2C_Init+0x278>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	bf94      	ite	ls
 8005e00:	2301      	movls	r3, #1
 8005e02:	2300      	movhi	r3, #0
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	e006      	b.n	8005e16 <HAL_I2C_Init+0x92>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	4a7d      	ldr	r2, [pc, #500]	@ (8006000 <HAL_I2C_Init+0x27c>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	bf94      	ite	ls
 8005e10:	2301      	movls	r3, #1
 8005e12:	2300      	movhi	r3, #0
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d001      	beq.n	8005e1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e0e7      	b.n	8005fee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	4a78      	ldr	r2, [pc, #480]	@ (8006004 <HAL_I2C_Init+0x280>)
 8005e22:	fba2 2303 	umull	r2, r3, r2, r3
 8005e26:	0c9b      	lsrs	r3, r3, #18
 8005e28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	4a6a      	ldr	r2, [pc, #424]	@ (8005ff8 <HAL_I2C_Init+0x274>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d802      	bhi.n	8005e58 <HAL_I2C_Init+0xd4>
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	3301      	adds	r3, #1
 8005e56:	e009      	b.n	8005e6c <HAL_I2C_Init+0xe8>
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005e5e:	fb02 f303 	mul.w	r3, r2, r3
 8005e62:	4a69      	ldr	r2, [pc, #420]	@ (8006008 <HAL_I2C_Init+0x284>)
 8005e64:	fba2 2303 	umull	r2, r3, r2, r3
 8005e68:	099b      	lsrs	r3, r3, #6
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	6812      	ldr	r2, [r2, #0]
 8005e70:	430b      	orrs	r3, r1
 8005e72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005e7e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	495c      	ldr	r1, [pc, #368]	@ (8005ff8 <HAL_I2C_Init+0x274>)
 8005e88:	428b      	cmp	r3, r1
 8005e8a:	d819      	bhi.n	8005ec0 <HAL_I2C_Init+0x13c>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	1e59      	subs	r1, r3, #1
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e9a:	1c59      	adds	r1, r3, #1
 8005e9c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005ea0:	400b      	ands	r3, r1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00a      	beq.n	8005ebc <HAL_I2C_Init+0x138>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	1e59      	subs	r1, r3, #1
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	005b      	lsls	r3, r3, #1
 8005eb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eba:	e051      	b.n	8005f60 <HAL_I2C_Init+0x1dc>
 8005ebc:	2304      	movs	r3, #4
 8005ebe:	e04f      	b.n	8005f60 <HAL_I2C_Init+0x1dc>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d111      	bne.n	8005eec <HAL_I2C_Init+0x168>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	1e58      	subs	r0, r3, #1
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6859      	ldr	r1, [r3, #4]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	005b      	lsls	r3, r3, #1
 8005ed4:	440b      	add	r3, r1
 8005ed6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005eda:	3301      	adds	r3, #1
 8005edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	bf0c      	ite	eq
 8005ee4:	2301      	moveq	r3, #1
 8005ee6:	2300      	movne	r3, #0
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	e012      	b.n	8005f12 <HAL_I2C_Init+0x18e>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	1e58      	subs	r0, r3, #1
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6859      	ldr	r1, [r3, #4]
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	440b      	add	r3, r1
 8005efa:	0099      	lsls	r1, r3, #2
 8005efc:	440b      	add	r3, r1
 8005efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f02:	3301      	adds	r3, #1
 8005f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	bf0c      	ite	eq
 8005f0c:	2301      	moveq	r3, #1
 8005f0e:	2300      	movne	r3, #0
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <HAL_I2C_Init+0x196>
 8005f16:	2301      	movs	r3, #1
 8005f18:	e022      	b.n	8005f60 <HAL_I2C_Init+0x1dc>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10e      	bne.n	8005f40 <HAL_I2C_Init+0x1bc>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	1e58      	subs	r0, r3, #1
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6859      	ldr	r1, [r3, #4]
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	005b      	lsls	r3, r3, #1
 8005f2e:	440b      	add	r3, r1
 8005f30:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f34:	3301      	adds	r3, #1
 8005f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f3e:	e00f      	b.n	8005f60 <HAL_I2C_Init+0x1dc>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	1e58      	subs	r0, r3, #1
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6859      	ldr	r1, [r3, #4]
 8005f48:	460b      	mov	r3, r1
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	440b      	add	r3, r1
 8005f4e:	0099      	lsls	r1, r3, #2
 8005f50:	440b      	add	r3, r1
 8005f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f56:	3301      	adds	r3, #1
 8005f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f60:	6879      	ldr	r1, [r7, #4]
 8005f62:	6809      	ldr	r1, [r1, #0]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	69da      	ldr	r2, [r3, #28]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	431a      	orrs	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	430a      	orrs	r2, r1
 8005f82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005f8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	6911      	ldr	r1, [r2, #16]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	68d2      	ldr	r2, [r2, #12]
 8005f9a:	4311      	orrs	r1, r2
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	6812      	ldr	r2, [r2, #0]
 8005fa0:	430b      	orrs	r3, r1
 8005fa2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	695a      	ldr	r2, [r3, #20]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f042 0201 	orr.w	r2, r2, #1
 8005fce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	000186a0 	.word	0x000186a0
 8005ffc:	001e847f 	.word	0x001e847f
 8006000:	003d08ff 	.word	0x003d08ff
 8006004:	431bde83 	.word	0x431bde83
 8006008:	10624dd3 	.word	0x10624dd3

0800600c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b088      	sub	sp, #32
 8006010:	af02      	add	r7, sp, #8
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	4608      	mov	r0, r1
 8006016:	4611      	mov	r1, r2
 8006018:	461a      	mov	r2, r3
 800601a:	4603      	mov	r3, r0
 800601c:	817b      	strh	r3, [r7, #10]
 800601e:	460b      	mov	r3, r1
 8006020:	813b      	strh	r3, [r7, #8]
 8006022:	4613      	mov	r3, r2
 8006024:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006026:	f7ff fbff 	bl	8005828 <HAL_GetTick>
 800602a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2b20      	cmp	r3, #32
 8006036:	f040 80d9 	bne.w	80061ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	2319      	movs	r3, #25
 8006040:	2201      	movs	r2, #1
 8006042:	496d      	ldr	r1, [pc, #436]	@ (80061f8 <HAL_I2C_Mem_Write+0x1ec>)
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f000 fccd 	bl	80069e4 <I2C_WaitOnFlagUntilTimeout>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006050:	2302      	movs	r3, #2
 8006052:	e0cc      	b.n	80061ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800605a:	2b01      	cmp	r3, #1
 800605c:	d101      	bne.n	8006062 <HAL_I2C_Mem_Write+0x56>
 800605e:	2302      	movs	r3, #2
 8006060:	e0c5      	b.n	80061ee <HAL_I2C_Mem_Write+0x1e2>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b01      	cmp	r3, #1
 8006076:	d007      	beq.n	8006088 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f042 0201 	orr.w	r2, r2, #1
 8006086:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006096:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2221      	movs	r2, #33	@ 0x21
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2240      	movs	r2, #64	@ 0x40
 80060a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6a3a      	ldr	r2, [r7, #32]
 80060b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80060b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060be:	b29a      	uxth	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	4a4d      	ldr	r2, [pc, #308]	@ (80061fc <HAL_I2C_Mem_Write+0x1f0>)
 80060c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060ca:	88f8      	ldrh	r0, [r7, #6]
 80060cc:	893a      	ldrh	r2, [r7, #8]
 80060ce:	8979      	ldrh	r1, [r7, #10]
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	9301      	str	r3, [sp, #4]
 80060d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	4603      	mov	r3, r0
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 fb04 	bl	80066e8 <I2C_RequestMemoryWrite>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d052      	beq.n	800618c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e081      	b.n	80061ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f000 fd92 	bl	8006c18 <I2C_WaitOnTXEFlagUntilTimeout>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00d      	beq.n	8006116 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060fe:	2b04      	cmp	r3, #4
 8006100:	d107      	bne.n	8006112 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006110:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e06b      	b.n	80061ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800611a:	781a      	ldrb	r2, [r3, #0]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006126:	1c5a      	adds	r2, r3, #1
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006130:	3b01      	subs	r3, #1
 8006132:	b29a      	uxth	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800613c:	b29b      	uxth	r3, r3
 800613e:	3b01      	subs	r3, #1
 8006140:	b29a      	uxth	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	f003 0304 	and.w	r3, r3, #4
 8006150:	2b04      	cmp	r3, #4
 8006152:	d11b      	bne.n	800618c <HAL_I2C_Mem_Write+0x180>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006158:	2b00      	cmp	r3, #0
 800615a:	d017      	beq.n	800618c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006160:	781a      	ldrb	r2, [r3, #0]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616c:	1c5a      	adds	r2, r3, #1
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006176:	3b01      	subs	r3, #1
 8006178:	b29a      	uxth	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006182:	b29b      	uxth	r3, r3
 8006184:	3b01      	subs	r3, #1
 8006186:	b29a      	uxth	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1aa      	bne.n	80060ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f000 fd85 	bl	8006ca8 <I2C_WaitOnBTFFlagUntilTimeout>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00d      	beq.n	80061c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a8:	2b04      	cmp	r3, #4
 80061aa:	d107      	bne.n	80061bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e016      	b.n	80061ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2220      	movs	r2, #32
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80061e8:	2300      	movs	r3, #0
 80061ea:	e000      	b.n	80061ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80061ec:	2302      	movs	r3, #2
  }
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3718      	adds	r7, #24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	00100002 	.word	0x00100002
 80061fc:	ffff0000 	.word	0xffff0000

08006200 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b08c      	sub	sp, #48	@ 0x30
 8006204:	af02      	add	r7, sp, #8
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	4608      	mov	r0, r1
 800620a:	4611      	mov	r1, r2
 800620c:	461a      	mov	r2, r3
 800620e:	4603      	mov	r3, r0
 8006210:	817b      	strh	r3, [r7, #10]
 8006212:	460b      	mov	r3, r1
 8006214:	813b      	strh	r3, [r7, #8]
 8006216:	4613      	mov	r3, r2
 8006218:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800621e:	f7ff fb03 	bl	8005828 <HAL_GetTick>
 8006222:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b20      	cmp	r3, #32
 800622e:	f040 8250 	bne.w	80066d2 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	2319      	movs	r3, #25
 8006238:	2201      	movs	r2, #1
 800623a:	4982      	ldr	r1, [pc, #520]	@ (8006444 <HAL_I2C_Mem_Read+0x244>)
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 fbd1 	bl	80069e4 <I2C_WaitOnFlagUntilTimeout>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8006248:	2302      	movs	r3, #2
 800624a:	e243      	b.n	80066d4 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006252:	2b01      	cmp	r3, #1
 8006254:	d101      	bne.n	800625a <HAL_I2C_Mem_Read+0x5a>
 8006256:	2302      	movs	r3, #2
 8006258:	e23c      	b.n	80066d4 <HAL_I2C_Mem_Read+0x4d4>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0301 	and.w	r3, r3, #1
 800626c:	2b01      	cmp	r3, #1
 800626e:	d007      	beq.n	8006280 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0201 	orr.w	r2, r2, #1
 800627e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800628e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2222      	movs	r2, #34	@ 0x22
 8006294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2240      	movs	r2, #64	@ 0x40
 800629c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80062b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	4a62      	ldr	r2, [pc, #392]	@ (8006448 <HAL_I2C_Mem_Read+0x248>)
 80062c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80062c2:	88f8      	ldrh	r0, [r7, #6]
 80062c4:	893a      	ldrh	r2, [r7, #8]
 80062c6:	8979      	ldrh	r1, [r7, #10]
 80062c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ca:	9301      	str	r3, [sp, #4]
 80062cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	4603      	mov	r3, r0
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 fa9e 	bl	8006814 <I2C_RequestMemoryRead>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e1f8      	b.n	80066d4 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d113      	bne.n	8006312 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062ea:	2300      	movs	r3, #0
 80062ec:	61fb      	str	r3, [r7, #28]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	61fb      	str	r3, [r7, #28]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	61fb      	str	r3, [r7, #28]
 80062fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800630e:	601a      	str	r2, [r3, #0]
 8006310:	e1cc      	b.n	80066ac <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006316:	2b01      	cmp	r3, #1
 8006318:	d11e      	bne.n	8006358 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006328:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800632a:	b672      	cpsid	i
}
 800632c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800632e:	2300      	movs	r3, #0
 8006330:	61bb      	str	r3, [r7, #24]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	61bb      	str	r3, [r7, #24]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	61bb      	str	r3, [r7, #24]
 8006342:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006352:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006354:	b662      	cpsie	i
}
 8006356:	e035      	b.n	80063c4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800635c:	2b02      	cmp	r3, #2
 800635e:	d11e      	bne.n	800639e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800636e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006370:	b672      	cpsid	i
}
 8006372:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006374:	2300      	movs	r3, #0
 8006376:	617b      	str	r3, [r7, #20]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	617b      	str	r3, [r7, #20]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	617b      	str	r3, [r7, #20]
 8006388:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006398:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800639a:	b662      	cpsie	i
}
 800639c:	e012      	b.n	80063c4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80063ac:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063ae:	2300      	movs	r3, #0
 80063b0:	613b      	str	r3, [r7, #16]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	695b      	ldr	r3, [r3, #20]
 80063b8:	613b      	str	r3, [r7, #16]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	613b      	str	r3, [r7, #16]
 80063c2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80063c4:	e172      	b.n	80066ac <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063ca:	2b03      	cmp	r3, #3
 80063cc:	f200 811f 	bhi.w	800660e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d123      	bne.n	8006420 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f000 fcab 	bl	8006d38 <I2C_WaitOnRXNEFlagUntilTimeout>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d001      	beq.n	80063ec <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e173      	b.n	80066d4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	691a      	ldr	r2, [r3, #16]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f6:	b2d2      	uxtb	r2, r2
 80063f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063fe:	1c5a      	adds	r2, r3, #1
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006408:	3b01      	subs	r3, #1
 800640a:	b29a      	uxth	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006414:	b29b      	uxth	r3, r3
 8006416:	3b01      	subs	r3, #1
 8006418:	b29a      	uxth	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800641e:	e145      	b.n	80066ac <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006424:	2b02      	cmp	r3, #2
 8006426:	d152      	bne.n	80064ce <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800642e:	2200      	movs	r2, #0
 8006430:	4906      	ldr	r1, [pc, #24]	@ (800644c <HAL_I2C_Mem_Read+0x24c>)
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f000 fad6 	bl	80069e4 <I2C_WaitOnFlagUntilTimeout>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d008      	beq.n	8006450 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e148      	b.n	80066d4 <HAL_I2C_Mem_Read+0x4d4>
 8006442:	bf00      	nop
 8006444:	00100002 	.word	0x00100002
 8006448:	ffff0000 	.word	0xffff0000
 800644c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006450:	b672      	cpsid	i
}
 8006452:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006462:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	691a      	ldr	r2, [r3, #16]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646e:	b2d2      	uxtb	r2, r2
 8006470:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006476:	1c5a      	adds	r2, r3, #1
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006480:	3b01      	subs	r3, #1
 8006482:	b29a      	uxth	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800648c:	b29b      	uxth	r3, r3
 800648e:	3b01      	subs	r3, #1
 8006490:	b29a      	uxth	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006496:	b662      	cpsie	i
}
 8006498:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	691a      	ldr	r2, [r3, #16]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a4:	b2d2      	uxtb	r2, r2
 80064a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ac:	1c5a      	adds	r2, r3, #1
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064b6:	3b01      	subs	r3, #1
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	3b01      	subs	r3, #1
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80064cc:	e0ee      	b.n	80066ac <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80064ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d4:	2200      	movs	r2, #0
 80064d6:	4981      	ldr	r1, [pc, #516]	@ (80066dc <HAL_I2C_Mem_Read+0x4dc>)
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f000 fa83 	bl	80069e4 <I2C_WaitOnFlagUntilTimeout>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d001      	beq.n	80064e8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e0f5      	b.n	80066d4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80064f8:	b672      	cpsid	i
}
 80064fa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	691a      	ldr	r2, [r3, #16]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006506:	b2d2      	uxtb	r2, r2
 8006508:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650e:	1c5a      	adds	r2, r3, #1
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006518:	3b01      	subs	r3, #1
 800651a:	b29a      	uxth	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006524:	b29b      	uxth	r3, r3
 8006526:	3b01      	subs	r3, #1
 8006528:	b29a      	uxth	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800652e:	4b6c      	ldr	r3, [pc, #432]	@ (80066e0 <HAL_I2C_Mem_Read+0x4e0>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	08db      	lsrs	r3, r3, #3
 8006534:	4a6b      	ldr	r2, [pc, #428]	@ (80066e4 <HAL_I2C_Mem_Read+0x4e4>)
 8006536:	fba2 2303 	umull	r2, r3, r2, r3
 800653a:	0a1a      	lsrs	r2, r3, #8
 800653c:	4613      	mov	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	00da      	lsls	r2, r3, #3
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	3b01      	subs	r3, #1
 800654c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d118      	bne.n	8006586 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2220      	movs	r2, #32
 800655e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800656e:	f043 0220 	orr.w	r2, r3, #32
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006576:	b662      	cpsie	i
}
 8006578:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e0a6      	b.n	80066d4 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	f003 0304 	and.w	r3, r3, #4
 8006590:	2b04      	cmp	r3, #4
 8006592:	d1d9      	bne.n	8006548 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	691a      	ldr	r2, [r3, #16]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ae:	b2d2      	uxtb	r2, r2
 80065b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b6:	1c5a      	adds	r2, r3, #1
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065c0:	3b01      	subs	r3, #1
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	3b01      	subs	r3, #1
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80065d6:	b662      	cpsie	i
}
 80065d8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	691a      	ldr	r2, [r3, #16]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e4:	b2d2      	uxtb	r2, r2
 80065e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ec:	1c5a      	adds	r2, r3, #1
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065f6:	3b01      	subs	r3, #1
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006602:	b29b      	uxth	r3, r3
 8006604:	3b01      	subs	r3, #1
 8006606:	b29a      	uxth	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800660c:	e04e      	b.n	80066ac <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800660e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006610:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f000 fb90 	bl	8006d38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e058      	b.n	80066d4 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	691a      	ldr	r2, [r3, #16]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800662c:	b2d2      	uxtb	r2, r2
 800662e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006634:	1c5a      	adds	r2, r3, #1
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800663e:	3b01      	subs	r3, #1
 8006640:	b29a      	uxth	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800664a:	b29b      	uxth	r3, r3
 800664c:	3b01      	subs	r3, #1
 800664e:	b29a      	uxth	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	f003 0304 	and.w	r3, r3, #4
 800665e:	2b04      	cmp	r3, #4
 8006660:	d124      	bne.n	80066ac <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006666:	2b03      	cmp	r3, #3
 8006668:	d107      	bne.n	800667a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006678:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	691a      	ldr	r2, [r3, #16]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006684:	b2d2      	uxtb	r2, r2
 8006686:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800668c:	1c5a      	adds	r2, r3, #1
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006696:	3b01      	subs	r3, #1
 8006698:	b29a      	uxth	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	3b01      	subs	r3, #1
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f47f ae88 	bne.w	80063c6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2220      	movs	r2, #32
 80066ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80066ce:	2300      	movs	r3, #0
 80066d0:	e000      	b.n	80066d4 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80066d2:	2302      	movs	r3, #2
  }
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3728      	adds	r7, #40	@ 0x28
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	00010004 	.word	0x00010004
 80066e0:	20000000 	.word	0x20000000
 80066e4:	14f8b589 	.word	0x14f8b589

080066e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b088      	sub	sp, #32
 80066ec:	af02      	add	r7, sp, #8
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	4608      	mov	r0, r1
 80066f2:	4611      	mov	r1, r2
 80066f4:	461a      	mov	r2, r3
 80066f6:	4603      	mov	r3, r0
 80066f8:	817b      	strh	r3, [r7, #10]
 80066fa:	460b      	mov	r3, r1
 80066fc:	813b      	strh	r3, [r7, #8]
 80066fe:	4613      	mov	r3, r2
 8006700:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006710:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	2200      	movs	r2, #0
 800671a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f000 f960 	bl	80069e4 <I2C_WaitOnFlagUntilTimeout>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00d      	beq.n	8006746 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006734:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006738:	d103      	bne.n	8006742 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006740:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e05f      	b.n	8006806 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006746:	897b      	ldrh	r3, [r7, #10]
 8006748:	b2db      	uxtb	r3, r3
 800674a:	461a      	mov	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006754:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006758:	6a3a      	ldr	r2, [r7, #32]
 800675a:	492d      	ldr	r1, [pc, #180]	@ (8006810 <I2C_RequestMemoryWrite+0x128>)
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 f9bb 	bl	8006ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d001      	beq.n	800676c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e04c      	b.n	8006806 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800676c:	2300      	movs	r3, #0
 800676e:	617b      	str	r3, [r7, #20]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	617b      	str	r3, [r7, #20]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	617b      	str	r3, [r7, #20]
 8006780:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006782:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006784:	6a39      	ldr	r1, [r7, #32]
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f000 fa46 	bl	8006c18 <I2C_WaitOnTXEFlagUntilTimeout>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00d      	beq.n	80067ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006796:	2b04      	cmp	r3, #4
 8006798:	d107      	bne.n	80067aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e02b      	b.n	8006806 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80067ae:	88fb      	ldrh	r3, [r7, #6]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d105      	bne.n	80067c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80067b4:	893b      	ldrh	r3, [r7, #8]
 80067b6:	b2da      	uxtb	r2, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	611a      	str	r2, [r3, #16]
 80067be:	e021      	b.n	8006804 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80067c0:	893b      	ldrh	r3, [r7, #8]
 80067c2:	0a1b      	lsrs	r3, r3, #8
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067d0:	6a39      	ldr	r1, [r7, #32]
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f000 fa20 	bl	8006c18 <I2C_WaitOnTXEFlagUntilTimeout>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00d      	beq.n	80067fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e2:	2b04      	cmp	r3, #4
 80067e4:	d107      	bne.n	80067f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e005      	b.n	8006806 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80067fa:	893b      	ldrh	r3, [r7, #8]
 80067fc:	b2da      	uxtb	r2, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	00010002 	.word	0x00010002

08006814 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b088      	sub	sp, #32
 8006818:	af02      	add	r7, sp, #8
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	4608      	mov	r0, r1
 800681e:	4611      	mov	r1, r2
 8006820:	461a      	mov	r2, r3
 8006822:	4603      	mov	r3, r0
 8006824:	817b      	strh	r3, [r7, #10]
 8006826:	460b      	mov	r3, r1
 8006828:	813b      	strh	r3, [r7, #8]
 800682a:	4613      	mov	r3, r2
 800682c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800683c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800684c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800684e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	6a3b      	ldr	r3, [r7, #32]
 8006854:	2200      	movs	r2, #0
 8006856:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f000 f8c2 	bl	80069e4 <I2C_WaitOnFlagUntilTimeout>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00d      	beq.n	8006882 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006870:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006874:	d103      	bne.n	800687e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800687c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e0aa      	b.n	80069d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006882:	897b      	ldrh	r3, [r7, #10]
 8006884:	b2db      	uxtb	r3, r3
 8006886:	461a      	mov	r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006890:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006894:	6a3a      	ldr	r2, [r7, #32]
 8006896:	4952      	ldr	r1, [pc, #328]	@ (80069e0 <I2C_RequestMemoryRead+0x1cc>)
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 f91d 	bl	8006ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d001      	beq.n	80068a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e097      	b.n	80069d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068a8:	2300      	movs	r3, #0
 80068aa:	617b      	str	r3, [r7, #20]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	617b      	str	r3, [r7, #20]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	617b      	str	r3, [r7, #20]
 80068bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068c0:	6a39      	ldr	r1, [r7, #32]
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f000 f9a8 	bl	8006c18 <I2C_WaitOnTXEFlagUntilTimeout>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00d      	beq.n	80068ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d2:	2b04      	cmp	r3, #4
 80068d4:	d107      	bne.n	80068e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e076      	b.n	80069d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80068ea:	88fb      	ldrh	r3, [r7, #6]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d105      	bne.n	80068fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80068f0:	893b      	ldrh	r3, [r7, #8]
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	611a      	str	r2, [r3, #16]
 80068fa:	e021      	b.n	8006940 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80068fc:	893b      	ldrh	r3, [r7, #8]
 80068fe:	0a1b      	lsrs	r3, r3, #8
 8006900:	b29b      	uxth	r3, r3
 8006902:	b2da      	uxtb	r2, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800690a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800690c:	6a39      	ldr	r1, [r7, #32]
 800690e:	68f8      	ldr	r0, [r7, #12]
 8006910:	f000 f982 	bl	8006c18 <I2C_WaitOnTXEFlagUntilTimeout>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00d      	beq.n	8006936 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800691e:	2b04      	cmp	r3, #4
 8006920:	d107      	bne.n	8006932 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006930:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e050      	b.n	80069d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006936:	893b      	ldrh	r3, [r7, #8]
 8006938:	b2da      	uxtb	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006940:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006942:	6a39      	ldr	r1, [r7, #32]
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f000 f967 	bl	8006c18 <I2C_WaitOnTXEFlagUntilTimeout>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00d      	beq.n	800696c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006954:	2b04      	cmp	r3, #4
 8006956:	d107      	bne.n	8006968 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006966:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e035      	b.n	80069d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800697a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800697c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	6a3b      	ldr	r3, [r7, #32]
 8006982:	2200      	movs	r2, #0
 8006984:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f000 f82b 	bl	80069e4 <I2C_WaitOnFlagUntilTimeout>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00d      	beq.n	80069b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800699e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069a2:	d103      	bne.n	80069ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e013      	b.n	80069d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80069b0:	897b      	ldrh	r3, [r7, #10]
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	f043 0301 	orr.w	r3, r3, #1
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c2:	6a3a      	ldr	r2, [r7, #32]
 80069c4:	4906      	ldr	r1, [pc, #24]	@ (80069e0 <I2C_RequestMemoryRead+0x1cc>)
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 f886 	bl	8006ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e000      	b.n	80069d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	00010002 	.word	0x00010002

080069e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	603b      	str	r3, [r7, #0]
 80069f0:	4613      	mov	r3, r2
 80069f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069f4:	e048      	b.n	8006a88 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fc:	d044      	beq.n	8006a88 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069fe:	f7fe ff13 	bl	8005828 <HAL_GetTick>
 8006a02:	4602      	mov	r2, r0
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d302      	bcc.n	8006a14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d139      	bne.n	8006a88 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	0c1b      	lsrs	r3, r3, #16
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d10d      	bne.n	8006a3a <I2C_WaitOnFlagUntilTimeout+0x56>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	43da      	mvns	r2, r3
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	4013      	ands	r3, r2
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	bf0c      	ite	eq
 8006a30:	2301      	moveq	r3, #1
 8006a32:	2300      	movne	r3, #0
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	461a      	mov	r2, r3
 8006a38:	e00c      	b.n	8006a54 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	43da      	mvns	r2, r3
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	4013      	ands	r3, r2
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	bf0c      	ite	eq
 8006a4c:	2301      	moveq	r3, #1
 8006a4e:	2300      	movne	r3, #0
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	461a      	mov	r2, r3
 8006a54:	79fb      	ldrb	r3, [r7, #7]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d116      	bne.n	8006a88 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2220      	movs	r2, #32
 8006a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a74:	f043 0220 	orr.w	r2, r3, #32
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e023      	b.n	8006ad0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	0c1b      	lsrs	r3, r3, #16
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d10d      	bne.n	8006aae <I2C_WaitOnFlagUntilTimeout+0xca>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	695b      	ldr	r3, [r3, #20]
 8006a98:	43da      	mvns	r2, r3
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	bf0c      	ite	eq
 8006aa4:	2301      	moveq	r3, #1
 8006aa6:	2300      	movne	r3, #0
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	461a      	mov	r2, r3
 8006aac:	e00c      	b.n	8006ac8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	43da      	mvns	r2, r3
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	4013      	ands	r3, r2
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	bf0c      	ite	eq
 8006ac0:	2301      	moveq	r3, #1
 8006ac2:	2300      	movne	r3, #0
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	79fb      	ldrb	r3, [r7, #7]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d093      	beq.n	80069f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
 8006ae4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ae6:	e071      	b.n	8006bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006af2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006af6:	d123      	bne.n	8006b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b06:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006b10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2220      	movs	r2, #32
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b2c:	f043 0204 	orr.w	r2, r3, #4
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e067      	b.n	8006c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b46:	d041      	beq.n	8006bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b48:	f7fe fe6e 	bl	8005828 <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d302      	bcc.n	8006b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d136      	bne.n	8006bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	0c1b      	lsrs	r3, r3, #16
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d10c      	bne.n	8006b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	43da      	mvns	r2, r3
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	4013      	ands	r3, r2
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	bf14      	ite	ne
 8006b7a:	2301      	movne	r3, #1
 8006b7c:	2300      	moveq	r3, #0
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	e00b      	b.n	8006b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	43da      	mvns	r2, r3
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	bf14      	ite	ne
 8006b94:	2301      	movne	r3, #1
 8006b96:	2300      	moveq	r3, #0
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d016      	beq.n	8006bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb8:	f043 0220 	orr.w	r2, r3, #32
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e021      	b.n	8006c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	0c1b      	lsrs	r3, r3, #16
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d10c      	bne.n	8006bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	695b      	ldr	r3, [r3, #20]
 8006bdc:	43da      	mvns	r2, r3
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	4013      	ands	r3, r2
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	bf14      	ite	ne
 8006be8:	2301      	movne	r3, #1
 8006bea:	2300      	moveq	r3, #0
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	e00b      	b.n	8006c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	43da      	mvns	r2, r3
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	bf14      	ite	ne
 8006c02:	2301      	movne	r3, #1
 8006c04:	2300      	moveq	r3, #0
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f47f af6d 	bne.w	8006ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3710      	adds	r7, #16
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c24:	e034      	b.n	8006c90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f000 f8e3 	bl	8006df2 <I2C_IsAcknowledgeFailed>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e034      	b.n	8006ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3c:	d028      	beq.n	8006c90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c3e:	f7fe fdf3 	bl	8005828 <HAL_GetTick>
 8006c42:	4602      	mov	r2, r0
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d302      	bcc.n	8006c54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d11d      	bne.n	8006c90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c5e:	2b80      	cmp	r3, #128	@ 0x80
 8006c60:	d016      	beq.n	8006c90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c7c:	f043 0220 	orr.w	r2, r3, #32
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e007      	b.n	8006ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c9a:	2b80      	cmp	r3, #128	@ 0x80
 8006c9c:	d1c3      	bne.n	8006c26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006cb4:	e034      	b.n	8006d20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f000 f89b 	bl	8006df2 <I2C_IsAcknowledgeFailed>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d001      	beq.n	8006cc6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e034      	b.n	8006d30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ccc:	d028      	beq.n	8006d20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cce:	f7fe fdab 	bl	8005828 <HAL_GetTick>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d302      	bcc.n	8006ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d11d      	bne.n	8006d20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	695b      	ldr	r3, [r3, #20]
 8006cea:	f003 0304 	and.w	r3, r3, #4
 8006cee:	2b04      	cmp	r3, #4
 8006cf0:	d016      	beq.n	8006d20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d0c:	f043 0220 	orr.w	r2, r3, #32
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e007      	b.n	8006d30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	f003 0304 	and.w	r3, r3, #4
 8006d2a:	2b04      	cmp	r3, #4
 8006d2c:	d1c3      	bne.n	8006cb6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d44:	e049      	b.n	8006dda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	695b      	ldr	r3, [r3, #20]
 8006d4c:	f003 0310 	and.w	r3, r3, #16
 8006d50:	2b10      	cmp	r3, #16
 8006d52:	d119      	bne.n	8006d88 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f06f 0210 	mvn.w	r2, #16
 8006d5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2220      	movs	r2, #32
 8006d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e030      	b.n	8006dea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d88:	f7fe fd4e 	bl	8005828 <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	68ba      	ldr	r2, [r7, #8]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d302      	bcc.n	8006d9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d11d      	bne.n	8006dda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	695b      	ldr	r3, [r3, #20]
 8006da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006da8:	2b40      	cmp	r3, #64	@ 0x40
 8006daa:	d016      	beq.n	8006dda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2220      	movs	r2, #32
 8006db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc6:	f043 0220 	orr.w	r2, r3, #32
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e007      	b.n	8006dea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	695b      	ldr	r3, [r3, #20]
 8006de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006de4:	2b40      	cmp	r3, #64	@ 0x40
 8006de6:	d1ae      	bne.n	8006d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b083      	sub	sp, #12
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	695b      	ldr	r3, [r3, #20]
 8006e00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e08:	d11b      	bne.n	8006e42 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006e12:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2e:	f043 0204 	orr.w	r2, r3, #4
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e000      	b.n	8006e44 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bc80      	pop	{r7}
 8006e4c:	4770      	bx	lr
	...

08006e50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e272      	b.n	8007348 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0301 	and.w	r3, r3, #1
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f000 8087 	beq.w	8006f7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e70:	4b92      	ldr	r3, [pc, #584]	@ (80070bc <HAL_RCC_OscConfig+0x26c>)
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	f003 030c 	and.w	r3, r3, #12
 8006e78:	2b04      	cmp	r3, #4
 8006e7a:	d00c      	beq.n	8006e96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006e7c:	4b8f      	ldr	r3, [pc, #572]	@ (80070bc <HAL_RCC_OscConfig+0x26c>)
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	f003 030c 	and.w	r3, r3, #12
 8006e84:	2b08      	cmp	r3, #8
 8006e86:	d112      	bne.n	8006eae <HAL_RCC_OscConfig+0x5e>
 8006e88:	4b8c      	ldr	r3, [pc, #560]	@ (80070bc <HAL_RCC_OscConfig+0x26c>)
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e94:	d10b      	bne.n	8006eae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e96:	4b89      	ldr	r3, [pc, #548]	@ (80070bc <HAL_RCC_OscConfig+0x26c>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d06c      	beq.n	8006f7c <HAL_RCC_OscConfig+0x12c>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d168      	bne.n	8006f7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e24c      	b.n	8007348 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006eb6:	d106      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x76>
 8006eb8:	4b80      	ldr	r3, [pc, #512]	@ (80070bc <HAL_RCC_OscConfig+0x26c>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a7f      	ldr	r2, [pc, #508]	@ (80070bc <HAL_RCC_OscConfig+0x26c>)
 8006ebe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ec2:	6013      	str	r3, [r2, #0]
 8006ec4:	e02e      	b.n	8006f24 <HAL_RCC_OscConfig+0xd4>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10c      	bne.n	8006ee8 <HAL_RCC_OscConfig+0x98>
 8006ece:	4b7b      	ldr	r3, [pc, #492]	@ (80070bc <HAL_RCC_OscConfig+0x26c>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a7a      	ldr	r2, [pc, #488]	@ (80070bc <HAL_RCC_OscConfig+0x26c>)
 8006ed4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ed8:	6013      	str	r3, [r2, #0]
 8006eda:	4b78      	ldr	r3, [pc, #480]	@ (80070bc <HAL_RCC_OscConfig+0x26c>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a77      	ldr	r2, [pc, #476]	@ (80070bc <HAL_RCC_OscConfig+0x26c>)
 8006ee0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ee4:	6013      	str	r3, [r2, #0]
 8006ee6:	e01d      	b.n	8006f24 <HAL_RCC_OscConfig+0xd4>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ef0:	d10c      	bne.n	8006f0c <HAL_RCC_OscConfig+0xbc>
 8006ef2:	4b72      	ldr	r3, [pc, #456]	@ (80070bc <HAL_RCC_OscConfig+0x26c>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a71      	ldr	r2, [pc, #452]	@ (80070bc <HAL_RCC_OscConfig+0x26c>)
 8006ef8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006efc:	6013      	str	r3, [r2, #0]
 8006efe:	4b6f      	ldr	r3, [pc, #444]	@ (80070bc <HAL_RCC_OscConfig+0x26c>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a6e      	ldr	r2, [pc, #440]	@ (80070bc <HAL_RCC_OscConfig+0x26c>)
 8006f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f08:	6013      	str	r3, [r2, #0]
 8006f0a:	e00b      	b.n	8006f24 <HAL_RCC_OscConfig+0xd4>
 8006f0c:	4b6b      	ldr	r3, [pc, #428]	@ (80070bc <HAL_RCC_OscConfig+0x26c>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a6a      	ldr	r2, [pc, #424]	@ (80070bc <HAL_RCC_OscConfig+0x26c>)
 8006f12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f16:	6013      	str	r3, [r2, #0]
 8006f18:	4b68      	ldr	r3, [pc, #416]	@ (80070bc <HAL_RCC_OscConfig+0x26c>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a67      	ldr	r2, [pc, #412]	@ (80070bc <HAL_RCC_OscConfig+0x26c>)
 8006f1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d013      	beq.n	8006f54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f2c:	f7fe fc7c 	bl	8005828 <HAL_GetTick>
 8006f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f32:	e008      	b.n	8006f46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f34:	f7fe fc78 	bl	8005828 <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	2b64      	cmp	r3, #100	@ 0x64
 8006f40:	d901      	bls.n	8006f46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e200      	b.n	8007348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f46:	4b5d      	ldr	r3, [pc, #372]	@ (80070bc <HAL_RCC_OscConfig+0x26c>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d0f0      	beq.n	8006f34 <HAL_RCC_OscConfig+0xe4>
 8006f52:	e014      	b.n	8006f7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f54:	f7fe fc68 	bl	8005828 <HAL_GetTick>
 8006f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f5a:	e008      	b.n	8006f6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f5c:	f7fe fc64 	bl	8005828 <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	2b64      	cmp	r3, #100	@ 0x64
 8006f68:	d901      	bls.n	8006f6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e1ec      	b.n	8007348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f6e:	4b53      	ldr	r3, [pc, #332]	@ (80070bc <HAL_RCC_OscConfig+0x26c>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1f0      	bne.n	8006f5c <HAL_RCC_OscConfig+0x10c>
 8006f7a:	e000      	b.n	8006f7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d063      	beq.n	8007052 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f8a:	4b4c      	ldr	r3, [pc, #304]	@ (80070bc <HAL_RCC_OscConfig+0x26c>)
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	f003 030c 	and.w	r3, r3, #12
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00b      	beq.n	8006fae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006f96:	4b49      	ldr	r3, [pc, #292]	@ (80070bc <HAL_RCC_OscConfig+0x26c>)
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	f003 030c 	and.w	r3, r3, #12
 8006f9e:	2b08      	cmp	r3, #8
 8006fa0:	d11c      	bne.n	8006fdc <HAL_RCC_OscConfig+0x18c>
 8006fa2:	4b46      	ldr	r3, [pc, #280]	@ (80070bc <HAL_RCC_OscConfig+0x26c>)
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d116      	bne.n	8006fdc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fae:	4b43      	ldr	r3, [pc, #268]	@ (80070bc <HAL_RCC_OscConfig+0x26c>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d005      	beq.n	8006fc6 <HAL_RCC_OscConfig+0x176>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d001      	beq.n	8006fc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e1c0      	b.n	8007348 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fc6:	4b3d      	ldr	r3, [pc, #244]	@ (80070bc <HAL_RCC_OscConfig+0x26c>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	695b      	ldr	r3, [r3, #20]
 8006fd2:	00db      	lsls	r3, r3, #3
 8006fd4:	4939      	ldr	r1, [pc, #228]	@ (80070bc <HAL_RCC_OscConfig+0x26c>)
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fda:	e03a      	b.n	8007052 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d020      	beq.n	8007026 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fe4:	4b36      	ldr	r3, [pc, #216]	@ (80070c0 <HAL_RCC_OscConfig+0x270>)
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fea:	f7fe fc1d 	bl	8005828 <HAL_GetTick>
 8006fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ff0:	e008      	b.n	8007004 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ff2:	f7fe fc19 	bl	8005828 <HAL_GetTick>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d901      	bls.n	8007004 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e1a1      	b.n	8007348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007004:	4b2d      	ldr	r3, [pc, #180]	@ (80070bc <HAL_RCC_OscConfig+0x26c>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	2b00      	cmp	r3, #0
 800700e:	d0f0      	beq.n	8006ff2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007010:	4b2a      	ldr	r3, [pc, #168]	@ (80070bc <HAL_RCC_OscConfig+0x26c>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	00db      	lsls	r3, r3, #3
 800701e:	4927      	ldr	r1, [pc, #156]	@ (80070bc <HAL_RCC_OscConfig+0x26c>)
 8007020:	4313      	orrs	r3, r2
 8007022:	600b      	str	r3, [r1, #0]
 8007024:	e015      	b.n	8007052 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007026:	4b26      	ldr	r3, [pc, #152]	@ (80070c0 <HAL_RCC_OscConfig+0x270>)
 8007028:	2200      	movs	r2, #0
 800702a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800702c:	f7fe fbfc 	bl	8005828 <HAL_GetTick>
 8007030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007032:	e008      	b.n	8007046 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007034:	f7fe fbf8 	bl	8005828 <HAL_GetTick>
 8007038:	4602      	mov	r2, r0
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	2b02      	cmp	r3, #2
 8007040:	d901      	bls.n	8007046 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e180      	b.n	8007348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007046:	4b1d      	ldr	r3, [pc, #116]	@ (80070bc <HAL_RCC_OscConfig+0x26c>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0302 	and.w	r3, r3, #2
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1f0      	bne.n	8007034 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0308 	and.w	r3, r3, #8
 800705a:	2b00      	cmp	r3, #0
 800705c:	d03a      	beq.n	80070d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	699b      	ldr	r3, [r3, #24]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d019      	beq.n	800709a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007066:	4b17      	ldr	r3, [pc, #92]	@ (80070c4 <HAL_RCC_OscConfig+0x274>)
 8007068:	2201      	movs	r2, #1
 800706a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800706c:	f7fe fbdc 	bl	8005828 <HAL_GetTick>
 8007070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007072:	e008      	b.n	8007086 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007074:	f7fe fbd8 	bl	8005828 <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	2b02      	cmp	r3, #2
 8007080:	d901      	bls.n	8007086 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e160      	b.n	8007348 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007086:	4b0d      	ldr	r3, [pc, #52]	@ (80070bc <HAL_RCC_OscConfig+0x26c>)
 8007088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800708a:	f003 0302 	and.w	r3, r3, #2
 800708e:	2b00      	cmp	r3, #0
 8007090:	d0f0      	beq.n	8007074 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007092:	2001      	movs	r0, #1
 8007094:	f000 face 	bl	8007634 <RCC_Delay>
 8007098:	e01c      	b.n	80070d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800709a:	4b0a      	ldr	r3, [pc, #40]	@ (80070c4 <HAL_RCC_OscConfig+0x274>)
 800709c:	2200      	movs	r2, #0
 800709e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070a0:	f7fe fbc2 	bl	8005828 <HAL_GetTick>
 80070a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070a6:	e00f      	b.n	80070c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070a8:	f7fe fbbe 	bl	8005828 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d908      	bls.n	80070c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e146      	b.n	8007348 <HAL_RCC_OscConfig+0x4f8>
 80070ba:	bf00      	nop
 80070bc:	40021000 	.word	0x40021000
 80070c0:	42420000 	.word	0x42420000
 80070c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070c8:	4b92      	ldr	r3, [pc, #584]	@ (8007314 <HAL_RCC_OscConfig+0x4c4>)
 80070ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070cc:	f003 0302 	and.w	r3, r3, #2
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e9      	bne.n	80070a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0304 	and.w	r3, r3, #4
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 80a6 	beq.w	800722e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070e2:	2300      	movs	r3, #0
 80070e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070e6:	4b8b      	ldr	r3, [pc, #556]	@ (8007314 <HAL_RCC_OscConfig+0x4c4>)
 80070e8:	69db      	ldr	r3, [r3, #28]
 80070ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10d      	bne.n	800710e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070f2:	4b88      	ldr	r3, [pc, #544]	@ (8007314 <HAL_RCC_OscConfig+0x4c4>)
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	4a87      	ldr	r2, [pc, #540]	@ (8007314 <HAL_RCC_OscConfig+0x4c4>)
 80070f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070fc:	61d3      	str	r3, [r2, #28]
 80070fe:	4b85      	ldr	r3, [pc, #532]	@ (8007314 <HAL_RCC_OscConfig+0x4c4>)
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007106:	60bb      	str	r3, [r7, #8]
 8007108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800710a:	2301      	movs	r3, #1
 800710c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800710e:	4b82      	ldr	r3, [pc, #520]	@ (8007318 <HAL_RCC_OscConfig+0x4c8>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007116:	2b00      	cmp	r3, #0
 8007118:	d118      	bne.n	800714c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800711a:	4b7f      	ldr	r3, [pc, #508]	@ (8007318 <HAL_RCC_OscConfig+0x4c8>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a7e      	ldr	r2, [pc, #504]	@ (8007318 <HAL_RCC_OscConfig+0x4c8>)
 8007120:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007126:	f7fe fb7f 	bl	8005828 <HAL_GetTick>
 800712a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800712c:	e008      	b.n	8007140 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800712e:	f7fe fb7b 	bl	8005828 <HAL_GetTick>
 8007132:	4602      	mov	r2, r0
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	2b64      	cmp	r3, #100	@ 0x64
 800713a:	d901      	bls.n	8007140 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	e103      	b.n	8007348 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007140:	4b75      	ldr	r3, [pc, #468]	@ (8007318 <HAL_RCC_OscConfig+0x4c8>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007148:	2b00      	cmp	r3, #0
 800714a:	d0f0      	beq.n	800712e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d106      	bne.n	8007162 <HAL_RCC_OscConfig+0x312>
 8007154:	4b6f      	ldr	r3, [pc, #444]	@ (8007314 <HAL_RCC_OscConfig+0x4c4>)
 8007156:	6a1b      	ldr	r3, [r3, #32]
 8007158:	4a6e      	ldr	r2, [pc, #440]	@ (8007314 <HAL_RCC_OscConfig+0x4c4>)
 800715a:	f043 0301 	orr.w	r3, r3, #1
 800715e:	6213      	str	r3, [r2, #32]
 8007160:	e02d      	b.n	80071be <HAL_RCC_OscConfig+0x36e>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10c      	bne.n	8007184 <HAL_RCC_OscConfig+0x334>
 800716a:	4b6a      	ldr	r3, [pc, #424]	@ (8007314 <HAL_RCC_OscConfig+0x4c4>)
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	4a69      	ldr	r2, [pc, #420]	@ (8007314 <HAL_RCC_OscConfig+0x4c4>)
 8007170:	f023 0301 	bic.w	r3, r3, #1
 8007174:	6213      	str	r3, [r2, #32]
 8007176:	4b67      	ldr	r3, [pc, #412]	@ (8007314 <HAL_RCC_OscConfig+0x4c4>)
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	4a66      	ldr	r2, [pc, #408]	@ (8007314 <HAL_RCC_OscConfig+0x4c4>)
 800717c:	f023 0304 	bic.w	r3, r3, #4
 8007180:	6213      	str	r3, [r2, #32]
 8007182:	e01c      	b.n	80071be <HAL_RCC_OscConfig+0x36e>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	2b05      	cmp	r3, #5
 800718a:	d10c      	bne.n	80071a6 <HAL_RCC_OscConfig+0x356>
 800718c:	4b61      	ldr	r3, [pc, #388]	@ (8007314 <HAL_RCC_OscConfig+0x4c4>)
 800718e:	6a1b      	ldr	r3, [r3, #32]
 8007190:	4a60      	ldr	r2, [pc, #384]	@ (8007314 <HAL_RCC_OscConfig+0x4c4>)
 8007192:	f043 0304 	orr.w	r3, r3, #4
 8007196:	6213      	str	r3, [r2, #32]
 8007198:	4b5e      	ldr	r3, [pc, #376]	@ (8007314 <HAL_RCC_OscConfig+0x4c4>)
 800719a:	6a1b      	ldr	r3, [r3, #32]
 800719c:	4a5d      	ldr	r2, [pc, #372]	@ (8007314 <HAL_RCC_OscConfig+0x4c4>)
 800719e:	f043 0301 	orr.w	r3, r3, #1
 80071a2:	6213      	str	r3, [r2, #32]
 80071a4:	e00b      	b.n	80071be <HAL_RCC_OscConfig+0x36e>
 80071a6:	4b5b      	ldr	r3, [pc, #364]	@ (8007314 <HAL_RCC_OscConfig+0x4c4>)
 80071a8:	6a1b      	ldr	r3, [r3, #32]
 80071aa:	4a5a      	ldr	r2, [pc, #360]	@ (8007314 <HAL_RCC_OscConfig+0x4c4>)
 80071ac:	f023 0301 	bic.w	r3, r3, #1
 80071b0:	6213      	str	r3, [r2, #32]
 80071b2:	4b58      	ldr	r3, [pc, #352]	@ (8007314 <HAL_RCC_OscConfig+0x4c4>)
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	4a57      	ldr	r2, [pc, #348]	@ (8007314 <HAL_RCC_OscConfig+0x4c4>)
 80071b8:	f023 0304 	bic.w	r3, r3, #4
 80071bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d015      	beq.n	80071f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071c6:	f7fe fb2f 	bl	8005828 <HAL_GetTick>
 80071ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071cc:	e00a      	b.n	80071e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071ce:	f7fe fb2b 	bl	8005828 <HAL_GetTick>
 80071d2:	4602      	mov	r2, r0
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071dc:	4293      	cmp	r3, r2
 80071de:	d901      	bls.n	80071e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	e0b1      	b.n	8007348 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071e4:	4b4b      	ldr	r3, [pc, #300]	@ (8007314 <HAL_RCC_OscConfig+0x4c4>)
 80071e6:	6a1b      	ldr	r3, [r3, #32]
 80071e8:	f003 0302 	and.w	r3, r3, #2
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d0ee      	beq.n	80071ce <HAL_RCC_OscConfig+0x37e>
 80071f0:	e014      	b.n	800721c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071f2:	f7fe fb19 	bl	8005828 <HAL_GetTick>
 80071f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071f8:	e00a      	b.n	8007210 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071fa:	f7fe fb15 	bl	8005828 <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007208:	4293      	cmp	r3, r2
 800720a:	d901      	bls.n	8007210 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e09b      	b.n	8007348 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007210:	4b40      	ldr	r3, [pc, #256]	@ (8007314 <HAL_RCC_OscConfig+0x4c4>)
 8007212:	6a1b      	ldr	r3, [r3, #32]
 8007214:	f003 0302 	and.w	r3, r3, #2
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1ee      	bne.n	80071fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800721c:	7dfb      	ldrb	r3, [r7, #23]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d105      	bne.n	800722e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007222:	4b3c      	ldr	r3, [pc, #240]	@ (8007314 <HAL_RCC_OscConfig+0x4c4>)
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	4a3b      	ldr	r2, [pc, #236]	@ (8007314 <HAL_RCC_OscConfig+0x4c4>)
 8007228:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800722c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	69db      	ldr	r3, [r3, #28]
 8007232:	2b00      	cmp	r3, #0
 8007234:	f000 8087 	beq.w	8007346 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007238:	4b36      	ldr	r3, [pc, #216]	@ (8007314 <HAL_RCC_OscConfig+0x4c4>)
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	f003 030c 	and.w	r3, r3, #12
 8007240:	2b08      	cmp	r3, #8
 8007242:	d061      	beq.n	8007308 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	69db      	ldr	r3, [r3, #28]
 8007248:	2b02      	cmp	r3, #2
 800724a:	d146      	bne.n	80072da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800724c:	4b33      	ldr	r3, [pc, #204]	@ (800731c <HAL_RCC_OscConfig+0x4cc>)
 800724e:	2200      	movs	r2, #0
 8007250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007252:	f7fe fae9 	bl	8005828 <HAL_GetTick>
 8007256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007258:	e008      	b.n	800726c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800725a:	f7fe fae5 	bl	8005828 <HAL_GetTick>
 800725e:	4602      	mov	r2, r0
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	2b02      	cmp	r3, #2
 8007266:	d901      	bls.n	800726c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	e06d      	b.n	8007348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800726c:	4b29      	ldr	r3, [pc, #164]	@ (8007314 <HAL_RCC_OscConfig+0x4c4>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1f0      	bne.n	800725a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a1b      	ldr	r3, [r3, #32]
 800727c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007280:	d108      	bne.n	8007294 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007282:	4b24      	ldr	r3, [pc, #144]	@ (8007314 <HAL_RCC_OscConfig+0x4c4>)
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	4921      	ldr	r1, [pc, #132]	@ (8007314 <HAL_RCC_OscConfig+0x4c4>)
 8007290:	4313      	orrs	r3, r2
 8007292:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007294:	4b1f      	ldr	r3, [pc, #124]	@ (8007314 <HAL_RCC_OscConfig+0x4c4>)
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a19      	ldr	r1, [r3, #32]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a4:	430b      	orrs	r3, r1
 80072a6:	491b      	ldr	r1, [pc, #108]	@ (8007314 <HAL_RCC_OscConfig+0x4c4>)
 80072a8:	4313      	orrs	r3, r2
 80072aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072ac:	4b1b      	ldr	r3, [pc, #108]	@ (800731c <HAL_RCC_OscConfig+0x4cc>)
 80072ae:	2201      	movs	r2, #1
 80072b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072b2:	f7fe fab9 	bl	8005828 <HAL_GetTick>
 80072b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80072b8:	e008      	b.n	80072cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072ba:	f7fe fab5 	bl	8005828 <HAL_GetTick>
 80072be:	4602      	mov	r2, r0
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d901      	bls.n	80072cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80072c8:	2303      	movs	r3, #3
 80072ca:	e03d      	b.n	8007348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80072cc:	4b11      	ldr	r3, [pc, #68]	@ (8007314 <HAL_RCC_OscConfig+0x4c4>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d0f0      	beq.n	80072ba <HAL_RCC_OscConfig+0x46a>
 80072d8:	e035      	b.n	8007346 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072da:	4b10      	ldr	r3, [pc, #64]	@ (800731c <HAL_RCC_OscConfig+0x4cc>)
 80072dc:	2200      	movs	r2, #0
 80072de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072e0:	f7fe faa2 	bl	8005828 <HAL_GetTick>
 80072e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80072e6:	e008      	b.n	80072fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072e8:	f7fe fa9e 	bl	8005828 <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d901      	bls.n	80072fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e026      	b.n	8007348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80072fa:	4b06      	ldr	r3, [pc, #24]	@ (8007314 <HAL_RCC_OscConfig+0x4c4>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1f0      	bne.n	80072e8 <HAL_RCC_OscConfig+0x498>
 8007306:	e01e      	b.n	8007346 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	69db      	ldr	r3, [r3, #28]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d107      	bne.n	8007320 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e019      	b.n	8007348 <HAL_RCC_OscConfig+0x4f8>
 8007314:	40021000 	.word	0x40021000
 8007318:	40007000 	.word	0x40007000
 800731c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007320:	4b0b      	ldr	r3, [pc, #44]	@ (8007350 <HAL_RCC_OscConfig+0x500>)
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a1b      	ldr	r3, [r3, #32]
 8007330:	429a      	cmp	r2, r3
 8007332:	d106      	bne.n	8007342 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800733e:	429a      	cmp	r2, r3
 8007340:	d001      	beq.n	8007346 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e000      	b.n	8007348 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3718      	adds	r7, #24
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	40021000 	.word	0x40021000

08007354 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d101      	bne.n	8007368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e0d0      	b.n	800750a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007368:	4b6a      	ldr	r3, [pc, #424]	@ (8007514 <HAL_RCC_ClockConfig+0x1c0>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0307 	and.w	r3, r3, #7
 8007370:	683a      	ldr	r2, [r7, #0]
 8007372:	429a      	cmp	r2, r3
 8007374:	d910      	bls.n	8007398 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007376:	4b67      	ldr	r3, [pc, #412]	@ (8007514 <HAL_RCC_ClockConfig+0x1c0>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f023 0207 	bic.w	r2, r3, #7
 800737e:	4965      	ldr	r1, [pc, #404]	@ (8007514 <HAL_RCC_ClockConfig+0x1c0>)
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	4313      	orrs	r3, r2
 8007384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007386:	4b63      	ldr	r3, [pc, #396]	@ (8007514 <HAL_RCC_ClockConfig+0x1c0>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0307 	and.w	r3, r3, #7
 800738e:	683a      	ldr	r2, [r7, #0]
 8007390:	429a      	cmp	r2, r3
 8007392:	d001      	beq.n	8007398 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	e0b8      	b.n	800750a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 0302 	and.w	r3, r3, #2
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d020      	beq.n	80073e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0304 	and.w	r3, r3, #4
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d005      	beq.n	80073bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80073b0:	4b59      	ldr	r3, [pc, #356]	@ (8007518 <HAL_RCC_ClockConfig+0x1c4>)
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	4a58      	ldr	r2, [pc, #352]	@ (8007518 <HAL_RCC_ClockConfig+0x1c4>)
 80073b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80073ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 0308 	and.w	r3, r3, #8
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d005      	beq.n	80073d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80073c8:	4b53      	ldr	r3, [pc, #332]	@ (8007518 <HAL_RCC_ClockConfig+0x1c4>)
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	4a52      	ldr	r2, [pc, #328]	@ (8007518 <HAL_RCC_ClockConfig+0x1c4>)
 80073ce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80073d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073d4:	4b50      	ldr	r3, [pc, #320]	@ (8007518 <HAL_RCC_ClockConfig+0x1c4>)
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	494d      	ldr	r1, [pc, #308]	@ (8007518 <HAL_RCC_ClockConfig+0x1c4>)
 80073e2:	4313      	orrs	r3, r2
 80073e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d040      	beq.n	8007474 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d107      	bne.n	800740a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073fa:	4b47      	ldr	r3, [pc, #284]	@ (8007518 <HAL_RCC_ClockConfig+0x1c4>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007402:	2b00      	cmp	r3, #0
 8007404:	d115      	bne.n	8007432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e07f      	b.n	800750a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	2b02      	cmp	r3, #2
 8007410:	d107      	bne.n	8007422 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007412:	4b41      	ldr	r3, [pc, #260]	@ (8007518 <HAL_RCC_ClockConfig+0x1c4>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800741a:	2b00      	cmp	r3, #0
 800741c:	d109      	bne.n	8007432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e073      	b.n	800750a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007422:	4b3d      	ldr	r3, [pc, #244]	@ (8007518 <HAL_RCC_ClockConfig+0x1c4>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0302 	and.w	r3, r3, #2
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e06b      	b.n	800750a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007432:	4b39      	ldr	r3, [pc, #228]	@ (8007518 <HAL_RCC_ClockConfig+0x1c4>)
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f023 0203 	bic.w	r2, r3, #3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	4936      	ldr	r1, [pc, #216]	@ (8007518 <HAL_RCC_ClockConfig+0x1c4>)
 8007440:	4313      	orrs	r3, r2
 8007442:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007444:	f7fe f9f0 	bl	8005828 <HAL_GetTick>
 8007448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800744a:	e00a      	b.n	8007462 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800744c:	f7fe f9ec 	bl	8005828 <HAL_GetTick>
 8007450:	4602      	mov	r2, r0
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800745a:	4293      	cmp	r3, r2
 800745c:	d901      	bls.n	8007462 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e053      	b.n	800750a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007462:	4b2d      	ldr	r3, [pc, #180]	@ (8007518 <HAL_RCC_ClockConfig+0x1c4>)
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	f003 020c 	and.w	r2, r3, #12
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	429a      	cmp	r2, r3
 8007472:	d1eb      	bne.n	800744c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007474:	4b27      	ldr	r3, [pc, #156]	@ (8007514 <HAL_RCC_ClockConfig+0x1c0>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0307 	and.w	r3, r3, #7
 800747c:	683a      	ldr	r2, [r7, #0]
 800747e:	429a      	cmp	r2, r3
 8007480:	d210      	bcs.n	80074a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007482:	4b24      	ldr	r3, [pc, #144]	@ (8007514 <HAL_RCC_ClockConfig+0x1c0>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f023 0207 	bic.w	r2, r3, #7
 800748a:	4922      	ldr	r1, [pc, #136]	@ (8007514 <HAL_RCC_ClockConfig+0x1c0>)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	4313      	orrs	r3, r2
 8007490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007492:	4b20      	ldr	r3, [pc, #128]	@ (8007514 <HAL_RCC_ClockConfig+0x1c0>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0307 	and.w	r3, r3, #7
 800749a:	683a      	ldr	r2, [r7, #0]
 800749c:	429a      	cmp	r2, r3
 800749e:	d001      	beq.n	80074a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	e032      	b.n	800750a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 0304 	and.w	r3, r3, #4
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d008      	beq.n	80074c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074b0:	4b19      	ldr	r3, [pc, #100]	@ (8007518 <HAL_RCC_ClockConfig+0x1c4>)
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	4916      	ldr	r1, [pc, #88]	@ (8007518 <HAL_RCC_ClockConfig+0x1c4>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0308 	and.w	r3, r3, #8
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d009      	beq.n	80074e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80074ce:	4b12      	ldr	r3, [pc, #72]	@ (8007518 <HAL_RCC_ClockConfig+0x1c4>)
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	00db      	lsls	r3, r3, #3
 80074dc:	490e      	ldr	r1, [pc, #56]	@ (8007518 <HAL_RCC_ClockConfig+0x1c4>)
 80074de:	4313      	orrs	r3, r2
 80074e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80074e2:	f000 f821 	bl	8007528 <HAL_RCC_GetSysClockFreq>
 80074e6:	4602      	mov	r2, r0
 80074e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007518 <HAL_RCC_ClockConfig+0x1c4>)
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	091b      	lsrs	r3, r3, #4
 80074ee:	f003 030f 	and.w	r3, r3, #15
 80074f2:	490a      	ldr	r1, [pc, #40]	@ (800751c <HAL_RCC_ClockConfig+0x1c8>)
 80074f4:	5ccb      	ldrb	r3, [r1, r3]
 80074f6:	fa22 f303 	lsr.w	r3, r2, r3
 80074fa:	4a09      	ldr	r2, [pc, #36]	@ (8007520 <HAL_RCC_ClockConfig+0x1cc>)
 80074fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80074fe:	4b09      	ldr	r3, [pc, #36]	@ (8007524 <HAL_RCC_ClockConfig+0x1d0>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4618      	mov	r0, r3
 8007504:	f7fe f94e 	bl	80057a4 <HAL_InitTick>

  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	40022000 	.word	0x40022000
 8007518:	40021000 	.word	0x40021000
 800751c:	0800ccc0 	.word	0x0800ccc0
 8007520:	20000000 	.word	0x20000000
 8007524:	2000003c 	.word	0x2000003c

08007528 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007528:	b480      	push	{r7}
 800752a:	b087      	sub	sp, #28
 800752c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800752e:	2300      	movs	r3, #0
 8007530:	60fb      	str	r3, [r7, #12]
 8007532:	2300      	movs	r3, #0
 8007534:	60bb      	str	r3, [r7, #8]
 8007536:	2300      	movs	r3, #0
 8007538:	617b      	str	r3, [r7, #20]
 800753a:	2300      	movs	r3, #0
 800753c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800753e:	2300      	movs	r3, #0
 8007540:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007542:	4b1e      	ldr	r3, [pc, #120]	@ (80075bc <HAL_RCC_GetSysClockFreq+0x94>)
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f003 030c 	and.w	r3, r3, #12
 800754e:	2b04      	cmp	r3, #4
 8007550:	d002      	beq.n	8007558 <HAL_RCC_GetSysClockFreq+0x30>
 8007552:	2b08      	cmp	r3, #8
 8007554:	d003      	beq.n	800755e <HAL_RCC_GetSysClockFreq+0x36>
 8007556:	e027      	b.n	80075a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007558:	4b19      	ldr	r3, [pc, #100]	@ (80075c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800755a:	613b      	str	r3, [r7, #16]
      break;
 800755c:	e027      	b.n	80075ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	0c9b      	lsrs	r3, r3, #18
 8007562:	f003 030f 	and.w	r3, r3, #15
 8007566:	4a17      	ldr	r2, [pc, #92]	@ (80075c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007568:	5cd3      	ldrb	r3, [r2, r3]
 800756a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007572:	2b00      	cmp	r3, #0
 8007574:	d010      	beq.n	8007598 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007576:	4b11      	ldr	r3, [pc, #68]	@ (80075bc <HAL_RCC_GetSysClockFreq+0x94>)
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	0c5b      	lsrs	r3, r3, #17
 800757c:	f003 0301 	and.w	r3, r3, #1
 8007580:	4a11      	ldr	r2, [pc, #68]	@ (80075c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007582:	5cd3      	ldrb	r3, [r2, r3]
 8007584:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a0d      	ldr	r2, [pc, #52]	@ (80075c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800758a:	fb03 f202 	mul.w	r2, r3, r2
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	fbb2 f3f3 	udiv	r3, r2, r3
 8007594:	617b      	str	r3, [r7, #20]
 8007596:	e004      	b.n	80075a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a0c      	ldr	r2, [pc, #48]	@ (80075cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800759c:	fb02 f303 	mul.w	r3, r2, r3
 80075a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	613b      	str	r3, [r7, #16]
      break;
 80075a6:	e002      	b.n	80075ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80075a8:	4b05      	ldr	r3, [pc, #20]	@ (80075c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80075aa:	613b      	str	r3, [r7, #16]
      break;
 80075ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80075ae:	693b      	ldr	r3, [r7, #16]
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	371c      	adds	r7, #28
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bc80      	pop	{r7}
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	40021000 	.word	0x40021000
 80075c0:	007a1200 	.word	0x007a1200
 80075c4:	0800d924 	.word	0x0800d924
 80075c8:	0800d934 	.word	0x0800d934
 80075cc:	003d0900 	.word	0x003d0900

080075d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075d0:	b480      	push	{r7}
 80075d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075d4:	4b02      	ldr	r3, [pc, #8]	@ (80075e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80075d6:	681b      	ldr	r3, [r3, #0]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	46bd      	mov	sp, r7
 80075dc:	bc80      	pop	{r7}
 80075de:	4770      	bx	lr
 80075e0:	20000000 	.word	0x20000000

080075e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80075e8:	f7ff fff2 	bl	80075d0 <HAL_RCC_GetHCLKFreq>
 80075ec:	4602      	mov	r2, r0
 80075ee:	4b05      	ldr	r3, [pc, #20]	@ (8007604 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	0a1b      	lsrs	r3, r3, #8
 80075f4:	f003 0307 	and.w	r3, r3, #7
 80075f8:	4903      	ldr	r1, [pc, #12]	@ (8007608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80075fa:	5ccb      	ldrb	r3, [r1, r3]
 80075fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007600:	4618      	mov	r0, r3
 8007602:	bd80      	pop	{r7, pc}
 8007604:	40021000 	.word	0x40021000
 8007608:	0800ccd0 	.word	0x0800ccd0

0800760c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007610:	f7ff ffde 	bl	80075d0 <HAL_RCC_GetHCLKFreq>
 8007614:	4602      	mov	r2, r0
 8007616:	4b05      	ldr	r3, [pc, #20]	@ (800762c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	0adb      	lsrs	r3, r3, #11
 800761c:	f003 0307 	and.w	r3, r3, #7
 8007620:	4903      	ldr	r1, [pc, #12]	@ (8007630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007622:	5ccb      	ldrb	r3, [r1, r3]
 8007624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007628:	4618      	mov	r0, r3
 800762a:	bd80      	pop	{r7, pc}
 800762c:	40021000 	.word	0x40021000
 8007630:	0800ccd0 	.word	0x0800ccd0

08007634 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800763c:	4b0a      	ldr	r3, [pc, #40]	@ (8007668 <RCC_Delay+0x34>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a0a      	ldr	r2, [pc, #40]	@ (800766c <RCC_Delay+0x38>)
 8007642:	fba2 2303 	umull	r2, r3, r2, r3
 8007646:	0a5b      	lsrs	r3, r3, #9
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	fb02 f303 	mul.w	r3, r2, r3
 800764e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007650:	bf00      	nop
  }
  while (Delay --);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	1e5a      	subs	r2, r3, #1
 8007656:	60fa      	str	r2, [r7, #12]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1f9      	bne.n	8007650 <RCC_Delay+0x1c>
}
 800765c:	bf00      	nop
 800765e:	bf00      	nop
 8007660:	3714      	adds	r7, #20
 8007662:	46bd      	mov	sp, r7
 8007664:	bc80      	pop	{r7}
 8007666:	4770      	bx	lr
 8007668:	20000000 	.word	0x20000000
 800766c:	10624dd3 	.word	0x10624dd3

08007670 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d101      	bne.n	8007682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e042      	b.n	8007708 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	d106      	bne.n	800769c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f7fa facc 	bl	8001c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2224      	movs	r2, #36	@ 0x24
 80076a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	68da      	ldr	r2, [r3, #12]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80076b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 f971 	bl	800799c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	691a      	ldr	r2, [r3, #16]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80076c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	695a      	ldr	r2, [r3, #20]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80076d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68da      	ldr	r2, [r3, #12]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80076e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2220      	movs	r2, #32
 80076f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2220      	movs	r2, #32
 80076fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b08a      	sub	sp, #40	@ 0x28
 8007714:	af02      	add	r7, sp, #8
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	603b      	str	r3, [r7, #0]
 800771c:	4613      	mov	r3, r2
 800771e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007720:	2300      	movs	r3, #0
 8007722:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800772a:	b2db      	uxtb	r3, r3
 800772c:	2b20      	cmp	r3, #32
 800772e:	d175      	bne.n	800781c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d002      	beq.n	800773c <HAL_UART_Transmit+0x2c>
 8007736:	88fb      	ldrh	r3, [r7, #6]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d101      	bne.n	8007740 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e06e      	b.n	800781e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2221      	movs	r2, #33	@ 0x21
 800774a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800774e:	f7fe f86b 	bl	8005828 <HAL_GetTick>
 8007752:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	88fa      	ldrh	r2, [r7, #6]
 8007758:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	88fa      	ldrh	r2, [r7, #6]
 800775e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007768:	d108      	bne.n	800777c <HAL_UART_Transmit+0x6c>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	691b      	ldr	r3, [r3, #16]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d104      	bne.n	800777c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007772:	2300      	movs	r3, #0
 8007774:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	61bb      	str	r3, [r7, #24]
 800777a:	e003      	b.n	8007784 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007780:	2300      	movs	r3, #0
 8007782:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007784:	e02e      	b.n	80077e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	2200      	movs	r2, #0
 800778e:	2180      	movs	r1, #128	@ 0x80
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f000 f848 	bl	8007826 <UART_WaitOnFlagUntilTimeout>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d005      	beq.n	80077a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2220      	movs	r2, #32
 80077a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e03a      	b.n	800781e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10b      	bne.n	80077c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	881b      	ldrh	r3, [r3, #0]
 80077b2:	461a      	mov	r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	3302      	adds	r3, #2
 80077c2:	61bb      	str	r3, [r7, #24]
 80077c4:	e007      	b.n	80077d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	781a      	ldrb	r2, [r3, #0]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	3301      	adds	r3, #1
 80077d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80077da:	b29b      	uxth	r3, r3
 80077dc:	3b01      	subs	r3, #1
 80077de:	b29a      	uxth	r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1cb      	bne.n	8007786 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	2200      	movs	r2, #0
 80077f6:	2140      	movs	r1, #64	@ 0x40
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f000 f814 	bl	8007826 <UART_WaitOnFlagUntilTimeout>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d005      	beq.n	8007810 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2220      	movs	r2, #32
 8007808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800780c:	2303      	movs	r3, #3
 800780e:	e006      	b.n	800781e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2220      	movs	r2, #32
 8007814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007818:	2300      	movs	r3, #0
 800781a:	e000      	b.n	800781e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800781c:	2302      	movs	r3, #2
  }
}
 800781e:	4618      	mov	r0, r3
 8007820:	3720      	adds	r7, #32
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b086      	sub	sp, #24
 800782a:	af00      	add	r7, sp, #0
 800782c:	60f8      	str	r0, [r7, #12]
 800782e:	60b9      	str	r1, [r7, #8]
 8007830:	603b      	str	r3, [r7, #0]
 8007832:	4613      	mov	r3, r2
 8007834:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007836:	e03b      	b.n	80078b0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007838:	6a3b      	ldr	r3, [r7, #32]
 800783a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800783e:	d037      	beq.n	80078b0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007840:	f7fd fff2 	bl	8005828 <HAL_GetTick>
 8007844:	4602      	mov	r2, r0
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	6a3a      	ldr	r2, [r7, #32]
 800784c:	429a      	cmp	r2, r3
 800784e:	d302      	bcc.n	8007856 <UART_WaitOnFlagUntilTimeout+0x30>
 8007850:	6a3b      	ldr	r3, [r7, #32]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e03a      	b.n	80078d0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	f003 0304 	and.w	r3, r3, #4
 8007864:	2b00      	cmp	r3, #0
 8007866:	d023      	beq.n	80078b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	2b80      	cmp	r3, #128	@ 0x80
 800786c:	d020      	beq.n	80078b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	2b40      	cmp	r3, #64	@ 0x40
 8007872:	d01d      	beq.n	80078b0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0308 	and.w	r3, r3, #8
 800787e:	2b08      	cmp	r3, #8
 8007880:	d116      	bne.n	80078b0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007882:	2300      	movs	r3, #0
 8007884:	617b      	str	r3, [r7, #20]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	617b      	str	r3, [r7, #20]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	617b      	str	r3, [r7, #20]
 8007896:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f000 f81d 	bl	80078d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2208      	movs	r2, #8
 80078a2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	e00f      	b.n	80078d0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	4013      	ands	r3, r2
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	429a      	cmp	r2, r3
 80078be:	bf0c      	ite	eq
 80078c0:	2301      	moveq	r3, #1
 80078c2:	2300      	movne	r3, #0
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	461a      	mov	r2, r3
 80078c8:	79fb      	ldrb	r3, [r7, #7]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d0b4      	beq.n	8007838 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3718      	adds	r7, #24
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078d8:	b480      	push	{r7}
 80078da:	b095      	sub	sp, #84	@ 0x54
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	330c      	adds	r3, #12
 80078e6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ea:	e853 3f00 	ldrex	r3, [r3]
 80078ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80078f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	330c      	adds	r3, #12
 80078fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007900:	643a      	str	r2, [r7, #64]	@ 0x40
 8007902:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007904:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007906:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007908:	e841 2300 	strex	r3, r2, [r1]
 800790c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800790e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1e5      	bne.n	80078e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	3314      	adds	r3, #20
 800791a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791c:	6a3b      	ldr	r3, [r7, #32]
 800791e:	e853 3f00 	ldrex	r3, [r3]
 8007922:	61fb      	str	r3, [r7, #28]
   return(result);
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	f023 0301 	bic.w	r3, r3, #1
 800792a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	3314      	adds	r3, #20
 8007932:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007934:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007936:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007938:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800793a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800793c:	e841 2300 	strex	r3, r2, [r1]
 8007940:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1e5      	bne.n	8007914 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800794c:	2b01      	cmp	r3, #1
 800794e:	d119      	bne.n	8007984 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	330c      	adds	r3, #12
 8007956:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	e853 3f00 	ldrex	r3, [r3]
 800795e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	f023 0310 	bic.w	r3, r3, #16
 8007966:	647b      	str	r3, [r7, #68]	@ 0x44
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	330c      	adds	r3, #12
 800796e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007970:	61ba      	str	r2, [r7, #24]
 8007972:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007974:	6979      	ldr	r1, [r7, #20]
 8007976:	69ba      	ldr	r2, [r7, #24]
 8007978:	e841 2300 	strex	r3, r2, [r1]
 800797c:	613b      	str	r3, [r7, #16]
   return(result);
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1e5      	bne.n	8007950 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2220      	movs	r2, #32
 8007988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007992:	bf00      	nop
 8007994:	3754      	adds	r7, #84	@ 0x54
 8007996:	46bd      	mov	sp, r7
 8007998:	bc80      	pop	{r7}
 800799a:	4770      	bx	lr

0800799c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	68da      	ldr	r2, [r3, #12]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	430a      	orrs	r2, r1
 80079b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	689a      	ldr	r2, [r3, #8]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	431a      	orrs	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80079d6:	f023 030c 	bic.w	r3, r3, #12
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	6812      	ldr	r2, [r2, #0]
 80079de:	68b9      	ldr	r1, [r7, #8]
 80079e0:	430b      	orrs	r3, r1
 80079e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	699a      	ldr	r2, [r3, #24]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	430a      	orrs	r2, r1
 80079f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a2c      	ldr	r2, [pc, #176]	@ (8007ab0 <UART_SetConfig+0x114>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d103      	bne.n	8007a0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007a04:	f7ff fe02 	bl	800760c <HAL_RCC_GetPCLK2Freq>
 8007a08:	60f8      	str	r0, [r7, #12]
 8007a0a:	e002      	b.n	8007a12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007a0c:	f7ff fdea 	bl	80075e4 <HAL_RCC_GetPCLK1Freq>
 8007a10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	4613      	mov	r3, r2
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	4413      	add	r3, r2
 8007a1a:	009a      	lsls	r2, r3, #2
 8007a1c:	441a      	add	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a28:	4a22      	ldr	r2, [pc, #136]	@ (8007ab4 <UART_SetConfig+0x118>)
 8007a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a2e:	095b      	lsrs	r3, r3, #5
 8007a30:	0119      	lsls	r1, r3, #4
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	4613      	mov	r3, r2
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	4413      	add	r3, r2
 8007a3a:	009a      	lsls	r2, r3, #2
 8007a3c:	441a      	add	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a48:	4b1a      	ldr	r3, [pc, #104]	@ (8007ab4 <UART_SetConfig+0x118>)
 8007a4a:	fba3 0302 	umull	r0, r3, r3, r2
 8007a4e:	095b      	lsrs	r3, r3, #5
 8007a50:	2064      	movs	r0, #100	@ 0x64
 8007a52:	fb00 f303 	mul.w	r3, r0, r3
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	011b      	lsls	r3, r3, #4
 8007a5a:	3332      	adds	r3, #50	@ 0x32
 8007a5c:	4a15      	ldr	r2, [pc, #84]	@ (8007ab4 <UART_SetConfig+0x118>)
 8007a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a62:	095b      	lsrs	r3, r3, #5
 8007a64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007a68:	4419      	add	r1, r3
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	4413      	add	r3, r2
 8007a72:	009a      	lsls	r2, r3, #2
 8007a74:	441a      	add	r2, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a80:	4b0c      	ldr	r3, [pc, #48]	@ (8007ab4 <UART_SetConfig+0x118>)
 8007a82:	fba3 0302 	umull	r0, r3, r3, r2
 8007a86:	095b      	lsrs	r3, r3, #5
 8007a88:	2064      	movs	r0, #100	@ 0x64
 8007a8a:	fb00 f303 	mul.w	r3, r0, r3
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	011b      	lsls	r3, r3, #4
 8007a92:	3332      	adds	r3, #50	@ 0x32
 8007a94:	4a07      	ldr	r2, [pc, #28]	@ (8007ab4 <UART_SetConfig+0x118>)
 8007a96:	fba2 2303 	umull	r2, r3, r2, r3
 8007a9a:	095b      	lsrs	r3, r3, #5
 8007a9c:	f003 020f 	and.w	r2, r3, #15
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	440a      	add	r2, r1
 8007aa6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007aa8:	bf00      	nop
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	40013800 	.word	0x40013800
 8007ab4:	51eb851f 	.word	0x51eb851f

08007ab8 <__cvt>:
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007abe:	461d      	mov	r5, r3
 8007ac0:	bfbb      	ittet	lt
 8007ac2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8007ac6:	461d      	movlt	r5, r3
 8007ac8:	2300      	movge	r3, #0
 8007aca:	232d      	movlt	r3, #45	@ 0x2d
 8007acc:	b088      	sub	sp, #32
 8007ace:	4614      	mov	r4, r2
 8007ad0:	bfb8      	it	lt
 8007ad2:	4614      	movlt	r4, r2
 8007ad4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007ad6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8007ad8:	7013      	strb	r3, [r2, #0]
 8007ada:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007adc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8007ae0:	f023 0820 	bic.w	r8, r3, #32
 8007ae4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007ae8:	d005      	beq.n	8007af6 <__cvt+0x3e>
 8007aea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007aee:	d100      	bne.n	8007af2 <__cvt+0x3a>
 8007af0:	3601      	adds	r6, #1
 8007af2:	2302      	movs	r3, #2
 8007af4:	e000      	b.n	8007af8 <__cvt+0x40>
 8007af6:	2303      	movs	r3, #3
 8007af8:	aa07      	add	r2, sp, #28
 8007afa:	9204      	str	r2, [sp, #16]
 8007afc:	aa06      	add	r2, sp, #24
 8007afe:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007b02:	e9cd 3600 	strd	r3, r6, [sp]
 8007b06:	4622      	mov	r2, r4
 8007b08:	462b      	mov	r3, r5
 8007b0a:	f001 f88d 	bl	8008c28 <_dtoa_r>
 8007b0e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007b12:	4607      	mov	r7, r0
 8007b14:	d119      	bne.n	8007b4a <__cvt+0x92>
 8007b16:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007b18:	07db      	lsls	r3, r3, #31
 8007b1a:	d50e      	bpl.n	8007b3a <__cvt+0x82>
 8007b1c:	eb00 0906 	add.w	r9, r0, r6
 8007b20:	2200      	movs	r2, #0
 8007b22:	2300      	movs	r3, #0
 8007b24:	4620      	mov	r0, r4
 8007b26:	4629      	mov	r1, r5
 8007b28:	f7f8 ff3e 	bl	80009a8 <__aeabi_dcmpeq>
 8007b2c:	b108      	cbz	r0, 8007b32 <__cvt+0x7a>
 8007b2e:	f8cd 901c 	str.w	r9, [sp, #28]
 8007b32:	2230      	movs	r2, #48	@ 0x30
 8007b34:	9b07      	ldr	r3, [sp, #28]
 8007b36:	454b      	cmp	r3, r9
 8007b38:	d31e      	bcc.n	8007b78 <__cvt+0xc0>
 8007b3a:	4638      	mov	r0, r7
 8007b3c:	9b07      	ldr	r3, [sp, #28]
 8007b3e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007b40:	1bdb      	subs	r3, r3, r7
 8007b42:	6013      	str	r3, [r2, #0]
 8007b44:	b008      	add	sp, #32
 8007b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b4a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007b4e:	eb00 0906 	add.w	r9, r0, r6
 8007b52:	d1e5      	bne.n	8007b20 <__cvt+0x68>
 8007b54:	7803      	ldrb	r3, [r0, #0]
 8007b56:	2b30      	cmp	r3, #48	@ 0x30
 8007b58:	d10a      	bne.n	8007b70 <__cvt+0xb8>
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	4620      	mov	r0, r4
 8007b60:	4629      	mov	r1, r5
 8007b62:	f7f8 ff21 	bl	80009a8 <__aeabi_dcmpeq>
 8007b66:	b918      	cbnz	r0, 8007b70 <__cvt+0xb8>
 8007b68:	f1c6 0601 	rsb	r6, r6, #1
 8007b6c:	f8ca 6000 	str.w	r6, [sl]
 8007b70:	f8da 3000 	ldr.w	r3, [sl]
 8007b74:	4499      	add	r9, r3
 8007b76:	e7d3      	b.n	8007b20 <__cvt+0x68>
 8007b78:	1c59      	adds	r1, r3, #1
 8007b7a:	9107      	str	r1, [sp, #28]
 8007b7c:	701a      	strb	r2, [r3, #0]
 8007b7e:	e7d9      	b.n	8007b34 <__cvt+0x7c>

08007b80 <__exponent>:
 8007b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b82:	2900      	cmp	r1, #0
 8007b84:	bfb6      	itet	lt
 8007b86:	232d      	movlt	r3, #45	@ 0x2d
 8007b88:	232b      	movge	r3, #43	@ 0x2b
 8007b8a:	4249      	neglt	r1, r1
 8007b8c:	2909      	cmp	r1, #9
 8007b8e:	7002      	strb	r2, [r0, #0]
 8007b90:	7043      	strb	r3, [r0, #1]
 8007b92:	dd29      	ble.n	8007be8 <__exponent+0x68>
 8007b94:	f10d 0307 	add.w	r3, sp, #7
 8007b98:	461d      	mov	r5, r3
 8007b9a:	270a      	movs	r7, #10
 8007b9c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	fb07 1416 	mls	r4, r7, r6, r1
 8007ba6:	3430      	adds	r4, #48	@ 0x30
 8007ba8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007bac:	460c      	mov	r4, r1
 8007bae:	2c63      	cmp	r4, #99	@ 0x63
 8007bb0:	4631      	mov	r1, r6
 8007bb2:	f103 33ff 	add.w	r3, r3, #4294967295
 8007bb6:	dcf1      	bgt.n	8007b9c <__exponent+0x1c>
 8007bb8:	3130      	adds	r1, #48	@ 0x30
 8007bba:	1e94      	subs	r4, r2, #2
 8007bbc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007bc0:	4623      	mov	r3, r4
 8007bc2:	1c41      	adds	r1, r0, #1
 8007bc4:	42ab      	cmp	r3, r5
 8007bc6:	d30a      	bcc.n	8007bde <__exponent+0x5e>
 8007bc8:	f10d 0309 	add.w	r3, sp, #9
 8007bcc:	1a9b      	subs	r3, r3, r2
 8007bce:	42ac      	cmp	r4, r5
 8007bd0:	bf88      	it	hi
 8007bd2:	2300      	movhi	r3, #0
 8007bd4:	3302      	adds	r3, #2
 8007bd6:	4403      	add	r3, r0
 8007bd8:	1a18      	subs	r0, r3, r0
 8007bda:	b003      	add	sp, #12
 8007bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bde:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007be2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007be6:	e7ed      	b.n	8007bc4 <__exponent+0x44>
 8007be8:	2330      	movs	r3, #48	@ 0x30
 8007bea:	3130      	adds	r1, #48	@ 0x30
 8007bec:	7083      	strb	r3, [r0, #2]
 8007bee:	70c1      	strb	r1, [r0, #3]
 8007bf0:	1d03      	adds	r3, r0, #4
 8007bf2:	e7f1      	b.n	8007bd8 <__exponent+0x58>

08007bf4 <_printf_float>:
 8007bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf8:	b091      	sub	sp, #68	@ 0x44
 8007bfa:	460c      	mov	r4, r1
 8007bfc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007c00:	4616      	mov	r6, r2
 8007c02:	461f      	mov	r7, r3
 8007c04:	4605      	mov	r5, r0
 8007c06:	f000 fefb 	bl	8008a00 <_localeconv_r>
 8007c0a:	6803      	ldr	r3, [r0, #0]
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	9308      	str	r3, [sp, #32]
 8007c10:	f7f8 fa9e 	bl	8000150 <strlen>
 8007c14:	2300      	movs	r3, #0
 8007c16:	930e      	str	r3, [sp, #56]	@ 0x38
 8007c18:	f8d8 3000 	ldr.w	r3, [r8]
 8007c1c:	9009      	str	r0, [sp, #36]	@ 0x24
 8007c1e:	3307      	adds	r3, #7
 8007c20:	f023 0307 	bic.w	r3, r3, #7
 8007c24:	f103 0208 	add.w	r2, r3, #8
 8007c28:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007c2c:	f8d4 b000 	ldr.w	fp, [r4]
 8007c30:	f8c8 2000 	str.w	r2, [r8]
 8007c34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c38:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007c3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c3e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007c42:	f04f 32ff 	mov.w	r2, #4294967295
 8007c46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007c4a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007c4e:	4b9c      	ldr	r3, [pc, #624]	@ (8007ec0 <_printf_float+0x2cc>)
 8007c50:	f7f8 fedc 	bl	8000a0c <__aeabi_dcmpun>
 8007c54:	bb70      	cbnz	r0, 8007cb4 <_printf_float+0xc0>
 8007c56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c5e:	4b98      	ldr	r3, [pc, #608]	@ (8007ec0 <_printf_float+0x2cc>)
 8007c60:	f7f8 feb6 	bl	80009d0 <__aeabi_dcmple>
 8007c64:	bb30      	cbnz	r0, 8007cb4 <_printf_float+0xc0>
 8007c66:	2200      	movs	r2, #0
 8007c68:	2300      	movs	r3, #0
 8007c6a:	4640      	mov	r0, r8
 8007c6c:	4649      	mov	r1, r9
 8007c6e:	f7f8 fea5 	bl	80009bc <__aeabi_dcmplt>
 8007c72:	b110      	cbz	r0, 8007c7a <_printf_float+0x86>
 8007c74:	232d      	movs	r3, #45	@ 0x2d
 8007c76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c7a:	4a92      	ldr	r2, [pc, #584]	@ (8007ec4 <_printf_float+0x2d0>)
 8007c7c:	4b92      	ldr	r3, [pc, #584]	@ (8007ec8 <_printf_float+0x2d4>)
 8007c7e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007c82:	bf8c      	ite	hi
 8007c84:	4690      	movhi	r8, r2
 8007c86:	4698      	movls	r8, r3
 8007c88:	2303      	movs	r3, #3
 8007c8a:	f04f 0900 	mov.w	r9, #0
 8007c8e:	6123      	str	r3, [r4, #16]
 8007c90:	f02b 0304 	bic.w	r3, fp, #4
 8007c94:	6023      	str	r3, [r4, #0]
 8007c96:	4633      	mov	r3, r6
 8007c98:	4621      	mov	r1, r4
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	9700      	str	r7, [sp, #0]
 8007c9e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007ca0:	f000 f9d4 	bl	800804c <_printf_common>
 8007ca4:	3001      	adds	r0, #1
 8007ca6:	f040 8090 	bne.w	8007dca <_printf_float+0x1d6>
 8007caa:	f04f 30ff 	mov.w	r0, #4294967295
 8007cae:	b011      	add	sp, #68	@ 0x44
 8007cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb4:	4642      	mov	r2, r8
 8007cb6:	464b      	mov	r3, r9
 8007cb8:	4640      	mov	r0, r8
 8007cba:	4649      	mov	r1, r9
 8007cbc:	f7f8 fea6 	bl	8000a0c <__aeabi_dcmpun>
 8007cc0:	b148      	cbz	r0, 8007cd6 <_printf_float+0xe2>
 8007cc2:	464b      	mov	r3, r9
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	bfb8      	it	lt
 8007cc8:	232d      	movlt	r3, #45	@ 0x2d
 8007cca:	4a80      	ldr	r2, [pc, #512]	@ (8007ecc <_printf_float+0x2d8>)
 8007ccc:	bfb8      	it	lt
 8007cce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007cd2:	4b7f      	ldr	r3, [pc, #508]	@ (8007ed0 <_printf_float+0x2dc>)
 8007cd4:	e7d3      	b.n	8007c7e <_printf_float+0x8a>
 8007cd6:	6863      	ldr	r3, [r4, #4]
 8007cd8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007cdc:	1c5a      	adds	r2, r3, #1
 8007cde:	d13f      	bne.n	8007d60 <_printf_float+0x16c>
 8007ce0:	2306      	movs	r3, #6
 8007ce2:	6063      	str	r3, [r4, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007cea:	6023      	str	r3, [r4, #0]
 8007cec:	9206      	str	r2, [sp, #24]
 8007cee:	aa0e      	add	r2, sp, #56	@ 0x38
 8007cf0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007cf4:	aa0d      	add	r2, sp, #52	@ 0x34
 8007cf6:	9203      	str	r2, [sp, #12]
 8007cf8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007cfc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007d00:	6863      	ldr	r3, [r4, #4]
 8007d02:	4642      	mov	r2, r8
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	4628      	mov	r0, r5
 8007d08:	464b      	mov	r3, r9
 8007d0a:	910a      	str	r1, [sp, #40]	@ 0x28
 8007d0c:	f7ff fed4 	bl	8007ab8 <__cvt>
 8007d10:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007d12:	4680      	mov	r8, r0
 8007d14:	2947      	cmp	r1, #71	@ 0x47
 8007d16:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007d18:	d128      	bne.n	8007d6c <_printf_float+0x178>
 8007d1a:	1cc8      	adds	r0, r1, #3
 8007d1c:	db02      	blt.n	8007d24 <_printf_float+0x130>
 8007d1e:	6863      	ldr	r3, [r4, #4]
 8007d20:	4299      	cmp	r1, r3
 8007d22:	dd40      	ble.n	8007da6 <_printf_float+0x1b2>
 8007d24:	f1aa 0a02 	sub.w	sl, sl, #2
 8007d28:	fa5f fa8a 	uxtb.w	sl, sl
 8007d2c:	4652      	mov	r2, sl
 8007d2e:	3901      	subs	r1, #1
 8007d30:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007d34:	910d      	str	r1, [sp, #52]	@ 0x34
 8007d36:	f7ff ff23 	bl	8007b80 <__exponent>
 8007d3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d3c:	4681      	mov	r9, r0
 8007d3e:	1813      	adds	r3, r2, r0
 8007d40:	2a01      	cmp	r2, #1
 8007d42:	6123      	str	r3, [r4, #16]
 8007d44:	dc02      	bgt.n	8007d4c <_printf_float+0x158>
 8007d46:	6822      	ldr	r2, [r4, #0]
 8007d48:	07d2      	lsls	r2, r2, #31
 8007d4a:	d501      	bpl.n	8007d50 <_printf_float+0x15c>
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	6123      	str	r3, [r4, #16]
 8007d50:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d09e      	beq.n	8007c96 <_printf_float+0xa2>
 8007d58:	232d      	movs	r3, #45	@ 0x2d
 8007d5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d5e:	e79a      	b.n	8007c96 <_printf_float+0xa2>
 8007d60:	2947      	cmp	r1, #71	@ 0x47
 8007d62:	d1bf      	bne.n	8007ce4 <_printf_float+0xf0>
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1bd      	bne.n	8007ce4 <_printf_float+0xf0>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e7ba      	b.n	8007ce2 <_printf_float+0xee>
 8007d6c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007d70:	d9dc      	bls.n	8007d2c <_printf_float+0x138>
 8007d72:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007d76:	d118      	bne.n	8007daa <_printf_float+0x1b6>
 8007d78:	2900      	cmp	r1, #0
 8007d7a:	6863      	ldr	r3, [r4, #4]
 8007d7c:	dd0b      	ble.n	8007d96 <_printf_float+0x1a2>
 8007d7e:	6121      	str	r1, [r4, #16]
 8007d80:	b913      	cbnz	r3, 8007d88 <_printf_float+0x194>
 8007d82:	6822      	ldr	r2, [r4, #0]
 8007d84:	07d0      	lsls	r0, r2, #31
 8007d86:	d502      	bpl.n	8007d8e <_printf_float+0x19a>
 8007d88:	3301      	adds	r3, #1
 8007d8a:	440b      	add	r3, r1
 8007d8c:	6123      	str	r3, [r4, #16]
 8007d8e:	f04f 0900 	mov.w	r9, #0
 8007d92:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007d94:	e7dc      	b.n	8007d50 <_printf_float+0x15c>
 8007d96:	b913      	cbnz	r3, 8007d9e <_printf_float+0x1aa>
 8007d98:	6822      	ldr	r2, [r4, #0]
 8007d9a:	07d2      	lsls	r2, r2, #31
 8007d9c:	d501      	bpl.n	8007da2 <_printf_float+0x1ae>
 8007d9e:	3302      	adds	r3, #2
 8007da0:	e7f4      	b.n	8007d8c <_printf_float+0x198>
 8007da2:	2301      	movs	r3, #1
 8007da4:	e7f2      	b.n	8007d8c <_printf_float+0x198>
 8007da6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007daa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007dac:	4299      	cmp	r1, r3
 8007dae:	db05      	blt.n	8007dbc <_printf_float+0x1c8>
 8007db0:	6823      	ldr	r3, [r4, #0]
 8007db2:	6121      	str	r1, [r4, #16]
 8007db4:	07d8      	lsls	r0, r3, #31
 8007db6:	d5ea      	bpl.n	8007d8e <_printf_float+0x19a>
 8007db8:	1c4b      	adds	r3, r1, #1
 8007dba:	e7e7      	b.n	8007d8c <_printf_float+0x198>
 8007dbc:	2900      	cmp	r1, #0
 8007dbe:	bfcc      	ite	gt
 8007dc0:	2201      	movgt	r2, #1
 8007dc2:	f1c1 0202 	rsble	r2, r1, #2
 8007dc6:	4413      	add	r3, r2
 8007dc8:	e7e0      	b.n	8007d8c <_printf_float+0x198>
 8007dca:	6823      	ldr	r3, [r4, #0]
 8007dcc:	055a      	lsls	r2, r3, #21
 8007dce:	d407      	bmi.n	8007de0 <_printf_float+0x1ec>
 8007dd0:	6923      	ldr	r3, [r4, #16]
 8007dd2:	4642      	mov	r2, r8
 8007dd4:	4631      	mov	r1, r6
 8007dd6:	4628      	mov	r0, r5
 8007dd8:	47b8      	blx	r7
 8007dda:	3001      	adds	r0, #1
 8007ddc:	d12b      	bne.n	8007e36 <_printf_float+0x242>
 8007dde:	e764      	b.n	8007caa <_printf_float+0xb6>
 8007de0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007de4:	f240 80dc 	bls.w	8007fa0 <_printf_float+0x3ac>
 8007de8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007dec:	2200      	movs	r2, #0
 8007dee:	2300      	movs	r3, #0
 8007df0:	f7f8 fdda 	bl	80009a8 <__aeabi_dcmpeq>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	d033      	beq.n	8007e60 <_printf_float+0x26c>
 8007df8:	2301      	movs	r3, #1
 8007dfa:	4631      	mov	r1, r6
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	4a35      	ldr	r2, [pc, #212]	@ (8007ed4 <_printf_float+0x2e0>)
 8007e00:	47b8      	blx	r7
 8007e02:	3001      	adds	r0, #1
 8007e04:	f43f af51 	beq.w	8007caa <_printf_float+0xb6>
 8007e08:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007e0c:	4543      	cmp	r3, r8
 8007e0e:	db02      	blt.n	8007e16 <_printf_float+0x222>
 8007e10:	6823      	ldr	r3, [r4, #0]
 8007e12:	07d8      	lsls	r0, r3, #31
 8007e14:	d50f      	bpl.n	8007e36 <_printf_float+0x242>
 8007e16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007e1a:	4631      	mov	r1, r6
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	47b8      	blx	r7
 8007e20:	3001      	adds	r0, #1
 8007e22:	f43f af42 	beq.w	8007caa <_printf_float+0xb6>
 8007e26:	f04f 0900 	mov.w	r9, #0
 8007e2a:	f108 38ff 	add.w	r8, r8, #4294967295
 8007e2e:	f104 0a1a 	add.w	sl, r4, #26
 8007e32:	45c8      	cmp	r8, r9
 8007e34:	dc09      	bgt.n	8007e4a <_printf_float+0x256>
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	079b      	lsls	r3, r3, #30
 8007e3a:	f100 8102 	bmi.w	8008042 <_printf_float+0x44e>
 8007e3e:	68e0      	ldr	r0, [r4, #12]
 8007e40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e42:	4298      	cmp	r0, r3
 8007e44:	bfb8      	it	lt
 8007e46:	4618      	movlt	r0, r3
 8007e48:	e731      	b.n	8007cae <_printf_float+0xba>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	4652      	mov	r2, sl
 8007e4e:	4631      	mov	r1, r6
 8007e50:	4628      	mov	r0, r5
 8007e52:	47b8      	blx	r7
 8007e54:	3001      	adds	r0, #1
 8007e56:	f43f af28 	beq.w	8007caa <_printf_float+0xb6>
 8007e5a:	f109 0901 	add.w	r9, r9, #1
 8007e5e:	e7e8      	b.n	8007e32 <_printf_float+0x23e>
 8007e60:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	dc38      	bgt.n	8007ed8 <_printf_float+0x2e4>
 8007e66:	2301      	movs	r3, #1
 8007e68:	4631      	mov	r1, r6
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	4a19      	ldr	r2, [pc, #100]	@ (8007ed4 <_printf_float+0x2e0>)
 8007e6e:	47b8      	blx	r7
 8007e70:	3001      	adds	r0, #1
 8007e72:	f43f af1a 	beq.w	8007caa <_printf_float+0xb6>
 8007e76:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007e7a:	ea59 0303 	orrs.w	r3, r9, r3
 8007e7e:	d102      	bne.n	8007e86 <_printf_float+0x292>
 8007e80:	6823      	ldr	r3, [r4, #0]
 8007e82:	07d9      	lsls	r1, r3, #31
 8007e84:	d5d7      	bpl.n	8007e36 <_printf_float+0x242>
 8007e86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007e8a:	4631      	mov	r1, r6
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	47b8      	blx	r7
 8007e90:	3001      	adds	r0, #1
 8007e92:	f43f af0a 	beq.w	8007caa <_printf_float+0xb6>
 8007e96:	f04f 0a00 	mov.w	sl, #0
 8007e9a:	f104 0b1a 	add.w	fp, r4, #26
 8007e9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ea0:	425b      	negs	r3, r3
 8007ea2:	4553      	cmp	r3, sl
 8007ea4:	dc01      	bgt.n	8007eaa <_printf_float+0x2b6>
 8007ea6:	464b      	mov	r3, r9
 8007ea8:	e793      	b.n	8007dd2 <_printf_float+0x1de>
 8007eaa:	2301      	movs	r3, #1
 8007eac:	465a      	mov	r2, fp
 8007eae:	4631      	mov	r1, r6
 8007eb0:	4628      	mov	r0, r5
 8007eb2:	47b8      	blx	r7
 8007eb4:	3001      	adds	r0, #1
 8007eb6:	f43f aef8 	beq.w	8007caa <_printf_float+0xb6>
 8007eba:	f10a 0a01 	add.w	sl, sl, #1
 8007ebe:	e7ee      	b.n	8007e9e <_printf_float+0x2aa>
 8007ec0:	7fefffff 	.word	0x7fefffff
 8007ec4:	0800d93a 	.word	0x0800d93a
 8007ec8:	0800d936 	.word	0x0800d936
 8007ecc:	0800d942 	.word	0x0800d942
 8007ed0:	0800d93e 	.word	0x0800d93e
 8007ed4:	0800d946 	.word	0x0800d946
 8007ed8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007eda:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007ede:	4553      	cmp	r3, sl
 8007ee0:	bfa8      	it	ge
 8007ee2:	4653      	movge	r3, sl
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	4699      	mov	r9, r3
 8007ee8:	dc36      	bgt.n	8007f58 <_printf_float+0x364>
 8007eea:	f04f 0b00 	mov.w	fp, #0
 8007eee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ef2:	f104 021a 	add.w	r2, r4, #26
 8007ef6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007ef8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007efa:	eba3 0309 	sub.w	r3, r3, r9
 8007efe:	455b      	cmp	r3, fp
 8007f00:	dc31      	bgt.n	8007f66 <_printf_float+0x372>
 8007f02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f04:	459a      	cmp	sl, r3
 8007f06:	dc3a      	bgt.n	8007f7e <_printf_float+0x38a>
 8007f08:	6823      	ldr	r3, [r4, #0]
 8007f0a:	07da      	lsls	r2, r3, #31
 8007f0c:	d437      	bmi.n	8007f7e <_printf_float+0x38a>
 8007f0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f10:	ebaa 0903 	sub.w	r9, sl, r3
 8007f14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f16:	ebaa 0303 	sub.w	r3, sl, r3
 8007f1a:	4599      	cmp	r9, r3
 8007f1c:	bfa8      	it	ge
 8007f1e:	4699      	movge	r9, r3
 8007f20:	f1b9 0f00 	cmp.w	r9, #0
 8007f24:	dc33      	bgt.n	8007f8e <_printf_float+0x39a>
 8007f26:	f04f 0800 	mov.w	r8, #0
 8007f2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f2e:	f104 0b1a 	add.w	fp, r4, #26
 8007f32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f34:	ebaa 0303 	sub.w	r3, sl, r3
 8007f38:	eba3 0309 	sub.w	r3, r3, r9
 8007f3c:	4543      	cmp	r3, r8
 8007f3e:	f77f af7a 	ble.w	8007e36 <_printf_float+0x242>
 8007f42:	2301      	movs	r3, #1
 8007f44:	465a      	mov	r2, fp
 8007f46:	4631      	mov	r1, r6
 8007f48:	4628      	mov	r0, r5
 8007f4a:	47b8      	blx	r7
 8007f4c:	3001      	adds	r0, #1
 8007f4e:	f43f aeac 	beq.w	8007caa <_printf_float+0xb6>
 8007f52:	f108 0801 	add.w	r8, r8, #1
 8007f56:	e7ec      	b.n	8007f32 <_printf_float+0x33e>
 8007f58:	4642      	mov	r2, r8
 8007f5a:	4631      	mov	r1, r6
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	47b8      	blx	r7
 8007f60:	3001      	adds	r0, #1
 8007f62:	d1c2      	bne.n	8007eea <_printf_float+0x2f6>
 8007f64:	e6a1      	b.n	8007caa <_printf_float+0xb6>
 8007f66:	2301      	movs	r3, #1
 8007f68:	4631      	mov	r1, r6
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	920a      	str	r2, [sp, #40]	@ 0x28
 8007f6e:	47b8      	blx	r7
 8007f70:	3001      	adds	r0, #1
 8007f72:	f43f ae9a 	beq.w	8007caa <_printf_float+0xb6>
 8007f76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007f78:	f10b 0b01 	add.w	fp, fp, #1
 8007f7c:	e7bb      	b.n	8007ef6 <_printf_float+0x302>
 8007f7e:	4631      	mov	r1, r6
 8007f80:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007f84:	4628      	mov	r0, r5
 8007f86:	47b8      	blx	r7
 8007f88:	3001      	adds	r0, #1
 8007f8a:	d1c0      	bne.n	8007f0e <_printf_float+0x31a>
 8007f8c:	e68d      	b.n	8007caa <_printf_float+0xb6>
 8007f8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007f90:	464b      	mov	r3, r9
 8007f92:	4631      	mov	r1, r6
 8007f94:	4628      	mov	r0, r5
 8007f96:	4442      	add	r2, r8
 8007f98:	47b8      	blx	r7
 8007f9a:	3001      	adds	r0, #1
 8007f9c:	d1c3      	bne.n	8007f26 <_printf_float+0x332>
 8007f9e:	e684      	b.n	8007caa <_printf_float+0xb6>
 8007fa0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007fa4:	f1ba 0f01 	cmp.w	sl, #1
 8007fa8:	dc01      	bgt.n	8007fae <_printf_float+0x3ba>
 8007faa:	07db      	lsls	r3, r3, #31
 8007fac:	d536      	bpl.n	800801c <_printf_float+0x428>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	4642      	mov	r2, r8
 8007fb2:	4631      	mov	r1, r6
 8007fb4:	4628      	mov	r0, r5
 8007fb6:	47b8      	blx	r7
 8007fb8:	3001      	adds	r0, #1
 8007fba:	f43f ae76 	beq.w	8007caa <_printf_float+0xb6>
 8007fbe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007fc2:	4631      	mov	r1, r6
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	47b8      	blx	r7
 8007fc8:	3001      	adds	r0, #1
 8007fca:	f43f ae6e 	beq.w	8007caa <_printf_float+0xb6>
 8007fce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fda:	f7f8 fce5 	bl	80009a8 <__aeabi_dcmpeq>
 8007fde:	b9c0      	cbnz	r0, 8008012 <_printf_float+0x41e>
 8007fe0:	4653      	mov	r3, sl
 8007fe2:	f108 0201 	add.w	r2, r8, #1
 8007fe6:	4631      	mov	r1, r6
 8007fe8:	4628      	mov	r0, r5
 8007fea:	47b8      	blx	r7
 8007fec:	3001      	adds	r0, #1
 8007fee:	d10c      	bne.n	800800a <_printf_float+0x416>
 8007ff0:	e65b      	b.n	8007caa <_printf_float+0xb6>
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	465a      	mov	r2, fp
 8007ff6:	4631      	mov	r1, r6
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	47b8      	blx	r7
 8007ffc:	3001      	adds	r0, #1
 8007ffe:	f43f ae54 	beq.w	8007caa <_printf_float+0xb6>
 8008002:	f108 0801 	add.w	r8, r8, #1
 8008006:	45d0      	cmp	r8, sl
 8008008:	dbf3      	blt.n	8007ff2 <_printf_float+0x3fe>
 800800a:	464b      	mov	r3, r9
 800800c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008010:	e6e0      	b.n	8007dd4 <_printf_float+0x1e0>
 8008012:	f04f 0800 	mov.w	r8, #0
 8008016:	f104 0b1a 	add.w	fp, r4, #26
 800801a:	e7f4      	b.n	8008006 <_printf_float+0x412>
 800801c:	2301      	movs	r3, #1
 800801e:	4642      	mov	r2, r8
 8008020:	e7e1      	b.n	8007fe6 <_printf_float+0x3f2>
 8008022:	2301      	movs	r3, #1
 8008024:	464a      	mov	r2, r9
 8008026:	4631      	mov	r1, r6
 8008028:	4628      	mov	r0, r5
 800802a:	47b8      	blx	r7
 800802c:	3001      	adds	r0, #1
 800802e:	f43f ae3c 	beq.w	8007caa <_printf_float+0xb6>
 8008032:	f108 0801 	add.w	r8, r8, #1
 8008036:	68e3      	ldr	r3, [r4, #12]
 8008038:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800803a:	1a5b      	subs	r3, r3, r1
 800803c:	4543      	cmp	r3, r8
 800803e:	dcf0      	bgt.n	8008022 <_printf_float+0x42e>
 8008040:	e6fd      	b.n	8007e3e <_printf_float+0x24a>
 8008042:	f04f 0800 	mov.w	r8, #0
 8008046:	f104 0919 	add.w	r9, r4, #25
 800804a:	e7f4      	b.n	8008036 <_printf_float+0x442>

0800804c <_printf_common>:
 800804c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008050:	4616      	mov	r6, r2
 8008052:	4698      	mov	r8, r3
 8008054:	688a      	ldr	r2, [r1, #8]
 8008056:	690b      	ldr	r3, [r1, #16]
 8008058:	4607      	mov	r7, r0
 800805a:	4293      	cmp	r3, r2
 800805c:	bfb8      	it	lt
 800805e:	4613      	movlt	r3, r2
 8008060:	6033      	str	r3, [r6, #0]
 8008062:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008066:	460c      	mov	r4, r1
 8008068:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800806c:	b10a      	cbz	r2, 8008072 <_printf_common+0x26>
 800806e:	3301      	adds	r3, #1
 8008070:	6033      	str	r3, [r6, #0]
 8008072:	6823      	ldr	r3, [r4, #0]
 8008074:	0699      	lsls	r1, r3, #26
 8008076:	bf42      	ittt	mi
 8008078:	6833      	ldrmi	r3, [r6, #0]
 800807a:	3302      	addmi	r3, #2
 800807c:	6033      	strmi	r3, [r6, #0]
 800807e:	6825      	ldr	r5, [r4, #0]
 8008080:	f015 0506 	ands.w	r5, r5, #6
 8008084:	d106      	bne.n	8008094 <_printf_common+0x48>
 8008086:	f104 0a19 	add.w	sl, r4, #25
 800808a:	68e3      	ldr	r3, [r4, #12]
 800808c:	6832      	ldr	r2, [r6, #0]
 800808e:	1a9b      	subs	r3, r3, r2
 8008090:	42ab      	cmp	r3, r5
 8008092:	dc2b      	bgt.n	80080ec <_printf_common+0xa0>
 8008094:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008098:	6822      	ldr	r2, [r4, #0]
 800809a:	3b00      	subs	r3, #0
 800809c:	bf18      	it	ne
 800809e:	2301      	movne	r3, #1
 80080a0:	0692      	lsls	r2, r2, #26
 80080a2:	d430      	bmi.n	8008106 <_printf_common+0xba>
 80080a4:	4641      	mov	r1, r8
 80080a6:	4638      	mov	r0, r7
 80080a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80080ac:	47c8      	blx	r9
 80080ae:	3001      	adds	r0, #1
 80080b0:	d023      	beq.n	80080fa <_printf_common+0xae>
 80080b2:	6823      	ldr	r3, [r4, #0]
 80080b4:	6922      	ldr	r2, [r4, #16]
 80080b6:	f003 0306 	and.w	r3, r3, #6
 80080ba:	2b04      	cmp	r3, #4
 80080bc:	bf14      	ite	ne
 80080be:	2500      	movne	r5, #0
 80080c0:	6833      	ldreq	r3, [r6, #0]
 80080c2:	f04f 0600 	mov.w	r6, #0
 80080c6:	bf08      	it	eq
 80080c8:	68e5      	ldreq	r5, [r4, #12]
 80080ca:	f104 041a 	add.w	r4, r4, #26
 80080ce:	bf08      	it	eq
 80080d0:	1aed      	subeq	r5, r5, r3
 80080d2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80080d6:	bf08      	it	eq
 80080d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080dc:	4293      	cmp	r3, r2
 80080de:	bfc4      	itt	gt
 80080e0:	1a9b      	subgt	r3, r3, r2
 80080e2:	18ed      	addgt	r5, r5, r3
 80080e4:	42b5      	cmp	r5, r6
 80080e6:	d11a      	bne.n	800811e <_printf_common+0xd2>
 80080e8:	2000      	movs	r0, #0
 80080ea:	e008      	b.n	80080fe <_printf_common+0xb2>
 80080ec:	2301      	movs	r3, #1
 80080ee:	4652      	mov	r2, sl
 80080f0:	4641      	mov	r1, r8
 80080f2:	4638      	mov	r0, r7
 80080f4:	47c8      	blx	r9
 80080f6:	3001      	adds	r0, #1
 80080f8:	d103      	bne.n	8008102 <_printf_common+0xb6>
 80080fa:	f04f 30ff 	mov.w	r0, #4294967295
 80080fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008102:	3501      	adds	r5, #1
 8008104:	e7c1      	b.n	800808a <_printf_common+0x3e>
 8008106:	2030      	movs	r0, #48	@ 0x30
 8008108:	18e1      	adds	r1, r4, r3
 800810a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800810e:	1c5a      	adds	r2, r3, #1
 8008110:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008114:	4422      	add	r2, r4
 8008116:	3302      	adds	r3, #2
 8008118:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800811c:	e7c2      	b.n	80080a4 <_printf_common+0x58>
 800811e:	2301      	movs	r3, #1
 8008120:	4622      	mov	r2, r4
 8008122:	4641      	mov	r1, r8
 8008124:	4638      	mov	r0, r7
 8008126:	47c8      	blx	r9
 8008128:	3001      	adds	r0, #1
 800812a:	d0e6      	beq.n	80080fa <_printf_common+0xae>
 800812c:	3601      	adds	r6, #1
 800812e:	e7d9      	b.n	80080e4 <_printf_common+0x98>

08008130 <_printf_i>:
 8008130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008134:	7e0f      	ldrb	r7, [r1, #24]
 8008136:	4691      	mov	r9, r2
 8008138:	2f78      	cmp	r7, #120	@ 0x78
 800813a:	4680      	mov	r8, r0
 800813c:	460c      	mov	r4, r1
 800813e:	469a      	mov	sl, r3
 8008140:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008142:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008146:	d807      	bhi.n	8008158 <_printf_i+0x28>
 8008148:	2f62      	cmp	r7, #98	@ 0x62
 800814a:	d80a      	bhi.n	8008162 <_printf_i+0x32>
 800814c:	2f00      	cmp	r7, #0
 800814e:	f000 80d1 	beq.w	80082f4 <_printf_i+0x1c4>
 8008152:	2f58      	cmp	r7, #88	@ 0x58
 8008154:	f000 80b8 	beq.w	80082c8 <_printf_i+0x198>
 8008158:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800815c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008160:	e03a      	b.n	80081d8 <_printf_i+0xa8>
 8008162:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008166:	2b15      	cmp	r3, #21
 8008168:	d8f6      	bhi.n	8008158 <_printf_i+0x28>
 800816a:	a101      	add	r1, pc, #4	@ (adr r1, 8008170 <_printf_i+0x40>)
 800816c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008170:	080081c9 	.word	0x080081c9
 8008174:	080081dd 	.word	0x080081dd
 8008178:	08008159 	.word	0x08008159
 800817c:	08008159 	.word	0x08008159
 8008180:	08008159 	.word	0x08008159
 8008184:	08008159 	.word	0x08008159
 8008188:	080081dd 	.word	0x080081dd
 800818c:	08008159 	.word	0x08008159
 8008190:	08008159 	.word	0x08008159
 8008194:	08008159 	.word	0x08008159
 8008198:	08008159 	.word	0x08008159
 800819c:	080082db 	.word	0x080082db
 80081a0:	08008207 	.word	0x08008207
 80081a4:	08008295 	.word	0x08008295
 80081a8:	08008159 	.word	0x08008159
 80081ac:	08008159 	.word	0x08008159
 80081b0:	080082fd 	.word	0x080082fd
 80081b4:	08008159 	.word	0x08008159
 80081b8:	08008207 	.word	0x08008207
 80081bc:	08008159 	.word	0x08008159
 80081c0:	08008159 	.word	0x08008159
 80081c4:	0800829d 	.word	0x0800829d
 80081c8:	6833      	ldr	r3, [r6, #0]
 80081ca:	1d1a      	adds	r2, r3, #4
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	6032      	str	r2, [r6, #0]
 80081d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80081d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80081d8:	2301      	movs	r3, #1
 80081da:	e09c      	b.n	8008316 <_printf_i+0x1e6>
 80081dc:	6833      	ldr	r3, [r6, #0]
 80081de:	6820      	ldr	r0, [r4, #0]
 80081e0:	1d19      	adds	r1, r3, #4
 80081e2:	6031      	str	r1, [r6, #0]
 80081e4:	0606      	lsls	r6, r0, #24
 80081e6:	d501      	bpl.n	80081ec <_printf_i+0xbc>
 80081e8:	681d      	ldr	r5, [r3, #0]
 80081ea:	e003      	b.n	80081f4 <_printf_i+0xc4>
 80081ec:	0645      	lsls	r5, r0, #25
 80081ee:	d5fb      	bpl.n	80081e8 <_printf_i+0xb8>
 80081f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80081f4:	2d00      	cmp	r5, #0
 80081f6:	da03      	bge.n	8008200 <_printf_i+0xd0>
 80081f8:	232d      	movs	r3, #45	@ 0x2d
 80081fa:	426d      	negs	r5, r5
 80081fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008200:	230a      	movs	r3, #10
 8008202:	4858      	ldr	r0, [pc, #352]	@ (8008364 <_printf_i+0x234>)
 8008204:	e011      	b.n	800822a <_printf_i+0xfa>
 8008206:	6821      	ldr	r1, [r4, #0]
 8008208:	6833      	ldr	r3, [r6, #0]
 800820a:	0608      	lsls	r0, r1, #24
 800820c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008210:	d402      	bmi.n	8008218 <_printf_i+0xe8>
 8008212:	0649      	lsls	r1, r1, #25
 8008214:	bf48      	it	mi
 8008216:	b2ad      	uxthmi	r5, r5
 8008218:	2f6f      	cmp	r7, #111	@ 0x6f
 800821a:	6033      	str	r3, [r6, #0]
 800821c:	bf14      	ite	ne
 800821e:	230a      	movne	r3, #10
 8008220:	2308      	moveq	r3, #8
 8008222:	4850      	ldr	r0, [pc, #320]	@ (8008364 <_printf_i+0x234>)
 8008224:	2100      	movs	r1, #0
 8008226:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800822a:	6866      	ldr	r6, [r4, #4]
 800822c:	2e00      	cmp	r6, #0
 800822e:	60a6      	str	r6, [r4, #8]
 8008230:	db05      	blt.n	800823e <_printf_i+0x10e>
 8008232:	6821      	ldr	r1, [r4, #0]
 8008234:	432e      	orrs	r6, r5
 8008236:	f021 0104 	bic.w	r1, r1, #4
 800823a:	6021      	str	r1, [r4, #0]
 800823c:	d04b      	beq.n	80082d6 <_printf_i+0x1a6>
 800823e:	4616      	mov	r6, r2
 8008240:	fbb5 f1f3 	udiv	r1, r5, r3
 8008244:	fb03 5711 	mls	r7, r3, r1, r5
 8008248:	5dc7      	ldrb	r7, [r0, r7]
 800824a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800824e:	462f      	mov	r7, r5
 8008250:	42bb      	cmp	r3, r7
 8008252:	460d      	mov	r5, r1
 8008254:	d9f4      	bls.n	8008240 <_printf_i+0x110>
 8008256:	2b08      	cmp	r3, #8
 8008258:	d10b      	bne.n	8008272 <_printf_i+0x142>
 800825a:	6823      	ldr	r3, [r4, #0]
 800825c:	07df      	lsls	r7, r3, #31
 800825e:	d508      	bpl.n	8008272 <_printf_i+0x142>
 8008260:	6923      	ldr	r3, [r4, #16]
 8008262:	6861      	ldr	r1, [r4, #4]
 8008264:	4299      	cmp	r1, r3
 8008266:	bfde      	ittt	le
 8008268:	2330      	movle	r3, #48	@ 0x30
 800826a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800826e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008272:	1b92      	subs	r2, r2, r6
 8008274:	6122      	str	r2, [r4, #16]
 8008276:	464b      	mov	r3, r9
 8008278:	4621      	mov	r1, r4
 800827a:	4640      	mov	r0, r8
 800827c:	f8cd a000 	str.w	sl, [sp]
 8008280:	aa03      	add	r2, sp, #12
 8008282:	f7ff fee3 	bl	800804c <_printf_common>
 8008286:	3001      	adds	r0, #1
 8008288:	d14a      	bne.n	8008320 <_printf_i+0x1f0>
 800828a:	f04f 30ff 	mov.w	r0, #4294967295
 800828e:	b004      	add	sp, #16
 8008290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008294:	6823      	ldr	r3, [r4, #0]
 8008296:	f043 0320 	orr.w	r3, r3, #32
 800829a:	6023      	str	r3, [r4, #0]
 800829c:	2778      	movs	r7, #120	@ 0x78
 800829e:	4832      	ldr	r0, [pc, #200]	@ (8008368 <_printf_i+0x238>)
 80082a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80082a4:	6823      	ldr	r3, [r4, #0]
 80082a6:	6831      	ldr	r1, [r6, #0]
 80082a8:	061f      	lsls	r7, r3, #24
 80082aa:	f851 5b04 	ldr.w	r5, [r1], #4
 80082ae:	d402      	bmi.n	80082b6 <_printf_i+0x186>
 80082b0:	065f      	lsls	r7, r3, #25
 80082b2:	bf48      	it	mi
 80082b4:	b2ad      	uxthmi	r5, r5
 80082b6:	6031      	str	r1, [r6, #0]
 80082b8:	07d9      	lsls	r1, r3, #31
 80082ba:	bf44      	itt	mi
 80082bc:	f043 0320 	orrmi.w	r3, r3, #32
 80082c0:	6023      	strmi	r3, [r4, #0]
 80082c2:	b11d      	cbz	r5, 80082cc <_printf_i+0x19c>
 80082c4:	2310      	movs	r3, #16
 80082c6:	e7ad      	b.n	8008224 <_printf_i+0xf4>
 80082c8:	4826      	ldr	r0, [pc, #152]	@ (8008364 <_printf_i+0x234>)
 80082ca:	e7e9      	b.n	80082a0 <_printf_i+0x170>
 80082cc:	6823      	ldr	r3, [r4, #0]
 80082ce:	f023 0320 	bic.w	r3, r3, #32
 80082d2:	6023      	str	r3, [r4, #0]
 80082d4:	e7f6      	b.n	80082c4 <_printf_i+0x194>
 80082d6:	4616      	mov	r6, r2
 80082d8:	e7bd      	b.n	8008256 <_printf_i+0x126>
 80082da:	6833      	ldr	r3, [r6, #0]
 80082dc:	6825      	ldr	r5, [r4, #0]
 80082de:	1d18      	adds	r0, r3, #4
 80082e0:	6961      	ldr	r1, [r4, #20]
 80082e2:	6030      	str	r0, [r6, #0]
 80082e4:	062e      	lsls	r6, r5, #24
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	d501      	bpl.n	80082ee <_printf_i+0x1be>
 80082ea:	6019      	str	r1, [r3, #0]
 80082ec:	e002      	b.n	80082f4 <_printf_i+0x1c4>
 80082ee:	0668      	lsls	r0, r5, #25
 80082f0:	d5fb      	bpl.n	80082ea <_printf_i+0x1ba>
 80082f2:	8019      	strh	r1, [r3, #0]
 80082f4:	2300      	movs	r3, #0
 80082f6:	4616      	mov	r6, r2
 80082f8:	6123      	str	r3, [r4, #16]
 80082fa:	e7bc      	b.n	8008276 <_printf_i+0x146>
 80082fc:	6833      	ldr	r3, [r6, #0]
 80082fe:	2100      	movs	r1, #0
 8008300:	1d1a      	adds	r2, r3, #4
 8008302:	6032      	str	r2, [r6, #0]
 8008304:	681e      	ldr	r6, [r3, #0]
 8008306:	6862      	ldr	r2, [r4, #4]
 8008308:	4630      	mov	r0, r6
 800830a:	f000 fbf0 	bl	8008aee <memchr>
 800830e:	b108      	cbz	r0, 8008314 <_printf_i+0x1e4>
 8008310:	1b80      	subs	r0, r0, r6
 8008312:	6060      	str	r0, [r4, #4]
 8008314:	6863      	ldr	r3, [r4, #4]
 8008316:	6123      	str	r3, [r4, #16]
 8008318:	2300      	movs	r3, #0
 800831a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800831e:	e7aa      	b.n	8008276 <_printf_i+0x146>
 8008320:	4632      	mov	r2, r6
 8008322:	4649      	mov	r1, r9
 8008324:	4640      	mov	r0, r8
 8008326:	6923      	ldr	r3, [r4, #16]
 8008328:	47d0      	blx	sl
 800832a:	3001      	adds	r0, #1
 800832c:	d0ad      	beq.n	800828a <_printf_i+0x15a>
 800832e:	6823      	ldr	r3, [r4, #0]
 8008330:	079b      	lsls	r3, r3, #30
 8008332:	d413      	bmi.n	800835c <_printf_i+0x22c>
 8008334:	68e0      	ldr	r0, [r4, #12]
 8008336:	9b03      	ldr	r3, [sp, #12]
 8008338:	4298      	cmp	r0, r3
 800833a:	bfb8      	it	lt
 800833c:	4618      	movlt	r0, r3
 800833e:	e7a6      	b.n	800828e <_printf_i+0x15e>
 8008340:	2301      	movs	r3, #1
 8008342:	4632      	mov	r2, r6
 8008344:	4649      	mov	r1, r9
 8008346:	4640      	mov	r0, r8
 8008348:	47d0      	blx	sl
 800834a:	3001      	adds	r0, #1
 800834c:	d09d      	beq.n	800828a <_printf_i+0x15a>
 800834e:	3501      	adds	r5, #1
 8008350:	68e3      	ldr	r3, [r4, #12]
 8008352:	9903      	ldr	r1, [sp, #12]
 8008354:	1a5b      	subs	r3, r3, r1
 8008356:	42ab      	cmp	r3, r5
 8008358:	dcf2      	bgt.n	8008340 <_printf_i+0x210>
 800835a:	e7eb      	b.n	8008334 <_printf_i+0x204>
 800835c:	2500      	movs	r5, #0
 800835e:	f104 0619 	add.w	r6, r4, #25
 8008362:	e7f5      	b.n	8008350 <_printf_i+0x220>
 8008364:	0800d948 	.word	0x0800d948
 8008368:	0800d959 	.word	0x0800d959

0800836c <_scanf_float>:
 800836c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008370:	b087      	sub	sp, #28
 8008372:	9303      	str	r3, [sp, #12]
 8008374:	688b      	ldr	r3, [r1, #8]
 8008376:	4691      	mov	r9, r2
 8008378:	1e5a      	subs	r2, r3, #1
 800837a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800837e:	bf82      	ittt	hi
 8008380:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008384:	eb03 0b05 	addhi.w	fp, r3, r5
 8008388:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800838c:	460a      	mov	r2, r1
 800838e:	f04f 0500 	mov.w	r5, #0
 8008392:	bf88      	it	hi
 8008394:	608b      	strhi	r3, [r1, #8]
 8008396:	680b      	ldr	r3, [r1, #0]
 8008398:	4680      	mov	r8, r0
 800839a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800839e:	f842 3b1c 	str.w	r3, [r2], #28
 80083a2:	460c      	mov	r4, r1
 80083a4:	bf98      	it	ls
 80083a6:	f04f 0b00 	movls.w	fp, #0
 80083aa:	4616      	mov	r6, r2
 80083ac:	46aa      	mov	sl, r5
 80083ae:	462f      	mov	r7, r5
 80083b0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80083b4:	9201      	str	r2, [sp, #4]
 80083b6:	9502      	str	r5, [sp, #8]
 80083b8:	68a2      	ldr	r2, [r4, #8]
 80083ba:	b15a      	cbz	r2, 80083d4 <_scanf_float+0x68>
 80083bc:	f8d9 3000 	ldr.w	r3, [r9]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	2b4e      	cmp	r3, #78	@ 0x4e
 80083c4:	d862      	bhi.n	800848c <_scanf_float+0x120>
 80083c6:	2b40      	cmp	r3, #64	@ 0x40
 80083c8:	d83a      	bhi.n	8008440 <_scanf_float+0xd4>
 80083ca:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80083ce:	b2c8      	uxtb	r0, r1
 80083d0:	280e      	cmp	r0, #14
 80083d2:	d938      	bls.n	8008446 <_scanf_float+0xda>
 80083d4:	b11f      	cbz	r7, 80083de <_scanf_float+0x72>
 80083d6:	6823      	ldr	r3, [r4, #0]
 80083d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083dc:	6023      	str	r3, [r4, #0]
 80083de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083e2:	f1ba 0f01 	cmp.w	sl, #1
 80083e6:	f200 8114 	bhi.w	8008612 <_scanf_float+0x2a6>
 80083ea:	9b01      	ldr	r3, [sp, #4]
 80083ec:	429e      	cmp	r6, r3
 80083ee:	f200 8105 	bhi.w	80085fc <_scanf_float+0x290>
 80083f2:	2001      	movs	r0, #1
 80083f4:	b007      	add	sp, #28
 80083f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083fa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80083fe:	2a0d      	cmp	r2, #13
 8008400:	d8e8      	bhi.n	80083d4 <_scanf_float+0x68>
 8008402:	a101      	add	r1, pc, #4	@ (adr r1, 8008408 <_scanf_float+0x9c>)
 8008404:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008408:	08008551 	.word	0x08008551
 800840c:	080083d5 	.word	0x080083d5
 8008410:	080083d5 	.word	0x080083d5
 8008414:	080083d5 	.word	0x080083d5
 8008418:	080085ad 	.word	0x080085ad
 800841c:	08008587 	.word	0x08008587
 8008420:	080083d5 	.word	0x080083d5
 8008424:	080083d5 	.word	0x080083d5
 8008428:	0800855f 	.word	0x0800855f
 800842c:	080083d5 	.word	0x080083d5
 8008430:	080083d5 	.word	0x080083d5
 8008434:	080083d5 	.word	0x080083d5
 8008438:	080083d5 	.word	0x080083d5
 800843c:	0800851b 	.word	0x0800851b
 8008440:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008444:	e7db      	b.n	80083fe <_scanf_float+0x92>
 8008446:	290e      	cmp	r1, #14
 8008448:	d8c4      	bhi.n	80083d4 <_scanf_float+0x68>
 800844a:	a001      	add	r0, pc, #4	@ (adr r0, 8008450 <_scanf_float+0xe4>)
 800844c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008450:	0800850b 	.word	0x0800850b
 8008454:	080083d5 	.word	0x080083d5
 8008458:	0800850b 	.word	0x0800850b
 800845c:	0800859b 	.word	0x0800859b
 8008460:	080083d5 	.word	0x080083d5
 8008464:	080084ad 	.word	0x080084ad
 8008468:	080084f1 	.word	0x080084f1
 800846c:	080084f1 	.word	0x080084f1
 8008470:	080084f1 	.word	0x080084f1
 8008474:	080084f1 	.word	0x080084f1
 8008478:	080084f1 	.word	0x080084f1
 800847c:	080084f1 	.word	0x080084f1
 8008480:	080084f1 	.word	0x080084f1
 8008484:	080084f1 	.word	0x080084f1
 8008488:	080084f1 	.word	0x080084f1
 800848c:	2b6e      	cmp	r3, #110	@ 0x6e
 800848e:	d809      	bhi.n	80084a4 <_scanf_float+0x138>
 8008490:	2b60      	cmp	r3, #96	@ 0x60
 8008492:	d8b2      	bhi.n	80083fa <_scanf_float+0x8e>
 8008494:	2b54      	cmp	r3, #84	@ 0x54
 8008496:	d07b      	beq.n	8008590 <_scanf_float+0x224>
 8008498:	2b59      	cmp	r3, #89	@ 0x59
 800849a:	d19b      	bne.n	80083d4 <_scanf_float+0x68>
 800849c:	2d07      	cmp	r5, #7
 800849e:	d199      	bne.n	80083d4 <_scanf_float+0x68>
 80084a0:	2508      	movs	r5, #8
 80084a2:	e02f      	b.n	8008504 <_scanf_float+0x198>
 80084a4:	2b74      	cmp	r3, #116	@ 0x74
 80084a6:	d073      	beq.n	8008590 <_scanf_float+0x224>
 80084a8:	2b79      	cmp	r3, #121	@ 0x79
 80084aa:	e7f6      	b.n	800849a <_scanf_float+0x12e>
 80084ac:	6821      	ldr	r1, [r4, #0]
 80084ae:	05c8      	lsls	r0, r1, #23
 80084b0:	d51e      	bpl.n	80084f0 <_scanf_float+0x184>
 80084b2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80084b6:	6021      	str	r1, [r4, #0]
 80084b8:	3701      	adds	r7, #1
 80084ba:	f1bb 0f00 	cmp.w	fp, #0
 80084be:	d003      	beq.n	80084c8 <_scanf_float+0x15c>
 80084c0:	3201      	adds	r2, #1
 80084c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80084c6:	60a2      	str	r2, [r4, #8]
 80084c8:	68a3      	ldr	r3, [r4, #8]
 80084ca:	3b01      	subs	r3, #1
 80084cc:	60a3      	str	r3, [r4, #8]
 80084ce:	6923      	ldr	r3, [r4, #16]
 80084d0:	3301      	adds	r3, #1
 80084d2:	6123      	str	r3, [r4, #16]
 80084d4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80084d8:	3b01      	subs	r3, #1
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f8c9 3004 	str.w	r3, [r9, #4]
 80084e0:	f340 8083 	ble.w	80085ea <_scanf_float+0x27e>
 80084e4:	f8d9 3000 	ldr.w	r3, [r9]
 80084e8:	3301      	adds	r3, #1
 80084ea:	f8c9 3000 	str.w	r3, [r9]
 80084ee:	e763      	b.n	80083b8 <_scanf_float+0x4c>
 80084f0:	eb1a 0105 	adds.w	r1, sl, r5
 80084f4:	f47f af6e 	bne.w	80083d4 <_scanf_float+0x68>
 80084f8:	460d      	mov	r5, r1
 80084fa:	468a      	mov	sl, r1
 80084fc:	6822      	ldr	r2, [r4, #0]
 80084fe:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008502:	6022      	str	r2, [r4, #0]
 8008504:	f806 3b01 	strb.w	r3, [r6], #1
 8008508:	e7de      	b.n	80084c8 <_scanf_float+0x15c>
 800850a:	6822      	ldr	r2, [r4, #0]
 800850c:	0610      	lsls	r0, r2, #24
 800850e:	f57f af61 	bpl.w	80083d4 <_scanf_float+0x68>
 8008512:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008516:	6022      	str	r2, [r4, #0]
 8008518:	e7f4      	b.n	8008504 <_scanf_float+0x198>
 800851a:	f1ba 0f00 	cmp.w	sl, #0
 800851e:	d10c      	bne.n	800853a <_scanf_float+0x1ce>
 8008520:	b977      	cbnz	r7, 8008540 <_scanf_float+0x1d4>
 8008522:	6822      	ldr	r2, [r4, #0]
 8008524:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008528:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800852c:	d108      	bne.n	8008540 <_scanf_float+0x1d4>
 800852e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008532:	f04f 0a01 	mov.w	sl, #1
 8008536:	6022      	str	r2, [r4, #0]
 8008538:	e7e4      	b.n	8008504 <_scanf_float+0x198>
 800853a:	f1ba 0f02 	cmp.w	sl, #2
 800853e:	d051      	beq.n	80085e4 <_scanf_float+0x278>
 8008540:	2d01      	cmp	r5, #1
 8008542:	d002      	beq.n	800854a <_scanf_float+0x1de>
 8008544:	2d04      	cmp	r5, #4
 8008546:	f47f af45 	bne.w	80083d4 <_scanf_float+0x68>
 800854a:	3501      	adds	r5, #1
 800854c:	b2ed      	uxtb	r5, r5
 800854e:	e7d9      	b.n	8008504 <_scanf_float+0x198>
 8008550:	f1ba 0f01 	cmp.w	sl, #1
 8008554:	f47f af3e 	bne.w	80083d4 <_scanf_float+0x68>
 8008558:	f04f 0a02 	mov.w	sl, #2
 800855c:	e7d2      	b.n	8008504 <_scanf_float+0x198>
 800855e:	b975      	cbnz	r5, 800857e <_scanf_float+0x212>
 8008560:	2f00      	cmp	r7, #0
 8008562:	f47f af38 	bne.w	80083d6 <_scanf_float+0x6a>
 8008566:	6822      	ldr	r2, [r4, #0]
 8008568:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800856c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008570:	f040 80ff 	bne.w	8008772 <_scanf_float+0x406>
 8008574:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008578:	2501      	movs	r5, #1
 800857a:	6022      	str	r2, [r4, #0]
 800857c:	e7c2      	b.n	8008504 <_scanf_float+0x198>
 800857e:	2d03      	cmp	r5, #3
 8008580:	d0e3      	beq.n	800854a <_scanf_float+0x1de>
 8008582:	2d05      	cmp	r5, #5
 8008584:	e7df      	b.n	8008546 <_scanf_float+0x1da>
 8008586:	2d02      	cmp	r5, #2
 8008588:	f47f af24 	bne.w	80083d4 <_scanf_float+0x68>
 800858c:	2503      	movs	r5, #3
 800858e:	e7b9      	b.n	8008504 <_scanf_float+0x198>
 8008590:	2d06      	cmp	r5, #6
 8008592:	f47f af1f 	bne.w	80083d4 <_scanf_float+0x68>
 8008596:	2507      	movs	r5, #7
 8008598:	e7b4      	b.n	8008504 <_scanf_float+0x198>
 800859a:	6822      	ldr	r2, [r4, #0]
 800859c:	0591      	lsls	r1, r2, #22
 800859e:	f57f af19 	bpl.w	80083d4 <_scanf_float+0x68>
 80085a2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80085a6:	6022      	str	r2, [r4, #0]
 80085a8:	9702      	str	r7, [sp, #8]
 80085aa:	e7ab      	b.n	8008504 <_scanf_float+0x198>
 80085ac:	6822      	ldr	r2, [r4, #0]
 80085ae:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80085b2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80085b6:	d005      	beq.n	80085c4 <_scanf_float+0x258>
 80085b8:	0550      	lsls	r0, r2, #21
 80085ba:	f57f af0b 	bpl.w	80083d4 <_scanf_float+0x68>
 80085be:	2f00      	cmp	r7, #0
 80085c0:	f000 80d7 	beq.w	8008772 <_scanf_float+0x406>
 80085c4:	0591      	lsls	r1, r2, #22
 80085c6:	bf58      	it	pl
 80085c8:	9902      	ldrpl	r1, [sp, #8]
 80085ca:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80085ce:	bf58      	it	pl
 80085d0:	1a79      	subpl	r1, r7, r1
 80085d2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80085d6:	f04f 0700 	mov.w	r7, #0
 80085da:	bf58      	it	pl
 80085dc:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80085e0:	6022      	str	r2, [r4, #0]
 80085e2:	e78f      	b.n	8008504 <_scanf_float+0x198>
 80085e4:	f04f 0a03 	mov.w	sl, #3
 80085e8:	e78c      	b.n	8008504 <_scanf_float+0x198>
 80085ea:	4649      	mov	r1, r9
 80085ec:	4640      	mov	r0, r8
 80085ee:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80085f2:	4798      	blx	r3
 80085f4:	2800      	cmp	r0, #0
 80085f6:	f43f aedf 	beq.w	80083b8 <_scanf_float+0x4c>
 80085fa:	e6eb      	b.n	80083d4 <_scanf_float+0x68>
 80085fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008600:	464a      	mov	r2, r9
 8008602:	4640      	mov	r0, r8
 8008604:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008608:	4798      	blx	r3
 800860a:	6923      	ldr	r3, [r4, #16]
 800860c:	3b01      	subs	r3, #1
 800860e:	6123      	str	r3, [r4, #16]
 8008610:	e6eb      	b.n	80083ea <_scanf_float+0x7e>
 8008612:	1e6b      	subs	r3, r5, #1
 8008614:	2b06      	cmp	r3, #6
 8008616:	d824      	bhi.n	8008662 <_scanf_float+0x2f6>
 8008618:	2d02      	cmp	r5, #2
 800861a:	d836      	bhi.n	800868a <_scanf_float+0x31e>
 800861c:	9b01      	ldr	r3, [sp, #4]
 800861e:	429e      	cmp	r6, r3
 8008620:	f67f aee7 	bls.w	80083f2 <_scanf_float+0x86>
 8008624:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008628:	464a      	mov	r2, r9
 800862a:	4640      	mov	r0, r8
 800862c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008630:	4798      	blx	r3
 8008632:	6923      	ldr	r3, [r4, #16]
 8008634:	3b01      	subs	r3, #1
 8008636:	6123      	str	r3, [r4, #16]
 8008638:	e7f0      	b.n	800861c <_scanf_float+0x2b0>
 800863a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800863e:	464a      	mov	r2, r9
 8008640:	4640      	mov	r0, r8
 8008642:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008646:	4798      	blx	r3
 8008648:	6923      	ldr	r3, [r4, #16]
 800864a:	3b01      	subs	r3, #1
 800864c:	6123      	str	r3, [r4, #16]
 800864e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008652:	fa5f fa8a 	uxtb.w	sl, sl
 8008656:	f1ba 0f02 	cmp.w	sl, #2
 800865a:	d1ee      	bne.n	800863a <_scanf_float+0x2ce>
 800865c:	3d03      	subs	r5, #3
 800865e:	b2ed      	uxtb	r5, r5
 8008660:	1b76      	subs	r6, r6, r5
 8008662:	6823      	ldr	r3, [r4, #0]
 8008664:	05da      	lsls	r2, r3, #23
 8008666:	d530      	bpl.n	80086ca <_scanf_float+0x35e>
 8008668:	055b      	lsls	r3, r3, #21
 800866a:	d511      	bpl.n	8008690 <_scanf_float+0x324>
 800866c:	9b01      	ldr	r3, [sp, #4]
 800866e:	429e      	cmp	r6, r3
 8008670:	f67f aebf 	bls.w	80083f2 <_scanf_float+0x86>
 8008674:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008678:	464a      	mov	r2, r9
 800867a:	4640      	mov	r0, r8
 800867c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008680:	4798      	blx	r3
 8008682:	6923      	ldr	r3, [r4, #16]
 8008684:	3b01      	subs	r3, #1
 8008686:	6123      	str	r3, [r4, #16]
 8008688:	e7f0      	b.n	800866c <_scanf_float+0x300>
 800868a:	46aa      	mov	sl, r5
 800868c:	46b3      	mov	fp, r6
 800868e:	e7de      	b.n	800864e <_scanf_float+0x2e2>
 8008690:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008694:	6923      	ldr	r3, [r4, #16]
 8008696:	2965      	cmp	r1, #101	@ 0x65
 8008698:	f103 33ff 	add.w	r3, r3, #4294967295
 800869c:	f106 35ff 	add.w	r5, r6, #4294967295
 80086a0:	6123      	str	r3, [r4, #16]
 80086a2:	d00c      	beq.n	80086be <_scanf_float+0x352>
 80086a4:	2945      	cmp	r1, #69	@ 0x45
 80086a6:	d00a      	beq.n	80086be <_scanf_float+0x352>
 80086a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80086ac:	464a      	mov	r2, r9
 80086ae:	4640      	mov	r0, r8
 80086b0:	4798      	blx	r3
 80086b2:	6923      	ldr	r3, [r4, #16]
 80086b4:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80086b8:	3b01      	subs	r3, #1
 80086ba:	1eb5      	subs	r5, r6, #2
 80086bc:	6123      	str	r3, [r4, #16]
 80086be:	464a      	mov	r2, r9
 80086c0:	4640      	mov	r0, r8
 80086c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80086c6:	4798      	blx	r3
 80086c8:	462e      	mov	r6, r5
 80086ca:	6822      	ldr	r2, [r4, #0]
 80086cc:	f012 0210 	ands.w	r2, r2, #16
 80086d0:	d001      	beq.n	80086d6 <_scanf_float+0x36a>
 80086d2:	2000      	movs	r0, #0
 80086d4:	e68e      	b.n	80083f4 <_scanf_float+0x88>
 80086d6:	7032      	strb	r2, [r6, #0]
 80086d8:	6823      	ldr	r3, [r4, #0]
 80086da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80086de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086e2:	d125      	bne.n	8008730 <_scanf_float+0x3c4>
 80086e4:	9b02      	ldr	r3, [sp, #8]
 80086e6:	429f      	cmp	r7, r3
 80086e8:	d00a      	beq.n	8008700 <_scanf_float+0x394>
 80086ea:	1bda      	subs	r2, r3, r7
 80086ec:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80086f0:	429e      	cmp	r6, r3
 80086f2:	bf28      	it	cs
 80086f4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80086f8:	4630      	mov	r0, r6
 80086fa:	491f      	ldr	r1, [pc, #124]	@ (8008778 <_scanf_float+0x40c>)
 80086fc:	f000 f902 	bl	8008904 <siprintf>
 8008700:	2200      	movs	r2, #0
 8008702:	4640      	mov	r0, r8
 8008704:	9901      	ldr	r1, [sp, #4]
 8008706:	f002 fbfb 	bl	800af00 <_strtod_r>
 800870a:	9b03      	ldr	r3, [sp, #12]
 800870c:	6825      	ldr	r5, [r4, #0]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f015 0f02 	tst.w	r5, #2
 8008714:	4606      	mov	r6, r0
 8008716:	460f      	mov	r7, r1
 8008718:	f103 0204 	add.w	r2, r3, #4
 800871c:	d015      	beq.n	800874a <_scanf_float+0x3de>
 800871e:	9903      	ldr	r1, [sp, #12]
 8008720:	600a      	str	r2, [r1, #0]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	e9c3 6700 	strd	r6, r7, [r3]
 8008728:	68e3      	ldr	r3, [r4, #12]
 800872a:	3301      	adds	r3, #1
 800872c:	60e3      	str	r3, [r4, #12]
 800872e:	e7d0      	b.n	80086d2 <_scanf_float+0x366>
 8008730:	9b04      	ldr	r3, [sp, #16]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d0e4      	beq.n	8008700 <_scanf_float+0x394>
 8008736:	9905      	ldr	r1, [sp, #20]
 8008738:	230a      	movs	r3, #10
 800873a:	4640      	mov	r0, r8
 800873c:	3101      	adds	r1, #1
 800873e:	f002 fc5f 	bl	800b000 <_strtol_r>
 8008742:	9b04      	ldr	r3, [sp, #16]
 8008744:	9e05      	ldr	r6, [sp, #20]
 8008746:	1ac2      	subs	r2, r0, r3
 8008748:	e7d0      	b.n	80086ec <_scanf_float+0x380>
 800874a:	076d      	lsls	r5, r5, #29
 800874c:	d4e7      	bmi.n	800871e <_scanf_float+0x3b2>
 800874e:	9d03      	ldr	r5, [sp, #12]
 8008750:	602a      	str	r2, [r5, #0]
 8008752:	681d      	ldr	r5, [r3, #0]
 8008754:	4602      	mov	r2, r0
 8008756:	460b      	mov	r3, r1
 8008758:	f7f8 f958 	bl	8000a0c <__aeabi_dcmpun>
 800875c:	b120      	cbz	r0, 8008768 <_scanf_float+0x3fc>
 800875e:	4807      	ldr	r0, [pc, #28]	@ (800877c <_scanf_float+0x410>)
 8008760:	f000 f9d4 	bl	8008b0c <nanf>
 8008764:	6028      	str	r0, [r5, #0]
 8008766:	e7df      	b.n	8008728 <_scanf_float+0x3bc>
 8008768:	4630      	mov	r0, r6
 800876a:	4639      	mov	r1, r7
 800876c:	f7f8 f9ac 	bl	8000ac8 <__aeabi_d2f>
 8008770:	e7f8      	b.n	8008764 <_scanf_float+0x3f8>
 8008772:	2700      	movs	r7, #0
 8008774:	e633      	b.n	80083de <_scanf_float+0x72>
 8008776:	bf00      	nop
 8008778:	0800d96a 	.word	0x0800d96a
 800877c:	0800daab 	.word	0x0800daab

08008780 <std>:
 8008780:	2300      	movs	r3, #0
 8008782:	b510      	push	{r4, lr}
 8008784:	4604      	mov	r4, r0
 8008786:	e9c0 3300 	strd	r3, r3, [r0]
 800878a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800878e:	6083      	str	r3, [r0, #8]
 8008790:	8181      	strh	r1, [r0, #12]
 8008792:	6643      	str	r3, [r0, #100]	@ 0x64
 8008794:	81c2      	strh	r2, [r0, #14]
 8008796:	6183      	str	r3, [r0, #24]
 8008798:	4619      	mov	r1, r3
 800879a:	2208      	movs	r2, #8
 800879c:	305c      	adds	r0, #92	@ 0x5c
 800879e:	f000 f926 	bl	80089ee <memset>
 80087a2:	4b0d      	ldr	r3, [pc, #52]	@ (80087d8 <std+0x58>)
 80087a4:	6224      	str	r4, [r4, #32]
 80087a6:	6263      	str	r3, [r4, #36]	@ 0x24
 80087a8:	4b0c      	ldr	r3, [pc, #48]	@ (80087dc <std+0x5c>)
 80087aa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80087ac:	4b0c      	ldr	r3, [pc, #48]	@ (80087e0 <std+0x60>)
 80087ae:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80087b0:	4b0c      	ldr	r3, [pc, #48]	@ (80087e4 <std+0x64>)
 80087b2:	6323      	str	r3, [r4, #48]	@ 0x30
 80087b4:	4b0c      	ldr	r3, [pc, #48]	@ (80087e8 <std+0x68>)
 80087b6:	429c      	cmp	r4, r3
 80087b8:	d006      	beq.n	80087c8 <std+0x48>
 80087ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80087be:	4294      	cmp	r4, r2
 80087c0:	d002      	beq.n	80087c8 <std+0x48>
 80087c2:	33d0      	adds	r3, #208	@ 0xd0
 80087c4:	429c      	cmp	r4, r3
 80087c6:	d105      	bne.n	80087d4 <std+0x54>
 80087c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80087cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087d0:	f000 b98a 	b.w	8008ae8 <__retarget_lock_init_recursive>
 80087d4:	bd10      	pop	{r4, pc}
 80087d6:	bf00      	nop
 80087d8:	08008949 	.word	0x08008949
 80087dc:	0800896b 	.word	0x0800896b
 80087e0:	080089a3 	.word	0x080089a3
 80087e4:	080089c7 	.word	0x080089c7
 80087e8:	200002e8 	.word	0x200002e8

080087ec <stdio_exit_handler>:
 80087ec:	4a02      	ldr	r2, [pc, #8]	@ (80087f8 <stdio_exit_handler+0xc>)
 80087ee:	4903      	ldr	r1, [pc, #12]	@ (80087fc <stdio_exit_handler+0x10>)
 80087f0:	4803      	ldr	r0, [pc, #12]	@ (8008800 <stdio_exit_handler+0x14>)
 80087f2:	f000 b869 	b.w	80088c8 <_fwalk_sglue>
 80087f6:	bf00      	nop
 80087f8:	20000044 	.word	0x20000044
 80087fc:	0800b3b5 	.word	0x0800b3b5
 8008800:	20000054 	.word	0x20000054

08008804 <cleanup_stdio>:
 8008804:	6841      	ldr	r1, [r0, #4]
 8008806:	4b0c      	ldr	r3, [pc, #48]	@ (8008838 <cleanup_stdio+0x34>)
 8008808:	b510      	push	{r4, lr}
 800880a:	4299      	cmp	r1, r3
 800880c:	4604      	mov	r4, r0
 800880e:	d001      	beq.n	8008814 <cleanup_stdio+0x10>
 8008810:	f002 fdd0 	bl	800b3b4 <_fflush_r>
 8008814:	68a1      	ldr	r1, [r4, #8]
 8008816:	4b09      	ldr	r3, [pc, #36]	@ (800883c <cleanup_stdio+0x38>)
 8008818:	4299      	cmp	r1, r3
 800881a:	d002      	beq.n	8008822 <cleanup_stdio+0x1e>
 800881c:	4620      	mov	r0, r4
 800881e:	f002 fdc9 	bl	800b3b4 <_fflush_r>
 8008822:	68e1      	ldr	r1, [r4, #12]
 8008824:	4b06      	ldr	r3, [pc, #24]	@ (8008840 <cleanup_stdio+0x3c>)
 8008826:	4299      	cmp	r1, r3
 8008828:	d004      	beq.n	8008834 <cleanup_stdio+0x30>
 800882a:	4620      	mov	r0, r4
 800882c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008830:	f002 bdc0 	b.w	800b3b4 <_fflush_r>
 8008834:	bd10      	pop	{r4, pc}
 8008836:	bf00      	nop
 8008838:	200002e8 	.word	0x200002e8
 800883c:	20000350 	.word	0x20000350
 8008840:	200003b8 	.word	0x200003b8

08008844 <global_stdio_init.part.0>:
 8008844:	b510      	push	{r4, lr}
 8008846:	4b0b      	ldr	r3, [pc, #44]	@ (8008874 <global_stdio_init.part.0+0x30>)
 8008848:	4c0b      	ldr	r4, [pc, #44]	@ (8008878 <global_stdio_init.part.0+0x34>)
 800884a:	4a0c      	ldr	r2, [pc, #48]	@ (800887c <global_stdio_init.part.0+0x38>)
 800884c:	4620      	mov	r0, r4
 800884e:	601a      	str	r2, [r3, #0]
 8008850:	2104      	movs	r1, #4
 8008852:	2200      	movs	r2, #0
 8008854:	f7ff ff94 	bl	8008780 <std>
 8008858:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800885c:	2201      	movs	r2, #1
 800885e:	2109      	movs	r1, #9
 8008860:	f7ff ff8e 	bl	8008780 <std>
 8008864:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008868:	2202      	movs	r2, #2
 800886a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800886e:	2112      	movs	r1, #18
 8008870:	f7ff bf86 	b.w	8008780 <std>
 8008874:	20000420 	.word	0x20000420
 8008878:	200002e8 	.word	0x200002e8
 800887c:	080087ed 	.word	0x080087ed

08008880 <__sfp_lock_acquire>:
 8008880:	4801      	ldr	r0, [pc, #4]	@ (8008888 <__sfp_lock_acquire+0x8>)
 8008882:	f000 b932 	b.w	8008aea <__retarget_lock_acquire_recursive>
 8008886:	bf00      	nop
 8008888:	20000429 	.word	0x20000429

0800888c <__sfp_lock_release>:
 800888c:	4801      	ldr	r0, [pc, #4]	@ (8008894 <__sfp_lock_release+0x8>)
 800888e:	f000 b92d 	b.w	8008aec <__retarget_lock_release_recursive>
 8008892:	bf00      	nop
 8008894:	20000429 	.word	0x20000429

08008898 <__sinit>:
 8008898:	b510      	push	{r4, lr}
 800889a:	4604      	mov	r4, r0
 800889c:	f7ff fff0 	bl	8008880 <__sfp_lock_acquire>
 80088a0:	6a23      	ldr	r3, [r4, #32]
 80088a2:	b11b      	cbz	r3, 80088ac <__sinit+0x14>
 80088a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088a8:	f7ff bff0 	b.w	800888c <__sfp_lock_release>
 80088ac:	4b04      	ldr	r3, [pc, #16]	@ (80088c0 <__sinit+0x28>)
 80088ae:	6223      	str	r3, [r4, #32]
 80088b0:	4b04      	ldr	r3, [pc, #16]	@ (80088c4 <__sinit+0x2c>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d1f5      	bne.n	80088a4 <__sinit+0xc>
 80088b8:	f7ff ffc4 	bl	8008844 <global_stdio_init.part.0>
 80088bc:	e7f2      	b.n	80088a4 <__sinit+0xc>
 80088be:	bf00      	nop
 80088c0:	08008805 	.word	0x08008805
 80088c4:	20000420 	.word	0x20000420

080088c8 <_fwalk_sglue>:
 80088c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088cc:	4607      	mov	r7, r0
 80088ce:	4688      	mov	r8, r1
 80088d0:	4614      	mov	r4, r2
 80088d2:	2600      	movs	r6, #0
 80088d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088d8:	f1b9 0901 	subs.w	r9, r9, #1
 80088dc:	d505      	bpl.n	80088ea <_fwalk_sglue+0x22>
 80088de:	6824      	ldr	r4, [r4, #0]
 80088e0:	2c00      	cmp	r4, #0
 80088e2:	d1f7      	bne.n	80088d4 <_fwalk_sglue+0xc>
 80088e4:	4630      	mov	r0, r6
 80088e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088ea:	89ab      	ldrh	r3, [r5, #12]
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d907      	bls.n	8008900 <_fwalk_sglue+0x38>
 80088f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088f4:	3301      	adds	r3, #1
 80088f6:	d003      	beq.n	8008900 <_fwalk_sglue+0x38>
 80088f8:	4629      	mov	r1, r5
 80088fa:	4638      	mov	r0, r7
 80088fc:	47c0      	blx	r8
 80088fe:	4306      	orrs	r6, r0
 8008900:	3568      	adds	r5, #104	@ 0x68
 8008902:	e7e9      	b.n	80088d8 <_fwalk_sglue+0x10>

08008904 <siprintf>:
 8008904:	b40e      	push	{r1, r2, r3}
 8008906:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800890a:	b510      	push	{r4, lr}
 800890c:	2400      	movs	r4, #0
 800890e:	b09d      	sub	sp, #116	@ 0x74
 8008910:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008912:	9002      	str	r0, [sp, #8]
 8008914:	9006      	str	r0, [sp, #24]
 8008916:	9107      	str	r1, [sp, #28]
 8008918:	9104      	str	r1, [sp, #16]
 800891a:	4809      	ldr	r0, [pc, #36]	@ (8008940 <siprintf+0x3c>)
 800891c:	4909      	ldr	r1, [pc, #36]	@ (8008944 <siprintf+0x40>)
 800891e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008922:	9105      	str	r1, [sp, #20]
 8008924:	6800      	ldr	r0, [r0, #0]
 8008926:	a902      	add	r1, sp, #8
 8008928:	9301      	str	r3, [sp, #4]
 800892a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800892c:	f002 fbc6 	bl	800b0bc <_svfiprintf_r>
 8008930:	9b02      	ldr	r3, [sp, #8]
 8008932:	701c      	strb	r4, [r3, #0]
 8008934:	b01d      	add	sp, #116	@ 0x74
 8008936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800893a:	b003      	add	sp, #12
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	20000050 	.word	0x20000050
 8008944:	ffff0208 	.word	0xffff0208

08008948 <__sread>:
 8008948:	b510      	push	{r4, lr}
 800894a:	460c      	mov	r4, r1
 800894c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008950:	f000 f87c 	bl	8008a4c <_read_r>
 8008954:	2800      	cmp	r0, #0
 8008956:	bfab      	itete	ge
 8008958:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800895a:	89a3      	ldrhlt	r3, [r4, #12]
 800895c:	181b      	addge	r3, r3, r0
 800895e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008962:	bfac      	ite	ge
 8008964:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008966:	81a3      	strhlt	r3, [r4, #12]
 8008968:	bd10      	pop	{r4, pc}

0800896a <__swrite>:
 800896a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800896e:	461f      	mov	r7, r3
 8008970:	898b      	ldrh	r3, [r1, #12]
 8008972:	4605      	mov	r5, r0
 8008974:	05db      	lsls	r3, r3, #23
 8008976:	460c      	mov	r4, r1
 8008978:	4616      	mov	r6, r2
 800897a:	d505      	bpl.n	8008988 <__swrite+0x1e>
 800897c:	2302      	movs	r3, #2
 800897e:	2200      	movs	r2, #0
 8008980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008984:	f000 f850 	bl	8008a28 <_lseek_r>
 8008988:	89a3      	ldrh	r3, [r4, #12]
 800898a:	4632      	mov	r2, r6
 800898c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008990:	81a3      	strh	r3, [r4, #12]
 8008992:	4628      	mov	r0, r5
 8008994:	463b      	mov	r3, r7
 8008996:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800899a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800899e:	f000 b867 	b.w	8008a70 <_write_r>

080089a2 <__sseek>:
 80089a2:	b510      	push	{r4, lr}
 80089a4:	460c      	mov	r4, r1
 80089a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089aa:	f000 f83d 	bl	8008a28 <_lseek_r>
 80089ae:	1c43      	adds	r3, r0, #1
 80089b0:	89a3      	ldrh	r3, [r4, #12]
 80089b2:	bf15      	itete	ne
 80089b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80089b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80089ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80089be:	81a3      	strheq	r3, [r4, #12]
 80089c0:	bf18      	it	ne
 80089c2:	81a3      	strhne	r3, [r4, #12]
 80089c4:	bd10      	pop	{r4, pc}

080089c6 <__sclose>:
 80089c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ca:	f000 b81d 	b.w	8008a08 <_close_r>

080089ce <memcmp>:
 80089ce:	b510      	push	{r4, lr}
 80089d0:	3901      	subs	r1, #1
 80089d2:	4402      	add	r2, r0
 80089d4:	4290      	cmp	r0, r2
 80089d6:	d101      	bne.n	80089dc <memcmp+0xe>
 80089d8:	2000      	movs	r0, #0
 80089da:	e005      	b.n	80089e8 <memcmp+0x1a>
 80089dc:	7803      	ldrb	r3, [r0, #0]
 80089de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80089e2:	42a3      	cmp	r3, r4
 80089e4:	d001      	beq.n	80089ea <memcmp+0x1c>
 80089e6:	1b18      	subs	r0, r3, r4
 80089e8:	bd10      	pop	{r4, pc}
 80089ea:	3001      	adds	r0, #1
 80089ec:	e7f2      	b.n	80089d4 <memcmp+0x6>

080089ee <memset>:
 80089ee:	4603      	mov	r3, r0
 80089f0:	4402      	add	r2, r0
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d100      	bne.n	80089f8 <memset+0xa>
 80089f6:	4770      	bx	lr
 80089f8:	f803 1b01 	strb.w	r1, [r3], #1
 80089fc:	e7f9      	b.n	80089f2 <memset+0x4>
	...

08008a00 <_localeconv_r>:
 8008a00:	4800      	ldr	r0, [pc, #0]	@ (8008a04 <_localeconv_r+0x4>)
 8008a02:	4770      	bx	lr
 8008a04:	20000190 	.word	0x20000190

08008a08 <_close_r>:
 8008a08:	b538      	push	{r3, r4, r5, lr}
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	4d05      	ldr	r5, [pc, #20]	@ (8008a24 <_close_r+0x1c>)
 8008a0e:	4604      	mov	r4, r0
 8008a10:	4608      	mov	r0, r1
 8008a12:	602b      	str	r3, [r5, #0]
 8008a14:	f7f9 f877 	bl	8001b06 <_close>
 8008a18:	1c43      	adds	r3, r0, #1
 8008a1a:	d102      	bne.n	8008a22 <_close_r+0x1a>
 8008a1c:	682b      	ldr	r3, [r5, #0]
 8008a1e:	b103      	cbz	r3, 8008a22 <_close_r+0x1a>
 8008a20:	6023      	str	r3, [r4, #0]
 8008a22:	bd38      	pop	{r3, r4, r5, pc}
 8008a24:	20000424 	.word	0x20000424

08008a28 <_lseek_r>:
 8008a28:	b538      	push	{r3, r4, r5, lr}
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	4608      	mov	r0, r1
 8008a2e:	4611      	mov	r1, r2
 8008a30:	2200      	movs	r2, #0
 8008a32:	4d05      	ldr	r5, [pc, #20]	@ (8008a48 <_lseek_r+0x20>)
 8008a34:	602a      	str	r2, [r5, #0]
 8008a36:	461a      	mov	r2, r3
 8008a38:	f7f9 f889 	bl	8001b4e <_lseek>
 8008a3c:	1c43      	adds	r3, r0, #1
 8008a3e:	d102      	bne.n	8008a46 <_lseek_r+0x1e>
 8008a40:	682b      	ldr	r3, [r5, #0]
 8008a42:	b103      	cbz	r3, 8008a46 <_lseek_r+0x1e>
 8008a44:	6023      	str	r3, [r4, #0]
 8008a46:	bd38      	pop	{r3, r4, r5, pc}
 8008a48:	20000424 	.word	0x20000424

08008a4c <_read_r>:
 8008a4c:	b538      	push	{r3, r4, r5, lr}
 8008a4e:	4604      	mov	r4, r0
 8008a50:	4608      	mov	r0, r1
 8008a52:	4611      	mov	r1, r2
 8008a54:	2200      	movs	r2, #0
 8008a56:	4d05      	ldr	r5, [pc, #20]	@ (8008a6c <_read_r+0x20>)
 8008a58:	602a      	str	r2, [r5, #0]
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	f7f9 f81a 	bl	8001a94 <_read>
 8008a60:	1c43      	adds	r3, r0, #1
 8008a62:	d102      	bne.n	8008a6a <_read_r+0x1e>
 8008a64:	682b      	ldr	r3, [r5, #0]
 8008a66:	b103      	cbz	r3, 8008a6a <_read_r+0x1e>
 8008a68:	6023      	str	r3, [r4, #0]
 8008a6a:	bd38      	pop	{r3, r4, r5, pc}
 8008a6c:	20000424 	.word	0x20000424

08008a70 <_write_r>:
 8008a70:	b538      	push	{r3, r4, r5, lr}
 8008a72:	4604      	mov	r4, r0
 8008a74:	4608      	mov	r0, r1
 8008a76:	4611      	mov	r1, r2
 8008a78:	2200      	movs	r2, #0
 8008a7a:	4d05      	ldr	r5, [pc, #20]	@ (8008a90 <_write_r+0x20>)
 8008a7c:	602a      	str	r2, [r5, #0]
 8008a7e:	461a      	mov	r2, r3
 8008a80:	f7f9 f825 	bl	8001ace <_write>
 8008a84:	1c43      	adds	r3, r0, #1
 8008a86:	d102      	bne.n	8008a8e <_write_r+0x1e>
 8008a88:	682b      	ldr	r3, [r5, #0]
 8008a8a:	b103      	cbz	r3, 8008a8e <_write_r+0x1e>
 8008a8c:	6023      	str	r3, [r4, #0]
 8008a8e:	bd38      	pop	{r3, r4, r5, pc}
 8008a90:	20000424 	.word	0x20000424

08008a94 <__errno>:
 8008a94:	4b01      	ldr	r3, [pc, #4]	@ (8008a9c <__errno+0x8>)
 8008a96:	6818      	ldr	r0, [r3, #0]
 8008a98:	4770      	bx	lr
 8008a9a:	bf00      	nop
 8008a9c:	20000050 	.word	0x20000050

08008aa0 <__libc_init_array>:
 8008aa0:	b570      	push	{r4, r5, r6, lr}
 8008aa2:	2600      	movs	r6, #0
 8008aa4:	4d0c      	ldr	r5, [pc, #48]	@ (8008ad8 <__libc_init_array+0x38>)
 8008aa6:	4c0d      	ldr	r4, [pc, #52]	@ (8008adc <__libc_init_array+0x3c>)
 8008aa8:	1b64      	subs	r4, r4, r5
 8008aaa:	10a4      	asrs	r4, r4, #2
 8008aac:	42a6      	cmp	r6, r4
 8008aae:	d109      	bne.n	8008ac4 <__libc_init_array+0x24>
 8008ab0:	f004 f8cc 	bl	800cc4c <_init>
 8008ab4:	2600      	movs	r6, #0
 8008ab6:	4d0a      	ldr	r5, [pc, #40]	@ (8008ae0 <__libc_init_array+0x40>)
 8008ab8:	4c0a      	ldr	r4, [pc, #40]	@ (8008ae4 <__libc_init_array+0x44>)
 8008aba:	1b64      	subs	r4, r4, r5
 8008abc:	10a4      	asrs	r4, r4, #2
 8008abe:	42a6      	cmp	r6, r4
 8008ac0:	d105      	bne.n	8008ace <__libc_init_array+0x2e>
 8008ac2:	bd70      	pop	{r4, r5, r6, pc}
 8008ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ac8:	4798      	blx	r3
 8008aca:	3601      	adds	r6, #1
 8008acc:	e7ee      	b.n	8008aac <__libc_init_array+0xc>
 8008ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ad2:	4798      	blx	r3
 8008ad4:	3601      	adds	r6, #1
 8008ad6:	e7f2      	b.n	8008abe <__libc_init_array+0x1e>
 8008ad8:	0800dde8 	.word	0x0800dde8
 8008adc:	0800dde8 	.word	0x0800dde8
 8008ae0:	0800dde8 	.word	0x0800dde8
 8008ae4:	0800ddec 	.word	0x0800ddec

08008ae8 <__retarget_lock_init_recursive>:
 8008ae8:	4770      	bx	lr

08008aea <__retarget_lock_acquire_recursive>:
 8008aea:	4770      	bx	lr

08008aec <__retarget_lock_release_recursive>:
 8008aec:	4770      	bx	lr

08008aee <memchr>:
 8008aee:	4603      	mov	r3, r0
 8008af0:	b510      	push	{r4, lr}
 8008af2:	b2c9      	uxtb	r1, r1
 8008af4:	4402      	add	r2, r0
 8008af6:	4293      	cmp	r3, r2
 8008af8:	4618      	mov	r0, r3
 8008afa:	d101      	bne.n	8008b00 <memchr+0x12>
 8008afc:	2000      	movs	r0, #0
 8008afe:	e003      	b.n	8008b08 <memchr+0x1a>
 8008b00:	7804      	ldrb	r4, [r0, #0]
 8008b02:	3301      	adds	r3, #1
 8008b04:	428c      	cmp	r4, r1
 8008b06:	d1f6      	bne.n	8008af6 <memchr+0x8>
 8008b08:	bd10      	pop	{r4, pc}
	...

08008b0c <nanf>:
 8008b0c:	4800      	ldr	r0, [pc, #0]	@ (8008b10 <nanf+0x4>)
 8008b0e:	4770      	bx	lr
 8008b10:	7fc00000 	.word	0x7fc00000

08008b14 <quorem>:
 8008b14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b18:	6903      	ldr	r3, [r0, #16]
 8008b1a:	690c      	ldr	r4, [r1, #16]
 8008b1c:	4607      	mov	r7, r0
 8008b1e:	42a3      	cmp	r3, r4
 8008b20:	db7e      	blt.n	8008c20 <quorem+0x10c>
 8008b22:	3c01      	subs	r4, #1
 8008b24:	00a3      	lsls	r3, r4, #2
 8008b26:	f100 0514 	add.w	r5, r0, #20
 8008b2a:	f101 0814 	add.w	r8, r1, #20
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b34:	9301      	str	r3, [sp, #4]
 8008b36:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	429a      	cmp	r2, r3
 8008b42:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b46:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b4a:	d32e      	bcc.n	8008baa <quorem+0x96>
 8008b4c:	f04f 0a00 	mov.w	sl, #0
 8008b50:	46c4      	mov	ip, r8
 8008b52:	46ae      	mov	lr, r5
 8008b54:	46d3      	mov	fp, sl
 8008b56:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008b5a:	b298      	uxth	r0, r3
 8008b5c:	fb06 a000 	mla	r0, r6, r0, sl
 8008b60:	0c1b      	lsrs	r3, r3, #16
 8008b62:	0c02      	lsrs	r2, r0, #16
 8008b64:	fb06 2303 	mla	r3, r6, r3, r2
 8008b68:	f8de 2000 	ldr.w	r2, [lr]
 8008b6c:	b280      	uxth	r0, r0
 8008b6e:	b292      	uxth	r2, r2
 8008b70:	1a12      	subs	r2, r2, r0
 8008b72:	445a      	add	r2, fp
 8008b74:	f8de 0000 	ldr.w	r0, [lr]
 8008b78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008b82:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008b86:	b292      	uxth	r2, r2
 8008b88:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008b8c:	45e1      	cmp	r9, ip
 8008b8e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008b92:	f84e 2b04 	str.w	r2, [lr], #4
 8008b96:	d2de      	bcs.n	8008b56 <quorem+0x42>
 8008b98:	9b00      	ldr	r3, [sp, #0]
 8008b9a:	58eb      	ldr	r3, [r5, r3]
 8008b9c:	b92b      	cbnz	r3, 8008baa <quorem+0x96>
 8008b9e:	9b01      	ldr	r3, [sp, #4]
 8008ba0:	3b04      	subs	r3, #4
 8008ba2:	429d      	cmp	r5, r3
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	d32f      	bcc.n	8008c08 <quorem+0xf4>
 8008ba8:	613c      	str	r4, [r7, #16]
 8008baa:	4638      	mov	r0, r7
 8008bac:	f001 f9ca 	bl	8009f44 <__mcmp>
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	db25      	blt.n	8008c00 <quorem+0xec>
 8008bb4:	4629      	mov	r1, r5
 8008bb6:	2000      	movs	r0, #0
 8008bb8:	f858 2b04 	ldr.w	r2, [r8], #4
 8008bbc:	f8d1 c000 	ldr.w	ip, [r1]
 8008bc0:	fa1f fe82 	uxth.w	lr, r2
 8008bc4:	fa1f f38c 	uxth.w	r3, ip
 8008bc8:	eba3 030e 	sub.w	r3, r3, lr
 8008bcc:	4403      	add	r3, r0
 8008bce:	0c12      	lsrs	r2, r2, #16
 8008bd0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008bd4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bde:	45c1      	cmp	r9, r8
 8008be0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008be4:	f841 3b04 	str.w	r3, [r1], #4
 8008be8:	d2e6      	bcs.n	8008bb8 <quorem+0xa4>
 8008bea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bf2:	b922      	cbnz	r2, 8008bfe <quorem+0xea>
 8008bf4:	3b04      	subs	r3, #4
 8008bf6:	429d      	cmp	r5, r3
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	d30b      	bcc.n	8008c14 <quorem+0x100>
 8008bfc:	613c      	str	r4, [r7, #16]
 8008bfe:	3601      	adds	r6, #1
 8008c00:	4630      	mov	r0, r6
 8008c02:	b003      	add	sp, #12
 8008c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c08:	6812      	ldr	r2, [r2, #0]
 8008c0a:	3b04      	subs	r3, #4
 8008c0c:	2a00      	cmp	r2, #0
 8008c0e:	d1cb      	bne.n	8008ba8 <quorem+0x94>
 8008c10:	3c01      	subs	r4, #1
 8008c12:	e7c6      	b.n	8008ba2 <quorem+0x8e>
 8008c14:	6812      	ldr	r2, [r2, #0]
 8008c16:	3b04      	subs	r3, #4
 8008c18:	2a00      	cmp	r2, #0
 8008c1a:	d1ef      	bne.n	8008bfc <quorem+0xe8>
 8008c1c:	3c01      	subs	r4, #1
 8008c1e:	e7ea      	b.n	8008bf6 <quorem+0xe2>
 8008c20:	2000      	movs	r0, #0
 8008c22:	e7ee      	b.n	8008c02 <quorem+0xee>
 8008c24:	0000      	movs	r0, r0
	...

08008c28 <_dtoa_r>:
 8008c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c2c:	4614      	mov	r4, r2
 8008c2e:	461d      	mov	r5, r3
 8008c30:	69c7      	ldr	r7, [r0, #28]
 8008c32:	b097      	sub	sp, #92	@ 0x5c
 8008c34:	4681      	mov	r9, r0
 8008c36:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008c3a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8008c3c:	b97f      	cbnz	r7, 8008c5e <_dtoa_r+0x36>
 8008c3e:	2010      	movs	r0, #16
 8008c40:	f000 fe0e 	bl	8009860 <malloc>
 8008c44:	4602      	mov	r2, r0
 8008c46:	f8c9 001c 	str.w	r0, [r9, #28]
 8008c4a:	b920      	cbnz	r0, 8008c56 <_dtoa_r+0x2e>
 8008c4c:	21ef      	movs	r1, #239	@ 0xef
 8008c4e:	4bac      	ldr	r3, [pc, #688]	@ (8008f00 <_dtoa_r+0x2d8>)
 8008c50:	48ac      	ldr	r0, [pc, #688]	@ (8008f04 <_dtoa_r+0x2dc>)
 8008c52:	f002 fc27 	bl	800b4a4 <__assert_func>
 8008c56:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008c5a:	6007      	str	r7, [r0, #0]
 8008c5c:	60c7      	str	r7, [r0, #12]
 8008c5e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008c62:	6819      	ldr	r1, [r3, #0]
 8008c64:	b159      	cbz	r1, 8008c7e <_dtoa_r+0x56>
 8008c66:	685a      	ldr	r2, [r3, #4]
 8008c68:	2301      	movs	r3, #1
 8008c6a:	4093      	lsls	r3, r2
 8008c6c:	604a      	str	r2, [r1, #4]
 8008c6e:	608b      	str	r3, [r1, #8]
 8008c70:	4648      	mov	r0, r9
 8008c72:	f000 feeb 	bl	8009a4c <_Bfree>
 8008c76:	2200      	movs	r2, #0
 8008c78:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008c7c:	601a      	str	r2, [r3, #0]
 8008c7e:	1e2b      	subs	r3, r5, #0
 8008c80:	bfaf      	iteee	ge
 8008c82:	2300      	movge	r3, #0
 8008c84:	2201      	movlt	r2, #1
 8008c86:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008c8a:	9307      	strlt	r3, [sp, #28]
 8008c8c:	bfa8      	it	ge
 8008c8e:	6033      	strge	r3, [r6, #0]
 8008c90:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8008c94:	4b9c      	ldr	r3, [pc, #624]	@ (8008f08 <_dtoa_r+0x2e0>)
 8008c96:	bfb8      	it	lt
 8008c98:	6032      	strlt	r2, [r6, #0]
 8008c9a:	ea33 0308 	bics.w	r3, r3, r8
 8008c9e:	d112      	bne.n	8008cc6 <_dtoa_r+0x9e>
 8008ca0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008ca4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008ca6:	6013      	str	r3, [r2, #0]
 8008ca8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008cac:	4323      	orrs	r3, r4
 8008cae:	f000 855e 	beq.w	800976e <_dtoa_r+0xb46>
 8008cb2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008cb4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008f0c <_dtoa_r+0x2e4>
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f000 8560 	beq.w	800977e <_dtoa_r+0xb56>
 8008cbe:	f10a 0303 	add.w	r3, sl, #3
 8008cc2:	f000 bd5a 	b.w	800977a <_dtoa_r+0xb52>
 8008cc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008cca:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008cce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	f7f7 fe67 	bl	80009a8 <__aeabi_dcmpeq>
 8008cda:	4607      	mov	r7, r0
 8008cdc:	b158      	cbz	r0, 8008cf6 <_dtoa_r+0xce>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008ce2:	6013      	str	r3, [r2, #0]
 8008ce4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008ce6:	b113      	cbz	r3, 8008cee <_dtoa_r+0xc6>
 8008ce8:	4b89      	ldr	r3, [pc, #548]	@ (8008f10 <_dtoa_r+0x2e8>)
 8008cea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008cec:	6013      	str	r3, [r2, #0]
 8008cee:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8008f14 <_dtoa_r+0x2ec>
 8008cf2:	f000 bd44 	b.w	800977e <_dtoa_r+0xb56>
 8008cf6:	ab14      	add	r3, sp, #80	@ 0x50
 8008cf8:	9301      	str	r3, [sp, #4]
 8008cfa:	ab15      	add	r3, sp, #84	@ 0x54
 8008cfc:	9300      	str	r3, [sp, #0]
 8008cfe:	4648      	mov	r0, r9
 8008d00:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008d04:	f001 fa36 	bl	800a174 <__d2b>
 8008d08:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8008d0c:	9003      	str	r0, [sp, #12]
 8008d0e:	2e00      	cmp	r6, #0
 8008d10:	d078      	beq.n	8008e04 <_dtoa_r+0x1dc>
 8008d12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d18:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008d1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d20:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008d24:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008d28:	9712      	str	r7, [sp, #72]	@ 0x48
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	4b7a      	ldr	r3, [pc, #488]	@ (8008f18 <_dtoa_r+0x2f0>)
 8008d30:	f7f7 fa1a 	bl	8000168 <__aeabi_dsub>
 8008d34:	a36c      	add	r3, pc, #432	@ (adr r3, 8008ee8 <_dtoa_r+0x2c0>)
 8008d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3a:	f7f7 fbcd 	bl	80004d8 <__aeabi_dmul>
 8008d3e:	a36c      	add	r3, pc, #432	@ (adr r3, 8008ef0 <_dtoa_r+0x2c8>)
 8008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d44:	f7f7 fa12 	bl	800016c <__adddf3>
 8008d48:	4604      	mov	r4, r0
 8008d4a:	4630      	mov	r0, r6
 8008d4c:	460d      	mov	r5, r1
 8008d4e:	f7f7 fb59 	bl	8000404 <__aeabi_i2d>
 8008d52:	a369      	add	r3, pc, #420	@ (adr r3, 8008ef8 <_dtoa_r+0x2d0>)
 8008d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d58:	f7f7 fbbe 	bl	80004d8 <__aeabi_dmul>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	460b      	mov	r3, r1
 8008d60:	4620      	mov	r0, r4
 8008d62:	4629      	mov	r1, r5
 8008d64:	f7f7 fa02 	bl	800016c <__adddf3>
 8008d68:	4604      	mov	r4, r0
 8008d6a:	460d      	mov	r5, r1
 8008d6c:	f7f7 fe64 	bl	8000a38 <__aeabi_d2iz>
 8008d70:	2200      	movs	r2, #0
 8008d72:	4607      	mov	r7, r0
 8008d74:	2300      	movs	r3, #0
 8008d76:	4620      	mov	r0, r4
 8008d78:	4629      	mov	r1, r5
 8008d7a:	f7f7 fe1f 	bl	80009bc <__aeabi_dcmplt>
 8008d7e:	b140      	cbz	r0, 8008d92 <_dtoa_r+0x16a>
 8008d80:	4638      	mov	r0, r7
 8008d82:	f7f7 fb3f 	bl	8000404 <__aeabi_i2d>
 8008d86:	4622      	mov	r2, r4
 8008d88:	462b      	mov	r3, r5
 8008d8a:	f7f7 fe0d 	bl	80009a8 <__aeabi_dcmpeq>
 8008d8e:	b900      	cbnz	r0, 8008d92 <_dtoa_r+0x16a>
 8008d90:	3f01      	subs	r7, #1
 8008d92:	2f16      	cmp	r7, #22
 8008d94:	d854      	bhi.n	8008e40 <_dtoa_r+0x218>
 8008d96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d9a:	4b60      	ldr	r3, [pc, #384]	@ (8008f1c <_dtoa_r+0x2f4>)
 8008d9c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da4:	f7f7 fe0a 	bl	80009bc <__aeabi_dcmplt>
 8008da8:	2800      	cmp	r0, #0
 8008daa:	d04b      	beq.n	8008e44 <_dtoa_r+0x21c>
 8008dac:	2300      	movs	r3, #0
 8008dae:	3f01      	subs	r7, #1
 8008db0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008db2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008db4:	1b9b      	subs	r3, r3, r6
 8008db6:	1e5a      	subs	r2, r3, #1
 8008db8:	bf49      	itett	mi
 8008dba:	f1c3 0301 	rsbmi	r3, r3, #1
 8008dbe:	2300      	movpl	r3, #0
 8008dc0:	9304      	strmi	r3, [sp, #16]
 8008dc2:	2300      	movmi	r3, #0
 8008dc4:	9209      	str	r2, [sp, #36]	@ 0x24
 8008dc6:	bf54      	ite	pl
 8008dc8:	9304      	strpl	r3, [sp, #16]
 8008dca:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8008dcc:	2f00      	cmp	r7, #0
 8008dce:	db3b      	blt.n	8008e48 <_dtoa_r+0x220>
 8008dd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dd2:	970e      	str	r7, [sp, #56]	@ 0x38
 8008dd4:	443b      	add	r3, r7
 8008dd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dd8:	2300      	movs	r3, #0
 8008dda:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ddc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008dde:	2b09      	cmp	r3, #9
 8008de0:	d865      	bhi.n	8008eae <_dtoa_r+0x286>
 8008de2:	2b05      	cmp	r3, #5
 8008de4:	bfc4      	itt	gt
 8008de6:	3b04      	subgt	r3, #4
 8008de8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008dea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008dec:	bfc8      	it	gt
 8008dee:	2400      	movgt	r4, #0
 8008df0:	f1a3 0302 	sub.w	r3, r3, #2
 8008df4:	bfd8      	it	le
 8008df6:	2401      	movle	r4, #1
 8008df8:	2b03      	cmp	r3, #3
 8008dfa:	d864      	bhi.n	8008ec6 <_dtoa_r+0x29e>
 8008dfc:	e8df f003 	tbb	[pc, r3]
 8008e00:	2c385553 	.word	0x2c385553
 8008e04:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008e08:	441e      	add	r6, r3
 8008e0a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008e0e:	2b20      	cmp	r3, #32
 8008e10:	bfc1      	itttt	gt
 8008e12:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008e16:	fa08 f803 	lslgt.w	r8, r8, r3
 8008e1a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008e1e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008e22:	bfd6      	itet	le
 8008e24:	f1c3 0320 	rsble	r3, r3, #32
 8008e28:	ea48 0003 	orrgt.w	r0, r8, r3
 8008e2c:	fa04 f003 	lslle.w	r0, r4, r3
 8008e30:	f7f7 fad8 	bl	80003e4 <__aeabi_ui2d>
 8008e34:	2201      	movs	r2, #1
 8008e36:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008e3a:	3e01      	subs	r6, #1
 8008e3c:	9212      	str	r2, [sp, #72]	@ 0x48
 8008e3e:	e774      	b.n	8008d2a <_dtoa_r+0x102>
 8008e40:	2301      	movs	r3, #1
 8008e42:	e7b5      	b.n	8008db0 <_dtoa_r+0x188>
 8008e44:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008e46:	e7b4      	b.n	8008db2 <_dtoa_r+0x18a>
 8008e48:	9b04      	ldr	r3, [sp, #16]
 8008e4a:	1bdb      	subs	r3, r3, r7
 8008e4c:	9304      	str	r3, [sp, #16]
 8008e4e:	427b      	negs	r3, r7
 8008e50:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e52:	2300      	movs	r3, #0
 8008e54:	930e      	str	r3, [sp, #56]	@ 0x38
 8008e56:	e7c1      	b.n	8008ddc <_dtoa_r+0x1b4>
 8008e58:	2301      	movs	r3, #1
 8008e5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e5c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008e5e:	eb07 0b03 	add.w	fp, r7, r3
 8008e62:	f10b 0301 	add.w	r3, fp, #1
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	9308      	str	r3, [sp, #32]
 8008e6a:	bfb8      	it	lt
 8008e6c:	2301      	movlt	r3, #1
 8008e6e:	e006      	b.n	8008e7e <_dtoa_r+0x256>
 8008e70:	2301      	movs	r3, #1
 8008e72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e74:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	dd28      	ble.n	8008ecc <_dtoa_r+0x2a4>
 8008e7a:	469b      	mov	fp, r3
 8008e7c:	9308      	str	r3, [sp, #32]
 8008e7e:	2100      	movs	r1, #0
 8008e80:	2204      	movs	r2, #4
 8008e82:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008e86:	f102 0514 	add.w	r5, r2, #20
 8008e8a:	429d      	cmp	r5, r3
 8008e8c:	d926      	bls.n	8008edc <_dtoa_r+0x2b4>
 8008e8e:	6041      	str	r1, [r0, #4]
 8008e90:	4648      	mov	r0, r9
 8008e92:	f000 fd9b 	bl	80099cc <_Balloc>
 8008e96:	4682      	mov	sl, r0
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	d143      	bne.n	8008f24 <_dtoa_r+0x2fc>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8008f20 <_dtoa_r+0x2f8>)
 8008ea4:	e6d4      	b.n	8008c50 <_dtoa_r+0x28>
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	e7e3      	b.n	8008e72 <_dtoa_r+0x24a>
 8008eaa:	2300      	movs	r3, #0
 8008eac:	e7d5      	b.n	8008e5a <_dtoa_r+0x232>
 8008eae:	2401      	movs	r4, #1
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008eb4:	9320      	str	r3, [sp, #128]	@ 0x80
 8008eb6:	f04f 3bff 	mov.w	fp, #4294967295
 8008eba:	2200      	movs	r2, #0
 8008ebc:	2312      	movs	r3, #18
 8008ebe:	f8cd b020 	str.w	fp, [sp, #32]
 8008ec2:	9221      	str	r2, [sp, #132]	@ 0x84
 8008ec4:	e7db      	b.n	8008e7e <_dtoa_r+0x256>
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008eca:	e7f4      	b.n	8008eb6 <_dtoa_r+0x28e>
 8008ecc:	f04f 0b01 	mov.w	fp, #1
 8008ed0:	465b      	mov	r3, fp
 8008ed2:	f8cd b020 	str.w	fp, [sp, #32]
 8008ed6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8008eda:	e7d0      	b.n	8008e7e <_dtoa_r+0x256>
 8008edc:	3101      	adds	r1, #1
 8008ede:	0052      	lsls	r2, r2, #1
 8008ee0:	e7d1      	b.n	8008e86 <_dtoa_r+0x25e>
 8008ee2:	bf00      	nop
 8008ee4:	f3af 8000 	nop.w
 8008ee8:	636f4361 	.word	0x636f4361
 8008eec:	3fd287a7 	.word	0x3fd287a7
 8008ef0:	8b60c8b3 	.word	0x8b60c8b3
 8008ef4:	3fc68a28 	.word	0x3fc68a28
 8008ef8:	509f79fb 	.word	0x509f79fb
 8008efc:	3fd34413 	.word	0x3fd34413
 8008f00:	0800d97c 	.word	0x0800d97c
 8008f04:	0800d993 	.word	0x0800d993
 8008f08:	7ff00000 	.word	0x7ff00000
 8008f0c:	0800d978 	.word	0x0800d978
 8008f10:	0800d947 	.word	0x0800d947
 8008f14:	0800d946 	.word	0x0800d946
 8008f18:	3ff80000 	.word	0x3ff80000
 8008f1c:	0800db40 	.word	0x0800db40
 8008f20:	0800d9eb 	.word	0x0800d9eb
 8008f24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008f28:	6018      	str	r0, [r3, #0]
 8008f2a:	9b08      	ldr	r3, [sp, #32]
 8008f2c:	2b0e      	cmp	r3, #14
 8008f2e:	f200 80a1 	bhi.w	8009074 <_dtoa_r+0x44c>
 8008f32:	2c00      	cmp	r4, #0
 8008f34:	f000 809e 	beq.w	8009074 <_dtoa_r+0x44c>
 8008f38:	2f00      	cmp	r7, #0
 8008f3a:	dd33      	ble.n	8008fa4 <_dtoa_r+0x37c>
 8008f3c:	4b9c      	ldr	r3, [pc, #624]	@ (80091b0 <_dtoa_r+0x588>)
 8008f3e:	f007 020f 	and.w	r2, r7, #15
 8008f42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f46:	05f8      	lsls	r0, r7, #23
 8008f48:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f4c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8008f50:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008f54:	d516      	bpl.n	8008f84 <_dtoa_r+0x35c>
 8008f56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f5a:	4b96      	ldr	r3, [pc, #600]	@ (80091b4 <_dtoa_r+0x58c>)
 8008f5c:	2603      	movs	r6, #3
 8008f5e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f62:	f7f7 fbe3 	bl	800072c <__aeabi_ddiv>
 8008f66:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008f6a:	f004 040f 	and.w	r4, r4, #15
 8008f6e:	4d91      	ldr	r5, [pc, #580]	@ (80091b4 <_dtoa_r+0x58c>)
 8008f70:	b954      	cbnz	r4, 8008f88 <_dtoa_r+0x360>
 8008f72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008f76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f7a:	f7f7 fbd7 	bl	800072c <__aeabi_ddiv>
 8008f7e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008f82:	e028      	b.n	8008fd6 <_dtoa_r+0x3ae>
 8008f84:	2602      	movs	r6, #2
 8008f86:	e7f2      	b.n	8008f6e <_dtoa_r+0x346>
 8008f88:	07e1      	lsls	r1, r4, #31
 8008f8a:	d508      	bpl.n	8008f9e <_dtoa_r+0x376>
 8008f8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008f90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f94:	f7f7 faa0 	bl	80004d8 <__aeabi_dmul>
 8008f98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008f9c:	3601      	adds	r6, #1
 8008f9e:	1064      	asrs	r4, r4, #1
 8008fa0:	3508      	adds	r5, #8
 8008fa2:	e7e5      	b.n	8008f70 <_dtoa_r+0x348>
 8008fa4:	f000 80af 	beq.w	8009106 <_dtoa_r+0x4de>
 8008fa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008fac:	427c      	negs	r4, r7
 8008fae:	4b80      	ldr	r3, [pc, #512]	@ (80091b0 <_dtoa_r+0x588>)
 8008fb0:	f004 020f 	and.w	r2, r4, #15
 8008fb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fbc:	f7f7 fa8c 	bl	80004d8 <__aeabi_dmul>
 8008fc0:	2602      	movs	r6, #2
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008fc8:	4d7a      	ldr	r5, [pc, #488]	@ (80091b4 <_dtoa_r+0x58c>)
 8008fca:	1124      	asrs	r4, r4, #4
 8008fcc:	2c00      	cmp	r4, #0
 8008fce:	f040 808f 	bne.w	80090f0 <_dtoa_r+0x4c8>
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1d3      	bne.n	8008f7e <_dtoa_r+0x356>
 8008fd6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8008fda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f000 8094 	beq.w	800910a <_dtoa_r+0x4e2>
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	4629      	mov	r1, r5
 8008fe8:	4b73      	ldr	r3, [pc, #460]	@ (80091b8 <_dtoa_r+0x590>)
 8008fea:	f7f7 fce7 	bl	80009bc <__aeabi_dcmplt>
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	f000 808b 	beq.w	800910a <_dtoa_r+0x4e2>
 8008ff4:	9b08      	ldr	r3, [sp, #32]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	f000 8087 	beq.w	800910a <_dtoa_r+0x4e2>
 8008ffc:	f1bb 0f00 	cmp.w	fp, #0
 8009000:	dd34      	ble.n	800906c <_dtoa_r+0x444>
 8009002:	4620      	mov	r0, r4
 8009004:	2200      	movs	r2, #0
 8009006:	4629      	mov	r1, r5
 8009008:	4b6c      	ldr	r3, [pc, #432]	@ (80091bc <_dtoa_r+0x594>)
 800900a:	f7f7 fa65 	bl	80004d8 <__aeabi_dmul>
 800900e:	465c      	mov	r4, fp
 8009010:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009014:	f107 38ff 	add.w	r8, r7, #4294967295
 8009018:	3601      	adds	r6, #1
 800901a:	4630      	mov	r0, r6
 800901c:	f7f7 f9f2 	bl	8000404 <__aeabi_i2d>
 8009020:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009024:	f7f7 fa58 	bl	80004d8 <__aeabi_dmul>
 8009028:	2200      	movs	r2, #0
 800902a:	4b65      	ldr	r3, [pc, #404]	@ (80091c0 <_dtoa_r+0x598>)
 800902c:	f7f7 f89e 	bl	800016c <__adddf3>
 8009030:	4605      	mov	r5, r0
 8009032:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009036:	2c00      	cmp	r4, #0
 8009038:	d16a      	bne.n	8009110 <_dtoa_r+0x4e8>
 800903a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800903e:	2200      	movs	r2, #0
 8009040:	4b60      	ldr	r3, [pc, #384]	@ (80091c4 <_dtoa_r+0x59c>)
 8009042:	f7f7 f891 	bl	8000168 <__aeabi_dsub>
 8009046:	4602      	mov	r2, r0
 8009048:	460b      	mov	r3, r1
 800904a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800904e:	462a      	mov	r2, r5
 8009050:	4633      	mov	r3, r6
 8009052:	f7f7 fcd1 	bl	80009f8 <__aeabi_dcmpgt>
 8009056:	2800      	cmp	r0, #0
 8009058:	f040 8298 	bne.w	800958c <_dtoa_r+0x964>
 800905c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009060:	462a      	mov	r2, r5
 8009062:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009066:	f7f7 fca9 	bl	80009bc <__aeabi_dcmplt>
 800906a:	bb38      	cbnz	r0, 80090bc <_dtoa_r+0x494>
 800906c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009070:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009074:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009076:	2b00      	cmp	r3, #0
 8009078:	f2c0 8157 	blt.w	800932a <_dtoa_r+0x702>
 800907c:	2f0e      	cmp	r7, #14
 800907e:	f300 8154 	bgt.w	800932a <_dtoa_r+0x702>
 8009082:	4b4b      	ldr	r3, [pc, #300]	@ (80091b0 <_dtoa_r+0x588>)
 8009084:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009088:	e9d3 3400 	ldrd	r3, r4, [r3]
 800908c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009090:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009092:	2b00      	cmp	r3, #0
 8009094:	f280 80e5 	bge.w	8009262 <_dtoa_r+0x63a>
 8009098:	9b08      	ldr	r3, [sp, #32]
 800909a:	2b00      	cmp	r3, #0
 800909c:	f300 80e1 	bgt.w	8009262 <_dtoa_r+0x63a>
 80090a0:	d10c      	bne.n	80090bc <_dtoa_r+0x494>
 80090a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090a6:	2200      	movs	r2, #0
 80090a8:	4b46      	ldr	r3, [pc, #280]	@ (80091c4 <_dtoa_r+0x59c>)
 80090aa:	f7f7 fa15 	bl	80004d8 <__aeabi_dmul>
 80090ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80090b2:	f7f7 fc97 	bl	80009e4 <__aeabi_dcmpge>
 80090b6:	2800      	cmp	r0, #0
 80090b8:	f000 8266 	beq.w	8009588 <_dtoa_r+0x960>
 80090bc:	2400      	movs	r4, #0
 80090be:	4625      	mov	r5, r4
 80090c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80090c2:	4656      	mov	r6, sl
 80090c4:	ea6f 0803 	mvn.w	r8, r3
 80090c8:	2700      	movs	r7, #0
 80090ca:	4621      	mov	r1, r4
 80090cc:	4648      	mov	r0, r9
 80090ce:	f000 fcbd 	bl	8009a4c <_Bfree>
 80090d2:	2d00      	cmp	r5, #0
 80090d4:	f000 80bd 	beq.w	8009252 <_dtoa_r+0x62a>
 80090d8:	b12f      	cbz	r7, 80090e6 <_dtoa_r+0x4be>
 80090da:	42af      	cmp	r7, r5
 80090dc:	d003      	beq.n	80090e6 <_dtoa_r+0x4be>
 80090de:	4639      	mov	r1, r7
 80090e0:	4648      	mov	r0, r9
 80090e2:	f000 fcb3 	bl	8009a4c <_Bfree>
 80090e6:	4629      	mov	r1, r5
 80090e8:	4648      	mov	r0, r9
 80090ea:	f000 fcaf 	bl	8009a4c <_Bfree>
 80090ee:	e0b0      	b.n	8009252 <_dtoa_r+0x62a>
 80090f0:	07e2      	lsls	r2, r4, #31
 80090f2:	d505      	bpl.n	8009100 <_dtoa_r+0x4d8>
 80090f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80090f8:	f7f7 f9ee 	bl	80004d8 <__aeabi_dmul>
 80090fc:	2301      	movs	r3, #1
 80090fe:	3601      	adds	r6, #1
 8009100:	1064      	asrs	r4, r4, #1
 8009102:	3508      	adds	r5, #8
 8009104:	e762      	b.n	8008fcc <_dtoa_r+0x3a4>
 8009106:	2602      	movs	r6, #2
 8009108:	e765      	b.n	8008fd6 <_dtoa_r+0x3ae>
 800910a:	46b8      	mov	r8, r7
 800910c:	9c08      	ldr	r4, [sp, #32]
 800910e:	e784      	b.n	800901a <_dtoa_r+0x3f2>
 8009110:	4b27      	ldr	r3, [pc, #156]	@ (80091b0 <_dtoa_r+0x588>)
 8009112:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009114:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009118:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800911c:	4454      	add	r4, sl
 800911e:	2900      	cmp	r1, #0
 8009120:	d054      	beq.n	80091cc <_dtoa_r+0x5a4>
 8009122:	2000      	movs	r0, #0
 8009124:	4928      	ldr	r1, [pc, #160]	@ (80091c8 <_dtoa_r+0x5a0>)
 8009126:	f7f7 fb01 	bl	800072c <__aeabi_ddiv>
 800912a:	4633      	mov	r3, r6
 800912c:	462a      	mov	r2, r5
 800912e:	f7f7 f81b 	bl	8000168 <__aeabi_dsub>
 8009132:	4656      	mov	r6, sl
 8009134:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009138:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800913c:	f7f7 fc7c 	bl	8000a38 <__aeabi_d2iz>
 8009140:	4605      	mov	r5, r0
 8009142:	f7f7 f95f 	bl	8000404 <__aeabi_i2d>
 8009146:	4602      	mov	r2, r0
 8009148:	460b      	mov	r3, r1
 800914a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800914e:	f7f7 f80b 	bl	8000168 <__aeabi_dsub>
 8009152:	4602      	mov	r2, r0
 8009154:	460b      	mov	r3, r1
 8009156:	3530      	adds	r5, #48	@ 0x30
 8009158:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800915c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009160:	f806 5b01 	strb.w	r5, [r6], #1
 8009164:	f7f7 fc2a 	bl	80009bc <__aeabi_dcmplt>
 8009168:	2800      	cmp	r0, #0
 800916a:	d172      	bne.n	8009252 <_dtoa_r+0x62a>
 800916c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009170:	2000      	movs	r0, #0
 8009172:	4911      	ldr	r1, [pc, #68]	@ (80091b8 <_dtoa_r+0x590>)
 8009174:	f7f6 fff8 	bl	8000168 <__aeabi_dsub>
 8009178:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800917c:	f7f7 fc1e 	bl	80009bc <__aeabi_dcmplt>
 8009180:	2800      	cmp	r0, #0
 8009182:	f040 80b4 	bne.w	80092ee <_dtoa_r+0x6c6>
 8009186:	42a6      	cmp	r6, r4
 8009188:	f43f af70 	beq.w	800906c <_dtoa_r+0x444>
 800918c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009190:	2200      	movs	r2, #0
 8009192:	4b0a      	ldr	r3, [pc, #40]	@ (80091bc <_dtoa_r+0x594>)
 8009194:	f7f7 f9a0 	bl	80004d8 <__aeabi_dmul>
 8009198:	2200      	movs	r2, #0
 800919a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800919e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091a2:	4b06      	ldr	r3, [pc, #24]	@ (80091bc <_dtoa_r+0x594>)
 80091a4:	f7f7 f998 	bl	80004d8 <__aeabi_dmul>
 80091a8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80091ac:	e7c4      	b.n	8009138 <_dtoa_r+0x510>
 80091ae:	bf00      	nop
 80091b0:	0800db40 	.word	0x0800db40
 80091b4:	0800db18 	.word	0x0800db18
 80091b8:	3ff00000 	.word	0x3ff00000
 80091bc:	40240000 	.word	0x40240000
 80091c0:	401c0000 	.word	0x401c0000
 80091c4:	40140000 	.word	0x40140000
 80091c8:	3fe00000 	.word	0x3fe00000
 80091cc:	4631      	mov	r1, r6
 80091ce:	4628      	mov	r0, r5
 80091d0:	f7f7 f982 	bl	80004d8 <__aeabi_dmul>
 80091d4:	4656      	mov	r6, sl
 80091d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80091da:	9413      	str	r4, [sp, #76]	@ 0x4c
 80091dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091e0:	f7f7 fc2a 	bl	8000a38 <__aeabi_d2iz>
 80091e4:	4605      	mov	r5, r0
 80091e6:	f7f7 f90d 	bl	8000404 <__aeabi_i2d>
 80091ea:	4602      	mov	r2, r0
 80091ec:	460b      	mov	r3, r1
 80091ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091f2:	f7f6 ffb9 	bl	8000168 <__aeabi_dsub>
 80091f6:	4602      	mov	r2, r0
 80091f8:	460b      	mov	r3, r1
 80091fa:	3530      	adds	r5, #48	@ 0x30
 80091fc:	f806 5b01 	strb.w	r5, [r6], #1
 8009200:	42a6      	cmp	r6, r4
 8009202:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009206:	f04f 0200 	mov.w	r2, #0
 800920a:	d124      	bne.n	8009256 <_dtoa_r+0x62e>
 800920c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009210:	4bae      	ldr	r3, [pc, #696]	@ (80094cc <_dtoa_r+0x8a4>)
 8009212:	f7f6 ffab 	bl	800016c <__adddf3>
 8009216:	4602      	mov	r2, r0
 8009218:	460b      	mov	r3, r1
 800921a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800921e:	f7f7 fbeb 	bl	80009f8 <__aeabi_dcmpgt>
 8009222:	2800      	cmp	r0, #0
 8009224:	d163      	bne.n	80092ee <_dtoa_r+0x6c6>
 8009226:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800922a:	2000      	movs	r0, #0
 800922c:	49a7      	ldr	r1, [pc, #668]	@ (80094cc <_dtoa_r+0x8a4>)
 800922e:	f7f6 ff9b 	bl	8000168 <__aeabi_dsub>
 8009232:	4602      	mov	r2, r0
 8009234:	460b      	mov	r3, r1
 8009236:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800923a:	f7f7 fbbf 	bl	80009bc <__aeabi_dcmplt>
 800923e:	2800      	cmp	r0, #0
 8009240:	f43f af14 	beq.w	800906c <_dtoa_r+0x444>
 8009244:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009246:	1e73      	subs	r3, r6, #1
 8009248:	9313      	str	r3, [sp, #76]	@ 0x4c
 800924a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800924e:	2b30      	cmp	r3, #48	@ 0x30
 8009250:	d0f8      	beq.n	8009244 <_dtoa_r+0x61c>
 8009252:	4647      	mov	r7, r8
 8009254:	e03b      	b.n	80092ce <_dtoa_r+0x6a6>
 8009256:	4b9e      	ldr	r3, [pc, #632]	@ (80094d0 <_dtoa_r+0x8a8>)
 8009258:	f7f7 f93e 	bl	80004d8 <__aeabi_dmul>
 800925c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009260:	e7bc      	b.n	80091dc <_dtoa_r+0x5b4>
 8009262:	4656      	mov	r6, sl
 8009264:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8009268:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800926c:	4620      	mov	r0, r4
 800926e:	4629      	mov	r1, r5
 8009270:	f7f7 fa5c 	bl	800072c <__aeabi_ddiv>
 8009274:	f7f7 fbe0 	bl	8000a38 <__aeabi_d2iz>
 8009278:	4680      	mov	r8, r0
 800927a:	f7f7 f8c3 	bl	8000404 <__aeabi_i2d>
 800927e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009282:	f7f7 f929 	bl	80004d8 <__aeabi_dmul>
 8009286:	4602      	mov	r2, r0
 8009288:	460b      	mov	r3, r1
 800928a:	4620      	mov	r0, r4
 800928c:	4629      	mov	r1, r5
 800928e:	f7f6 ff6b 	bl	8000168 <__aeabi_dsub>
 8009292:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009296:	9d08      	ldr	r5, [sp, #32]
 8009298:	f806 4b01 	strb.w	r4, [r6], #1
 800929c:	eba6 040a 	sub.w	r4, r6, sl
 80092a0:	42a5      	cmp	r5, r4
 80092a2:	4602      	mov	r2, r0
 80092a4:	460b      	mov	r3, r1
 80092a6:	d133      	bne.n	8009310 <_dtoa_r+0x6e8>
 80092a8:	f7f6 ff60 	bl	800016c <__adddf3>
 80092ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092b0:	4604      	mov	r4, r0
 80092b2:	460d      	mov	r5, r1
 80092b4:	f7f7 fba0 	bl	80009f8 <__aeabi_dcmpgt>
 80092b8:	b9c0      	cbnz	r0, 80092ec <_dtoa_r+0x6c4>
 80092ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092be:	4620      	mov	r0, r4
 80092c0:	4629      	mov	r1, r5
 80092c2:	f7f7 fb71 	bl	80009a8 <__aeabi_dcmpeq>
 80092c6:	b110      	cbz	r0, 80092ce <_dtoa_r+0x6a6>
 80092c8:	f018 0f01 	tst.w	r8, #1
 80092cc:	d10e      	bne.n	80092ec <_dtoa_r+0x6c4>
 80092ce:	4648      	mov	r0, r9
 80092d0:	9903      	ldr	r1, [sp, #12]
 80092d2:	f000 fbbb 	bl	8009a4c <_Bfree>
 80092d6:	2300      	movs	r3, #0
 80092d8:	7033      	strb	r3, [r6, #0]
 80092da:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80092dc:	3701      	adds	r7, #1
 80092de:	601f      	str	r7, [r3, #0]
 80092e0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f000 824b 	beq.w	800977e <_dtoa_r+0xb56>
 80092e8:	601e      	str	r6, [r3, #0]
 80092ea:	e248      	b.n	800977e <_dtoa_r+0xb56>
 80092ec:	46b8      	mov	r8, r7
 80092ee:	4633      	mov	r3, r6
 80092f0:	461e      	mov	r6, r3
 80092f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092f6:	2a39      	cmp	r2, #57	@ 0x39
 80092f8:	d106      	bne.n	8009308 <_dtoa_r+0x6e0>
 80092fa:	459a      	cmp	sl, r3
 80092fc:	d1f8      	bne.n	80092f0 <_dtoa_r+0x6c8>
 80092fe:	2230      	movs	r2, #48	@ 0x30
 8009300:	f108 0801 	add.w	r8, r8, #1
 8009304:	f88a 2000 	strb.w	r2, [sl]
 8009308:	781a      	ldrb	r2, [r3, #0]
 800930a:	3201      	adds	r2, #1
 800930c:	701a      	strb	r2, [r3, #0]
 800930e:	e7a0      	b.n	8009252 <_dtoa_r+0x62a>
 8009310:	2200      	movs	r2, #0
 8009312:	4b6f      	ldr	r3, [pc, #444]	@ (80094d0 <_dtoa_r+0x8a8>)
 8009314:	f7f7 f8e0 	bl	80004d8 <__aeabi_dmul>
 8009318:	2200      	movs	r2, #0
 800931a:	2300      	movs	r3, #0
 800931c:	4604      	mov	r4, r0
 800931e:	460d      	mov	r5, r1
 8009320:	f7f7 fb42 	bl	80009a8 <__aeabi_dcmpeq>
 8009324:	2800      	cmp	r0, #0
 8009326:	d09f      	beq.n	8009268 <_dtoa_r+0x640>
 8009328:	e7d1      	b.n	80092ce <_dtoa_r+0x6a6>
 800932a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800932c:	2a00      	cmp	r2, #0
 800932e:	f000 80ea 	beq.w	8009506 <_dtoa_r+0x8de>
 8009332:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009334:	2a01      	cmp	r2, #1
 8009336:	f300 80cd 	bgt.w	80094d4 <_dtoa_r+0x8ac>
 800933a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800933c:	2a00      	cmp	r2, #0
 800933e:	f000 80c1 	beq.w	80094c4 <_dtoa_r+0x89c>
 8009342:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009346:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009348:	9e04      	ldr	r6, [sp, #16]
 800934a:	9a04      	ldr	r2, [sp, #16]
 800934c:	2101      	movs	r1, #1
 800934e:	441a      	add	r2, r3
 8009350:	9204      	str	r2, [sp, #16]
 8009352:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009354:	4648      	mov	r0, r9
 8009356:	441a      	add	r2, r3
 8009358:	9209      	str	r2, [sp, #36]	@ 0x24
 800935a:	f000 fc75 	bl	8009c48 <__i2b>
 800935e:	4605      	mov	r5, r0
 8009360:	b166      	cbz	r6, 800937c <_dtoa_r+0x754>
 8009362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009364:	2b00      	cmp	r3, #0
 8009366:	dd09      	ble.n	800937c <_dtoa_r+0x754>
 8009368:	42b3      	cmp	r3, r6
 800936a:	bfa8      	it	ge
 800936c:	4633      	movge	r3, r6
 800936e:	9a04      	ldr	r2, [sp, #16]
 8009370:	1af6      	subs	r6, r6, r3
 8009372:	1ad2      	subs	r2, r2, r3
 8009374:	9204      	str	r2, [sp, #16]
 8009376:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009378:	1ad3      	subs	r3, r2, r3
 800937a:	9309      	str	r3, [sp, #36]	@ 0x24
 800937c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800937e:	b30b      	cbz	r3, 80093c4 <_dtoa_r+0x79c>
 8009380:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009382:	2b00      	cmp	r3, #0
 8009384:	f000 80c6 	beq.w	8009514 <_dtoa_r+0x8ec>
 8009388:	2c00      	cmp	r4, #0
 800938a:	f000 80c0 	beq.w	800950e <_dtoa_r+0x8e6>
 800938e:	4629      	mov	r1, r5
 8009390:	4622      	mov	r2, r4
 8009392:	4648      	mov	r0, r9
 8009394:	f000 fd10 	bl	8009db8 <__pow5mult>
 8009398:	9a03      	ldr	r2, [sp, #12]
 800939a:	4601      	mov	r1, r0
 800939c:	4605      	mov	r5, r0
 800939e:	4648      	mov	r0, r9
 80093a0:	f000 fc68 	bl	8009c74 <__multiply>
 80093a4:	9903      	ldr	r1, [sp, #12]
 80093a6:	4680      	mov	r8, r0
 80093a8:	4648      	mov	r0, r9
 80093aa:	f000 fb4f 	bl	8009a4c <_Bfree>
 80093ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093b0:	1b1b      	subs	r3, r3, r4
 80093b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80093b4:	f000 80b1 	beq.w	800951a <_dtoa_r+0x8f2>
 80093b8:	4641      	mov	r1, r8
 80093ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80093bc:	4648      	mov	r0, r9
 80093be:	f000 fcfb 	bl	8009db8 <__pow5mult>
 80093c2:	9003      	str	r0, [sp, #12]
 80093c4:	2101      	movs	r1, #1
 80093c6:	4648      	mov	r0, r9
 80093c8:	f000 fc3e 	bl	8009c48 <__i2b>
 80093cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093ce:	4604      	mov	r4, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f000 81d8 	beq.w	8009786 <_dtoa_r+0xb5e>
 80093d6:	461a      	mov	r2, r3
 80093d8:	4601      	mov	r1, r0
 80093da:	4648      	mov	r0, r9
 80093dc:	f000 fcec 	bl	8009db8 <__pow5mult>
 80093e0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80093e2:	4604      	mov	r4, r0
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	f300 809f 	bgt.w	8009528 <_dtoa_r+0x900>
 80093ea:	9b06      	ldr	r3, [sp, #24]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	f040 8097 	bne.w	8009520 <_dtoa_r+0x8f8>
 80093f2:	9b07      	ldr	r3, [sp, #28]
 80093f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	f040 8093 	bne.w	8009524 <_dtoa_r+0x8fc>
 80093fe:	9b07      	ldr	r3, [sp, #28]
 8009400:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009404:	0d1b      	lsrs	r3, r3, #20
 8009406:	051b      	lsls	r3, r3, #20
 8009408:	b133      	cbz	r3, 8009418 <_dtoa_r+0x7f0>
 800940a:	9b04      	ldr	r3, [sp, #16]
 800940c:	3301      	adds	r3, #1
 800940e:	9304      	str	r3, [sp, #16]
 8009410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009412:	3301      	adds	r3, #1
 8009414:	9309      	str	r3, [sp, #36]	@ 0x24
 8009416:	2301      	movs	r3, #1
 8009418:	930a      	str	r3, [sp, #40]	@ 0x28
 800941a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800941c:	2b00      	cmp	r3, #0
 800941e:	f000 81b8 	beq.w	8009792 <_dtoa_r+0xb6a>
 8009422:	6923      	ldr	r3, [r4, #16]
 8009424:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009428:	6918      	ldr	r0, [r3, #16]
 800942a:	f000 fbc1 	bl	8009bb0 <__hi0bits>
 800942e:	f1c0 0020 	rsb	r0, r0, #32
 8009432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009434:	4418      	add	r0, r3
 8009436:	f010 001f 	ands.w	r0, r0, #31
 800943a:	f000 8082 	beq.w	8009542 <_dtoa_r+0x91a>
 800943e:	f1c0 0320 	rsb	r3, r0, #32
 8009442:	2b04      	cmp	r3, #4
 8009444:	dd73      	ble.n	800952e <_dtoa_r+0x906>
 8009446:	9b04      	ldr	r3, [sp, #16]
 8009448:	f1c0 001c 	rsb	r0, r0, #28
 800944c:	4403      	add	r3, r0
 800944e:	9304      	str	r3, [sp, #16]
 8009450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009452:	4406      	add	r6, r0
 8009454:	4403      	add	r3, r0
 8009456:	9309      	str	r3, [sp, #36]	@ 0x24
 8009458:	9b04      	ldr	r3, [sp, #16]
 800945a:	2b00      	cmp	r3, #0
 800945c:	dd05      	ble.n	800946a <_dtoa_r+0x842>
 800945e:	461a      	mov	r2, r3
 8009460:	4648      	mov	r0, r9
 8009462:	9903      	ldr	r1, [sp, #12]
 8009464:	f000 fd02 	bl	8009e6c <__lshift>
 8009468:	9003      	str	r0, [sp, #12]
 800946a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800946c:	2b00      	cmp	r3, #0
 800946e:	dd05      	ble.n	800947c <_dtoa_r+0x854>
 8009470:	4621      	mov	r1, r4
 8009472:	461a      	mov	r2, r3
 8009474:	4648      	mov	r0, r9
 8009476:	f000 fcf9 	bl	8009e6c <__lshift>
 800947a:	4604      	mov	r4, r0
 800947c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800947e:	2b00      	cmp	r3, #0
 8009480:	d061      	beq.n	8009546 <_dtoa_r+0x91e>
 8009482:	4621      	mov	r1, r4
 8009484:	9803      	ldr	r0, [sp, #12]
 8009486:	f000 fd5d 	bl	8009f44 <__mcmp>
 800948a:	2800      	cmp	r0, #0
 800948c:	da5b      	bge.n	8009546 <_dtoa_r+0x91e>
 800948e:	2300      	movs	r3, #0
 8009490:	220a      	movs	r2, #10
 8009492:	4648      	mov	r0, r9
 8009494:	9903      	ldr	r1, [sp, #12]
 8009496:	f000 fafb 	bl	8009a90 <__multadd>
 800949a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800949c:	f107 38ff 	add.w	r8, r7, #4294967295
 80094a0:	9003      	str	r0, [sp, #12]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	f000 8177 	beq.w	8009796 <_dtoa_r+0xb6e>
 80094a8:	4629      	mov	r1, r5
 80094aa:	2300      	movs	r3, #0
 80094ac:	220a      	movs	r2, #10
 80094ae:	4648      	mov	r0, r9
 80094b0:	f000 faee 	bl	8009a90 <__multadd>
 80094b4:	f1bb 0f00 	cmp.w	fp, #0
 80094b8:	4605      	mov	r5, r0
 80094ba:	dc6f      	bgt.n	800959c <_dtoa_r+0x974>
 80094bc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80094be:	2b02      	cmp	r3, #2
 80094c0:	dc49      	bgt.n	8009556 <_dtoa_r+0x92e>
 80094c2:	e06b      	b.n	800959c <_dtoa_r+0x974>
 80094c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80094c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80094ca:	e73c      	b.n	8009346 <_dtoa_r+0x71e>
 80094cc:	3fe00000 	.word	0x3fe00000
 80094d0:	40240000 	.word	0x40240000
 80094d4:	9b08      	ldr	r3, [sp, #32]
 80094d6:	1e5c      	subs	r4, r3, #1
 80094d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094da:	42a3      	cmp	r3, r4
 80094dc:	db09      	blt.n	80094f2 <_dtoa_r+0x8ca>
 80094de:	1b1c      	subs	r4, r3, r4
 80094e0:	9b08      	ldr	r3, [sp, #32]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	f6bf af30 	bge.w	8009348 <_dtoa_r+0x720>
 80094e8:	9b04      	ldr	r3, [sp, #16]
 80094ea:	9a08      	ldr	r2, [sp, #32]
 80094ec:	1a9e      	subs	r6, r3, r2
 80094ee:	2300      	movs	r3, #0
 80094f0:	e72b      	b.n	800934a <_dtoa_r+0x722>
 80094f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094f6:	1ae3      	subs	r3, r4, r3
 80094f8:	441a      	add	r2, r3
 80094fa:	940a      	str	r4, [sp, #40]	@ 0x28
 80094fc:	9e04      	ldr	r6, [sp, #16]
 80094fe:	2400      	movs	r4, #0
 8009500:	9b08      	ldr	r3, [sp, #32]
 8009502:	920e      	str	r2, [sp, #56]	@ 0x38
 8009504:	e721      	b.n	800934a <_dtoa_r+0x722>
 8009506:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009508:	9e04      	ldr	r6, [sp, #16]
 800950a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800950c:	e728      	b.n	8009360 <_dtoa_r+0x738>
 800950e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009512:	e751      	b.n	80093b8 <_dtoa_r+0x790>
 8009514:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009516:	9903      	ldr	r1, [sp, #12]
 8009518:	e750      	b.n	80093bc <_dtoa_r+0x794>
 800951a:	f8cd 800c 	str.w	r8, [sp, #12]
 800951e:	e751      	b.n	80093c4 <_dtoa_r+0x79c>
 8009520:	2300      	movs	r3, #0
 8009522:	e779      	b.n	8009418 <_dtoa_r+0x7f0>
 8009524:	9b06      	ldr	r3, [sp, #24]
 8009526:	e777      	b.n	8009418 <_dtoa_r+0x7f0>
 8009528:	2300      	movs	r3, #0
 800952a:	930a      	str	r3, [sp, #40]	@ 0x28
 800952c:	e779      	b.n	8009422 <_dtoa_r+0x7fa>
 800952e:	d093      	beq.n	8009458 <_dtoa_r+0x830>
 8009530:	9a04      	ldr	r2, [sp, #16]
 8009532:	331c      	adds	r3, #28
 8009534:	441a      	add	r2, r3
 8009536:	9204      	str	r2, [sp, #16]
 8009538:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800953a:	441e      	add	r6, r3
 800953c:	441a      	add	r2, r3
 800953e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009540:	e78a      	b.n	8009458 <_dtoa_r+0x830>
 8009542:	4603      	mov	r3, r0
 8009544:	e7f4      	b.n	8009530 <_dtoa_r+0x908>
 8009546:	9b08      	ldr	r3, [sp, #32]
 8009548:	46b8      	mov	r8, r7
 800954a:	2b00      	cmp	r3, #0
 800954c:	dc20      	bgt.n	8009590 <_dtoa_r+0x968>
 800954e:	469b      	mov	fp, r3
 8009550:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009552:	2b02      	cmp	r3, #2
 8009554:	dd1e      	ble.n	8009594 <_dtoa_r+0x96c>
 8009556:	f1bb 0f00 	cmp.w	fp, #0
 800955a:	f47f adb1 	bne.w	80090c0 <_dtoa_r+0x498>
 800955e:	4621      	mov	r1, r4
 8009560:	465b      	mov	r3, fp
 8009562:	2205      	movs	r2, #5
 8009564:	4648      	mov	r0, r9
 8009566:	f000 fa93 	bl	8009a90 <__multadd>
 800956a:	4601      	mov	r1, r0
 800956c:	4604      	mov	r4, r0
 800956e:	9803      	ldr	r0, [sp, #12]
 8009570:	f000 fce8 	bl	8009f44 <__mcmp>
 8009574:	2800      	cmp	r0, #0
 8009576:	f77f ada3 	ble.w	80090c0 <_dtoa_r+0x498>
 800957a:	4656      	mov	r6, sl
 800957c:	2331      	movs	r3, #49	@ 0x31
 800957e:	f108 0801 	add.w	r8, r8, #1
 8009582:	f806 3b01 	strb.w	r3, [r6], #1
 8009586:	e59f      	b.n	80090c8 <_dtoa_r+0x4a0>
 8009588:	46b8      	mov	r8, r7
 800958a:	9c08      	ldr	r4, [sp, #32]
 800958c:	4625      	mov	r5, r4
 800958e:	e7f4      	b.n	800957a <_dtoa_r+0x952>
 8009590:	f8dd b020 	ldr.w	fp, [sp, #32]
 8009594:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009596:	2b00      	cmp	r3, #0
 8009598:	f000 8101 	beq.w	800979e <_dtoa_r+0xb76>
 800959c:	2e00      	cmp	r6, #0
 800959e:	dd05      	ble.n	80095ac <_dtoa_r+0x984>
 80095a0:	4629      	mov	r1, r5
 80095a2:	4632      	mov	r2, r6
 80095a4:	4648      	mov	r0, r9
 80095a6:	f000 fc61 	bl	8009e6c <__lshift>
 80095aa:	4605      	mov	r5, r0
 80095ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d05c      	beq.n	800966c <_dtoa_r+0xa44>
 80095b2:	4648      	mov	r0, r9
 80095b4:	6869      	ldr	r1, [r5, #4]
 80095b6:	f000 fa09 	bl	80099cc <_Balloc>
 80095ba:	4606      	mov	r6, r0
 80095bc:	b928      	cbnz	r0, 80095ca <_dtoa_r+0x9a2>
 80095be:	4602      	mov	r2, r0
 80095c0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80095c4:	4b80      	ldr	r3, [pc, #512]	@ (80097c8 <_dtoa_r+0xba0>)
 80095c6:	f7ff bb43 	b.w	8008c50 <_dtoa_r+0x28>
 80095ca:	692a      	ldr	r2, [r5, #16]
 80095cc:	f105 010c 	add.w	r1, r5, #12
 80095d0:	3202      	adds	r2, #2
 80095d2:	0092      	lsls	r2, r2, #2
 80095d4:	300c      	adds	r0, #12
 80095d6:	f001 ff51 	bl	800b47c <memcpy>
 80095da:	2201      	movs	r2, #1
 80095dc:	4631      	mov	r1, r6
 80095de:	4648      	mov	r0, r9
 80095e0:	f000 fc44 	bl	8009e6c <__lshift>
 80095e4:	462f      	mov	r7, r5
 80095e6:	4605      	mov	r5, r0
 80095e8:	f10a 0301 	add.w	r3, sl, #1
 80095ec:	9304      	str	r3, [sp, #16]
 80095ee:	eb0a 030b 	add.w	r3, sl, fp
 80095f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80095f4:	9b06      	ldr	r3, [sp, #24]
 80095f6:	f003 0301 	and.w	r3, r3, #1
 80095fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80095fc:	9b04      	ldr	r3, [sp, #16]
 80095fe:	4621      	mov	r1, r4
 8009600:	9803      	ldr	r0, [sp, #12]
 8009602:	f103 3bff 	add.w	fp, r3, #4294967295
 8009606:	f7ff fa85 	bl	8008b14 <quorem>
 800960a:	4603      	mov	r3, r0
 800960c:	4639      	mov	r1, r7
 800960e:	3330      	adds	r3, #48	@ 0x30
 8009610:	9006      	str	r0, [sp, #24]
 8009612:	9803      	ldr	r0, [sp, #12]
 8009614:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009616:	f000 fc95 	bl	8009f44 <__mcmp>
 800961a:	462a      	mov	r2, r5
 800961c:	9008      	str	r0, [sp, #32]
 800961e:	4621      	mov	r1, r4
 8009620:	4648      	mov	r0, r9
 8009622:	f000 fcab 	bl	8009f7c <__mdiff>
 8009626:	68c2      	ldr	r2, [r0, #12]
 8009628:	4606      	mov	r6, r0
 800962a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800962c:	bb02      	cbnz	r2, 8009670 <_dtoa_r+0xa48>
 800962e:	4601      	mov	r1, r0
 8009630:	9803      	ldr	r0, [sp, #12]
 8009632:	f000 fc87 	bl	8009f44 <__mcmp>
 8009636:	4602      	mov	r2, r0
 8009638:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800963a:	4631      	mov	r1, r6
 800963c:	4648      	mov	r0, r9
 800963e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8009642:	f000 fa03 	bl	8009a4c <_Bfree>
 8009646:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009648:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800964a:	9e04      	ldr	r6, [sp, #16]
 800964c:	ea42 0103 	orr.w	r1, r2, r3
 8009650:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009652:	4319      	orrs	r1, r3
 8009654:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009656:	d10d      	bne.n	8009674 <_dtoa_r+0xa4c>
 8009658:	2b39      	cmp	r3, #57	@ 0x39
 800965a:	d027      	beq.n	80096ac <_dtoa_r+0xa84>
 800965c:	9a08      	ldr	r2, [sp, #32]
 800965e:	2a00      	cmp	r2, #0
 8009660:	dd01      	ble.n	8009666 <_dtoa_r+0xa3e>
 8009662:	9b06      	ldr	r3, [sp, #24]
 8009664:	3331      	adds	r3, #49	@ 0x31
 8009666:	f88b 3000 	strb.w	r3, [fp]
 800966a:	e52e      	b.n	80090ca <_dtoa_r+0x4a2>
 800966c:	4628      	mov	r0, r5
 800966e:	e7b9      	b.n	80095e4 <_dtoa_r+0x9bc>
 8009670:	2201      	movs	r2, #1
 8009672:	e7e2      	b.n	800963a <_dtoa_r+0xa12>
 8009674:	9908      	ldr	r1, [sp, #32]
 8009676:	2900      	cmp	r1, #0
 8009678:	db04      	blt.n	8009684 <_dtoa_r+0xa5c>
 800967a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800967c:	4301      	orrs	r1, r0
 800967e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009680:	4301      	orrs	r1, r0
 8009682:	d120      	bne.n	80096c6 <_dtoa_r+0xa9e>
 8009684:	2a00      	cmp	r2, #0
 8009686:	ddee      	ble.n	8009666 <_dtoa_r+0xa3e>
 8009688:	2201      	movs	r2, #1
 800968a:	9903      	ldr	r1, [sp, #12]
 800968c:	4648      	mov	r0, r9
 800968e:	9304      	str	r3, [sp, #16]
 8009690:	f000 fbec 	bl	8009e6c <__lshift>
 8009694:	4621      	mov	r1, r4
 8009696:	9003      	str	r0, [sp, #12]
 8009698:	f000 fc54 	bl	8009f44 <__mcmp>
 800969c:	2800      	cmp	r0, #0
 800969e:	9b04      	ldr	r3, [sp, #16]
 80096a0:	dc02      	bgt.n	80096a8 <_dtoa_r+0xa80>
 80096a2:	d1e0      	bne.n	8009666 <_dtoa_r+0xa3e>
 80096a4:	07da      	lsls	r2, r3, #31
 80096a6:	d5de      	bpl.n	8009666 <_dtoa_r+0xa3e>
 80096a8:	2b39      	cmp	r3, #57	@ 0x39
 80096aa:	d1da      	bne.n	8009662 <_dtoa_r+0xa3a>
 80096ac:	2339      	movs	r3, #57	@ 0x39
 80096ae:	f88b 3000 	strb.w	r3, [fp]
 80096b2:	4633      	mov	r3, r6
 80096b4:	461e      	mov	r6, r3
 80096b6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80096ba:	3b01      	subs	r3, #1
 80096bc:	2a39      	cmp	r2, #57	@ 0x39
 80096be:	d04e      	beq.n	800975e <_dtoa_r+0xb36>
 80096c0:	3201      	adds	r2, #1
 80096c2:	701a      	strb	r2, [r3, #0]
 80096c4:	e501      	b.n	80090ca <_dtoa_r+0x4a2>
 80096c6:	2a00      	cmp	r2, #0
 80096c8:	dd03      	ble.n	80096d2 <_dtoa_r+0xaaa>
 80096ca:	2b39      	cmp	r3, #57	@ 0x39
 80096cc:	d0ee      	beq.n	80096ac <_dtoa_r+0xa84>
 80096ce:	3301      	adds	r3, #1
 80096d0:	e7c9      	b.n	8009666 <_dtoa_r+0xa3e>
 80096d2:	9a04      	ldr	r2, [sp, #16]
 80096d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80096d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80096da:	428a      	cmp	r2, r1
 80096dc:	d028      	beq.n	8009730 <_dtoa_r+0xb08>
 80096de:	2300      	movs	r3, #0
 80096e0:	220a      	movs	r2, #10
 80096e2:	9903      	ldr	r1, [sp, #12]
 80096e4:	4648      	mov	r0, r9
 80096e6:	f000 f9d3 	bl	8009a90 <__multadd>
 80096ea:	42af      	cmp	r7, r5
 80096ec:	9003      	str	r0, [sp, #12]
 80096ee:	f04f 0300 	mov.w	r3, #0
 80096f2:	f04f 020a 	mov.w	r2, #10
 80096f6:	4639      	mov	r1, r7
 80096f8:	4648      	mov	r0, r9
 80096fa:	d107      	bne.n	800970c <_dtoa_r+0xae4>
 80096fc:	f000 f9c8 	bl	8009a90 <__multadd>
 8009700:	4607      	mov	r7, r0
 8009702:	4605      	mov	r5, r0
 8009704:	9b04      	ldr	r3, [sp, #16]
 8009706:	3301      	adds	r3, #1
 8009708:	9304      	str	r3, [sp, #16]
 800970a:	e777      	b.n	80095fc <_dtoa_r+0x9d4>
 800970c:	f000 f9c0 	bl	8009a90 <__multadd>
 8009710:	4629      	mov	r1, r5
 8009712:	4607      	mov	r7, r0
 8009714:	2300      	movs	r3, #0
 8009716:	220a      	movs	r2, #10
 8009718:	4648      	mov	r0, r9
 800971a:	f000 f9b9 	bl	8009a90 <__multadd>
 800971e:	4605      	mov	r5, r0
 8009720:	e7f0      	b.n	8009704 <_dtoa_r+0xadc>
 8009722:	f1bb 0f00 	cmp.w	fp, #0
 8009726:	bfcc      	ite	gt
 8009728:	465e      	movgt	r6, fp
 800972a:	2601      	movle	r6, #1
 800972c:	2700      	movs	r7, #0
 800972e:	4456      	add	r6, sl
 8009730:	2201      	movs	r2, #1
 8009732:	9903      	ldr	r1, [sp, #12]
 8009734:	4648      	mov	r0, r9
 8009736:	9304      	str	r3, [sp, #16]
 8009738:	f000 fb98 	bl	8009e6c <__lshift>
 800973c:	4621      	mov	r1, r4
 800973e:	9003      	str	r0, [sp, #12]
 8009740:	f000 fc00 	bl	8009f44 <__mcmp>
 8009744:	2800      	cmp	r0, #0
 8009746:	dcb4      	bgt.n	80096b2 <_dtoa_r+0xa8a>
 8009748:	d102      	bne.n	8009750 <_dtoa_r+0xb28>
 800974a:	9b04      	ldr	r3, [sp, #16]
 800974c:	07db      	lsls	r3, r3, #31
 800974e:	d4b0      	bmi.n	80096b2 <_dtoa_r+0xa8a>
 8009750:	4633      	mov	r3, r6
 8009752:	461e      	mov	r6, r3
 8009754:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009758:	2a30      	cmp	r2, #48	@ 0x30
 800975a:	d0fa      	beq.n	8009752 <_dtoa_r+0xb2a>
 800975c:	e4b5      	b.n	80090ca <_dtoa_r+0x4a2>
 800975e:	459a      	cmp	sl, r3
 8009760:	d1a8      	bne.n	80096b4 <_dtoa_r+0xa8c>
 8009762:	2331      	movs	r3, #49	@ 0x31
 8009764:	f108 0801 	add.w	r8, r8, #1
 8009768:	f88a 3000 	strb.w	r3, [sl]
 800976c:	e4ad      	b.n	80090ca <_dtoa_r+0x4a2>
 800976e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009770:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80097cc <_dtoa_r+0xba4>
 8009774:	b11b      	cbz	r3, 800977e <_dtoa_r+0xb56>
 8009776:	f10a 0308 	add.w	r3, sl, #8
 800977a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800977c:	6013      	str	r3, [r2, #0]
 800977e:	4650      	mov	r0, sl
 8009780:	b017      	add	sp, #92	@ 0x5c
 8009782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009786:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009788:	2b01      	cmp	r3, #1
 800978a:	f77f ae2e 	ble.w	80093ea <_dtoa_r+0x7c2>
 800978e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009790:	930a      	str	r3, [sp, #40]	@ 0x28
 8009792:	2001      	movs	r0, #1
 8009794:	e64d      	b.n	8009432 <_dtoa_r+0x80a>
 8009796:	f1bb 0f00 	cmp.w	fp, #0
 800979a:	f77f aed9 	ble.w	8009550 <_dtoa_r+0x928>
 800979e:	4656      	mov	r6, sl
 80097a0:	4621      	mov	r1, r4
 80097a2:	9803      	ldr	r0, [sp, #12]
 80097a4:	f7ff f9b6 	bl	8008b14 <quorem>
 80097a8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80097ac:	f806 3b01 	strb.w	r3, [r6], #1
 80097b0:	eba6 020a 	sub.w	r2, r6, sl
 80097b4:	4593      	cmp	fp, r2
 80097b6:	ddb4      	ble.n	8009722 <_dtoa_r+0xafa>
 80097b8:	2300      	movs	r3, #0
 80097ba:	220a      	movs	r2, #10
 80097bc:	4648      	mov	r0, r9
 80097be:	9903      	ldr	r1, [sp, #12]
 80097c0:	f000 f966 	bl	8009a90 <__multadd>
 80097c4:	9003      	str	r0, [sp, #12]
 80097c6:	e7eb      	b.n	80097a0 <_dtoa_r+0xb78>
 80097c8:	0800d9eb 	.word	0x0800d9eb
 80097cc:	0800d96f 	.word	0x0800d96f

080097d0 <_free_r>:
 80097d0:	b538      	push	{r3, r4, r5, lr}
 80097d2:	4605      	mov	r5, r0
 80097d4:	2900      	cmp	r1, #0
 80097d6:	d040      	beq.n	800985a <_free_r+0x8a>
 80097d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097dc:	1f0c      	subs	r4, r1, #4
 80097de:	2b00      	cmp	r3, #0
 80097e0:	bfb8      	it	lt
 80097e2:	18e4      	addlt	r4, r4, r3
 80097e4:	f000 f8e6 	bl	80099b4 <__malloc_lock>
 80097e8:	4a1c      	ldr	r2, [pc, #112]	@ (800985c <_free_r+0x8c>)
 80097ea:	6813      	ldr	r3, [r2, #0]
 80097ec:	b933      	cbnz	r3, 80097fc <_free_r+0x2c>
 80097ee:	6063      	str	r3, [r4, #4]
 80097f0:	6014      	str	r4, [r2, #0]
 80097f2:	4628      	mov	r0, r5
 80097f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097f8:	f000 b8e2 	b.w	80099c0 <__malloc_unlock>
 80097fc:	42a3      	cmp	r3, r4
 80097fe:	d908      	bls.n	8009812 <_free_r+0x42>
 8009800:	6820      	ldr	r0, [r4, #0]
 8009802:	1821      	adds	r1, r4, r0
 8009804:	428b      	cmp	r3, r1
 8009806:	bf01      	itttt	eq
 8009808:	6819      	ldreq	r1, [r3, #0]
 800980a:	685b      	ldreq	r3, [r3, #4]
 800980c:	1809      	addeq	r1, r1, r0
 800980e:	6021      	streq	r1, [r4, #0]
 8009810:	e7ed      	b.n	80097ee <_free_r+0x1e>
 8009812:	461a      	mov	r2, r3
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	b10b      	cbz	r3, 800981c <_free_r+0x4c>
 8009818:	42a3      	cmp	r3, r4
 800981a:	d9fa      	bls.n	8009812 <_free_r+0x42>
 800981c:	6811      	ldr	r1, [r2, #0]
 800981e:	1850      	adds	r0, r2, r1
 8009820:	42a0      	cmp	r0, r4
 8009822:	d10b      	bne.n	800983c <_free_r+0x6c>
 8009824:	6820      	ldr	r0, [r4, #0]
 8009826:	4401      	add	r1, r0
 8009828:	1850      	adds	r0, r2, r1
 800982a:	4283      	cmp	r3, r0
 800982c:	6011      	str	r1, [r2, #0]
 800982e:	d1e0      	bne.n	80097f2 <_free_r+0x22>
 8009830:	6818      	ldr	r0, [r3, #0]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	4408      	add	r0, r1
 8009836:	6010      	str	r0, [r2, #0]
 8009838:	6053      	str	r3, [r2, #4]
 800983a:	e7da      	b.n	80097f2 <_free_r+0x22>
 800983c:	d902      	bls.n	8009844 <_free_r+0x74>
 800983e:	230c      	movs	r3, #12
 8009840:	602b      	str	r3, [r5, #0]
 8009842:	e7d6      	b.n	80097f2 <_free_r+0x22>
 8009844:	6820      	ldr	r0, [r4, #0]
 8009846:	1821      	adds	r1, r4, r0
 8009848:	428b      	cmp	r3, r1
 800984a:	bf01      	itttt	eq
 800984c:	6819      	ldreq	r1, [r3, #0]
 800984e:	685b      	ldreq	r3, [r3, #4]
 8009850:	1809      	addeq	r1, r1, r0
 8009852:	6021      	streq	r1, [r4, #0]
 8009854:	6063      	str	r3, [r4, #4]
 8009856:	6054      	str	r4, [r2, #4]
 8009858:	e7cb      	b.n	80097f2 <_free_r+0x22>
 800985a:	bd38      	pop	{r3, r4, r5, pc}
 800985c:	20000430 	.word	0x20000430

08009860 <malloc>:
 8009860:	4b02      	ldr	r3, [pc, #8]	@ (800986c <malloc+0xc>)
 8009862:	4601      	mov	r1, r0
 8009864:	6818      	ldr	r0, [r3, #0]
 8009866:	f000 b825 	b.w	80098b4 <_malloc_r>
 800986a:	bf00      	nop
 800986c:	20000050 	.word	0x20000050

08009870 <sbrk_aligned>:
 8009870:	b570      	push	{r4, r5, r6, lr}
 8009872:	4e0f      	ldr	r6, [pc, #60]	@ (80098b0 <sbrk_aligned+0x40>)
 8009874:	460c      	mov	r4, r1
 8009876:	6831      	ldr	r1, [r6, #0]
 8009878:	4605      	mov	r5, r0
 800987a:	b911      	cbnz	r1, 8009882 <sbrk_aligned+0x12>
 800987c:	f001 fdee 	bl	800b45c <_sbrk_r>
 8009880:	6030      	str	r0, [r6, #0]
 8009882:	4621      	mov	r1, r4
 8009884:	4628      	mov	r0, r5
 8009886:	f001 fde9 	bl	800b45c <_sbrk_r>
 800988a:	1c43      	adds	r3, r0, #1
 800988c:	d103      	bne.n	8009896 <sbrk_aligned+0x26>
 800988e:	f04f 34ff 	mov.w	r4, #4294967295
 8009892:	4620      	mov	r0, r4
 8009894:	bd70      	pop	{r4, r5, r6, pc}
 8009896:	1cc4      	adds	r4, r0, #3
 8009898:	f024 0403 	bic.w	r4, r4, #3
 800989c:	42a0      	cmp	r0, r4
 800989e:	d0f8      	beq.n	8009892 <sbrk_aligned+0x22>
 80098a0:	1a21      	subs	r1, r4, r0
 80098a2:	4628      	mov	r0, r5
 80098a4:	f001 fdda 	bl	800b45c <_sbrk_r>
 80098a8:	3001      	adds	r0, #1
 80098aa:	d1f2      	bne.n	8009892 <sbrk_aligned+0x22>
 80098ac:	e7ef      	b.n	800988e <sbrk_aligned+0x1e>
 80098ae:	bf00      	nop
 80098b0:	2000042c 	.word	0x2000042c

080098b4 <_malloc_r>:
 80098b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098b8:	1ccd      	adds	r5, r1, #3
 80098ba:	f025 0503 	bic.w	r5, r5, #3
 80098be:	3508      	adds	r5, #8
 80098c0:	2d0c      	cmp	r5, #12
 80098c2:	bf38      	it	cc
 80098c4:	250c      	movcc	r5, #12
 80098c6:	2d00      	cmp	r5, #0
 80098c8:	4606      	mov	r6, r0
 80098ca:	db01      	blt.n	80098d0 <_malloc_r+0x1c>
 80098cc:	42a9      	cmp	r1, r5
 80098ce:	d904      	bls.n	80098da <_malloc_r+0x26>
 80098d0:	230c      	movs	r3, #12
 80098d2:	6033      	str	r3, [r6, #0]
 80098d4:	2000      	movs	r0, #0
 80098d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80099b0 <_malloc_r+0xfc>
 80098de:	f000 f869 	bl	80099b4 <__malloc_lock>
 80098e2:	f8d8 3000 	ldr.w	r3, [r8]
 80098e6:	461c      	mov	r4, r3
 80098e8:	bb44      	cbnz	r4, 800993c <_malloc_r+0x88>
 80098ea:	4629      	mov	r1, r5
 80098ec:	4630      	mov	r0, r6
 80098ee:	f7ff ffbf 	bl	8009870 <sbrk_aligned>
 80098f2:	1c43      	adds	r3, r0, #1
 80098f4:	4604      	mov	r4, r0
 80098f6:	d158      	bne.n	80099aa <_malloc_r+0xf6>
 80098f8:	f8d8 4000 	ldr.w	r4, [r8]
 80098fc:	4627      	mov	r7, r4
 80098fe:	2f00      	cmp	r7, #0
 8009900:	d143      	bne.n	800998a <_malloc_r+0xd6>
 8009902:	2c00      	cmp	r4, #0
 8009904:	d04b      	beq.n	800999e <_malloc_r+0xea>
 8009906:	6823      	ldr	r3, [r4, #0]
 8009908:	4639      	mov	r1, r7
 800990a:	4630      	mov	r0, r6
 800990c:	eb04 0903 	add.w	r9, r4, r3
 8009910:	f001 fda4 	bl	800b45c <_sbrk_r>
 8009914:	4581      	cmp	r9, r0
 8009916:	d142      	bne.n	800999e <_malloc_r+0xea>
 8009918:	6821      	ldr	r1, [r4, #0]
 800991a:	4630      	mov	r0, r6
 800991c:	1a6d      	subs	r5, r5, r1
 800991e:	4629      	mov	r1, r5
 8009920:	f7ff ffa6 	bl	8009870 <sbrk_aligned>
 8009924:	3001      	adds	r0, #1
 8009926:	d03a      	beq.n	800999e <_malloc_r+0xea>
 8009928:	6823      	ldr	r3, [r4, #0]
 800992a:	442b      	add	r3, r5
 800992c:	6023      	str	r3, [r4, #0]
 800992e:	f8d8 3000 	ldr.w	r3, [r8]
 8009932:	685a      	ldr	r2, [r3, #4]
 8009934:	bb62      	cbnz	r2, 8009990 <_malloc_r+0xdc>
 8009936:	f8c8 7000 	str.w	r7, [r8]
 800993a:	e00f      	b.n	800995c <_malloc_r+0xa8>
 800993c:	6822      	ldr	r2, [r4, #0]
 800993e:	1b52      	subs	r2, r2, r5
 8009940:	d420      	bmi.n	8009984 <_malloc_r+0xd0>
 8009942:	2a0b      	cmp	r2, #11
 8009944:	d917      	bls.n	8009976 <_malloc_r+0xc2>
 8009946:	1961      	adds	r1, r4, r5
 8009948:	42a3      	cmp	r3, r4
 800994a:	6025      	str	r5, [r4, #0]
 800994c:	bf18      	it	ne
 800994e:	6059      	strne	r1, [r3, #4]
 8009950:	6863      	ldr	r3, [r4, #4]
 8009952:	bf08      	it	eq
 8009954:	f8c8 1000 	streq.w	r1, [r8]
 8009958:	5162      	str	r2, [r4, r5]
 800995a:	604b      	str	r3, [r1, #4]
 800995c:	4630      	mov	r0, r6
 800995e:	f000 f82f 	bl	80099c0 <__malloc_unlock>
 8009962:	f104 000b 	add.w	r0, r4, #11
 8009966:	1d23      	adds	r3, r4, #4
 8009968:	f020 0007 	bic.w	r0, r0, #7
 800996c:	1ac2      	subs	r2, r0, r3
 800996e:	bf1c      	itt	ne
 8009970:	1a1b      	subne	r3, r3, r0
 8009972:	50a3      	strne	r3, [r4, r2]
 8009974:	e7af      	b.n	80098d6 <_malloc_r+0x22>
 8009976:	6862      	ldr	r2, [r4, #4]
 8009978:	42a3      	cmp	r3, r4
 800997a:	bf0c      	ite	eq
 800997c:	f8c8 2000 	streq.w	r2, [r8]
 8009980:	605a      	strne	r2, [r3, #4]
 8009982:	e7eb      	b.n	800995c <_malloc_r+0xa8>
 8009984:	4623      	mov	r3, r4
 8009986:	6864      	ldr	r4, [r4, #4]
 8009988:	e7ae      	b.n	80098e8 <_malloc_r+0x34>
 800998a:	463c      	mov	r4, r7
 800998c:	687f      	ldr	r7, [r7, #4]
 800998e:	e7b6      	b.n	80098fe <_malloc_r+0x4a>
 8009990:	461a      	mov	r2, r3
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	42a3      	cmp	r3, r4
 8009996:	d1fb      	bne.n	8009990 <_malloc_r+0xdc>
 8009998:	2300      	movs	r3, #0
 800999a:	6053      	str	r3, [r2, #4]
 800999c:	e7de      	b.n	800995c <_malloc_r+0xa8>
 800999e:	230c      	movs	r3, #12
 80099a0:	4630      	mov	r0, r6
 80099a2:	6033      	str	r3, [r6, #0]
 80099a4:	f000 f80c 	bl	80099c0 <__malloc_unlock>
 80099a8:	e794      	b.n	80098d4 <_malloc_r+0x20>
 80099aa:	6005      	str	r5, [r0, #0]
 80099ac:	e7d6      	b.n	800995c <_malloc_r+0xa8>
 80099ae:	bf00      	nop
 80099b0:	20000430 	.word	0x20000430

080099b4 <__malloc_lock>:
 80099b4:	4801      	ldr	r0, [pc, #4]	@ (80099bc <__malloc_lock+0x8>)
 80099b6:	f7ff b898 	b.w	8008aea <__retarget_lock_acquire_recursive>
 80099ba:	bf00      	nop
 80099bc:	20000428 	.word	0x20000428

080099c0 <__malloc_unlock>:
 80099c0:	4801      	ldr	r0, [pc, #4]	@ (80099c8 <__malloc_unlock+0x8>)
 80099c2:	f7ff b893 	b.w	8008aec <__retarget_lock_release_recursive>
 80099c6:	bf00      	nop
 80099c8:	20000428 	.word	0x20000428

080099cc <_Balloc>:
 80099cc:	b570      	push	{r4, r5, r6, lr}
 80099ce:	69c6      	ldr	r6, [r0, #28]
 80099d0:	4604      	mov	r4, r0
 80099d2:	460d      	mov	r5, r1
 80099d4:	b976      	cbnz	r6, 80099f4 <_Balloc+0x28>
 80099d6:	2010      	movs	r0, #16
 80099d8:	f7ff ff42 	bl	8009860 <malloc>
 80099dc:	4602      	mov	r2, r0
 80099de:	61e0      	str	r0, [r4, #28]
 80099e0:	b920      	cbnz	r0, 80099ec <_Balloc+0x20>
 80099e2:	216b      	movs	r1, #107	@ 0x6b
 80099e4:	4b17      	ldr	r3, [pc, #92]	@ (8009a44 <_Balloc+0x78>)
 80099e6:	4818      	ldr	r0, [pc, #96]	@ (8009a48 <_Balloc+0x7c>)
 80099e8:	f001 fd5c 	bl	800b4a4 <__assert_func>
 80099ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099f0:	6006      	str	r6, [r0, #0]
 80099f2:	60c6      	str	r6, [r0, #12]
 80099f4:	69e6      	ldr	r6, [r4, #28]
 80099f6:	68f3      	ldr	r3, [r6, #12]
 80099f8:	b183      	cbz	r3, 8009a1c <_Balloc+0x50>
 80099fa:	69e3      	ldr	r3, [r4, #28]
 80099fc:	68db      	ldr	r3, [r3, #12]
 80099fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a02:	b9b8      	cbnz	r0, 8009a34 <_Balloc+0x68>
 8009a04:	2101      	movs	r1, #1
 8009a06:	fa01 f605 	lsl.w	r6, r1, r5
 8009a0a:	1d72      	adds	r2, r6, #5
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	0092      	lsls	r2, r2, #2
 8009a10:	f001 fd66 	bl	800b4e0 <_calloc_r>
 8009a14:	b160      	cbz	r0, 8009a30 <_Balloc+0x64>
 8009a16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a1a:	e00e      	b.n	8009a3a <_Balloc+0x6e>
 8009a1c:	2221      	movs	r2, #33	@ 0x21
 8009a1e:	2104      	movs	r1, #4
 8009a20:	4620      	mov	r0, r4
 8009a22:	f001 fd5d 	bl	800b4e0 <_calloc_r>
 8009a26:	69e3      	ldr	r3, [r4, #28]
 8009a28:	60f0      	str	r0, [r6, #12]
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d1e4      	bne.n	80099fa <_Balloc+0x2e>
 8009a30:	2000      	movs	r0, #0
 8009a32:	bd70      	pop	{r4, r5, r6, pc}
 8009a34:	6802      	ldr	r2, [r0, #0]
 8009a36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a40:	e7f7      	b.n	8009a32 <_Balloc+0x66>
 8009a42:	bf00      	nop
 8009a44:	0800d97c 	.word	0x0800d97c
 8009a48:	0800d9fc 	.word	0x0800d9fc

08009a4c <_Bfree>:
 8009a4c:	b570      	push	{r4, r5, r6, lr}
 8009a4e:	69c6      	ldr	r6, [r0, #28]
 8009a50:	4605      	mov	r5, r0
 8009a52:	460c      	mov	r4, r1
 8009a54:	b976      	cbnz	r6, 8009a74 <_Bfree+0x28>
 8009a56:	2010      	movs	r0, #16
 8009a58:	f7ff ff02 	bl	8009860 <malloc>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	61e8      	str	r0, [r5, #28]
 8009a60:	b920      	cbnz	r0, 8009a6c <_Bfree+0x20>
 8009a62:	218f      	movs	r1, #143	@ 0x8f
 8009a64:	4b08      	ldr	r3, [pc, #32]	@ (8009a88 <_Bfree+0x3c>)
 8009a66:	4809      	ldr	r0, [pc, #36]	@ (8009a8c <_Bfree+0x40>)
 8009a68:	f001 fd1c 	bl	800b4a4 <__assert_func>
 8009a6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a70:	6006      	str	r6, [r0, #0]
 8009a72:	60c6      	str	r6, [r0, #12]
 8009a74:	b13c      	cbz	r4, 8009a86 <_Bfree+0x3a>
 8009a76:	69eb      	ldr	r3, [r5, #28]
 8009a78:	6862      	ldr	r2, [r4, #4]
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a80:	6021      	str	r1, [r4, #0]
 8009a82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a86:	bd70      	pop	{r4, r5, r6, pc}
 8009a88:	0800d97c 	.word	0x0800d97c
 8009a8c:	0800d9fc 	.word	0x0800d9fc

08009a90 <__multadd>:
 8009a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a94:	4607      	mov	r7, r0
 8009a96:	460c      	mov	r4, r1
 8009a98:	461e      	mov	r6, r3
 8009a9a:	2000      	movs	r0, #0
 8009a9c:	690d      	ldr	r5, [r1, #16]
 8009a9e:	f101 0c14 	add.w	ip, r1, #20
 8009aa2:	f8dc 3000 	ldr.w	r3, [ip]
 8009aa6:	3001      	adds	r0, #1
 8009aa8:	b299      	uxth	r1, r3
 8009aaa:	fb02 6101 	mla	r1, r2, r1, r6
 8009aae:	0c1e      	lsrs	r6, r3, #16
 8009ab0:	0c0b      	lsrs	r3, r1, #16
 8009ab2:	fb02 3306 	mla	r3, r2, r6, r3
 8009ab6:	b289      	uxth	r1, r1
 8009ab8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009abc:	4285      	cmp	r5, r0
 8009abe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009ac2:	f84c 1b04 	str.w	r1, [ip], #4
 8009ac6:	dcec      	bgt.n	8009aa2 <__multadd+0x12>
 8009ac8:	b30e      	cbz	r6, 8009b0e <__multadd+0x7e>
 8009aca:	68a3      	ldr	r3, [r4, #8]
 8009acc:	42ab      	cmp	r3, r5
 8009ace:	dc19      	bgt.n	8009b04 <__multadd+0x74>
 8009ad0:	6861      	ldr	r1, [r4, #4]
 8009ad2:	4638      	mov	r0, r7
 8009ad4:	3101      	adds	r1, #1
 8009ad6:	f7ff ff79 	bl	80099cc <_Balloc>
 8009ada:	4680      	mov	r8, r0
 8009adc:	b928      	cbnz	r0, 8009aea <__multadd+0x5a>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	21ba      	movs	r1, #186	@ 0xba
 8009ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8009b14 <__multadd+0x84>)
 8009ae4:	480c      	ldr	r0, [pc, #48]	@ (8009b18 <__multadd+0x88>)
 8009ae6:	f001 fcdd 	bl	800b4a4 <__assert_func>
 8009aea:	6922      	ldr	r2, [r4, #16]
 8009aec:	f104 010c 	add.w	r1, r4, #12
 8009af0:	3202      	adds	r2, #2
 8009af2:	0092      	lsls	r2, r2, #2
 8009af4:	300c      	adds	r0, #12
 8009af6:	f001 fcc1 	bl	800b47c <memcpy>
 8009afa:	4621      	mov	r1, r4
 8009afc:	4638      	mov	r0, r7
 8009afe:	f7ff ffa5 	bl	8009a4c <_Bfree>
 8009b02:	4644      	mov	r4, r8
 8009b04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b08:	3501      	adds	r5, #1
 8009b0a:	615e      	str	r6, [r3, #20]
 8009b0c:	6125      	str	r5, [r4, #16]
 8009b0e:	4620      	mov	r0, r4
 8009b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b14:	0800d9eb 	.word	0x0800d9eb
 8009b18:	0800d9fc 	.word	0x0800d9fc

08009b1c <__s2b>:
 8009b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b20:	4615      	mov	r5, r2
 8009b22:	2209      	movs	r2, #9
 8009b24:	461f      	mov	r7, r3
 8009b26:	3308      	adds	r3, #8
 8009b28:	460c      	mov	r4, r1
 8009b2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b2e:	4606      	mov	r6, r0
 8009b30:	2201      	movs	r2, #1
 8009b32:	2100      	movs	r1, #0
 8009b34:	429a      	cmp	r2, r3
 8009b36:	db09      	blt.n	8009b4c <__s2b+0x30>
 8009b38:	4630      	mov	r0, r6
 8009b3a:	f7ff ff47 	bl	80099cc <_Balloc>
 8009b3e:	b940      	cbnz	r0, 8009b52 <__s2b+0x36>
 8009b40:	4602      	mov	r2, r0
 8009b42:	21d3      	movs	r1, #211	@ 0xd3
 8009b44:	4b18      	ldr	r3, [pc, #96]	@ (8009ba8 <__s2b+0x8c>)
 8009b46:	4819      	ldr	r0, [pc, #100]	@ (8009bac <__s2b+0x90>)
 8009b48:	f001 fcac 	bl	800b4a4 <__assert_func>
 8009b4c:	0052      	lsls	r2, r2, #1
 8009b4e:	3101      	adds	r1, #1
 8009b50:	e7f0      	b.n	8009b34 <__s2b+0x18>
 8009b52:	9b08      	ldr	r3, [sp, #32]
 8009b54:	2d09      	cmp	r5, #9
 8009b56:	6143      	str	r3, [r0, #20]
 8009b58:	f04f 0301 	mov.w	r3, #1
 8009b5c:	6103      	str	r3, [r0, #16]
 8009b5e:	dd16      	ble.n	8009b8e <__s2b+0x72>
 8009b60:	f104 0909 	add.w	r9, r4, #9
 8009b64:	46c8      	mov	r8, r9
 8009b66:	442c      	add	r4, r5
 8009b68:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009b6c:	4601      	mov	r1, r0
 8009b6e:	220a      	movs	r2, #10
 8009b70:	4630      	mov	r0, r6
 8009b72:	3b30      	subs	r3, #48	@ 0x30
 8009b74:	f7ff ff8c 	bl	8009a90 <__multadd>
 8009b78:	45a0      	cmp	r8, r4
 8009b7a:	d1f5      	bne.n	8009b68 <__s2b+0x4c>
 8009b7c:	f1a5 0408 	sub.w	r4, r5, #8
 8009b80:	444c      	add	r4, r9
 8009b82:	1b2d      	subs	r5, r5, r4
 8009b84:	1963      	adds	r3, r4, r5
 8009b86:	42bb      	cmp	r3, r7
 8009b88:	db04      	blt.n	8009b94 <__s2b+0x78>
 8009b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b8e:	2509      	movs	r5, #9
 8009b90:	340a      	adds	r4, #10
 8009b92:	e7f6      	b.n	8009b82 <__s2b+0x66>
 8009b94:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009b98:	4601      	mov	r1, r0
 8009b9a:	220a      	movs	r2, #10
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	3b30      	subs	r3, #48	@ 0x30
 8009ba0:	f7ff ff76 	bl	8009a90 <__multadd>
 8009ba4:	e7ee      	b.n	8009b84 <__s2b+0x68>
 8009ba6:	bf00      	nop
 8009ba8:	0800d9eb 	.word	0x0800d9eb
 8009bac:	0800d9fc 	.word	0x0800d9fc

08009bb0 <__hi0bits>:
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009bb6:	bf3a      	itte	cc
 8009bb8:	0403      	lslcc	r3, r0, #16
 8009bba:	2010      	movcc	r0, #16
 8009bbc:	2000      	movcs	r0, #0
 8009bbe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009bc2:	bf3c      	itt	cc
 8009bc4:	021b      	lslcc	r3, r3, #8
 8009bc6:	3008      	addcc	r0, #8
 8009bc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009bcc:	bf3c      	itt	cc
 8009bce:	011b      	lslcc	r3, r3, #4
 8009bd0:	3004      	addcc	r0, #4
 8009bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bd6:	bf3c      	itt	cc
 8009bd8:	009b      	lslcc	r3, r3, #2
 8009bda:	3002      	addcc	r0, #2
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	db05      	blt.n	8009bec <__hi0bits+0x3c>
 8009be0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009be4:	f100 0001 	add.w	r0, r0, #1
 8009be8:	bf08      	it	eq
 8009bea:	2020      	moveq	r0, #32
 8009bec:	4770      	bx	lr

08009bee <__lo0bits>:
 8009bee:	6803      	ldr	r3, [r0, #0]
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	f013 0007 	ands.w	r0, r3, #7
 8009bf6:	d00b      	beq.n	8009c10 <__lo0bits+0x22>
 8009bf8:	07d9      	lsls	r1, r3, #31
 8009bfa:	d421      	bmi.n	8009c40 <__lo0bits+0x52>
 8009bfc:	0798      	lsls	r0, r3, #30
 8009bfe:	bf49      	itett	mi
 8009c00:	085b      	lsrmi	r3, r3, #1
 8009c02:	089b      	lsrpl	r3, r3, #2
 8009c04:	2001      	movmi	r0, #1
 8009c06:	6013      	strmi	r3, [r2, #0]
 8009c08:	bf5c      	itt	pl
 8009c0a:	2002      	movpl	r0, #2
 8009c0c:	6013      	strpl	r3, [r2, #0]
 8009c0e:	4770      	bx	lr
 8009c10:	b299      	uxth	r1, r3
 8009c12:	b909      	cbnz	r1, 8009c18 <__lo0bits+0x2a>
 8009c14:	2010      	movs	r0, #16
 8009c16:	0c1b      	lsrs	r3, r3, #16
 8009c18:	b2d9      	uxtb	r1, r3
 8009c1a:	b909      	cbnz	r1, 8009c20 <__lo0bits+0x32>
 8009c1c:	3008      	adds	r0, #8
 8009c1e:	0a1b      	lsrs	r3, r3, #8
 8009c20:	0719      	lsls	r1, r3, #28
 8009c22:	bf04      	itt	eq
 8009c24:	091b      	lsreq	r3, r3, #4
 8009c26:	3004      	addeq	r0, #4
 8009c28:	0799      	lsls	r1, r3, #30
 8009c2a:	bf04      	itt	eq
 8009c2c:	089b      	lsreq	r3, r3, #2
 8009c2e:	3002      	addeq	r0, #2
 8009c30:	07d9      	lsls	r1, r3, #31
 8009c32:	d403      	bmi.n	8009c3c <__lo0bits+0x4e>
 8009c34:	085b      	lsrs	r3, r3, #1
 8009c36:	f100 0001 	add.w	r0, r0, #1
 8009c3a:	d003      	beq.n	8009c44 <__lo0bits+0x56>
 8009c3c:	6013      	str	r3, [r2, #0]
 8009c3e:	4770      	bx	lr
 8009c40:	2000      	movs	r0, #0
 8009c42:	4770      	bx	lr
 8009c44:	2020      	movs	r0, #32
 8009c46:	4770      	bx	lr

08009c48 <__i2b>:
 8009c48:	b510      	push	{r4, lr}
 8009c4a:	460c      	mov	r4, r1
 8009c4c:	2101      	movs	r1, #1
 8009c4e:	f7ff febd 	bl	80099cc <_Balloc>
 8009c52:	4602      	mov	r2, r0
 8009c54:	b928      	cbnz	r0, 8009c62 <__i2b+0x1a>
 8009c56:	f240 1145 	movw	r1, #325	@ 0x145
 8009c5a:	4b04      	ldr	r3, [pc, #16]	@ (8009c6c <__i2b+0x24>)
 8009c5c:	4804      	ldr	r0, [pc, #16]	@ (8009c70 <__i2b+0x28>)
 8009c5e:	f001 fc21 	bl	800b4a4 <__assert_func>
 8009c62:	2301      	movs	r3, #1
 8009c64:	6144      	str	r4, [r0, #20]
 8009c66:	6103      	str	r3, [r0, #16]
 8009c68:	bd10      	pop	{r4, pc}
 8009c6a:	bf00      	nop
 8009c6c:	0800d9eb 	.word	0x0800d9eb
 8009c70:	0800d9fc 	.word	0x0800d9fc

08009c74 <__multiply>:
 8009c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c78:	4617      	mov	r7, r2
 8009c7a:	690a      	ldr	r2, [r1, #16]
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	4689      	mov	r9, r1
 8009c80:	429a      	cmp	r2, r3
 8009c82:	bfa2      	ittt	ge
 8009c84:	463b      	movge	r3, r7
 8009c86:	460f      	movge	r7, r1
 8009c88:	4699      	movge	r9, r3
 8009c8a:	693d      	ldr	r5, [r7, #16]
 8009c8c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	6879      	ldr	r1, [r7, #4]
 8009c94:	eb05 060a 	add.w	r6, r5, sl
 8009c98:	42b3      	cmp	r3, r6
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	bfb8      	it	lt
 8009c9e:	3101      	addlt	r1, #1
 8009ca0:	f7ff fe94 	bl	80099cc <_Balloc>
 8009ca4:	b930      	cbnz	r0, 8009cb4 <__multiply+0x40>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009cac:	4b40      	ldr	r3, [pc, #256]	@ (8009db0 <__multiply+0x13c>)
 8009cae:	4841      	ldr	r0, [pc, #260]	@ (8009db4 <__multiply+0x140>)
 8009cb0:	f001 fbf8 	bl	800b4a4 <__assert_func>
 8009cb4:	f100 0414 	add.w	r4, r0, #20
 8009cb8:	4623      	mov	r3, r4
 8009cba:	2200      	movs	r2, #0
 8009cbc:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009cc0:	4573      	cmp	r3, lr
 8009cc2:	d320      	bcc.n	8009d06 <__multiply+0x92>
 8009cc4:	f107 0814 	add.w	r8, r7, #20
 8009cc8:	f109 0114 	add.w	r1, r9, #20
 8009ccc:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009cd0:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009cd4:	9302      	str	r3, [sp, #8]
 8009cd6:	1beb      	subs	r3, r5, r7
 8009cd8:	3b15      	subs	r3, #21
 8009cda:	f023 0303 	bic.w	r3, r3, #3
 8009cde:	3304      	adds	r3, #4
 8009ce0:	3715      	adds	r7, #21
 8009ce2:	42bd      	cmp	r5, r7
 8009ce4:	bf38      	it	cc
 8009ce6:	2304      	movcc	r3, #4
 8009ce8:	9301      	str	r3, [sp, #4]
 8009cea:	9b02      	ldr	r3, [sp, #8]
 8009cec:	9103      	str	r1, [sp, #12]
 8009cee:	428b      	cmp	r3, r1
 8009cf0:	d80c      	bhi.n	8009d0c <__multiply+0x98>
 8009cf2:	2e00      	cmp	r6, #0
 8009cf4:	dd03      	ble.n	8009cfe <__multiply+0x8a>
 8009cf6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d055      	beq.n	8009daa <__multiply+0x136>
 8009cfe:	6106      	str	r6, [r0, #16]
 8009d00:	b005      	add	sp, #20
 8009d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d06:	f843 2b04 	str.w	r2, [r3], #4
 8009d0a:	e7d9      	b.n	8009cc0 <__multiply+0x4c>
 8009d0c:	f8b1 a000 	ldrh.w	sl, [r1]
 8009d10:	f1ba 0f00 	cmp.w	sl, #0
 8009d14:	d01f      	beq.n	8009d56 <__multiply+0xe2>
 8009d16:	46c4      	mov	ip, r8
 8009d18:	46a1      	mov	r9, r4
 8009d1a:	2700      	movs	r7, #0
 8009d1c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009d20:	f8d9 3000 	ldr.w	r3, [r9]
 8009d24:	fa1f fb82 	uxth.w	fp, r2
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	fb0a 330b 	mla	r3, sl, fp, r3
 8009d2e:	443b      	add	r3, r7
 8009d30:	f8d9 7000 	ldr.w	r7, [r9]
 8009d34:	0c12      	lsrs	r2, r2, #16
 8009d36:	0c3f      	lsrs	r7, r7, #16
 8009d38:	fb0a 7202 	mla	r2, sl, r2, r7
 8009d3c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d46:	4565      	cmp	r5, ip
 8009d48:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009d4c:	f849 3b04 	str.w	r3, [r9], #4
 8009d50:	d8e4      	bhi.n	8009d1c <__multiply+0xa8>
 8009d52:	9b01      	ldr	r3, [sp, #4]
 8009d54:	50e7      	str	r7, [r4, r3]
 8009d56:	9b03      	ldr	r3, [sp, #12]
 8009d58:	3104      	adds	r1, #4
 8009d5a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009d5e:	f1b9 0f00 	cmp.w	r9, #0
 8009d62:	d020      	beq.n	8009da6 <__multiply+0x132>
 8009d64:	4647      	mov	r7, r8
 8009d66:	46a4      	mov	ip, r4
 8009d68:	f04f 0a00 	mov.w	sl, #0
 8009d6c:	6823      	ldr	r3, [r4, #0]
 8009d6e:	f8b7 b000 	ldrh.w	fp, [r7]
 8009d72:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	fb09 220b 	mla	r2, r9, fp, r2
 8009d7c:	4452      	add	r2, sl
 8009d7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d82:	f84c 3b04 	str.w	r3, [ip], #4
 8009d86:	f857 3b04 	ldr.w	r3, [r7], #4
 8009d8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d8e:	f8bc 3000 	ldrh.w	r3, [ip]
 8009d92:	42bd      	cmp	r5, r7
 8009d94:	fb09 330a 	mla	r3, r9, sl, r3
 8009d98:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009d9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009da0:	d8e5      	bhi.n	8009d6e <__multiply+0xfa>
 8009da2:	9a01      	ldr	r2, [sp, #4]
 8009da4:	50a3      	str	r3, [r4, r2]
 8009da6:	3404      	adds	r4, #4
 8009da8:	e79f      	b.n	8009cea <__multiply+0x76>
 8009daa:	3e01      	subs	r6, #1
 8009dac:	e7a1      	b.n	8009cf2 <__multiply+0x7e>
 8009dae:	bf00      	nop
 8009db0:	0800d9eb 	.word	0x0800d9eb
 8009db4:	0800d9fc 	.word	0x0800d9fc

08009db8 <__pow5mult>:
 8009db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dbc:	4615      	mov	r5, r2
 8009dbe:	f012 0203 	ands.w	r2, r2, #3
 8009dc2:	4607      	mov	r7, r0
 8009dc4:	460e      	mov	r6, r1
 8009dc6:	d007      	beq.n	8009dd8 <__pow5mult+0x20>
 8009dc8:	4c25      	ldr	r4, [pc, #148]	@ (8009e60 <__pow5mult+0xa8>)
 8009dca:	3a01      	subs	r2, #1
 8009dcc:	2300      	movs	r3, #0
 8009dce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009dd2:	f7ff fe5d 	bl	8009a90 <__multadd>
 8009dd6:	4606      	mov	r6, r0
 8009dd8:	10ad      	asrs	r5, r5, #2
 8009dda:	d03d      	beq.n	8009e58 <__pow5mult+0xa0>
 8009ddc:	69fc      	ldr	r4, [r7, #28]
 8009dde:	b97c      	cbnz	r4, 8009e00 <__pow5mult+0x48>
 8009de0:	2010      	movs	r0, #16
 8009de2:	f7ff fd3d 	bl	8009860 <malloc>
 8009de6:	4602      	mov	r2, r0
 8009de8:	61f8      	str	r0, [r7, #28]
 8009dea:	b928      	cbnz	r0, 8009df8 <__pow5mult+0x40>
 8009dec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009df0:	4b1c      	ldr	r3, [pc, #112]	@ (8009e64 <__pow5mult+0xac>)
 8009df2:	481d      	ldr	r0, [pc, #116]	@ (8009e68 <__pow5mult+0xb0>)
 8009df4:	f001 fb56 	bl	800b4a4 <__assert_func>
 8009df8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009dfc:	6004      	str	r4, [r0, #0]
 8009dfe:	60c4      	str	r4, [r0, #12]
 8009e00:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009e04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e08:	b94c      	cbnz	r4, 8009e1e <__pow5mult+0x66>
 8009e0a:	f240 2171 	movw	r1, #625	@ 0x271
 8009e0e:	4638      	mov	r0, r7
 8009e10:	f7ff ff1a 	bl	8009c48 <__i2b>
 8009e14:	2300      	movs	r3, #0
 8009e16:	4604      	mov	r4, r0
 8009e18:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e1c:	6003      	str	r3, [r0, #0]
 8009e1e:	f04f 0900 	mov.w	r9, #0
 8009e22:	07eb      	lsls	r3, r5, #31
 8009e24:	d50a      	bpl.n	8009e3c <__pow5mult+0x84>
 8009e26:	4631      	mov	r1, r6
 8009e28:	4622      	mov	r2, r4
 8009e2a:	4638      	mov	r0, r7
 8009e2c:	f7ff ff22 	bl	8009c74 <__multiply>
 8009e30:	4680      	mov	r8, r0
 8009e32:	4631      	mov	r1, r6
 8009e34:	4638      	mov	r0, r7
 8009e36:	f7ff fe09 	bl	8009a4c <_Bfree>
 8009e3a:	4646      	mov	r6, r8
 8009e3c:	106d      	asrs	r5, r5, #1
 8009e3e:	d00b      	beq.n	8009e58 <__pow5mult+0xa0>
 8009e40:	6820      	ldr	r0, [r4, #0]
 8009e42:	b938      	cbnz	r0, 8009e54 <__pow5mult+0x9c>
 8009e44:	4622      	mov	r2, r4
 8009e46:	4621      	mov	r1, r4
 8009e48:	4638      	mov	r0, r7
 8009e4a:	f7ff ff13 	bl	8009c74 <__multiply>
 8009e4e:	6020      	str	r0, [r4, #0]
 8009e50:	f8c0 9000 	str.w	r9, [r0]
 8009e54:	4604      	mov	r4, r0
 8009e56:	e7e4      	b.n	8009e22 <__pow5mult+0x6a>
 8009e58:	4630      	mov	r0, r6
 8009e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e5e:	bf00      	nop
 8009e60:	0800db0c 	.word	0x0800db0c
 8009e64:	0800d97c 	.word	0x0800d97c
 8009e68:	0800d9fc 	.word	0x0800d9fc

08009e6c <__lshift>:
 8009e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e70:	460c      	mov	r4, r1
 8009e72:	4607      	mov	r7, r0
 8009e74:	4691      	mov	r9, r2
 8009e76:	6923      	ldr	r3, [r4, #16]
 8009e78:	6849      	ldr	r1, [r1, #4]
 8009e7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e7e:	68a3      	ldr	r3, [r4, #8]
 8009e80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e84:	f108 0601 	add.w	r6, r8, #1
 8009e88:	42b3      	cmp	r3, r6
 8009e8a:	db0b      	blt.n	8009ea4 <__lshift+0x38>
 8009e8c:	4638      	mov	r0, r7
 8009e8e:	f7ff fd9d 	bl	80099cc <_Balloc>
 8009e92:	4605      	mov	r5, r0
 8009e94:	b948      	cbnz	r0, 8009eaa <__lshift+0x3e>
 8009e96:	4602      	mov	r2, r0
 8009e98:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009e9c:	4b27      	ldr	r3, [pc, #156]	@ (8009f3c <__lshift+0xd0>)
 8009e9e:	4828      	ldr	r0, [pc, #160]	@ (8009f40 <__lshift+0xd4>)
 8009ea0:	f001 fb00 	bl	800b4a4 <__assert_func>
 8009ea4:	3101      	adds	r1, #1
 8009ea6:	005b      	lsls	r3, r3, #1
 8009ea8:	e7ee      	b.n	8009e88 <__lshift+0x1c>
 8009eaa:	2300      	movs	r3, #0
 8009eac:	f100 0114 	add.w	r1, r0, #20
 8009eb0:	f100 0210 	add.w	r2, r0, #16
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	4553      	cmp	r3, sl
 8009eb8:	db33      	blt.n	8009f22 <__lshift+0xb6>
 8009eba:	6920      	ldr	r0, [r4, #16]
 8009ebc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ec0:	f104 0314 	add.w	r3, r4, #20
 8009ec4:	f019 091f 	ands.w	r9, r9, #31
 8009ec8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ecc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ed0:	d02b      	beq.n	8009f2a <__lshift+0xbe>
 8009ed2:	468a      	mov	sl, r1
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f1c9 0e20 	rsb	lr, r9, #32
 8009eda:	6818      	ldr	r0, [r3, #0]
 8009edc:	fa00 f009 	lsl.w	r0, r0, r9
 8009ee0:	4310      	orrs	r0, r2
 8009ee2:	f84a 0b04 	str.w	r0, [sl], #4
 8009ee6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eea:	459c      	cmp	ip, r3
 8009eec:	fa22 f20e 	lsr.w	r2, r2, lr
 8009ef0:	d8f3      	bhi.n	8009eda <__lshift+0x6e>
 8009ef2:	ebac 0304 	sub.w	r3, ip, r4
 8009ef6:	3b15      	subs	r3, #21
 8009ef8:	f023 0303 	bic.w	r3, r3, #3
 8009efc:	3304      	adds	r3, #4
 8009efe:	f104 0015 	add.w	r0, r4, #21
 8009f02:	4560      	cmp	r0, ip
 8009f04:	bf88      	it	hi
 8009f06:	2304      	movhi	r3, #4
 8009f08:	50ca      	str	r2, [r1, r3]
 8009f0a:	b10a      	cbz	r2, 8009f10 <__lshift+0xa4>
 8009f0c:	f108 0602 	add.w	r6, r8, #2
 8009f10:	3e01      	subs	r6, #1
 8009f12:	4638      	mov	r0, r7
 8009f14:	4621      	mov	r1, r4
 8009f16:	612e      	str	r6, [r5, #16]
 8009f18:	f7ff fd98 	bl	8009a4c <_Bfree>
 8009f1c:	4628      	mov	r0, r5
 8009f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f22:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f26:	3301      	adds	r3, #1
 8009f28:	e7c5      	b.n	8009eb6 <__lshift+0x4a>
 8009f2a:	3904      	subs	r1, #4
 8009f2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f30:	459c      	cmp	ip, r3
 8009f32:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f36:	d8f9      	bhi.n	8009f2c <__lshift+0xc0>
 8009f38:	e7ea      	b.n	8009f10 <__lshift+0xa4>
 8009f3a:	bf00      	nop
 8009f3c:	0800d9eb 	.word	0x0800d9eb
 8009f40:	0800d9fc 	.word	0x0800d9fc

08009f44 <__mcmp>:
 8009f44:	4603      	mov	r3, r0
 8009f46:	690a      	ldr	r2, [r1, #16]
 8009f48:	6900      	ldr	r0, [r0, #16]
 8009f4a:	b530      	push	{r4, r5, lr}
 8009f4c:	1a80      	subs	r0, r0, r2
 8009f4e:	d10e      	bne.n	8009f6e <__mcmp+0x2a>
 8009f50:	3314      	adds	r3, #20
 8009f52:	3114      	adds	r1, #20
 8009f54:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009f58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009f5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009f60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009f64:	4295      	cmp	r5, r2
 8009f66:	d003      	beq.n	8009f70 <__mcmp+0x2c>
 8009f68:	d205      	bcs.n	8009f76 <__mcmp+0x32>
 8009f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f6e:	bd30      	pop	{r4, r5, pc}
 8009f70:	42a3      	cmp	r3, r4
 8009f72:	d3f3      	bcc.n	8009f5c <__mcmp+0x18>
 8009f74:	e7fb      	b.n	8009f6e <__mcmp+0x2a>
 8009f76:	2001      	movs	r0, #1
 8009f78:	e7f9      	b.n	8009f6e <__mcmp+0x2a>
	...

08009f7c <__mdiff>:
 8009f7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f80:	4689      	mov	r9, r1
 8009f82:	4606      	mov	r6, r0
 8009f84:	4611      	mov	r1, r2
 8009f86:	4648      	mov	r0, r9
 8009f88:	4614      	mov	r4, r2
 8009f8a:	f7ff ffdb 	bl	8009f44 <__mcmp>
 8009f8e:	1e05      	subs	r5, r0, #0
 8009f90:	d112      	bne.n	8009fb8 <__mdiff+0x3c>
 8009f92:	4629      	mov	r1, r5
 8009f94:	4630      	mov	r0, r6
 8009f96:	f7ff fd19 	bl	80099cc <_Balloc>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	b928      	cbnz	r0, 8009faa <__mdiff+0x2e>
 8009f9e:	f240 2137 	movw	r1, #567	@ 0x237
 8009fa2:	4b3e      	ldr	r3, [pc, #248]	@ (800a09c <__mdiff+0x120>)
 8009fa4:	483e      	ldr	r0, [pc, #248]	@ (800a0a0 <__mdiff+0x124>)
 8009fa6:	f001 fa7d 	bl	800b4a4 <__assert_func>
 8009faa:	2301      	movs	r3, #1
 8009fac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009fb0:	4610      	mov	r0, r2
 8009fb2:	b003      	add	sp, #12
 8009fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb8:	bfbc      	itt	lt
 8009fba:	464b      	movlt	r3, r9
 8009fbc:	46a1      	movlt	r9, r4
 8009fbe:	4630      	mov	r0, r6
 8009fc0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009fc4:	bfba      	itte	lt
 8009fc6:	461c      	movlt	r4, r3
 8009fc8:	2501      	movlt	r5, #1
 8009fca:	2500      	movge	r5, #0
 8009fcc:	f7ff fcfe 	bl	80099cc <_Balloc>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	b918      	cbnz	r0, 8009fdc <__mdiff+0x60>
 8009fd4:	f240 2145 	movw	r1, #581	@ 0x245
 8009fd8:	4b30      	ldr	r3, [pc, #192]	@ (800a09c <__mdiff+0x120>)
 8009fda:	e7e3      	b.n	8009fa4 <__mdiff+0x28>
 8009fdc:	f100 0b14 	add.w	fp, r0, #20
 8009fe0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009fe4:	f109 0310 	add.w	r3, r9, #16
 8009fe8:	60c5      	str	r5, [r0, #12]
 8009fea:	f04f 0c00 	mov.w	ip, #0
 8009fee:	f109 0514 	add.w	r5, r9, #20
 8009ff2:	46d9      	mov	r9, fp
 8009ff4:	6926      	ldr	r6, [r4, #16]
 8009ff6:	f104 0e14 	add.w	lr, r4, #20
 8009ffa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009ffe:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a002:	9301      	str	r3, [sp, #4]
 800a004:	9b01      	ldr	r3, [sp, #4]
 800a006:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a00a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a00e:	b281      	uxth	r1, r0
 800a010:	9301      	str	r3, [sp, #4]
 800a012:	fa1f f38a 	uxth.w	r3, sl
 800a016:	1a5b      	subs	r3, r3, r1
 800a018:	0c00      	lsrs	r0, r0, #16
 800a01a:	4463      	add	r3, ip
 800a01c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a020:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a024:	b29b      	uxth	r3, r3
 800a026:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a02a:	4576      	cmp	r6, lr
 800a02c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a030:	f849 3b04 	str.w	r3, [r9], #4
 800a034:	d8e6      	bhi.n	800a004 <__mdiff+0x88>
 800a036:	1b33      	subs	r3, r6, r4
 800a038:	3b15      	subs	r3, #21
 800a03a:	f023 0303 	bic.w	r3, r3, #3
 800a03e:	3415      	adds	r4, #21
 800a040:	3304      	adds	r3, #4
 800a042:	42a6      	cmp	r6, r4
 800a044:	bf38      	it	cc
 800a046:	2304      	movcc	r3, #4
 800a048:	441d      	add	r5, r3
 800a04a:	445b      	add	r3, fp
 800a04c:	461e      	mov	r6, r3
 800a04e:	462c      	mov	r4, r5
 800a050:	4544      	cmp	r4, r8
 800a052:	d30e      	bcc.n	800a072 <__mdiff+0xf6>
 800a054:	f108 0103 	add.w	r1, r8, #3
 800a058:	1b49      	subs	r1, r1, r5
 800a05a:	f021 0103 	bic.w	r1, r1, #3
 800a05e:	3d03      	subs	r5, #3
 800a060:	45a8      	cmp	r8, r5
 800a062:	bf38      	it	cc
 800a064:	2100      	movcc	r1, #0
 800a066:	440b      	add	r3, r1
 800a068:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a06c:	b199      	cbz	r1, 800a096 <__mdiff+0x11a>
 800a06e:	6117      	str	r7, [r2, #16]
 800a070:	e79e      	b.n	8009fb0 <__mdiff+0x34>
 800a072:	46e6      	mov	lr, ip
 800a074:	f854 1b04 	ldr.w	r1, [r4], #4
 800a078:	fa1f fc81 	uxth.w	ip, r1
 800a07c:	44f4      	add	ip, lr
 800a07e:	0c08      	lsrs	r0, r1, #16
 800a080:	4471      	add	r1, lr
 800a082:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a086:	b289      	uxth	r1, r1
 800a088:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a08c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a090:	f846 1b04 	str.w	r1, [r6], #4
 800a094:	e7dc      	b.n	800a050 <__mdiff+0xd4>
 800a096:	3f01      	subs	r7, #1
 800a098:	e7e6      	b.n	800a068 <__mdiff+0xec>
 800a09a:	bf00      	nop
 800a09c:	0800d9eb 	.word	0x0800d9eb
 800a0a0:	0800d9fc 	.word	0x0800d9fc

0800a0a4 <__ulp>:
 800a0a4:	4b0e      	ldr	r3, [pc, #56]	@ (800a0e0 <__ulp+0x3c>)
 800a0a6:	400b      	ands	r3, r1
 800a0a8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	dc08      	bgt.n	800a0c2 <__ulp+0x1e>
 800a0b0:	425b      	negs	r3, r3
 800a0b2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a0b6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a0ba:	da04      	bge.n	800a0c6 <__ulp+0x22>
 800a0bc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a0c0:	4113      	asrs	r3, r2
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	e008      	b.n	800a0d8 <__ulp+0x34>
 800a0c6:	f1a2 0314 	sub.w	r3, r2, #20
 800a0ca:	2b1e      	cmp	r3, #30
 800a0cc:	bfd6      	itet	le
 800a0ce:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a0d2:	2201      	movgt	r2, #1
 800a0d4:	40da      	lsrle	r2, r3
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	4619      	mov	r1, r3
 800a0da:	4610      	mov	r0, r2
 800a0dc:	4770      	bx	lr
 800a0de:	bf00      	nop
 800a0e0:	7ff00000 	.word	0x7ff00000

0800a0e4 <__b2d>:
 800a0e4:	6902      	ldr	r2, [r0, #16]
 800a0e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0e8:	f100 0614 	add.w	r6, r0, #20
 800a0ec:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800a0f0:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800a0f4:	4f1e      	ldr	r7, [pc, #120]	@ (800a170 <__b2d+0x8c>)
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f7ff fd5a 	bl	8009bb0 <__hi0bits>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	f1c0 0020 	rsb	r0, r0, #32
 800a102:	2b0a      	cmp	r3, #10
 800a104:	f1a2 0504 	sub.w	r5, r2, #4
 800a108:	6008      	str	r0, [r1, #0]
 800a10a:	dc12      	bgt.n	800a132 <__b2d+0x4e>
 800a10c:	42ae      	cmp	r6, r5
 800a10e:	bf2c      	ite	cs
 800a110:	2200      	movcs	r2, #0
 800a112:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a116:	f1c3 0c0b 	rsb	ip, r3, #11
 800a11a:	3315      	adds	r3, #21
 800a11c:	fa24 fe0c 	lsr.w	lr, r4, ip
 800a120:	fa04 f303 	lsl.w	r3, r4, r3
 800a124:	fa22 f20c 	lsr.w	r2, r2, ip
 800a128:	ea4e 0107 	orr.w	r1, lr, r7
 800a12c:	431a      	orrs	r2, r3
 800a12e:	4610      	mov	r0, r2
 800a130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a132:	42ae      	cmp	r6, r5
 800a134:	bf36      	itet	cc
 800a136:	f1a2 0508 	subcc.w	r5, r2, #8
 800a13a:	2200      	movcs	r2, #0
 800a13c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a140:	3b0b      	subs	r3, #11
 800a142:	d012      	beq.n	800a16a <__b2d+0x86>
 800a144:	f1c3 0720 	rsb	r7, r3, #32
 800a148:	fa22 f107 	lsr.w	r1, r2, r7
 800a14c:	409c      	lsls	r4, r3
 800a14e:	430c      	orrs	r4, r1
 800a150:	42b5      	cmp	r5, r6
 800a152:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800a156:	bf94      	ite	ls
 800a158:	2400      	movls	r4, #0
 800a15a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800a15e:	409a      	lsls	r2, r3
 800a160:	40fc      	lsrs	r4, r7
 800a162:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a166:	4322      	orrs	r2, r4
 800a168:	e7e1      	b.n	800a12e <__b2d+0x4a>
 800a16a:	ea44 0107 	orr.w	r1, r4, r7
 800a16e:	e7de      	b.n	800a12e <__b2d+0x4a>
 800a170:	3ff00000 	.word	0x3ff00000

0800a174 <__d2b>:
 800a174:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a178:	2101      	movs	r1, #1
 800a17a:	4690      	mov	r8, r2
 800a17c:	4699      	mov	r9, r3
 800a17e:	9e08      	ldr	r6, [sp, #32]
 800a180:	f7ff fc24 	bl	80099cc <_Balloc>
 800a184:	4604      	mov	r4, r0
 800a186:	b930      	cbnz	r0, 800a196 <__d2b+0x22>
 800a188:	4602      	mov	r2, r0
 800a18a:	f240 310f 	movw	r1, #783	@ 0x30f
 800a18e:	4b23      	ldr	r3, [pc, #140]	@ (800a21c <__d2b+0xa8>)
 800a190:	4823      	ldr	r0, [pc, #140]	@ (800a220 <__d2b+0xac>)
 800a192:	f001 f987 	bl	800b4a4 <__assert_func>
 800a196:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a19a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a19e:	b10d      	cbz	r5, 800a1a4 <__d2b+0x30>
 800a1a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a1a4:	9301      	str	r3, [sp, #4]
 800a1a6:	f1b8 0300 	subs.w	r3, r8, #0
 800a1aa:	d024      	beq.n	800a1f6 <__d2b+0x82>
 800a1ac:	4668      	mov	r0, sp
 800a1ae:	9300      	str	r3, [sp, #0]
 800a1b0:	f7ff fd1d 	bl	8009bee <__lo0bits>
 800a1b4:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a1b8:	b1d8      	cbz	r0, 800a1f2 <__d2b+0x7e>
 800a1ba:	f1c0 0320 	rsb	r3, r0, #32
 800a1be:	fa02 f303 	lsl.w	r3, r2, r3
 800a1c2:	430b      	orrs	r3, r1
 800a1c4:	40c2      	lsrs	r2, r0
 800a1c6:	6163      	str	r3, [r4, #20]
 800a1c8:	9201      	str	r2, [sp, #4]
 800a1ca:	9b01      	ldr	r3, [sp, #4]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	bf0c      	ite	eq
 800a1d0:	2201      	moveq	r2, #1
 800a1d2:	2202      	movne	r2, #2
 800a1d4:	61a3      	str	r3, [r4, #24]
 800a1d6:	6122      	str	r2, [r4, #16]
 800a1d8:	b1ad      	cbz	r5, 800a206 <__d2b+0x92>
 800a1da:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a1de:	4405      	add	r5, r0
 800a1e0:	6035      	str	r5, [r6, #0]
 800a1e2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a1e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1e8:	6018      	str	r0, [r3, #0]
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	b002      	add	sp, #8
 800a1ee:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a1f2:	6161      	str	r1, [r4, #20]
 800a1f4:	e7e9      	b.n	800a1ca <__d2b+0x56>
 800a1f6:	a801      	add	r0, sp, #4
 800a1f8:	f7ff fcf9 	bl	8009bee <__lo0bits>
 800a1fc:	9b01      	ldr	r3, [sp, #4]
 800a1fe:	2201      	movs	r2, #1
 800a200:	6163      	str	r3, [r4, #20]
 800a202:	3020      	adds	r0, #32
 800a204:	e7e7      	b.n	800a1d6 <__d2b+0x62>
 800a206:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a20a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a20e:	6030      	str	r0, [r6, #0]
 800a210:	6918      	ldr	r0, [r3, #16]
 800a212:	f7ff fccd 	bl	8009bb0 <__hi0bits>
 800a216:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a21a:	e7e4      	b.n	800a1e6 <__d2b+0x72>
 800a21c:	0800d9eb 	.word	0x0800d9eb
 800a220:	0800d9fc 	.word	0x0800d9fc

0800a224 <__ratio>:
 800a224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a228:	b085      	sub	sp, #20
 800a22a:	e9cd 1000 	strd	r1, r0, [sp]
 800a22e:	a902      	add	r1, sp, #8
 800a230:	f7ff ff58 	bl	800a0e4 <__b2d>
 800a234:	468b      	mov	fp, r1
 800a236:	4606      	mov	r6, r0
 800a238:	460f      	mov	r7, r1
 800a23a:	9800      	ldr	r0, [sp, #0]
 800a23c:	a903      	add	r1, sp, #12
 800a23e:	f7ff ff51 	bl	800a0e4 <__b2d>
 800a242:	460d      	mov	r5, r1
 800a244:	9b01      	ldr	r3, [sp, #4]
 800a246:	4689      	mov	r9, r1
 800a248:	6919      	ldr	r1, [r3, #16]
 800a24a:	9b00      	ldr	r3, [sp, #0]
 800a24c:	4604      	mov	r4, r0
 800a24e:	691b      	ldr	r3, [r3, #16]
 800a250:	4630      	mov	r0, r6
 800a252:	1ac9      	subs	r1, r1, r3
 800a254:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a258:	1a9b      	subs	r3, r3, r2
 800a25a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a25e:	2b00      	cmp	r3, #0
 800a260:	bfcd      	iteet	gt
 800a262:	463a      	movgt	r2, r7
 800a264:	462a      	movle	r2, r5
 800a266:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a26a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a26e:	bfd8      	it	le
 800a270:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a274:	464b      	mov	r3, r9
 800a276:	4622      	mov	r2, r4
 800a278:	4659      	mov	r1, fp
 800a27a:	f7f6 fa57 	bl	800072c <__aeabi_ddiv>
 800a27e:	b005      	add	sp, #20
 800a280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a284 <__copybits>:
 800a284:	3901      	subs	r1, #1
 800a286:	b570      	push	{r4, r5, r6, lr}
 800a288:	1149      	asrs	r1, r1, #5
 800a28a:	6914      	ldr	r4, [r2, #16]
 800a28c:	3101      	adds	r1, #1
 800a28e:	f102 0314 	add.w	r3, r2, #20
 800a292:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a296:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a29a:	1f05      	subs	r5, r0, #4
 800a29c:	42a3      	cmp	r3, r4
 800a29e:	d30c      	bcc.n	800a2ba <__copybits+0x36>
 800a2a0:	1aa3      	subs	r3, r4, r2
 800a2a2:	3b11      	subs	r3, #17
 800a2a4:	f023 0303 	bic.w	r3, r3, #3
 800a2a8:	3211      	adds	r2, #17
 800a2aa:	42a2      	cmp	r2, r4
 800a2ac:	bf88      	it	hi
 800a2ae:	2300      	movhi	r3, #0
 800a2b0:	4418      	add	r0, r3
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	4288      	cmp	r0, r1
 800a2b6:	d305      	bcc.n	800a2c4 <__copybits+0x40>
 800a2b8:	bd70      	pop	{r4, r5, r6, pc}
 800a2ba:	f853 6b04 	ldr.w	r6, [r3], #4
 800a2be:	f845 6f04 	str.w	r6, [r5, #4]!
 800a2c2:	e7eb      	b.n	800a29c <__copybits+0x18>
 800a2c4:	f840 3b04 	str.w	r3, [r0], #4
 800a2c8:	e7f4      	b.n	800a2b4 <__copybits+0x30>

0800a2ca <__any_on>:
 800a2ca:	f100 0214 	add.w	r2, r0, #20
 800a2ce:	6900      	ldr	r0, [r0, #16]
 800a2d0:	114b      	asrs	r3, r1, #5
 800a2d2:	4298      	cmp	r0, r3
 800a2d4:	b510      	push	{r4, lr}
 800a2d6:	db11      	blt.n	800a2fc <__any_on+0x32>
 800a2d8:	dd0a      	ble.n	800a2f0 <__any_on+0x26>
 800a2da:	f011 011f 	ands.w	r1, r1, #31
 800a2de:	d007      	beq.n	800a2f0 <__any_on+0x26>
 800a2e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a2e4:	fa24 f001 	lsr.w	r0, r4, r1
 800a2e8:	fa00 f101 	lsl.w	r1, r0, r1
 800a2ec:	428c      	cmp	r4, r1
 800a2ee:	d10b      	bne.n	800a308 <__any_on+0x3e>
 800a2f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d803      	bhi.n	800a300 <__any_on+0x36>
 800a2f8:	2000      	movs	r0, #0
 800a2fa:	bd10      	pop	{r4, pc}
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	e7f7      	b.n	800a2f0 <__any_on+0x26>
 800a300:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a304:	2900      	cmp	r1, #0
 800a306:	d0f5      	beq.n	800a2f4 <__any_on+0x2a>
 800a308:	2001      	movs	r0, #1
 800a30a:	e7f6      	b.n	800a2fa <__any_on+0x30>

0800a30c <sulp>:
 800a30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a310:	460f      	mov	r7, r1
 800a312:	4690      	mov	r8, r2
 800a314:	f7ff fec6 	bl	800a0a4 <__ulp>
 800a318:	4604      	mov	r4, r0
 800a31a:	460d      	mov	r5, r1
 800a31c:	f1b8 0f00 	cmp.w	r8, #0
 800a320:	d011      	beq.n	800a346 <sulp+0x3a>
 800a322:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a326:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	dd0b      	ble.n	800a346 <sulp+0x3a>
 800a32e:	2400      	movs	r4, #0
 800a330:	051b      	lsls	r3, r3, #20
 800a332:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a336:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a33a:	4622      	mov	r2, r4
 800a33c:	462b      	mov	r3, r5
 800a33e:	f7f6 f8cb 	bl	80004d8 <__aeabi_dmul>
 800a342:	4604      	mov	r4, r0
 800a344:	460d      	mov	r5, r1
 800a346:	4620      	mov	r0, r4
 800a348:	4629      	mov	r1, r5
 800a34a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800a350 <_strtod_l>:
 800a350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a354:	b09f      	sub	sp, #124	@ 0x7c
 800a356:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a358:	2200      	movs	r2, #0
 800a35a:	460c      	mov	r4, r1
 800a35c:	921a      	str	r2, [sp, #104]	@ 0x68
 800a35e:	f04f 0a00 	mov.w	sl, #0
 800a362:	f04f 0b00 	mov.w	fp, #0
 800a366:	460a      	mov	r2, r1
 800a368:	9005      	str	r0, [sp, #20]
 800a36a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a36c:	7811      	ldrb	r1, [r2, #0]
 800a36e:	292b      	cmp	r1, #43	@ 0x2b
 800a370:	d048      	beq.n	800a404 <_strtod_l+0xb4>
 800a372:	d836      	bhi.n	800a3e2 <_strtod_l+0x92>
 800a374:	290d      	cmp	r1, #13
 800a376:	d830      	bhi.n	800a3da <_strtod_l+0x8a>
 800a378:	2908      	cmp	r1, #8
 800a37a:	d830      	bhi.n	800a3de <_strtod_l+0x8e>
 800a37c:	2900      	cmp	r1, #0
 800a37e:	d039      	beq.n	800a3f4 <_strtod_l+0xa4>
 800a380:	2200      	movs	r2, #0
 800a382:	920e      	str	r2, [sp, #56]	@ 0x38
 800a384:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a386:	782a      	ldrb	r2, [r5, #0]
 800a388:	2a30      	cmp	r2, #48	@ 0x30
 800a38a:	f040 80b0 	bne.w	800a4ee <_strtod_l+0x19e>
 800a38e:	786a      	ldrb	r2, [r5, #1]
 800a390:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a394:	2a58      	cmp	r2, #88	@ 0x58
 800a396:	d16c      	bne.n	800a472 <_strtod_l+0x122>
 800a398:	9302      	str	r3, [sp, #8]
 800a39a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a39c:	4a8f      	ldr	r2, [pc, #572]	@ (800a5dc <_strtod_l+0x28c>)
 800a39e:	9301      	str	r3, [sp, #4]
 800a3a0:	ab1a      	add	r3, sp, #104	@ 0x68
 800a3a2:	9300      	str	r3, [sp, #0]
 800a3a4:	9805      	ldr	r0, [sp, #20]
 800a3a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a3a8:	a919      	add	r1, sp, #100	@ 0x64
 800a3aa:	f001 f915 	bl	800b5d8 <__gethex>
 800a3ae:	f010 060f 	ands.w	r6, r0, #15
 800a3b2:	4604      	mov	r4, r0
 800a3b4:	d005      	beq.n	800a3c2 <_strtod_l+0x72>
 800a3b6:	2e06      	cmp	r6, #6
 800a3b8:	d126      	bne.n	800a408 <_strtod_l+0xb8>
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	3501      	adds	r5, #1
 800a3be:	9519      	str	r5, [sp, #100]	@ 0x64
 800a3c0:	930e      	str	r3, [sp, #56]	@ 0x38
 800a3c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	f040 8582 	bne.w	800aece <_strtod_l+0xb7e>
 800a3ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3cc:	b1bb      	cbz	r3, 800a3fe <_strtod_l+0xae>
 800a3ce:	4650      	mov	r0, sl
 800a3d0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800a3d4:	b01f      	add	sp, #124	@ 0x7c
 800a3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3da:	2920      	cmp	r1, #32
 800a3dc:	d1d0      	bne.n	800a380 <_strtod_l+0x30>
 800a3de:	3201      	adds	r2, #1
 800a3e0:	e7c3      	b.n	800a36a <_strtod_l+0x1a>
 800a3e2:	292d      	cmp	r1, #45	@ 0x2d
 800a3e4:	d1cc      	bne.n	800a380 <_strtod_l+0x30>
 800a3e6:	2101      	movs	r1, #1
 800a3e8:	910e      	str	r1, [sp, #56]	@ 0x38
 800a3ea:	1c51      	adds	r1, r2, #1
 800a3ec:	9119      	str	r1, [sp, #100]	@ 0x64
 800a3ee:	7852      	ldrb	r2, [r2, #1]
 800a3f0:	2a00      	cmp	r2, #0
 800a3f2:	d1c7      	bne.n	800a384 <_strtod_l+0x34>
 800a3f4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a3f6:	9419      	str	r4, [sp, #100]	@ 0x64
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f040 8566 	bne.w	800aeca <_strtod_l+0xb7a>
 800a3fe:	4650      	mov	r0, sl
 800a400:	4659      	mov	r1, fp
 800a402:	e7e7      	b.n	800a3d4 <_strtod_l+0x84>
 800a404:	2100      	movs	r1, #0
 800a406:	e7ef      	b.n	800a3e8 <_strtod_l+0x98>
 800a408:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a40a:	b13a      	cbz	r2, 800a41c <_strtod_l+0xcc>
 800a40c:	2135      	movs	r1, #53	@ 0x35
 800a40e:	a81c      	add	r0, sp, #112	@ 0x70
 800a410:	f7ff ff38 	bl	800a284 <__copybits>
 800a414:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a416:	9805      	ldr	r0, [sp, #20]
 800a418:	f7ff fb18 	bl	8009a4c <_Bfree>
 800a41c:	3e01      	subs	r6, #1
 800a41e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a420:	2e04      	cmp	r6, #4
 800a422:	d806      	bhi.n	800a432 <_strtod_l+0xe2>
 800a424:	e8df f006 	tbb	[pc, r6]
 800a428:	201d0314 	.word	0x201d0314
 800a42c:	14          	.byte	0x14
 800a42d:	00          	.byte	0x00
 800a42e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a432:	05e1      	lsls	r1, r4, #23
 800a434:	bf48      	it	mi
 800a436:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a43a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a43e:	0d1b      	lsrs	r3, r3, #20
 800a440:	051b      	lsls	r3, r3, #20
 800a442:	2b00      	cmp	r3, #0
 800a444:	d1bd      	bne.n	800a3c2 <_strtod_l+0x72>
 800a446:	f7fe fb25 	bl	8008a94 <__errno>
 800a44a:	2322      	movs	r3, #34	@ 0x22
 800a44c:	6003      	str	r3, [r0, #0]
 800a44e:	e7b8      	b.n	800a3c2 <_strtod_l+0x72>
 800a450:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a454:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a458:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a45c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a460:	e7e7      	b.n	800a432 <_strtod_l+0xe2>
 800a462:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a5e0 <_strtod_l+0x290>
 800a466:	e7e4      	b.n	800a432 <_strtod_l+0xe2>
 800a468:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a46c:	f04f 3aff 	mov.w	sl, #4294967295
 800a470:	e7df      	b.n	800a432 <_strtod_l+0xe2>
 800a472:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a474:	1c5a      	adds	r2, r3, #1
 800a476:	9219      	str	r2, [sp, #100]	@ 0x64
 800a478:	785b      	ldrb	r3, [r3, #1]
 800a47a:	2b30      	cmp	r3, #48	@ 0x30
 800a47c:	d0f9      	beq.n	800a472 <_strtod_l+0x122>
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d09f      	beq.n	800a3c2 <_strtod_l+0x72>
 800a482:	2301      	movs	r3, #1
 800a484:	2700      	movs	r7, #0
 800a486:	220a      	movs	r2, #10
 800a488:	46b9      	mov	r9, r7
 800a48a:	9308      	str	r3, [sp, #32]
 800a48c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a48e:	970b      	str	r7, [sp, #44]	@ 0x2c
 800a490:	930c      	str	r3, [sp, #48]	@ 0x30
 800a492:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a494:	7805      	ldrb	r5, [r0, #0]
 800a496:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a49a:	b2d9      	uxtb	r1, r3
 800a49c:	2909      	cmp	r1, #9
 800a49e:	d928      	bls.n	800a4f2 <_strtod_l+0x1a2>
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	4950      	ldr	r1, [pc, #320]	@ (800a5e4 <_strtod_l+0x294>)
 800a4a4:	f000 ffc8 	bl	800b438 <strncmp>
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	d032      	beq.n	800a512 <_strtod_l+0x1c2>
 800a4ac:	2000      	movs	r0, #0
 800a4ae:	462a      	mov	r2, r5
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	464d      	mov	r5, r9
 800a4b4:	900a      	str	r0, [sp, #40]	@ 0x28
 800a4b6:	2a65      	cmp	r2, #101	@ 0x65
 800a4b8:	d001      	beq.n	800a4be <_strtod_l+0x16e>
 800a4ba:	2a45      	cmp	r2, #69	@ 0x45
 800a4bc:	d114      	bne.n	800a4e8 <_strtod_l+0x198>
 800a4be:	b91d      	cbnz	r5, 800a4c8 <_strtod_l+0x178>
 800a4c0:	9a08      	ldr	r2, [sp, #32]
 800a4c2:	4302      	orrs	r2, r0
 800a4c4:	d096      	beq.n	800a3f4 <_strtod_l+0xa4>
 800a4c6:	2500      	movs	r5, #0
 800a4c8:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a4ca:	1c62      	adds	r2, r4, #1
 800a4cc:	9219      	str	r2, [sp, #100]	@ 0x64
 800a4ce:	7862      	ldrb	r2, [r4, #1]
 800a4d0:	2a2b      	cmp	r2, #43	@ 0x2b
 800a4d2:	d07a      	beq.n	800a5ca <_strtod_l+0x27a>
 800a4d4:	2a2d      	cmp	r2, #45	@ 0x2d
 800a4d6:	d07e      	beq.n	800a5d6 <_strtod_l+0x286>
 800a4d8:	f04f 0c00 	mov.w	ip, #0
 800a4dc:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a4e0:	2909      	cmp	r1, #9
 800a4e2:	f240 8085 	bls.w	800a5f0 <_strtod_l+0x2a0>
 800a4e6:	9419      	str	r4, [sp, #100]	@ 0x64
 800a4e8:	f04f 0800 	mov.w	r8, #0
 800a4ec:	e0a5      	b.n	800a63a <_strtod_l+0x2ea>
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	e7c8      	b.n	800a484 <_strtod_l+0x134>
 800a4f2:	f1b9 0f08 	cmp.w	r9, #8
 800a4f6:	bfd8      	it	le
 800a4f8:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800a4fa:	f100 0001 	add.w	r0, r0, #1
 800a4fe:	bfd6      	itet	le
 800a500:	fb02 3301 	mlale	r3, r2, r1, r3
 800a504:	fb02 3707 	mlagt	r7, r2, r7, r3
 800a508:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800a50a:	f109 0901 	add.w	r9, r9, #1
 800a50e:	9019      	str	r0, [sp, #100]	@ 0x64
 800a510:	e7bf      	b.n	800a492 <_strtod_l+0x142>
 800a512:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a514:	1c5a      	adds	r2, r3, #1
 800a516:	9219      	str	r2, [sp, #100]	@ 0x64
 800a518:	785a      	ldrb	r2, [r3, #1]
 800a51a:	f1b9 0f00 	cmp.w	r9, #0
 800a51e:	d03b      	beq.n	800a598 <_strtod_l+0x248>
 800a520:	464d      	mov	r5, r9
 800a522:	900a      	str	r0, [sp, #40]	@ 0x28
 800a524:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a528:	2b09      	cmp	r3, #9
 800a52a:	d912      	bls.n	800a552 <_strtod_l+0x202>
 800a52c:	2301      	movs	r3, #1
 800a52e:	e7c2      	b.n	800a4b6 <_strtod_l+0x166>
 800a530:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a532:	3001      	adds	r0, #1
 800a534:	1c5a      	adds	r2, r3, #1
 800a536:	9219      	str	r2, [sp, #100]	@ 0x64
 800a538:	785a      	ldrb	r2, [r3, #1]
 800a53a:	2a30      	cmp	r2, #48	@ 0x30
 800a53c:	d0f8      	beq.n	800a530 <_strtod_l+0x1e0>
 800a53e:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a542:	2b08      	cmp	r3, #8
 800a544:	f200 84c8 	bhi.w	800aed8 <_strtod_l+0xb88>
 800a548:	900a      	str	r0, [sp, #40]	@ 0x28
 800a54a:	2000      	movs	r0, #0
 800a54c:	4605      	mov	r5, r0
 800a54e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a550:	930c      	str	r3, [sp, #48]	@ 0x30
 800a552:	3a30      	subs	r2, #48	@ 0x30
 800a554:	f100 0301 	add.w	r3, r0, #1
 800a558:	d018      	beq.n	800a58c <_strtod_l+0x23c>
 800a55a:	462e      	mov	r6, r5
 800a55c:	f04f 0e0a 	mov.w	lr, #10
 800a560:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a562:	4419      	add	r1, r3
 800a564:	910a      	str	r1, [sp, #40]	@ 0x28
 800a566:	1c71      	adds	r1, r6, #1
 800a568:	eba1 0c05 	sub.w	ip, r1, r5
 800a56c:	4563      	cmp	r3, ip
 800a56e:	dc15      	bgt.n	800a59c <_strtod_l+0x24c>
 800a570:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a574:	182b      	adds	r3, r5, r0
 800a576:	2b08      	cmp	r3, #8
 800a578:	f105 0501 	add.w	r5, r5, #1
 800a57c:	4405      	add	r5, r0
 800a57e:	dc1a      	bgt.n	800a5b6 <_strtod_l+0x266>
 800a580:	230a      	movs	r3, #10
 800a582:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a584:	fb03 2301 	mla	r3, r3, r1, r2
 800a588:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a58a:	2300      	movs	r3, #0
 800a58c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a58e:	4618      	mov	r0, r3
 800a590:	1c51      	adds	r1, r2, #1
 800a592:	9119      	str	r1, [sp, #100]	@ 0x64
 800a594:	7852      	ldrb	r2, [r2, #1]
 800a596:	e7c5      	b.n	800a524 <_strtod_l+0x1d4>
 800a598:	4648      	mov	r0, r9
 800a59a:	e7ce      	b.n	800a53a <_strtod_l+0x1ea>
 800a59c:	2e08      	cmp	r6, #8
 800a59e:	dc05      	bgt.n	800a5ac <_strtod_l+0x25c>
 800a5a0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a5a2:	fb0e f606 	mul.w	r6, lr, r6
 800a5a6:	960b      	str	r6, [sp, #44]	@ 0x2c
 800a5a8:	460e      	mov	r6, r1
 800a5aa:	e7dc      	b.n	800a566 <_strtod_l+0x216>
 800a5ac:	2910      	cmp	r1, #16
 800a5ae:	bfd8      	it	le
 800a5b0:	fb0e f707 	mulle.w	r7, lr, r7
 800a5b4:	e7f8      	b.n	800a5a8 <_strtod_l+0x258>
 800a5b6:	2b0f      	cmp	r3, #15
 800a5b8:	bfdc      	itt	le
 800a5ba:	230a      	movle	r3, #10
 800a5bc:	fb03 2707 	mlale	r7, r3, r7, r2
 800a5c0:	e7e3      	b.n	800a58a <_strtod_l+0x23a>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e77a      	b.n	800a4c0 <_strtod_l+0x170>
 800a5ca:	f04f 0c00 	mov.w	ip, #0
 800a5ce:	1ca2      	adds	r2, r4, #2
 800a5d0:	9219      	str	r2, [sp, #100]	@ 0x64
 800a5d2:	78a2      	ldrb	r2, [r4, #2]
 800a5d4:	e782      	b.n	800a4dc <_strtod_l+0x18c>
 800a5d6:	f04f 0c01 	mov.w	ip, #1
 800a5da:	e7f8      	b.n	800a5ce <_strtod_l+0x27e>
 800a5dc:	0800dc1c 	.word	0x0800dc1c
 800a5e0:	7ff00000 	.word	0x7ff00000
 800a5e4:	0800da55 	.word	0x0800da55
 800a5e8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a5ea:	1c51      	adds	r1, r2, #1
 800a5ec:	9119      	str	r1, [sp, #100]	@ 0x64
 800a5ee:	7852      	ldrb	r2, [r2, #1]
 800a5f0:	2a30      	cmp	r2, #48	@ 0x30
 800a5f2:	d0f9      	beq.n	800a5e8 <_strtod_l+0x298>
 800a5f4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a5f8:	2908      	cmp	r1, #8
 800a5fa:	f63f af75 	bhi.w	800a4e8 <_strtod_l+0x198>
 800a5fe:	f04f 080a 	mov.w	r8, #10
 800a602:	3a30      	subs	r2, #48	@ 0x30
 800a604:	9209      	str	r2, [sp, #36]	@ 0x24
 800a606:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a608:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a60a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a60c:	1c56      	adds	r6, r2, #1
 800a60e:	9619      	str	r6, [sp, #100]	@ 0x64
 800a610:	7852      	ldrb	r2, [r2, #1]
 800a612:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a616:	f1be 0f09 	cmp.w	lr, #9
 800a61a:	d939      	bls.n	800a690 <_strtod_l+0x340>
 800a61c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a61e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a622:	1a76      	subs	r6, r6, r1
 800a624:	2e08      	cmp	r6, #8
 800a626:	dc03      	bgt.n	800a630 <_strtod_l+0x2e0>
 800a628:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a62a:	4588      	cmp	r8, r1
 800a62c:	bfa8      	it	ge
 800a62e:	4688      	movge	r8, r1
 800a630:	f1bc 0f00 	cmp.w	ip, #0
 800a634:	d001      	beq.n	800a63a <_strtod_l+0x2ea>
 800a636:	f1c8 0800 	rsb	r8, r8, #0
 800a63a:	2d00      	cmp	r5, #0
 800a63c:	d14e      	bne.n	800a6dc <_strtod_l+0x38c>
 800a63e:	9908      	ldr	r1, [sp, #32]
 800a640:	4308      	orrs	r0, r1
 800a642:	f47f aebe 	bne.w	800a3c2 <_strtod_l+0x72>
 800a646:	2b00      	cmp	r3, #0
 800a648:	f47f aed4 	bne.w	800a3f4 <_strtod_l+0xa4>
 800a64c:	2a69      	cmp	r2, #105	@ 0x69
 800a64e:	d028      	beq.n	800a6a2 <_strtod_l+0x352>
 800a650:	dc25      	bgt.n	800a69e <_strtod_l+0x34e>
 800a652:	2a49      	cmp	r2, #73	@ 0x49
 800a654:	d025      	beq.n	800a6a2 <_strtod_l+0x352>
 800a656:	2a4e      	cmp	r2, #78	@ 0x4e
 800a658:	f47f aecc 	bne.w	800a3f4 <_strtod_l+0xa4>
 800a65c:	4999      	ldr	r1, [pc, #612]	@ (800a8c4 <_strtod_l+0x574>)
 800a65e:	a819      	add	r0, sp, #100	@ 0x64
 800a660:	f001 f9dc 	bl	800ba1c <__match>
 800a664:	2800      	cmp	r0, #0
 800a666:	f43f aec5 	beq.w	800a3f4 <_strtod_l+0xa4>
 800a66a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	2b28      	cmp	r3, #40	@ 0x28
 800a670:	d12e      	bne.n	800a6d0 <_strtod_l+0x380>
 800a672:	4995      	ldr	r1, [pc, #596]	@ (800a8c8 <_strtod_l+0x578>)
 800a674:	aa1c      	add	r2, sp, #112	@ 0x70
 800a676:	a819      	add	r0, sp, #100	@ 0x64
 800a678:	f001 f9e4 	bl	800ba44 <__hexnan>
 800a67c:	2805      	cmp	r0, #5
 800a67e:	d127      	bne.n	800a6d0 <_strtod_l+0x380>
 800a680:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a682:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a686:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a68a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a68e:	e698      	b.n	800a3c2 <_strtod_l+0x72>
 800a690:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a692:	fb08 2101 	mla	r1, r8, r1, r2
 800a696:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a69a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a69c:	e7b5      	b.n	800a60a <_strtod_l+0x2ba>
 800a69e:	2a6e      	cmp	r2, #110	@ 0x6e
 800a6a0:	e7da      	b.n	800a658 <_strtod_l+0x308>
 800a6a2:	498a      	ldr	r1, [pc, #552]	@ (800a8cc <_strtod_l+0x57c>)
 800a6a4:	a819      	add	r0, sp, #100	@ 0x64
 800a6a6:	f001 f9b9 	bl	800ba1c <__match>
 800a6aa:	2800      	cmp	r0, #0
 800a6ac:	f43f aea2 	beq.w	800a3f4 <_strtod_l+0xa4>
 800a6b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a6b2:	4987      	ldr	r1, [pc, #540]	@ (800a8d0 <_strtod_l+0x580>)
 800a6b4:	3b01      	subs	r3, #1
 800a6b6:	a819      	add	r0, sp, #100	@ 0x64
 800a6b8:	9319      	str	r3, [sp, #100]	@ 0x64
 800a6ba:	f001 f9af 	bl	800ba1c <__match>
 800a6be:	b910      	cbnz	r0, 800a6c6 <_strtod_l+0x376>
 800a6c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	9319      	str	r3, [sp, #100]	@ 0x64
 800a6c6:	f04f 0a00 	mov.w	sl, #0
 800a6ca:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800a8d4 <_strtod_l+0x584>
 800a6ce:	e678      	b.n	800a3c2 <_strtod_l+0x72>
 800a6d0:	4881      	ldr	r0, [pc, #516]	@ (800a8d8 <_strtod_l+0x588>)
 800a6d2:	f000 fee1 	bl	800b498 <nan>
 800a6d6:	4682      	mov	sl, r0
 800a6d8:	468b      	mov	fp, r1
 800a6da:	e672      	b.n	800a3c2 <_strtod_l+0x72>
 800a6dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6de:	f1b9 0f00 	cmp.w	r9, #0
 800a6e2:	bf08      	it	eq
 800a6e4:	46a9      	moveq	r9, r5
 800a6e6:	eba8 0303 	sub.w	r3, r8, r3
 800a6ea:	2d10      	cmp	r5, #16
 800a6ec:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a6ee:	462c      	mov	r4, r5
 800a6f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6f2:	bfa8      	it	ge
 800a6f4:	2410      	movge	r4, #16
 800a6f6:	f7f5 fe75 	bl	80003e4 <__aeabi_ui2d>
 800a6fa:	2d09      	cmp	r5, #9
 800a6fc:	4682      	mov	sl, r0
 800a6fe:	468b      	mov	fp, r1
 800a700:	dc11      	bgt.n	800a726 <_strtod_l+0x3d6>
 800a702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a704:	2b00      	cmp	r3, #0
 800a706:	f43f ae5c 	beq.w	800a3c2 <_strtod_l+0x72>
 800a70a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a70c:	dd76      	ble.n	800a7fc <_strtod_l+0x4ac>
 800a70e:	2b16      	cmp	r3, #22
 800a710:	dc5d      	bgt.n	800a7ce <_strtod_l+0x47e>
 800a712:	4972      	ldr	r1, [pc, #456]	@ (800a8dc <_strtod_l+0x58c>)
 800a714:	4652      	mov	r2, sl
 800a716:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a71a:	465b      	mov	r3, fp
 800a71c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a720:	f7f5 feda 	bl	80004d8 <__aeabi_dmul>
 800a724:	e7d7      	b.n	800a6d6 <_strtod_l+0x386>
 800a726:	4b6d      	ldr	r3, [pc, #436]	@ (800a8dc <_strtod_l+0x58c>)
 800a728:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a72c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a730:	f7f5 fed2 	bl	80004d8 <__aeabi_dmul>
 800a734:	4682      	mov	sl, r0
 800a736:	4638      	mov	r0, r7
 800a738:	468b      	mov	fp, r1
 800a73a:	f7f5 fe53 	bl	80003e4 <__aeabi_ui2d>
 800a73e:	4602      	mov	r2, r0
 800a740:	460b      	mov	r3, r1
 800a742:	4650      	mov	r0, sl
 800a744:	4659      	mov	r1, fp
 800a746:	f7f5 fd11 	bl	800016c <__adddf3>
 800a74a:	2d0f      	cmp	r5, #15
 800a74c:	4682      	mov	sl, r0
 800a74e:	468b      	mov	fp, r1
 800a750:	ddd7      	ble.n	800a702 <_strtod_l+0x3b2>
 800a752:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a754:	1b2c      	subs	r4, r5, r4
 800a756:	441c      	add	r4, r3
 800a758:	2c00      	cmp	r4, #0
 800a75a:	f340 8093 	ble.w	800a884 <_strtod_l+0x534>
 800a75e:	f014 030f 	ands.w	r3, r4, #15
 800a762:	d00a      	beq.n	800a77a <_strtod_l+0x42a>
 800a764:	495d      	ldr	r1, [pc, #372]	@ (800a8dc <_strtod_l+0x58c>)
 800a766:	4652      	mov	r2, sl
 800a768:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a76c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a770:	465b      	mov	r3, fp
 800a772:	f7f5 feb1 	bl	80004d8 <__aeabi_dmul>
 800a776:	4682      	mov	sl, r0
 800a778:	468b      	mov	fp, r1
 800a77a:	f034 040f 	bics.w	r4, r4, #15
 800a77e:	d073      	beq.n	800a868 <_strtod_l+0x518>
 800a780:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a784:	dd49      	ble.n	800a81a <_strtod_l+0x4ca>
 800a786:	2400      	movs	r4, #0
 800a788:	46a0      	mov	r8, r4
 800a78a:	46a1      	mov	r9, r4
 800a78c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a78e:	2322      	movs	r3, #34	@ 0x22
 800a790:	f04f 0a00 	mov.w	sl, #0
 800a794:	9a05      	ldr	r2, [sp, #20]
 800a796:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800a8d4 <_strtod_l+0x584>
 800a79a:	6013      	str	r3, [r2, #0]
 800a79c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	f43f ae0f 	beq.w	800a3c2 <_strtod_l+0x72>
 800a7a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a7a6:	9805      	ldr	r0, [sp, #20]
 800a7a8:	f7ff f950 	bl	8009a4c <_Bfree>
 800a7ac:	4649      	mov	r1, r9
 800a7ae:	9805      	ldr	r0, [sp, #20]
 800a7b0:	f7ff f94c 	bl	8009a4c <_Bfree>
 800a7b4:	4641      	mov	r1, r8
 800a7b6:	9805      	ldr	r0, [sp, #20]
 800a7b8:	f7ff f948 	bl	8009a4c <_Bfree>
 800a7bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a7be:	9805      	ldr	r0, [sp, #20]
 800a7c0:	f7ff f944 	bl	8009a4c <_Bfree>
 800a7c4:	4621      	mov	r1, r4
 800a7c6:	9805      	ldr	r0, [sp, #20]
 800a7c8:	f7ff f940 	bl	8009a4c <_Bfree>
 800a7cc:	e5f9      	b.n	800a3c2 <_strtod_l+0x72>
 800a7ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7d0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	dbbc      	blt.n	800a752 <_strtod_l+0x402>
 800a7d8:	4c40      	ldr	r4, [pc, #256]	@ (800a8dc <_strtod_l+0x58c>)
 800a7da:	f1c5 050f 	rsb	r5, r5, #15
 800a7de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a7e2:	4652      	mov	r2, sl
 800a7e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7e8:	465b      	mov	r3, fp
 800a7ea:	f7f5 fe75 	bl	80004d8 <__aeabi_dmul>
 800a7ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7f0:	1b5d      	subs	r5, r3, r5
 800a7f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a7f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a7fa:	e791      	b.n	800a720 <_strtod_l+0x3d0>
 800a7fc:	3316      	adds	r3, #22
 800a7fe:	dba8      	blt.n	800a752 <_strtod_l+0x402>
 800a800:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a802:	4650      	mov	r0, sl
 800a804:	eba3 0808 	sub.w	r8, r3, r8
 800a808:	4b34      	ldr	r3, [pc, #208]	@ (800a8dc <_strtod_l+0x58c>)
 800a80a:	4659      	mov	r1, fp
 800a80c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a810:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a814:	f7f5 ff8a 	bl	800072c <__aeabi_ddiv>
 800a818:	e75d      	b.n	800a6d6 <_strtod_l+0x386>
 800a81a:	2300      	movs	r3, #0
 800a81c:	4650      	mov	r0, sl
 800a81e:	4659      	mov	r1, fp
 800a820:	461e      	mov	r6, r3
 800a822:	4f2f      	ldr	r7, [pc, #188]	@ (800a8e0 <_strtod_l+0x590>)
 800a824:	1124      	asrs	r4, r4, #4
 800a826:	2c01      	cmp	r4, #1
 800a828:	dc21      	bgt.n	800a86e <_strtod_l+0x51e>
 800a82a:	b10b      	cbz	r3, 800a830 <_strtod_l+0x4e0>
 800a82c:	4682      	mov	sl, r0
 800a82e:	468b      	mov	fp, r1
 800a830:	492b      	ldr	r1, [pc, #172]	@ (800a8e0 <_strtod_l+0x590>)
 800a832:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a836:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a83a:	4652      	mov	r2, sl
 800a83c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a840:	465b      	mov	r3, fp
 800a842:	f7f5 fe49 	bl	80004d8 <__aeabi_dmul>
 800a846:	4b23      	ldr	r3, [pc, #140]	@ (800a8d4 <_strtod_l+0x584>)
 800a848:	460a      	mov	r2, r1
 800a84a:	400b      	ands	r3, r1
 800a84c:	4925      	ldr	r1, [pc, #148]	@ (800a8e4 <_strtod_l+0x594>)
 800a84e:	4682      	mov	sl, r0
 800a850:	428b      	cmp	r3, r1
 800a852:	d898      	bhi.n	800a786 <_strtod_l+0x436>
 800a854:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a858:	428b      	cmp	r3, r1
 800a85a:	bf86      	itte	hi
 800a85c:	f04f 3aff 	movhi.w	sl, #4294967295
 800a860:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 800a8e8 <_strtod_l+0x598>
 800a864:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a868:	2300      	movs	r3, #0
 800a86a:	9308      	str	r3, [sp, #32]
 800a86c:	e076      	b.n	800a95c <_strtod_l+0x60c>
 800a86e:	07e2      	lsls	r2, r4, #31
 800a870:	d504      	bpl.n	800a87c <_strtod_l+0x52c>
 800a872:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a876:	f7f5 fe2f 	bl	80004d8 <__aeabi_dmul>
 800a87a:	2301      	movs	r3, #1
 800a87c:	3601      	adds	r6, #1
 800a87e:	1064      	asrs	r4, r4, #1
 800a880:	3708      	adds	r7, #8
 800a882:	e7d0      	b.n	800a826 <_strtod_l+0x4d6>
 800a884:	d0f0      	beq.n	800a868 <_strtod_l+0x518>
 800a886:	4264      	negs	r4, r4
 800a888:	f014 020f 	ands.w	r2, r4, #15
 800a88c:	d00a      	beq.n	800a8a4 <_strtod_l+0x554>
 800a88e:	4b13      	ldr	r3, [pc, #76]	@ (800a8dc <_strtod_l+0x58c>)
 800a890:	4650      	mov	r0, sl
 800a892:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a896:	4659      	mov	r1, fp
 800a898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89c:	f7f5 ff46 	bl	800072c <__aeabi_ddiv>
 800a8a0:	4682      	mov	sl, r0
 800a8a2:	468b      	mov	fp, r1
 800a8a4:	1124      	asrs	r4, r4, #4
 800a8a6:	d0df      	beq.n	800a868 <_strtod_l+0x518>
 800a8a8:	2c1f      	cmp	r4, #31
 800a8aa:	dd1f      	ble.n	800a8ec <_strtod_l+0x59c>
 800a8ac:	2400      	movs	r4, #0
 800a8ae:	46a0      	mov	r8, r4
 800a8b0:	46a1      	mov	r9, r4
 800a8b2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a8b4:	2322      	movs	r3, #34	@ 0x22
 800a8b6:	9a05      	ldr	r2, [sp, #20]
 800a8b8:	f04f 0a00 	mov.w	sl, #0
 800a8bc:	f04f 0b00 	mov.w	fp, #0
 800a8c0:	6013      	str	r3, [r2, #0]
 800a8c2:	e76b      	b.n	800a79c <_strtod_l+0x44c>
 800a8c4:	0800d943 	.word	0x0800d943
 800a8c8:	0800dc08 	.word	0x0800dc08
 800a8cc:	0800d93b 	.word	0x0800d93b
 800a8d0:	0800d972 	.word	0x0800d972
 800a8d4:	7ff00000 	.word	0x7ff00000
 800a8d8:	0800daab 	.word	0x0800daab
 800a8dc:	0800db40 	.word	0x0800db40
 800a8e0:	0800db18 	.word	0x0800db18
 800a8e4:	7ca00000 	.word	0x7ca00000
 800a8e8:	7fefffff 	.word	0x7fefffff
 800a8ec:	f014 0310 	ands.w	r3, r4, #16
 800a8f0:	bf18      	it	ne
 800a8f2:	236a      	movne	r3, #106	@ 0x6a
 800a8f4:	4650      	mov	r0, sl
 800a8f6:	9308      	str	r3, [sp, #32]
 800a8f8:	4659      	mov	r1, fp
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	4e77      	ldr	r6, [pc, #476]	@ (800aadc <_strtod_l+0x78c>)
 800a8fe:	07e7      	lsls	r7, r4, #31
 800a900:	d504      	bpl.n	800a90c <_strtod_l+0x5bc>
 800a902:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a906:	f7f5 fde7 	bl	80004d8 <__aeabi_dmul>
 800a90a:	2301      	movs	r3, #1
 800a90c:	1064      	asrs	r4, r4, #1
 800a90e:	f106 0608 	add.w	r6, r6, #8
 800a912:	d1f4      	bne.n	800a8fe <_strtod_l+0x5ae>
 800a914:	b10b      	cbz	r3, 800a91a <_strtod_l+0x5ca>
 800a916:	4682      	mov	sl, r0
 800a918:	468b      	mov	fp, r1
 800a91a:	9b08      	ldr	r3, [sp, #32]
 800a91c:	b1b3      	cbz	r3, 800a94c <_strtod_l+0x5fc>
 800a91e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a922:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a926:	2b00      	cmp	r3, #0
 800a928:	4659      	mov	r1, fp
 800a92a:	dd0f      	ble.n	800a94c <_strtod_l+0x5fc>
 800a92c:	2b1f      	cmp	r3, #31
 800a92e:	dd58      	ble.n	800a9e2 <_strtod_l+0x692>
 800a930:	2b34      	cmp	r3, #52	@ 0x34
 800a932:	bfd8      	it	le
 800a934:	f04f 33ff 	movle.w	r3, #4294967295
 800a938:	f04f 0a00 	mov.w	sl, #0
 800a93c:	bfcf      	iteee	gt
 800a93e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a942:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a946:	4093      	lslle	r3, r2
 800a948:	ea03 0b01 	andle.w	fp, r3, r1
 800a94c:	2200      	movs	r2, #0
 800a94e:	2300      	movs	r3, #0
 800a950:	4650      	mov	r0, sl
 800a952:	4659      	mov	r1, fp
 800a954:	f7f6 f828 	bl	80009a8 <__aeabi_dcmpeq>
 800a958:	2800      	cmp	r0, #0
 800a95a:	d1a7      	bne.n	800a8ac <_strtod_l+0x55c>
 800a95c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a95e:	464a      	mov	r2, r9
 800a960:	9300      	str	r3, [sp, #0]
 800a962:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a964:	462b      	mov	r3, r5
 800a966:	9805      	ldr	r0, [sp, #20]
 800a968:	f7ff f8d8 	bl	8009b1c <__s2b>
 800a96c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a96e:	2800      	cmp	r0, #0
 800a970:	f43f af09 	beq.w	800a786 <_strtod_l+0x436>
 800a974:	2400      	movs	r4, #0
 800a976:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a978:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a97a:	2a00      	cmp	r2, #0
 800a97c:	eba3 0308 	sub.w	r3, r3, r8
 800a980:	bfa8      	it	ge
 800a982:	2300      	movge	r3, #0
 800a984:	46a0      	mov	r8, r4
 800a986:	9312      	str	r3, [sp, #72]	@ 0x48
 800a988:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a98c:	9316      	str	r3, [sp, #88]	@ 0x58
 800a98e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a990:	9805      	ldr	r0, [sp, #20]
 800a992:	6859      	ldr	r1, [r3, #4]
 800a994:	f7ff f81a 	bl	80099cc <_Balloc>
 800a998:	4681      	mov	r9, r0
 800a99a:	2800      	cmp	r0, #0
 800a99c:	f43f aef7 	beq.w	800a78e <_strtod_l+0x43e>
 800a9a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9a2:	300c      	adds	r0, #12
 800a9a4:	691a      	ldr	r2, [r3, #16]
 800a9a6:	f103 010c 	add.w	r1, r3, #12
 800a9aa:	3202      	adds	r2, #2
 800a9ac:	0092      	lsls	r2, r2, #2
 800a9ae:	f000 fd65 	bl	800b47c <memcpy>
 800a9b2:	ab1c      	add	r3, sp, #112	@ 0x70
 800a9b4:	9301      	str	r3, [sp, #4]
 800a9b6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a9b8:	9300      	str	r3, [sp, #0]
 800a9ba:	4652      	mov	r2, sl
 800a9bc:	465b      	mov	r3, fp
 800a9be:	9805      	ldr	r0, [sp, #20]
 800a9c0:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a9c4:	f7ff fbd6 	bl	800a174 <__d2b>
 800a9c8:	901a      	str	r0, [sp, #104]	@ 0x68
 800a9ca:	2800      	cmp	r0, #0
 800a9cc:	f43f aedf 	beq.w	800a78e <_strtod_l+0x43e>
 800a9d0:	2101      	movs	r1, #1
 800a9d2:	9805      	ldr	r0, [sp, #20]
 800a9d4:	f7ff f938 	bl	8009c48 <__i2b>
 800a9d8:	4680      	mov	r8, r0
 800a9da:	b948      	cbnz	r0, 800a9f0 <_strtod_l+0x6a0>
 800a9dc:	f04f 0800 	mov.w	r8, #0
 800a9e0:	e6d5      	b.n	800a78e <_strtod_l+0x43e>
 800a9e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a9e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ea:	ea03 0a0a 	and.w	sl, r3, sl
 800a9ee:	e7ad      	b.n	800a94c <_strtod_l+0x5fc>
 800a9f0:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a9f2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a9f4:	2d00      	cmp	r5, #0
 800a9f6:	bfab      	itete	ge
 800a9f8:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a9fa:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a9fc:	18ef      	addge	r7, r5, r3
 800a9fe:	1b5e      	sublt	r6, r3, r5
 800aa00:	9b08      	ldr	r3, [sp, #32]
 800aa02:	bfa8      	it	ge
 800aa04:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800aa06:	eba5 0503 	sub.w	r5, r5, r3
 800aa0a:	4415      	add	r5, r2
 800aa0c:	4b34      	ldr	r3, [pc, #208]	@ (800aae0 <_strtod_l+0x790>)
 800aa0e:	f105 35ff 	add.w	r5, r5, #4294967295
 800aa12:	bfb8      	it	lt
 800aa14:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800aa16:	429d      	cmp	r5, r3
 800aa18:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800aa1c:	da50      	bge.n	800aac0 <_strtod_l+0x770>
 800aa1e:	1b5b      	subs	r3, r3, r5
 800aa20:	2b1f      	cmp	r3, #31
 800aa22:	f04f 0101 	mov.w	r1, #1
 800aa26:	eba2 0203 	sub.w	r2, r2, r3
 800aa2a:	dc3d      	bgt.n	800aaa8 <_strtod_l+0x758>
 800aa2c:	fa01 f303 	lsl.w	r3, r1, r3
 800aa30:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aa32:	2300      	movs	r3, #0
 800aa34:	9310      	str	r3, [sp, #64]	@ 0x40
 800aa36:	18bd      	adds	r5, r7, r2
 800aa38:	9b08      	ldr	r3, [sp, #32]
 800aa3a:	42af      	cmp	r7, r5
 800aa3c:	4416      	add	r6, r2
 800aa3e:	441e      	add	r6, r3
 800aa40:	463b      	mov	r3, r7
 800aa42:	bfa8      	it	ge
 800aa44:	462b      	movge	r3, r5
 800aa46:	42b3      	cmp	r3, r6
 800aa48:	bfa8      	it	ge
 800aa4a:	4633      	movge	r3, r6
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	bfc2      	ittt	gt
 800aa50:	1aed      	subgt	r5, r5, r3
 800aa52:	1af6      	subgt	r6, r6, r3
 800aa54:	1aff      	subgt	r7, r7, r3
 800aa56:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	dd16      	ble.n	800aa8a <_strtod_l+0x73a>
 800aa5c:	4641      	mov	r1, r8
 800aa5e:	461a      	mov	r2, r3
 800aa60:	9805      	ldr	r0, [sp, #20]
 800aa62:	f7ff f9a9 	bl	8009db8 <__pow5mult>
 800aa66:	4680      	mov	r8, r0
 800aa68:	2800      	cmp	r0, #0
 800aa6a:	d0b7      	beq.n	800a9dc <_strtod_l+0x68c>
 800aa6c:	4601      	mov	r1, r0
 800aa6e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800aa70:	9805      	ldr	r0, [sp, #20]
 800aa72:	f7ff f8ff 	bl	8009c74 <__multiply>
 800aa76:	900a      	str	r0, [sp, #40]	@ 0x28
 800aa78:	2800      	cmp	r0, #0
 800aa7a:	f43f ae88 	beq.w	800a78e <_strtod_l+0x43e>
 800aa7e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa80:	9805      	ldr	r0, [sp, #20]
 800aa82:	f7fe ffe3 	bl	8009a4c <_Bfree>
 800aa86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa88:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa8a:	2d00      	cmp	r5, #0
 800aa8c:	dc1d      	bgt.n	800aaca <_strtod_l+0x77a>
 800aa8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	dd27      	ble.n	800aae4 <_strtod_l+0x794>
 800aa94:	4649      	mov	r1, r9
 800aa96:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800aa98:	9805      	ldr	r0, [sp, #20]
 800aa9a:	f7ff f98d 	bl	8009db8 <__pow5mult>
 800aa9e:	4681      	mov	r9, r0
 800aaa0:	bb00      	cbnz	r0, 800aae4 <_strtod_l+0x794>
 800aaa2:	f04f 0900 	mov.w	r9, #0
 800aaa6:	e672      	b.n	800a78e <_strtod_l+0x43e>
 800aaa8:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800aaac:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800aab0:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800aab4:	35e2      	adds	r5, #226	@ 0xe2
 800aab6:	fa01 f305 	lsl.w	r3, r1, r5
 800aaba:	9310      	str	r3, [sp, #64]	@ 0x40
 800aabc:	9113      	str	r1, [sp, #76]	@ 0x4c
 800aabe:	e7ba      	b.n	800aa36 <_strtod_l+0x6e6>
 800aac0:	2300      	movs	r3, #0
 800aac2:	9310      	str	r3, [sp, #64]	@ 0x40
 800aac4:	2301      	movs	r3, #1
 800aac6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aac8:	e7b5      	b.n	800aa36 <_strtod_l+0x6e6>
 800aaca:	462a      	mov	r2, r5
 800aacc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aace:	9805      	ldr	r0, [sp, #20]
 800aad0:	f7ff f9cc 	bl	8009e6c <__lshift>
 800aad4:	901a      	str	r0, [sp, #104]	@ 0x68
 800aad6:	2800      	cmp	r0, #0
 800aad8:	d1d9      	bne.n	800aa8e <_strtod_l+0x73e>
 800aada:	e658      	b.n	800a78e <_strtod_l+0x43e>
 800aadc:	0800dc30 	.word	0x0800dc30
 800aae0:	fffffc02 	.word	0xfffffc02
 800aae4:	2e00      	cmp	r6, #0
 800aae6:	dd07      	ble.n	800aaf8 <_strtod_l+0x7a8>
 800aae8:	4649      	mov	r1, r9
 800aaea:	4632      	mov	r2, r6
 800aaec:	9805      	ldr	r0, [sp, #20]
 800aaee:	f7ff f9bd 	bl	8009e6c <__lshift>
 800aaf2:	4681      	mov	r9, r0
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	d0d4      	beq.n	800aaa2 <_strtod_l+0x752>
 800aaf8:	2f00      	cmp	r7, #0
 800aafa:	dd08      	ble.n	800ab0e <_strtod_l+0x7be>
 800aafc:	4641      	mov	r1, r8
 800aafe:	463a      	mov	r2, r7
 800ab00:	9805      	ldr	r0, [sp, #20]
 800ab02:	f7ff f9b3 	bl	8009e6c <__lshift>
 800ab06:	4680      	mov	r8, r0
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	f43f ae40 	beq.w	800a78e <_strtod_l+0x43e>
 800ab0e:	464a      	mov	r2, r9
 800ab10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ab12:	9805      	ldr	r0, [sp, #20]
 800ab14:	f7ff fa32 	bl	8009f7c <__mdiff>
 800ab18:	4604      	mov	r4, r0
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	f43f ae37 	beq.w	800a78e <_strtod_l+0x43e>
 800ab20:	68c3      	ldr	r3, [r0, #12]
 800ab22:	4641      	mov	r1, r8
 800ab24:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ab26:	2300      	movs	r3, #0
 800ab28:	60c3      	str	r3, [r0, #12]
 800ab2a:	f7ff fa0b 	bl	8009f44 <__mcmp>
 800ab2e:	2800      	cmp	r0, #0
 800ab30:	da3d      	bge.n	800abae <_strtod_l+0x85e>
 800ab32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab34:	ea53 030a 	orrs.w	r3, r3, sl
 800ab38:	d163      	bne.n	800ac02 <_strtod_l+0x8b2>
 800ab3a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d15f      	bne.n	800ac02 <_strtod_l+0x8b2>
 800ab42:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab46:	0d1b      	lsrs	r3, r3, #20
 800ab48:	051b      	lsls	r3, r3, #20
 800ab4a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ab4e:	d958      	bls.n	800ac02 <_strtod_l+0x8b2>
 800ab50:	6963      	ldr	r3, [r4, #20]
 800ab52:	b913      	cbnz	r3, 800ab5a <_strtod_l+0x80a>
 800ab54:	6923      	ldr	r3, [r4, #16]
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	dd53      	ble.n	800ac02 <_strtod_l+0x8b2>
 800ab5a:	4621      	mov	r1, r4
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	9805      	ldr	r0, [sp, #20]
 800ab60:	f7ff f984 	bl	8009e6c <__lshift>
 800ab64:	4641      	mov	r1, r8
 800ab66:	4604      	mov	r4, r0
 800ab68:	f7ff f9ec 	bl	8009f44 <__mcmp>
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	dd48      	ble.n	800ac02 <_strtod_l+0x8b2>
 800ab70:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab74:	9a08      	ldr	r2, [sp, #32]
 800ab76:	0d1b      	lsrs	r3, r3, #20
 800ab78:	051b      	lsls	r3, r3, #20
 800ab7a:	2a00      	cmp	r2, #0
 800ab7c:	d062      	beq.n	800ac44 <_strtod_l+0x8f4>
 800ab7e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ab82:	d85f      	bhi.n	800ac44 <_strtod_l+0x8f4>
 800ab84:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ab88:	f67f ae94 	bls.w	800a8b4 <_strtod_l+0x564>
 800ab8c:	4650      	mov	r0, sl
 800ab8e:	4659      	mov	r1, fp
 800ab90:	4ba3      	ldr	r3, [pc, #652]	@ (800ae20 <_strtod_l+0xad0>)
 800ab92:	2200      	movs	r2, #0
 800ab94:	f7f5 fca0 	bl	80004d8 <__aeabi_dmul>
 800ab98:	4ba2      	ldr	r3, [pc, #648]	@ (800ae24 <_strtod_l+0xad4>)
 800ab9a:	4682      	mov	sl, r0
 800ab9c:	400b      	ands	r3, r1
 800ab9e:	468b      	mov	fp, r1
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	f47f adff 	bne.w	800a7a4 <_strtod_l+0x454>
 800aba6:	2322      	movs	r3, #34	@ 0x22
 800aba8:	9a05      	ldr	r2, [sp, #20]
 800abaa:	6013      	str	r3, [r2, #0]
 800abac:	e5fa      	b.n	800a7a4 <_strtod_l+0x454>
 800abae:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800abb2:	d165      	bne.n	800ac80 <_strtod_l+0x930>
 800abb4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800abb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800abba:	b35a      	cbz	r2, 800ac14 <_strtod_l+0x8c4>
 800abbc:	4a9a      	ldr	r2, [pc, #616]	@ (800ae28 <_strtod_l+0xad8>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d12b      	bne.n	800ac1a <_strtod_l+0x8ca>
 800abc2:	9b08      	ldr	r3, [sp, #32]
 800abc4:	4651      	mov	r1, sl
 800abc6:	b303      	cbz	r3, 800ac0a <_strtod_l+0x8ba>
 800abc8:	465a      	mov	r2, fp
 800abca:	4b96      	ldr	r3, [pc, #600]	@ (800ae24 <_strtod_l+0xad4>)
 800abcc:	4013      	ands	r3, r2
 800abce:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800abd2:	f04f 32ff 	mov.w	r2, #4294967295
 800abd6:	d81b      	bhi.n	800ac10 <_strtod_l+0x8c0>
 800abd8:	0d1b      	lsrs	r3, r3, #20
 800abda:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800abde:	fa02 f303 	lsl.w	r3, r2, r3
 800abe2:	4299      	cmp	r1, r3
 800abe4:	d119      	bne.n	800ac1a <_strtod_l+0x8ca>
 800abe6:	4b91      	ldr	r3, [pc, #580]	@ (800ae2c <_strtod_l+0xadc>)
 800abe8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800abea:	429a      	cmp	r2, r3
 800abec:	d102      	bne.n	800abf4 <_strtod_l+0x8a4>
 800abee:	3101      	adds	r1, #1
 800abf0:	f43f adcd 	beq.w	800a78e <_strtod_l+0x43e>
 800abf4:	f04f 0a00 	mov.w	sl, #0
 800abf8:	4b8a      	ldr	r3, [pc, #552]	@ (800ae24 <_strtod_l+0xad4>)
 800abfa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800abfc:	401a      	ands	r2, r3
 800abfe:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ac02:	9b08      	ldr	r3, [sp, #32]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d1c1      	bne.n	800ab8c <_strtod_l+0x83c>
 800ac08:	e5cc      	b.n	800a7a4 <_strtod_l+0x454>
 800ac0a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac0e:	e7e8      	b.n	800abe2 <_strtod_l+0x892>
 800ac10:	4613      	mov	r3, r2
 800ac12:	e7e6      	b.n	800abe2 <_strtod_l+0x892>
 800ac14:	ea53 030a 	orrs.w	r3, r3, sl
 800ac18:	d0aa      	beq.n	800ab70 <_strtod_l+0x820>
 800ac1a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ac1c:	b1db      	cbz	r3, 800ac56 <_strtod_l+0x906>
 800ac1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ac20:	4213      	tst	r3, r2
 800ac22:	d0ee      	beq.n	800ac02 <_strtod_l+0x8b2>
 800ac24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac26:	4650      	mov	r0, sl
 800ac28:	4659      	mov	r1, fp
 800ac2a:	9a08      	ldr	r2, [sp, #32]
 800ac2c:	b1bb      	cbz	r3, 800ac5e <_strtod_l+0x90e>
 800ac2e:	f7ff fb6d 	bl	800a30c <sulp>
 800ac32:	4602      	mov	r2, r0
 800ac34:	460b      	mov	r3, r1
 800ac36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac3a:	f7f5 fa97 	bl	800016c <__adddf3>
 800ac3e:	4682      	mov	sl, r0
 800ac40:	468b      	mov	fp, r1
 800ac42:	e7de      	b.n	800ac02 <_strtod_l+0x8b2>
 800ac44:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ac48:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ac4c:	f04f 3aff 	mov.w	sl, #4294967295
 800ac50:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ac54:	e7d5      	b.n	800ac02 <_strtod_l+0x8b2>
 800ac56:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ac58:	ea13 0f0a 	tst.w	r3, sl
 800ac5c:	e7e1      	b.n	800ac22 <_strtod_l+0x8d2>
 800ac5e:	f7ff fb55 	bl	800a30c <sulp>
 800ac62:	4602      	mov	r2, r0
 800ac64:	460b      	mov	r3, r1
 800ac66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac6a:	f7f5 fa7d 	bl	8000168 <__aeabi_dsub>
 800ac6e:	2200      	movs	r2, #0
 800ac70:	2300      	movs	r3, #0
 800ac72:	4682      	mov	sl, r0
 800ac74:	468b      	mov	fp, r1
 800ac76:	f7f5 fe97 	bl	80009a8 <__aeabi_dcmpeq>
 800ac7a:	2800      	cmp	r0, #0
 800ac7c:	d0c1      	beq.n	800ac02 <_strtod_l+0x8b2>
 800ac7e:	e619      	b.n	800a8b4 <_strtod_l+0x564>
 800ac80:	4641      	mov	r1, r8
 800ac82:	4620      	mov	r0, r4
 800ac84:	f7ff face 	bl	800a224 <__ratio>
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ac8e:	4606      	mov	r6, r0
 800ac90:	460f      	mov	r7, r1
 800ac92:	f7f5 fe9d 	bl	80009d0 <__aeabi_dcmple>
 800ac96:	2800      	cmp	r0, #0
 800ac98:	d06d      	beq.n	800ad76 <_strtod_l+0xa26>
 800ac9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d178      	bne.n	800ad92 <_strtod_l+0xa42>
 800aca0:	f1ba 0f00 	cmp.w	sl, #0
 800aca4:	d156      	bne.n	800ad54 <_strtod_l+0xa04>
 800aca6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aca8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acac:	2b00      	cmp	r3, #0
 800acae:	d158      	bne.n	800ad62 <_strtod_l+0xa12>
 800acb0:	2200      	movs	r2, #0
 800acb2:	4630      	mov	r0, r6
 800acb4:	4639      	mov	r1, r7
 800acb6:	4b5e      	ldr	r3, [pc, #376]	@ (800ae30 <_strtod_l+0xae0>)
 800acb8:	f7f5 fe80 	bl	80009bc <__aeabi_dcmplt>
 800acbc:	2800      	cmp	r0, #0
 800acbe:	d157      	bne.n	800ad70 <_strtod_l+0xa20>
 800acc0:	4630      	mov	r0, r6
 800acc2:	4639      	mov	r1, r7
 800acc4:	2200      	movs	r2, #0
 800acc6:	4b5b      	ldr	r3, [pc, #364]	@ (800ae34 <_strtod_l+0xae4>)
 800acc8:	f7f5 fc06 	bl	80004d8 <__aeabi_dmul>
 800accc:	4606      	mov	r6, r0
 800acce:	460f      	mov	r7, r1
 800acd0:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800acd4:	9606      	str	r6, [sp, #24]
 800acd6:	9307      	str	r3, [sp, #28]
 800acd8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800acdc:	4d51      	ldr	r5, [pc, #324]	@ (800ae24 <_strtod_l+0xad4>)
 800acde:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ace2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ace4:	401d      	ands	r5, r3
 800ace6:	4b54      	ldr	r3, [pc, #336]	@ (800ae38 <_strtod_l+0xae8>)
 800ace8:	429d      	cmp	r5, r3
 800acea:	f040 80ab 	bne.w	800ae44 <_strtod_l+0xaf4>
 800acee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acf0:	4650      	mov	r0, sl
 800acf2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800acf6:	4659      	mov	r1, fp
 800acf8:	f7ff f9d4 	bl	800a0a4 <__ulp>
 800acfc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad00:	f7f5 fbea 	bl	80004d8 <__aeabi_dmul>
 800ad04:	4652      	mov	r2, sl
 800ad06:	465b      	mov	r3, fp
 800ad08:	f7f5 fa30 	bl	800016c <__adddf3>
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	4945      	ldr	r1, [pc, #276]	@ (800ae24 <_strtod_l+0xad4>)
 800ad10:	4a4a      	ldr	r2, [pc, #296]	@ (800ae3c <_strtod_l+0xaec>)
 800ad12:	4019      	ands	r1, r3
 800ad14:	4291      	cmp	r1, r2
 800ad16:	4682      	mov	sl, r0
 800ad18:	d942      	bls.n	800ada0 <_strtod_l+0xa50>
 800ad1a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ad1c:	4b43      	ldr	r3, [pc, #268]	@ (800ae2c <_strtod_l+0xadc>)
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d103      	bne.n	800ad2a <_strtod_l+0x9da>
 800ad22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad24:	3301      	adds	r3, #1
 800ad26:	f43f ad32 	beq.w	800a78e <_strtod_l+0x43e>
 800ad2a:	f04f 3aff 	mov.w	sl, #4294967295
 800ad2e:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800ae2c <_strtod_l+0xadc>
 800ad32:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ad34:	9805      	ldr	r0, [sp, #20]
 800ad36:	f7fe fe89 	bl	8009a4c <_Bfree>
 800ad3a:	4649      	mov	r1, r9
 800ad3c:	9805      	ldr	r0, [sp, #20]
 800ad3e:	f7fe fe85 	bl	8009a4c <_Bfree>
 800ad42:	4641      	mov	r1, r8
 800ad44:	9805      	ldr	r0, [sp, #20]
 800ad46:	f7fe fe81 	bl	8009a4c <_Bfree>
 800ad4a:	4621      	mov	r1, r4
 800ad4c:	9805      	ldr	r0, [sp, #20]
 800ad4e:	f7fe fe7d 	bl	8009a4c <_Bfree>
 800ad52:	e61c      	b.n	800a98e <_strtod_l+0x63e>
 800ad54:	f1ba 0f01 	cmp.w	sl, #1
 800ad58:	d103      	bne.n	800ad62 <_strtod_l+0xa12>
 800ad5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	f43f ada9 	beq.w	800a8b4 <_strtod_l+0x564>
 800ad62:	2200      	movs	r2, #0
 800ad64:	4b36      	ldr	r3, [pc, #216]	@ (800ae40 <_strtod_l+0xaf0>)
 800ad66:	2600      	movs	r6, #0
 800ad68:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ad6c:	4f30      	ldr	r7, [pc, #192]	@ (800ae30 <_strtod_l+0xae0>)
 800ad6e:	e7b3      	b.n	800acd8 <_strtod_l+0x988>
 800ad70:	2600      	movs	r6, #0
 800ad72:	4f30      	ldr	r7, [pc, #192]	@ (800ae34 <_strtod_l+0xae4>)
 800ad74:	e7ac      	b.n	800acd0 <_strtod_l+0x980>
 800ad76:	4630      	mov	r0, r6
 800ad78:	4639      	mov	r1, r7
 800ad7a:	4b2e      	ldr	r3, [pc, #184]	@ (800ae34 <_strtod_l+0xae4>)
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f7f5 fbab 	bl	80004d8 <__aeabi_dmul>
 800ad82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad84:	4606      	mov	r6, r0
 800ad86:	460f      	mov	r7, r1
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d0a1      	beq.n	800acd0 <_strtod_l+0x980>
 800ad8c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ad90:	e7a2      	b.n	800acd8 <_strtod_l+0x988>
 800ad92:	2200      	movs	r2, #0
 800ad94:	4b26      	ldr	r3, [pc, #152]	@ (800ae30 <_strtod_l+0xae0>)
 800ad96:	4616      	mov	r6, r2
 800ad98:	461f      	mov	r7, r3
 800ad9a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ad9e:	e79b      	b.n	800acd8 <_strtod_l+0x988>
 800ada0:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ada4:	9b08      	ldr	r3, [sp, #32]
 800ada6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d1c1      	bne.n	800ad32 <_strtod_l+0x9e2>
 800adae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800adb2:	0d1b      	lsrs	r3, r3, #20
 800adb4:	051b      	lsls	r3, r3, #20
 800adb6:	429d      	cmp	r5, r3
 800adb8:	d1bb      	bne.n	800ad32 <_strtod_l+0x9e2>
 800adba:	4630      	mov	r0, r6
 800adbc:	4639      	mov	r1, r7
 800adbe:	f7f6 fa3d 	bl	800123c <__aeabi_d2lz>
 800adc2:	f7f5 fb5b 	bl	800047c <__aeabi_l2d>
 800adc6:	4602      	mov	r2, r0
 800adc8:	460b      	mov	r3, r1
 800adca:	4630      	mov	r0, r6
 800adcc:	4639      	mov	r1, r7
 800adce:	f7f5 f9cb 	bl	8000168 <__aeabi_dsub>
 800add2:	460b      	mov	r3, r1
 800add4:	4602      	mov	r2, r0
 800add6:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800adda:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800adde:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ade0:	ea46 060a 	orr.w	r6, r6, sl
 800ade4:	431e      	orrs	r6, r3
 800ade6:	d06a      	beq.n	800aebe <_strtod_l+0xb6e>
 800ade8:	a309      	add	r3, pc, #36	@ (adr r3, 800ae10 <_strtod_l+0xac0>)
 800adea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adee:	f7f5 fde5 	bl	80009bc <__aeabi_dcmplt>
 800adf2:	2800      	cmp	r0, #0
 800adf4:	f47f acd6 	bne.w	800a7a4 <_strtod_l+0x454>
 800adf8:	a307      	add	r3, pc, #28	@ (adr r3, 800ae18 <_strtod_l+0xac8>)
 800adfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ae02:	f7f5 fdf9 	bl	80009f8 <__aeabi_dcmpgt>
 800ae06:	2800      	cmp	r0, #0
 800ae08:	d093      	beq.n	800ad32 <_strtod_l+0x9e2>
 800ae0a:	e4cb      	b.n	800a7a4 <_strtod_l+0x454>
 800ae0c:	f3af 8000 	nop.w
 800ae10:	94a03595 	.word	0x94a03595
 800ae14:	3fdfffff 	.word	0x3fdfffff
 800ae18:	35afe535 	.word	0x35afe535
 800ae1c:	3fe00000 	.word	0x3fe00000
 800ae20:	39500000 	.word	0x39500000
 800ae24:	7ff00000 	.word	0x7ff00000
 800ae28:	000fffff 	.word	0x000fffff
 800ae2c:	7fefffff 	.word	0x7fefffff
 800ae30:	3ff00000 	.word	0x3ff00000
 800ae34:	3fe00000 	.word	0x3fe00000
 800ae38:	7fe00000 	.word	0x7fe00000
 800ae3c:	7c9fffff 	.word	0x7c9fffff
 800ae40:	bff00000 	.word	0xbff00000
 800ae44:	9b08      	ldr	r3, [sp, #32]
 800ae46:	b323      	cbz	r3, 800ae92 <_strtod_l+0xb42>
 800ae48:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ae4c:	d821      	bhi.n	800ae92 <_strtod_l+0xb42>
 800ae4e:	a328      	add	r3, pc, #160	@ (adr r3, 800aef0 <_strtod_l+0xba0>)
 800ae50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae54:	4630      	mov	r0, r6
 800ae56:	4639      	mov	r1, r7
 800ae58:	f7f5 fdba 	bl	80009d0 <__aeabi_dcmple>
 800ae5c:	b1a0      	cbz	r0, 800ae88 <_strtod_l+0xb38>
 800ae5e:	4639      	mov	r1, r7
 800ae60:	4630      	mov	r0, r6
 800ae62:	f7f5 fe11 	bl	8000a88 <__aeabi_d2uiz>
 800ae66:	2801      	cmp	r0, #1
 800ae68:	bf38      	it	cc
 800ae6a:	2001      	movcc	r0, #1
 800ae6c:	f7f5 faba 	bl	80003e4 <__aeabi_ui2d>
 800ae70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae72:	4606      	mov	r6, r0
 800ae74:	460f      	mov	r7, r1
 800ae76:	b9fb      	cbnz	r3, 800aeb8 <_strtod_l+0xb68>
 800ae78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ae7c:	9014      	str	r0, [sp, #80]	@ 0x50
 800ae7e:	9315      	str	r3, [sp, #84]	@ 0x54
 800ae80:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ae84:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ae88:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ae8a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ae8e:	1b5b      	subs	r3, r3, r5
 800ae90:	9311      	str	r3, [sp, #68]	@ 0x44
 800ae92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ae96:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ae9a:	f7ff f903 	bl	800a0a4 <__ulp>
 800ae9e:	4602      	mov	r2, r0
 800aea0:	460b      	mov	r3, r1
 800aea2:	4650      	mov	r0, sl
 800aea4:	4659      	mov	r1, fp
 800aea6:	f7f5 fb17 	bl	80004d8 <__aeabi_dmul>
 800aeaa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800aeae:	f7f5 f95d 	bl	800016c <__adddf3>
 800aeb2:	4682      	mov	sl, r0
 800aeb4:	468b      	mov	fp, r1
 800aeb6:	e775      	b.n	800ada4 <_strtod_l+0xa54>
 800aeb8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800aebc:	e7e0      	b.n	800ae80 <_strtod_l+0xb30>
 800aebe:	a30e      	add	r3, pc, #56	@ (adr r3, 800aef8 <_strtod_l+0xba8>)
 800aec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec4:	f7f5 fd7a 	bl	80009bc <__aeabi_dcmplt>
 800aec8:	e79d      	b.n	800ae06 <_strtod_l+0xab6>
 800aeca:	2300      	movs	r3, #0
 800aecc:	930e      	str	r3, [sp, #56]	@ 0x38
 800aece:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aed0:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800aed2:	6013      	str	r3, [r2, #0]
 800aed4:	f7ff ba79 	b.w	800a3ca <_strtod_l+0x7a>
 800aed8:	2a65      	cmp	r2, #101	@ 0x65
 800aeda:	f43f ab72 	beq.w	800a5c2 <_strtod_l+0x272>
 800aede:	2a45      	cmp	r2, #69	@ 0x45
 800aee0:	f43f ab6f 	beq.w	800a5c2 <_strtod_l+0x272>
 800aee4:	2301      	movs	r3, #1
 800aee6:	f7ff bbaa 	b.w	800a63e <_strtod_l+0x2ee>
 800aeea:	bf00      	nop
 800aeec:	f3af 8000 	nop.w
 800aef0:	ffc00000 	.word	0xffc00000
 800aef4:	41dfffff 	.word	0x41dfffff
 800aef8:	94a03595 	.word	0x94a03595
 800aefc:	3fcfffff 	.word	0x3fcfffff

0800af00 <_strtod_r>:
 800af00:	4b01      	ldr	r3, [pc, #4]	@ (800af08 <_strtod_r+0x8>)
 800af02:	f7ff ba25 	b.w	800a350 <_strtod_l>
 800af06:	bf00      	nop
 800af08:	200000a0 	.word	0x200000a0

0800af0c <_strtol_l.isra.0>:
 800af0c:	2b24      	cmp	r3, #36	@ 0x24
 800af0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af12:	4686      	mov	lr, r0
 800af14:	4690      	mov	r8, r2
 800af16:	d801      	bhi.n	800af1c <_strtol_l.isra.0+0x10>
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d106      	bne.n	800af2a <_strtol_l.isra.0+0x1e>
 800af1c:	f7fd fdba 	bl	8008a94 <__errno>
 800af20:	2316      	movs	r3, #22
 800af22:	6003      	str	r3, [r0, #0]
 800af24:	2000      	movs	r0, #0
 800af26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af2a:	460d      	mov	r5, r1
 800af2c:	4833      	ldr	r0, [pc, #204]	@ (800affc <_strtol_l.isra.0+0xf0>)
 800af2e:	462a      	mov	r2, r5
 800af30:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af34:	5d06      	ldrb	r6, [r0, r4]
 800af36:	f016 0608 	ands.w	r6, r6, #8
 800af3a:	d1f8      	bne.n	800af2e <_strtol_l.isra.0+0x22>
 800af3c:	2c2d      	cmp	r4, #45	@ 0x2d
 800af3e:	d110      	bne.n	800af62 <_strtol_l.isra.0+0x56>
 800af40:	2601      	movs	r6, #1
 800af42:	782c      	ldrb	r4, [r5, #0]
 800af44:	1c95      	adds	r5, r2, #2
 800af46:	f033 0210 	bics.w	r2, r3, #16
 800af4a:	d115      	bne.n	800af78 <_strtol_l.isra.0+0x6c>
 800af4c:	2c30      	cmp	r4, #48	@ 0x30
 800af4e:	d10d      	bne.n	800af6c <_strtol_l.isra.0+0x60>
 800af50:	782a      	ldrb	r2, [r5, #0]
 800af52:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800af56:	2a58      	cmp	r2, #88	@ 0x58
 800af58:	d108      	bne.n	800af6c <_strtol_l.isra.0+0x60>
 800af5a:	786c      	ldrb	r4, [r5, #1]
 800af5c:	3502      	adds	r5, #2
 800af5e:	2310      	movs	r3, #16
 800af60:	e00a      	b.n	800af78 <_strtol_l.isra.0+0x6c>
 800af62:	2c2b      	cmp	r4, #43	@ 0x2b
 800af64:	bf04      	itt	eq
 800af66:	782c      	ldrbeq	r4, [r5, #0]
 800af68:	1c95      	addeq	r5, r2, #2
 800af6a:	e7ec      	b.n	800af46 <_strtol_l.isra.0+0x3a>
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d1f6      	bne.n	800af5e <_strtol_l.isra.0+0x52>
 800af70:	2c30      	cmp	r4, #48	@ 0x30
 800af72:	bf14      	ite	ne
 800af74:	230a      	movne	r3, #10
 800af76:	2308      	moveq	r3, #8
 800af78:	2200      	movs	r2, #0
 800af7a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800af7e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800af82:	fbbc f9f3 	udiv	r9, ip, r3
 800af86:	4610      	mov	r0, r2
 800af88:	fb03 ca19 	mls	sl, r3, r9, ip
 800af8c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800af90:	2f09      	cmp	r7, #9
 800af92:	d80f      	bhi.n	800afb4 <_strtol_l.isra.0+0xa8>
 800af94:	463c      	mov	r4, r7
 800af96:	42a3      	cmp	r3, r4
 800af98:	dd1b      	ble.n	800afd2 <_strtol_l.isra.0+0xc6>
 800af9a:	1c57      	adds	r7, r2, #1
 800af9c:	d007      	beq.n	800afae <_strtol_l.isra.0+0xa2>
 800af9e:	4581      	cmp	r9, r0
 800afa0:	d314      	bcc.n	800afcc <_strtol_l.isra.0+0xc0>
 800afa2:	d101      	bne.n	800afa8 <_strtol_l.isra.0+0x9c>
 800afa4:	45a2      	cmp	sl, r4
 800afa6:	db11      	blt.n	800afcc <_strtol_l.isra.0+0xc0>
 800afa8:	2201      	movs	r2, #1
 800afaa:	fb00 4003 	mla	r0, r0, r3, r4
 800afae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800afb2:	e7eb      	b.n	800af8c <_strtol_l.isra.0+0x80>
 800afb4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800afb8:	2f19      	cmp	r7, #25
 800afba:	d801      	bhi.n	800afc0 <_strtol_l.isra.0+0xb4>
 800afbc:	3c37      	subs	r4, #55	@ 0x37
 800afbe:	e7ea      	b.n	800af96 <_strtol_l.isra.0+0x8a>
 800afc0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800afc4:	2f19      	cmp	r7, #25
 800afc6:	d804      	bhi.n	800afd2 <_strtol_l.isra.0+0xc6>
 800afc8:	3c57      	subs	r4, #87	@ 0x57
 800afca:	e7e4      	b.n	800af96 <_strtol_l.isra.0+0x8a>
 800afcc:	f04f 32ff 	mov.w	r2, #4294967295
 800afd0:	e7ed      	b.n	800afae <_strtol_l.isra.0+0xa2>
 800afd2:	1c53      	adds	r3, r2, #1
 800afd4:	d108      	bne.n	800afe8 <_strtol_l.isra.0+0xdc>
 800afd6:	2322      	movs	r3, #34	@ 0x22
 800afd8:	4660      	mov	r0, ip
 800afda:	f8ce 3000 	str.w	r3, [lr]
 800afde:	f1b8 0f00 	cmp.w	r8, #0
 800afe2:	d0a0      	beq.n	800af26 <_strtol_l.isra.0+0x1a>
 800afe4:	1e69      	subs	r1, r5, #1
 800afe6:	e006      	b.n	800aff6 <_strtol_l.isra.0+0xea>
 800afe8:	b106      	cbz	r6, 800afec <_strtol_l.isra.0+0xe0>
 800afea:	4240      	negs	r0, r0
 800afec:	f1b8 0f00 	cmp.w	r8, #0
 800aff0:	d099      	beq.n	800af26 <_strtol_l.isra.0+0x1a>
 800aff2:	2a00      	cmp	r2, #0
 800aff4:	d1f6      	bne.n	800afe4 <_strtol_l.isra.0+0xd8>
 800aff6:	f8c8 1000 	str.w	r1, [r8]
 800affa:	e794      	b.n	800af26 <_strtol_l.isra.0+0x1a>
 800affc:	0800dc59 	.word	0x0800dc59

0800b000 <_strtol_r>:
 800b000:	f7ff bf84 	b.w	800af0c <_strtol_l.isra.0>

0800b004 <__ssputs_r>:
 800b004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b008:	461f      	mov	r7, r3
 800b00a:	688e      	ldr	r6, [r1, #8]
 800b00c:	4682      	mov	sl, r0
 800b00e:	42be      	cmp	r6, r7
 800b010:	460c      	mov	r4, r1
 800b012:	4690      	mov	r8, r2
 800b014:	680b      	ldr	r3, [r1, #0]
 800b016:	d82d      	bhi.n	800b074 <__ssputs_r+0x70>
 800b018:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b01c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b020:	d026      	beq.n	800b070 <__ssputs_r+0x6c>
 800b022:	6965      	ldr	r5, [r4, #20]
 800b024:	6909      	ldr	r1, [r1, #16]
 800b026:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b02a:	eba3 0901 	sub.w	r9, r3, r1
 800b02e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b032:	1c7b      	adds	r3, r7, #1
 800b034:	444b      	add	r3, r9
 800b036:	106d      	asrs	r5, r5, #1
 800b038:	429d      	cmp	r5, r3
 800b03a:	bf38      	it	cc
 800b03c:	461d      	movcc	r5, r3
 800b03e:	0553      	lsls	r3, r2, #21
 800b040:	d527      	bpl.n	800b092 <__ssputs_r+0x8e>
 800b042:	4629      	mov	r1, r5
 800b044:	f7fe fc36 	bl	80098b4 <_malloc_r>
 800b048:	4606      	mov	r6, r0
 800b04a:	b360      	cbz	r0, 800b0a6 <__ssputs_r+0xa2>
 800b04c:	464a      	mov	r2, r9
 800b04e:	6921      	ldr	r1, [r4, #16]
 800b050:	f000 fa14 	bl	800b47c <memcpy>
 800b054:	89a3      	ldrh	r3, [r4, #12]
 800b056:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b05a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b05e:	81a3      	strh	r3, [r4, #12]
 800b060:	6126      	str	r6, [r4, #16]
 800b062:	444e      	add	r6, r9
 800b064:	6026      	str	r6, [r4, #0]
 800b066:	463e      	mov	r6, r7
 800b068:	6165      	str	r5, [r4, #20]
 800b06a:	eba5 0509 	sub.w	r5, r5, r9
 800b06e:	60a5      	str	r5, [r4, #8]
 800b070:	42be      	cmp	r6, r7
 800b072:	d900      	bls.n	800b076 <__ssputs_r+0x72>
 800b074:	463e      	mov	r6, r7
 800b076:	4632      	mov	r2, r6
 800b078:	4641      	mov	r1, r8
 800b07a:	6820      	ldr	r0, [r4, #0]
 800b07c:	f000 f9c2 	bl	800b404 <memmove>
 800b080:	2000      	movs	r0, #0
 800b082:	68a3      	ldr	r3, [r4, #8]
 800b084:	1b9b      	subs	r3, r3, r6
 800b086:	60a3      	str	r3, [r4, #8]
 800b088:	6823      	ldr	r3, [r4, #0]
 800b08a:	4433      	add	r3, r6
 800b08c:	6023      	str	r3, [r4, #0]
 800b08e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b092:	462a      	mov	r2, r5
 800b094:	f000 fd83 	bl	800bb9e <_realloc_r>
 800b098:	4606      	mov	r6, r0
 800b09a:	2800      	cmp	r0, #0
 800b09c:	d1e0      	bne.n	800b060 <__ssputs_r+0x5c>
 800b09e:	4650      	mov	r0, sl
 800b0a0:	6921      	ldr	r1, [r4, #16]
 800b0a2:	f7fe fb95 	bl	80097d0 <_free_r>
 800b0a6:	230c      	movs	r3, #12
 800b0a8:	f8ca 3000 	str.w	r3, [sl]
 800b0ac:	89a3      	ldrh	r3, [r4, #12]
 800b0ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0b6:	81a3      	strh	r3, [r4, #12]
 800b0b8:	e7e9      	b.n	800b08e <__ssputs_r+0x8a>
	...

0800b0bc <_svfiprintf_r>:
 800b0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c0:	4698      	mov	r8, r3
 800b0c2:	898b      	ldrh	r3, [r1, #12]
 800b0c4:	4607      	mov	r7, r0
 800b0c6:	061b      	lsls	r3, r3, #24
 800b0c8:	460d      	mov	r5, r1
 800b0ca:	4614      	mov	r4, r2
 800b0cc:	b09d      	sub	sp, #116	@ 0x74
 800b0ce:	d510      	bpl.n	800b0f2 <_svfiprintf_r+0x36>
 800b0d0:	690b      	ldr	r3, [r1, #16]
 800b0d2:	b973      	cbnz	r3, 800b0f2 <_svfiprintf_r+0x36>
 800b0d4:	2140      	movs	r1, #64	@ 0x40
 800b0d6:	f7fe fbed 	bl	80098b4 <_malloc_r>
 800b0da:	6028      	str	r0, [r5, #0]
 800b0dc:	6128      	str	r0, [r5, #16]
 800b0de:	b930      	cbnz	r0, 800b0ee <_svfiprintf_r+0x32>
 800b0e0:	230c      	movs	r3, #12
 800b0e2:	603b      	str	r3, [r7, #0]
 800b0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e8:	b01d      	add	sp, #116	@ 0x74
 800b0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ee:	2340      	movs	r3, #64	@ 0x40
 800b0f0:	616b      	str	r3, [r5, #20]
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0f6:	2320      	movs	r3, #32
 800b0f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b0fc:	2330      	movs	r3, #48	@ 0x30
 800b0fe:	f04f 0901 	mov.w	r9, #1
 800b102:	f8cd 800c 	str.w	r8, [sp, #12]
 800b106:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b2a0 <_svfiprintf_r+0x1e4>
 800b10a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b10e:	4623      	mov	r3, r4
 800b110:	469a      	mov	sl, r3
 800b112:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b116:	b10a      	cbz	r2, 800b11c <_svfiprintf_r+0x60>
 800b118:	2a25      	cmp	r2, #37	@ 0x25
 800b11a:	d1f9      	bne.n	800b110 <_svfiprintf_r+0x54>
 800b11c:	ebba 0b04 	subs.w	fp, sl, r4
 800b120:	d00b      	beq.n	800b13a <_svfiprintf_r+0x7e>
 800b122:	465b      	mov	r3, fp
 800b124:	4622      	mov	r2, r4
 800b126:	4629      	mov	r1, r5
 800b128:	4638      	mov	r0, r7
 800b12a:	f7ff ff6b 	bl	800b004 <__ssputs_r>
 800b12e:	3001      	adds	r0, #1
 800b130:	f000 80a7 	beq.w	800b282 <_svfiprintf_r+0x1c6>
 800b134:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b136:	445a      	add	r2, fp
 800b138:	9209      	str	r2, [sp, #36]	@ 0x24
 800b13a:	f89a 3000 	ldrb.w	r3, [sl]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	f000 809f 	beq.w	800b282 <_svfiprintf_r+0x1c6>
 800b144:	2300      	movs	r3, #0
 800b146:	f04f 32ff 	mov.w	r2, #4294967295
 800b14a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b14e:	f10a 0a01 	add.w	sl, sl, #1
 800b152:	9304      	str	r3, [sp, #16]
 800b154:	9307      	str	r3, [sp, #28]
 800b156:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b15a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b15c:	4654      	mov	r4, sl
 800b15e:	2205      	movs	r2, #5
 800b160:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b164:	484e      	ldr	r0, [pc, #312]	@ (800b2a0 <_svfiprintf_r+0x1e4>)
 800b166:	f7fd fcc2 	bl	8008aee <memchr>
 800b16a:	9a04      	ldr	r2, [sp, #16]
 800b16c:	b9d8      	cbnz	r0, 800b1a6 <_svfiprintf_r+0xea>
 800b16e:	06d0      	lsls	r0, r2, #27
 800b170:	bf44      	itt	mi
 800b172:	2320      	movmi	r3, #32
 800b174:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b178:	0711      	lsls	r1, r2, #28
 800b17a:	bf44      	itt	mi
 800b17c:	232b      	movmi	r3, #43	@ 0x2b
 800b17e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b182:	f89a 3000 	ldrb.w	r3, [sl]
 800b186:	2b2a      	cmp	r3, #42	@ 0x2a
 800b188:	d015      	beq.n	800b1b6 <_svfiprintf_r+0xfa>
 800b18a:	4654      	mov	r4, sl
 800b18c:	2000      	movs	r0, #0
 800b18e:	f04f 0c0a 	mov.w	ip, #10
 800b192:	9a07      	ldr	r2, [sp, #28]
 800b194:	4621      	mov	r1, r4
 800b196:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b19a:	3b30      	subs	r3, #48	@ 0x30
 800b19c:	2b09      	cmp	r3, #9
 800b19e:	d94b      	bls.n	800b238 <_svfiprintf_r+0x17c>
 800b1a0:	b1b0      	cbz	r0, 800b1d0 <_svfiprintf_r+0x114>
 800b1a2:	9207      	str	r2, [sp, #28]
 800b1a4:	e014      	b.n	800b1d0 <_svfiprintf_r+0x114>
 800b1a6:	eba0 0308 	sub.w	r3, r0, r8
 800b1aa:	fa09 f303 	lsl.w	r3, r9, r3
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	46a2      	mov	sl, r4
 800b1b2:	9304      	str	r3, [sp, #16]
 800b1b4:	e7d2      	b.n	800b15c <_svfiprintf_r+0xa0>
 800b1b6:	9b03      	ldr	r3, [sp, #12]
 800b1b8:	1d19      	adds	r1, r3, #4
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	9103      	str	r1, [sp, #12]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	bfbb      	ittet	lt
 800b1c2:	425b      	neglt	r3, r3
 800b1c4:	f042 0202 	orrlt.w	r2, r2, #2
 800b1c8:	9307      	strge	r3, [sp, #28]
 800b1ca:	9307      	strlt	r3, [sp, #28]
 800b1cc:	bfb8      	it	lt
 800b1ce:	9204      	strlt	r2, [sp, #16]
 800b1d0:	7823      	ldrb	r3, [r4, #0]
 800b1d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b1d4:	d10a      	bne.n	800b1ec <_svfiprintf_r+0x130>
 800b1d6:	7863      	ldrb	r3, [r4, #1]
 800b1d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1da:	d132      	bne.n	800b242 <_svfiprintf_r+0x186>
 800b1dc:	9b03      	ldr	r3, [sp, #12]
 800b1de:	3402      	adds	r4, #2
 800b1e0:	1d1a      	adds	r2, r3, #4
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	9203      	str	r2, [sp, #12]
 800b1e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b1ea:	9305      	str	r3, [sp, #20]
 800b1ec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b2a4 <_svfiprintf_r+0x1e8>
 800b1f0:	2203      	movs	r2, #3
 800b1f2:	4650      	mov	r0, sl
 800b1f4:	7821      	ldrb	r1, [r4, #0]
 800b1f6:	f7fd fc7a 	bl	8008aee <memchr>
 800b1fa:	b138      	cbz	r0, 800b20c <_svfiprintf_r+0x150>
 800b1fc:	2240      	movs	r2, #64	@ 0x40
 800b1fe:	9b04      	ldr	r3, [sp, #16]
 800b200:	eba0 000a 	sub.w	r0, r0, sl
 800b204:	4082      	lsls	r2, r0
 800b206:	4313      	orrs	r3, r2
 800b208:	3401      	adds	r4, #1
 800b20a:	9304      	str	r3, [sp, #16]
 800b20c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b210:	2206      	movs	r2, #6
 800b212:	4825      	ldr	r0, [pc, #148]	@ (800b2a8 <_svfiprintf_r+0x1ec>)
 800b214:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b218:	f7fd fc69 	bl	8008aee <memchr>
 800b21c:	2800      	cmp	r0, #0
 800b21e:	d036      	beq.n	800b28e <_svfiprintf_r+0x1d2>
 800b220:	4b22      	ldr	r3, [pc, #136]	@ (800b2ac <_svfiprintf_r+0x1f0>)
 800b222:	bb1b      	cbnz	r3, 800b26c <_svfiprintf_r+0x1b0>
 800b224:	9b03      	ldr	r3, [sp, #12]
 800b226:	3307      	adds	r3, #7
 800b228:	f023 0307 	bic.w	r3, r3, #7
 800b22c:	3308      	adds	r3, #8
 800b22e:	9303      	str	r3, [sp, #12]
 800b230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b232:	4433      	add	r3, r6
 800b234:	9309      	str	r3, [sp, #36]	@ 0x24
 800b236:	e76a      	b.n	800b10e <_svfiprintf_r+0x52>
 800b238:	460c      	mov	r4, r1
 800b23a:	2001      	movs	r0, #1
 800b23c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b240:	e7a8      	b.n	800b194 <_svfiprintf_r+0xd8>
 800b242:	2300      	movs	r3, #0
 800b244:	f04f 0c0a 	mov.w	ip, #10
 800b248:	4619      	mov	r1, r3
 800b24a:	3401      	adds	r4, #1
 800b24c:	9305      	str	r3, [sp, #20]
 800b24e:	4620      	mov	r0, r4
 800b250:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b254:	3a30      	subs	r2, #48	@ 0x30
 800b256:	2a09      	cmp	r2, #9
 800b258:	d903      	bls.n	800b262 <_svfiprintf_r+0x1a6>
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d0c6      	beq.n	800b1ec <_svfiprintf_r+0x130>
 800b25e:	9105      	str	r1, [sp, #20]
 800b260:	e7c4      	b.n	800b1ec <_svfiprintf_r+0x130>
 800b262:	4604      	mov	r4, r0
 800b264:	2301      	movs	r3, #1
 800b266:	fb0c 2101 	mla	r1, ip, r1, r2
 800b26a:	e7f0      	b.n	800b24e <_svfiprintf_r+0x192>
 800b26c:	ab03      	add	r3, sp, #12
 800b26e:	9300      	str	r3, [sp, #0]
 800b270:	462a      	mov	r2, r5
 800b272:	4638      	mov	r0, r7
 800b274:	4b0e      	ldr	r3, [pc, #56]	@ (800b2b0 <_svfiprintf_r+0x1f4>)
 800b276:	a904      	add	r1, sp, #16
 800b278:	f7fc fcbc 	bl	8007bf4 <_printf_float>
 800b27c:	1c42      	adds	r2, r0, #1
 800b27e:	4606      	mov	r6, r0
 800b280:	d1d6      	bne.n	800b230 <_svfiprintf_r+0x174>
 800b282:	89ab      	ldrh	r3, [r5, #12]
 800b284:	065b      	lsls	r3, r3, #25
 800b286:	f53f af2d 	bmi.w	800b0e4 <_svfiprintf_r+0x28>
 800b28a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b28c:	e72c      	b.n	800b0e8 <_svfiprintf_r+0x2c>
 800b28e:	ab03      	add	r3, sp, #12
 800b290:	9300      	str	r3, [sp, #0]
 800b292:	462a      	mov	r2, r5
 800b294:	4638      	mov	r0, r7
 800b296:	4b06      	ldr	r3, [pc, #24]	@ (800b2b0 <_svfiprintf_r+0x1f4>)
 800b298:	a904      	add	r1, sp, #16
 800b29a:	f7fc ff49 	bl	8008130 <_printf_i>
 800b29e:	e7ed      	b.n	800b27c <_svfiprintf_r+0x1c0>
 800b2a0:	0800da57 	.word	0x0800da57
 800b2a4:	0800da5d 	.word	0x0800da5d
 800b2a8:	0800da61 	.word	0x0800da61
 800b2ac:	08007bf5 	.word	0x08007bf5
 800b2b0:	0800b005 	.word	0x0800b005

0800b2b4 <__sflush_r>:
 800b2b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ba:	0716      	lsls	r6, r2, #28
 800b2bc:	4605      	mov	r5, r0
 800b2be:	460c      	mov	r4, r1
 800b2c0:	d454      	bmi.n	800b36c <__sflush_r+0xb8>
 800b2c2:	684b      	ldr	r3, [r1, #4]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	dc02      	bgt.n	800b2ce <__sflush_r+0x1a>
 800b2c8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	dd48      	ble.n	800b360 <__sflush_r+0xac>
 800b2ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b2d0:	2e00      	cmp	r6, #0
 800b2d2:	d045      	beq.n	800b360 <__sflush_r+0xac>
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b2da:	682f      	ldr	r7, [r5, #0]
 800b2dc:	6a21      	ldr	r1, [r4, #32]
 800b2de:	602b      	str	r3, [r5, #0]
 800b2e0:	d030      	beq.n	800b344 <__sflush_r+0x90>
 800b2e2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b2e4:	89a3      	ldrh	r3, [r4, #12]
 800b2e6:	0759      	lsls	r1, r3, #29
 800b2e8:	d505      	bpl.n	800b2f6 <__sflush_r+0x42>
 800b2ea:	6863      	ldr	r3, [r4, #4]
 800b2ec:	1ad2      	subs	r2, r2, r3
 800b2ee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b2f0:	b10b      	cbz	r3, 800b2f6 <__sflush_r+0x42>
 800b2f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b2f4:	1ad2      	subs	r2, r2, r3
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	4628      	mov	r0, r5
 800b2fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b2fc:	6a21      	ldr	r1, [r4, #32]
 800b2fe:	47b0      	blx	r6
 800b300:	1c43      	adds	r3, r0, #1
 800b302:	89a3      	ldrh	r3, [r4, #12]
 800b304:	d106      	bne.n	800b314 <__sflush_r+0x60>
 800b306:	6829      	ldr	r1, [r5, #0]
 800b308:	291d      	cmp	r1, #29
 800b30a:	d82b      	bhi.n	800b364 <__sflush_r+0xb0>
 800b30c:	4a28      	ldr	r2, [pc, #160]	@ (800b3b0 <__sflush_r+0xfc>)
 800b30e:	40ca      	lsrs	r2, r1
 800b310:	07d6      	lsls	r6, r2, #31
 800b312:	d527      	bpl.n	800b364 <__sflush_r+0xb0>
 800b314:	2200      	movs	r2, #0
 800b316:	6062      	str	r2, [r4, #4]
 800b318:	6922      	ldr	r2, [r4, #16]
 800b31a:	04d9      	lsls	r1, r3, #19
 800b31c:	6022      	str	r2, [r4, #0]
 800b31e:	d504      	bpl.n	800b32a <__sflush_r+0x76>
 800b320:	1c42      	adds	r2, r0, #1
 800b322:	d101      	bne.n	800b328 <__sflush_r+0x74>
 800b324:	682b      	ldr	r3, [r5, #0]
 800b326:	b903      	cbnz	r3, 800b32a <__sflush_r+0x76>
 800b328:	6560      	str	r0, [r4, #84]	@ 0x54
 800b32a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b32c:	602f      	str	r7, [r5, #0]
 800b32e:	b1b9      	cbz	r1, 800b360 <__sflush_r+0xac>
 800b330:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b334:	4299      	cmp	r1, r3
 800b336:	d002      	beq.n	800b33e <__sflush_r+0x8a>
 800b338:	4628      	mov	r0, r5
 800b33a:	f7fe fa49 	bl	80097d0 <_free_r>
 800b33e:	2300      	movs	r3, #0
 800b340:	6363      	str	r3, [r4, #52]	@ 0x34
 800b342:	e00d      	b.n	800b360 <__sflush_r+0xac>
 800b344:	2301      	movs	r3, #1
 800b346:	4628      	mov	r0, r5
 800b348:	47b0      	blx	r6
 800b34a:	4602      	mov	r2, r0
 800b34c:	1c50      	adds	r0, r2, #1
 800b34e:	d1c9      	bne.n	800b2e4 <__sflush_r+0x30>
 800b350:	682b      	ldr	r3, [r5, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d0c6      	beq.n	800b2e4 <__sflush_r+0x30>
 800b356:	2b1d      	cmp	r3, #29
 800b358:	d001      	beq.n	800b35e <__sflush_r+0xaa>
 800b35a:	2b16      	cmp	r3, #22
 800b35c:	d11d      	bne.n	800b39a <__sflush_r+0xe6>
 800b35e:	602f      	str	r7, [r5, #0]
 800b360:	2000      	movs	r0, #0
 800b362:	e021      	b.n	800b3a8 <__sflush_r+0xf4>
 800b364:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b368:	b21b      	sxth	r3, r3
 800b36a:	e01a      	b.n	800b3a2 <__sflush_r+0xee>
 800b36c:	690f      	ldr	r7, [r1, #16]
 800b36e:	2f00      	cmp	r7, #0
 800b370:	d0f6      	beq.n	800b360 <__sflush_r+0xac>
 800b372:	0793      	lsls	r3, r2, #30
 800b374:	bf18      	it	ne
 800b376:	2300      	movne	r3, #0
 800b378:	680e      	ldr	r6, [r1, #0]
 800b37a:	bf08      	it	eq
 800b37c:	694b      	ldreq	r3, [r1, #20]
 800b37e:	1bf6      	subs	r6, r6, r7
 800b380:	600f      	str	r7, [r1, #0]
 800b382:	608b      	str	r3, [r1, #8]
 800b384:	2e00      	cmp	r6, #0
 800b386:	ddeb      	ble.n	800b360 <__sflush_r+0xac>
 800b388:	4633      	mov	r3, r6
 800b38a:	463a      	mov	r2, r7
 800b38c:	4628      	mov	r0, r5
 800b38e:	6a21      	ldr	r1, [r4, #32]
 800b390:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b394:	47e0      	blx	ip
 800b396:	2800      	cmp	r0, #0
 800b398:	dc07      	bgt.n	800b3aa <__sflush_r+0xf6>
 800b39a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b39e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b3a6:	81a3      	strh	r3, [r4, #12]
 800b3a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3aa:	4407      	add	r7, r0
 800b3ac:	1a36      	subs	r6, r6, r0
 800b3ae:	e7e9      	b.n	800b384 <__sflush_r+0xd0>
 800b3b0:	20400001 	.word	0x20400001

0800b3b4 <_fflush_r>:
 800b3b4:	b538      	push	{r3, r4, r5, lr}
 800b3b6:	690b      	ldr	r3, [r1, #16]
 800b3b8:	4605      	mov	r5, r0
 800b3ba:	460c      	mov	r4, r1
 800b3bc:	b913      	cbnz	r3, 800b3c4 <_fflush_r+0x10>
 800b3be:	2500      	movs	r5, #0
 800b3c0:	4628      	mov	r0, r5
 800b3c2:	bd38      	pop	{r3, r4, r5, pc}
 800b3c4:	b118      	cbz	r0, 800b3ce <_fflush_r+0x1a>
 800b3c6:	6a03      	ldr	r3, [r0, #32]
 800b3c8:	b90b      	cbnz	r3, 800b3ce <_fflush_r+0x1a>
 800b3ca:	f7fd fa65 	bl	8008898 <__sinit>
 800b3ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d0f3      	beq.n	800b3be <_fflush_r+0xa>
 800b3d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b3d8:	07d0      	lsls	r0, r2, #31
 800b3da:	d404      	bmi.n	800b3e6 <_fflush_r+0x32>
 800b3dc:	0599      	lsls	r1, r3, #22
 800b3de:	d402      	bmi.n	800b3e6 <_fflush_r+0x32>
 800b3e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3e2:	f7fd fb82 	bl	8008aea <__retarget_lock_acquire_recursive>
 800b3e6:	4628      	mov	r0, r5
 800b3e8:	4621      	mov	r1, r4
 800b3ea:	f7ff ff63 	bl	800b2b4 <__sflush_r>
 800b3ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b3f0:	4605      	mov	r5, r0
 800b3f2:	07da      	lsls	r2, r3, #31
 800b3f4:	d4e4      	bmi.n	800b3c0 <_fflush_r+0xc>
 800b3f6:	89a3      	ldrh	r3, [r4, #12]
 800b3f8:	059b      	lsls	r3, r3, #22
 800b3fa:	d4e1      	bmi.n	800b3c0 <_fflush_r+0xc>
 800b3fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3fe:	f7fd fb75 	bl	8008aec <__retarget_lock_release_recursive>
 800b402:	e7dd      	b.n	800b3c0 <_fflush_r+0xc>

0800b404 <memmove>:
 800b404:	4288      	cmp	r0, r1
 800b406:	b510      	push	{r4, lr}
 800b408:	eb01 0402 	add.w	r4, r1, r2
 800b40c:	d902      	bls.n	800b414 <memmove+0x10>
 800b40e:	4284      	cmp	r4, r0
 800b410:	4623      	mov	r3, r4
 800b412:	d807      	bhi.n	800b424 <memmove+0x20>
 800b414:	1e43      	subs	r3, r0, #1
 800b416:	42a1      	cmp	r1, r4
 800b418:	d008      	beq.n	800b42c <memmove+0x28>
 800b41a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b41e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b422:	e7f8      	b.n	800b416 <memmove+0x12>
 800b424:	4601      	mov	r1, r0
 800b426:	4402      	add	r2, r0
 800b428:	428a      	cmp	r2, r1
 800b42a:	d100      	bne.n	800b42e <memmove+0x2a>
 800b42c:	bd10      	pop	{r4, pc}
 800b42e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b432:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b436:	e7f7      	b.n	800b428 <memmove+0x24>

0800b438 <strncmp>:
 800b438:	b510      	push	{r4, lr}
 800b43a:	b16a      	cbz	r2, 800b458 <strncmp+0x20>
 800b43c:	3901      	subs	r1, #1
 800b43e:	1884      	adds	r4, r0, r2
 800b440:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b444:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b448:	429a      	cmp	r2, r3
 800b44a:	d103      	bne.n	800b454 <strncmp+0x1c>
 800b44c:	42a0      	cmp	r0, r4
 800b44e:	d001      	beq.n	800b454 <strncmp+0x1c>
 800b450:	2a00      	cmp	r2, #0
 800b452:	d1f5      	bne.n	800b440 <strncmp+0x8>
 800b454:	1ad0      	subs	r0, r2, r3
 800b456:	bd10      	pop	{r4, pc}
 800b458:	4610      	mov	r0, r2
 800b45a:	e7fc      	b.n	800b456 <strncmp+0x1e>

0800b45c <_sbrk_r>:
 800b45c:	b538      	push	{r3, r4, r5, lr}
 800b45e:	2300      	movs	r3, #0
 800b460:	4d05      	ldr	r5, [pc, #20]	@ (800b478 <_sbrk_r+0x1c>)
 800b462:	4604      	mov	r4, r0
 800b464:	4608      	mov	r0, r1
 800b466:	602b      	str	r3, [r5, #0]
 800b468:	f7f6 fb7e 	bl	8001b68 <_sbrk>
 800b46c:	1c43      	adds	r3, r0, #1
 800b46e:	d102      	bne.n	800b476 <_sbrk_r+0x1a>
 800b470:	682b      	ldr	r3, [r5, #0]
 800b472:	b103      	cbz	r3, 800b476 <_sbrk_r+0x1a>
 800b474:	6023      	str	r3, [r4, #0]
 800b476:	bd38      	pop	{r3, r4, r5, pc}
 800b478:	20000424 	.word	0x20000424

0800b47c <memcpy>:
 800b47c:	440a      	add	r2, r1
 800b47e:	4291      	cmp	r1, r2
 800b480:	f100 33ff 	add.w	r3, r0, #4294967295
 800b484:	d100      	bne.n	800b488 <memcpy+0xc>
 800b486:	4770      	bx	lr
 800b488:	b510      	push	{r4, lr}
 800b48a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b48e:	4291      	cmp	r1, r2
 800b490:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b494:	d1f9      	bne.n	800b48a <memcpy+0xe>
 800b496:	bd10      	pop	{r4, pc}

0800b498 <nan>:
 800b498:	2000      	movs	r0, #0
 800b49a:	4901      	ldr	r1, [pc, #4]	@ (800b4a0 <nan+0x8>)
 800b49c:	4770      	bx	lr
 800b49e:	bf00      	nop
 800b4a0:	7ff80000 	.word	0x7ff80000

0800b4a4 <__assert_func>:
 800b4a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b4a6:	4614      	mov	r4, r2
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	4b09      	ldr	r3, [pc, #36]	@ (800b4d0 <__assert_func+0x2c>)
 800b4ac:	4605      	mov	r5, r0
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	68d8      	ldr	r0, [r3, #12]
 800b4b2:	b14c      	cbz	r4, 800b4c8 <__assert_func+0x24>
 800b4b4:	4b07      	ldr	r3, [pc, #28]	@ (800b4d4 <__assert_func+0x30>)
 800b4b6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b4ba:	9100      	str	r1, [sp, #0]
 800b4bc:	462b      	mov	r3, r5
 800b4be:	4906      	ldr	r1, [pc, #24]	@ (800b4d8 <__assert_func+0x34>)
 800b4c0:	f000 fba8 	bl	800bc14 <fiprintf>
 800b4c4:	f000 fbb8 	bl	800bc38 <abort>
 800b4c8:	4b04      	ldr	r3, [pc, #16]	@ (800b4dc <__assert_func+0x38>)
 800b4ca:	461c      	mov	r4, r3
 800b4cc:	e7f3      	b.n	800b4b6 <__assert_func+0x12>
 800b4ce:	bf00      	nop
 800b4d0:	20000050 	.word	0x20000050
 800b4d4:	0800da70 	.word	0x0800da70
 800b4d8:	0800da7d 	.word	0x0800da7d
 800b4dc:	0800daab 	.word	0x0800daab

0800b4e0 <_calloc_r>:
 800b4e0:	b570      	push	{r4, r5, r6, lr}
 800b4e2:	fba1 5402 	umull	r5, r4, r1, r2
 800b4e6:	b934      	cbnz	r4, 800b4f6 <_calloc_r+0x16>
 800b4e8:	4629      	mov	r1, r5
 800b4ea:	f7fe f9e3 	bl	80098b4 <_malloc_r>
 800b4ee:	4606      	mov	r6, r0
 800b4f0:	b928      	cbnz	r0, 800b4fe <_calloc_r+0x1e>
 800b4f2:	4630      	mov	r0, r6
 800b4f4:	bd70      	pop	{r4, r5, r6, pc}
 800b4f6:	220c      	movs	r2, #12
 800b4f8:	2600      	movs	r6, #0
 800b4fa:	6002      	str	r2, [r0, #0]
 800b4fc:	e7f9      	b.n	800b4f2 <_calloc_r+0x12>
 800b4fe:	462a      	mov	r2, r5
 800b500:	4621      	mov	r1, r4
 800b502:	f7fd fa74 	bl	80089ee <memset>
 800b506:	e7f4      	b.n	800b4f2 <_calloc_r+0x12>

0800b508 <rshift>:
 800b508:	6903      	ldr	r3, [r0, #16]
 800b50a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b50e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b512:	f100 0414 	add.w	r4, r0, #20
 800b516:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b51a:	dd46      	ble.n	800b5aa <rshift+0xa2>
 800b51c:	f011 011f 	ands.w	r1, r1, #31
 800b520:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b524:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b528:	d10c      	bne.n	800b544 <rshift+0x3c>
 800b52a:	4629      	mov	r1, r5
 800b52c:	f100 0710 	add.w	r7, r0, #16
 800b530:	42b1      	cmp	r1, r6
 800b532:	d335      	bcc.n	800b5a0 <rshift+0x98>
 800b534:	1a9b      	subs	r3, r3, r2
 800b536:	009b      	lsls	r3, r3, #2
 800b538:	1eea      	subs	r2, r5, #3
 800b53a:	4296      	cmp	r6, r2
 800b53c:	bf38      	it	cc
 800b53e:	2300      	movcc	r3, #0
 800b540:	4423      	add	r3, r4
 800b542:	e015      	b.n	800b570 <rshift+0x68>
 800b544:	46a1      	mov	r9, r4
 800b546:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b54a:	f1c1 0820 	rsb	r8, r1, #32
 800b54e:	40cf      	lsrs	r7, r1
 800b550:	f105 0e04 	add.w	lr, r5, #4
 800b554:	4576      	cmp	r6, lr
 800b556:	46f4      	mov	ip, lr
 800b558:	d816      	bhi.n	800b588 <rshift+0x80>
 800b55a:	1a9a      	subs	r2, r3, r2
 800b55c:	0092      	lsls	r2, r2, #2
 800b55e:	3a04      	subs	r2, #4
 800b560:	3501      	adds	r5, #1
 800b562:	42ae      	cmp	r6, r5
 800b564:	bf38      	it	cc
 800b566:	2200      	movcc	r2, #0
 800b568:	18a3      	adds	r3, r4, r2
 800b56a:	50a7      	str	r7, [r4, r2]
 800b56c:	b107      	cbz	r7, 800b570 <rshift+0x68>
 800b56e:	3304      	adds	r3, #4
 800b570:	42a3      	cmp	r3, r4
 800b572:	eba3 0204 	sub.w	r2, r3, r4
 800b576:	bf08      	it	eq
 800b578:	2300      	moveq	r3, #0
 800b57a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b57e:	6102      	str	r2, [r0, #16]
 800b580:	bf08      	it	eq
 800b582:	6143      	streq	r3, [r0, #20]
 800b584:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b588:	f8dc c000 	ldr.w	ip, [ip]
 800b58c:	fa0c fc08 	lsl.w	ip, ip, r8
 800b590:	ea4c 0707 	orr.w	r7, ip, r7
 800b594:	f849 7b04 	str.w	r7, [r9], #4
 800b598:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b59c:	40cf      	lsrs	r7, r1
 800b59e:	e7d9      	b.n	800b554 <rshift+0x4c>
 800b5a0:	f851 cb04 	ldr.w	ip, [r1], #4
 800b5a4:	f847 cf04 	str.w	ip, [r7, #4]!
 800b5a8:	e7c2      	b.n	800b530 <rshift+0x28>
 800b5aa:	4623      	mov	r3, r4
 800b5ac:	e7e0      	b.n	800b570 <rshift+0x68>

0800b5ae <__hexdig_fun>:
 800b5ae:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b5b2:	2b09      	cmp	r3, #9
 800b5b4:	d802      	bhi.n	800b5bc <__hexdig_fun+0xe>
 800b5b6:	3820      	subs	r0, #32
 800b5b8:	b2c0      	uxtb	r0, r0
 800b5ba:	4770      	bx	lr
 800b5bc:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b5c0:	2b05      	cmp	r3, #5
 800b5c2:	d801      	bhi.n	800b5c8 <__hexdig_fun+0x1a>
 800b5c4:	3847      	subs	r0, #71	@ 0x47
 800b5c6:	e7f7      	b.n	800b5b8 <__hexdig_fun+0xa>
 800b5c8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b5cc:	2b05      	cmp	r3, #5
 800b5ce:	d801      	bhi.n	800b5d4 <__hexdig_fun+0x26>
 800b5d0:	3827      	subs	r0, #39	@ 0x27
 800b5d2:	e7f1      	b.n	800b5b8 <__hexdig_fun+0xa>
 800b5d4:	2000      	movs	r0, #0
 800b5d6:	4770      	bx	lr

0800b5d8 <__gethex>:
 800b5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5dc:	468a      	mov	sl, r1
 800b5de:	4690      	mov	r8, r2
 800b5e0:	b085      	sub	sp, #20
 800b5e2:	9302      	str	r3, [sp, #8]
 800b5e4:	680b      	ldr	r3, [r1, #0]
 800b5e6:	9001      	str	r0, [sp, #4]
 800b5e8:	1c9c      	adds	r4, r3, #2
 800b5ea:	46a1      	mov	r9, r4
 800b5ec:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b5f0:	2830      	cmp	r0, #48	@ 0x30
 800b5f2:	d0fa      	beq.n	800b5ea <__gethex+0x12>
 800b5f4:	eba9 0303 	sub.w	r3, r9, r3
 800b5f8:	f1a3 0b02 	sub.w	fp, r3, #2
 800b5fc:	f7ff ffd7 	bl	800b5ae <__hexdig_fun>
 800b600:	4605      	mov	r5, r0
 800b602:	2800      	cmp	r0, #0
 800b604:	d168      	bne.n	800b6d8 <__gethex+0x100>
 800b606:	2201      	movs	r2, #1
 800b608:	4648      	mov	r0, r9
 800b60a:	499f      	ldr	r1, [pc, #636]	@ (800b888 <__gethex+0x2b0>)
 800b60c:	f7ff ff14 	bl	800b438 <strncmp>
 800b610:	4607      	mov	r7, r0
 800b612:	2800      	cmp	r0, #0
 800b614:	d167      	bne.n	800b6e6 <__gethex+0x10e>
 800b616:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b61a:	4626      	mov	r6, r4
 800b61c:	f7ff ffc7 	bl	800b5ae <__hexdig_fun>
 800b620:	2800      	cmp	r0, #0
 800b622:	d062      	beq.n	800b6ea <__gethex+0x112>
 800b624:	4623      	mov	r3, r4
 800b626:	7818      	ldrb	r0, [r3, #0]
 800b628:	4699      	mov	r9, r3
 800b62a:	2830      	cmp	r0, #48	@ 0x30
 800b62c:	f103 0301 	add.w	r3, r3, #1
 800b630:	d0f9      	beq.n	800b626 <__gethex+0x4e>
 800b632:	f7ff ffbc 	bl	800b5ae <__hexdig_fun>
 800b636:	fab0 f580 	clz	r5, r0
 800b63a:	f04f 0b01 	mov.w	fp, #1
 800b63e:	096d      	lsrs	r5, r5, #5
 800b640:	464a      	mov	r2, r9
 800b642:	4616      	mov	r6, r2
 800b644:	7830      	ldrb	r0, [r6, #0]
 800b646:	3201      	adds	r2, #1
 800b648:	f7ff ffb1 	bl	800b5ae <__hexdig_fun>
 800b64c:	2800      	cmp	r0, #0
 800b64e:	d1f8      	bne.n	800b642 <__gethex+0x6a>
 800b650:	2201      	movs	r2, #1
 800b652:	4630      	mov	r0, r6
 800b654:	498c      	ldr	r1, [pc, #560]	@ (800b888 <__gethex+0x2b0>)
 800b656:	f7ff feef 	bl	800b438 <strncmp>
 800b65a:	2800      	cmp	r0, #0
 800b65c:	d13f      	bne.n	800b6de <__gethex+0x106>
 800b65e:	b944      	cbnz	r4, 800b672 <__gethex+0x9a>
 800b660:	1c74      	adds	r4, r6, #1
 800b662:	4622      	mov	r2, r4
 800b664:	4616      	mov	r6, r2
 800b666:	7830      	ldrb	r0, [r6, #0]
 800b668:	3201      	adds	r2, #1
 800b66a:	f7ff ffa0 	bl	800b5ae <__hexdig_fun>
 800b66e:	2800      	cmp	r0, #0
 800b670:	d1f8      	bne.n	800b664 <__gethex+0x8c>
 800b672:	1ba4      	subs	r4, r4, r6
 800b674:	00a7      	lsls	r7, r4, #2
 800b676:	7833      	ldrb	r3, [r6, #0]
 800b678:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b67c:	2b50      	cmp	r3, #80	@ 0x50
 800b67e:	d13e      	bne.n	800b6fe <__gethex+0x126>
 800b680:	7873      	ldrb	r3, [r6, #1]
 800b682:	2b2b      	cmp	r3, #43	@ 0x2b
 800b684:	d033      	beq.n	800b6ee <__gethex+0x116>
 800b686:	2b2d      	cmp	r3, #45	@ 0x2d
 800b688:	d034      	beq.n	800b6f4 <__gethex+0x11c>
 800b68a:	2400      	movs	r4, #0
 800b68c:	1c71      	adds	r1, r6, #1
 800b68e:	7808      	ldrb	r0, [r1, #0]
 800b690:	f7ff ff8d 	bl	800b5ae <__hexdig_fun>
 800b694:	1e43      	subs	r3, r0, #1
 800b696:	b2db      	uxtb	r3, r3
 800b698:	2b18      	cmp	r3, #24
 800b69a:	d830      	bhi.n	800b6fe <__gethex+0x126>
 800b69c:	f1a0 0210 	sub.w	r2, r0, #16
 800b6a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b6a4:	f7ff ff83 	bl	800b5ae <__hexdig_fun>
 800b6a8:	f100 3cff 	add.w	ip, r0, #4294967295
 800b6ac:	fa5f fc8c 	uxtb.w	ip, ip
 800b6b0:	f1bc 0f18 	cmp.w	ip, #24
 800b6b4:	f04f 030a 	mov.w	r3, #10
 800b6b8:	d91e      	bls.n	800b6f8 <__gethex+0x120>
 800b6ba:	b104      	cbz	r4, 800b6be <__gethex+0xe6>
 800b6bc:	4252      	negs	r2, r2
 800b6be:	4417      	add	r7, r2
 800b6c0:	f8ca 1000 	str.w	r1, [sl]
 800b6c4:	b1ed      	cbz	r5, 800b702 <__gethex+0x12a>
 800b6c6:	f1bb 0f00 	cmp.w	fp, #0
 800b6ca:	bf0c      	ite	eq
 800b6cc:	2506      	moveq	r5, #6
 800b6ce:	2500      	movne	r5, #0
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	b005      	add	sp, #20
 800b6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6d8:	2500      	movs	r5, #0
 800b6da:	462c      	mov	r4, r5
 800b6dc:	e7b0      	b.n	800b640 <__gethex+0x68>
 800b6de:	2c00      	cmp	r4, #0
 800b6e0:	d1c7      	bne.n	800b672 <__gethex+0x9a>
 800b6e2:	4627      	mov	r7, r4
 800b6e4:	e7c7      	b.n	800b676 <__gethex+0x9e>
 800b6e6:	464e      	mov	r6, r9
 800b6e8:	462f      	mov	r7, r5
 800b6ea:	2501      	movs	r5, #1
 800b6ec:	e7c3      	b.n	800b676 <__gethex+0x9e>
 800b6ee:	2400      	movs	r4, #0
 800b6f0:	1cb1      	adds	r1, r6, #2
 800b6f2:	e7cc      	b.n	800b68e <__gethex+0xb6>
 800b6f4:	2401      	movs	r4, #1
 800b6f6:	e7fb      	b.n	800b6f0 <__gethex+0x118>
 800b6f8:	fb03 0002 	mla	r0, r3, r2, r0
 800b6fc:	e7ce      	b.n	800b69c <__gethex+0xc4>
 800b6fe:	4631      	mov	r1, r6
 800b700:	e7de      	b.n	800b6c0 <__gethex+0xe8>
 800b702:	4629      	mov	r1, r5
 800b704:	eba6 0309 	sub.w	r3, r6, r9
 800b708:	3b01      	subs	r3, #1
 800b70a:	2b07      	cmp	r3, #7
 800b70c:	dc0a      	bgt.n	800b724 <__gethex+0x14c>
 800b70e:	9801      	ldr	r0, [sp, #4]
 800b710:	f7fe f95c 	bl	80099cc <_Balloc>
 800b714:	4604      	mov	r4, r0
 800b716:	b940      	cbnz	r0, 800b72a <__gethex+0x152>
 800b718:	4602      	mov	r2, r0
 800b71a:	21e4      	movs	r1, #228	@ 0xe4
 800b71c:	4b5b      	ldr	r3, [pc, #364]	@ (800b88c <__gethex+0x2b4>)
 800b71e:	485c      	ldr	r0, [pc, #368]	@ (800b890 <__gethex+0x2b8>)
 800b720:	f7ff fec0 	bl	800b4a4 <__assert_func>
 800b724:	3101      	adds	r1, #1
 800b726:	105b      	asrs	r3, r3, #1
 800b728:	e7ef      	b.n	800b70a <__gethex+0x132>
 800b72a:	2300      	movs	r3, #0
 800b72c:	f100 0a14 	add.w	sl, r0, #20
 800b730:	4655      	mov	r5, sl
 800b732:	469b      	mov	fp, r3
 800b734:	45b1      	cmp	r9, r6
 800b736:	d337      	bcc.n	800b7a8 <__gethex+0x1d0>
 800b738:	f845 bb04 	str.w	fp, [r5], #4
 800b73c:	eba5 050a 	sub.w	r5, r5, sl
 800b740:	10ad      	asrs	r5, r5, #2
 800b742:	6125      	str	r5, [r4, #16]
 800b744:	4658      	mov	r0, fp
 800b746:	f7fe fa33 	bl	8009bb0 <__hi0bits>
 800b74a:	016d      	lsls	r5, r5, #5
 800b74c:	f8d8 6000 	ldr.w	r6, [r8]
 800b750:	1a2d      	subs	r5, r5, r0
 800b752:	42b5      	cmp	r5, r6
 800b754:	dd54      	ble.n	800b800 <__gethex+0x228>
 800b756:	1bad      	subs	r5, r5, r6
 800b758:	4629      	mov	r1, r5
 800b75a:	4620      	mov	r0, r4
 800b75c:	f7fe fdb5 	bl	800a2ca <__any_on>
 800b760:	4681      	mov	r9, r0
 800b762:	b178      	cbz	r0, 800b784 <__gethex+0x1ac>
 800b764:	f04f 0901 	mov.w	r9, #1
 800b768:	1e6b      	subs	r3, r5, #1
 800b76a:	1159      	asrs	r1, r3, #5
 800b76c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b770:	f003 021f 	and.w	r2, r3, #31
 800b774:	fa09 f202 	lsl.w	r2, r9, r2
 800b778:	420a      	tst	r2, r1
 800b77a:	d003      	beq.n	800b784 <__gethex+0x1ac>
 800b77c:	454b      	cmp	r3, r9
 800b77e:	dc36      	bgt.n	800b7ee <__gethex+0x216>
 800b780:	f04f 0902 	mov.w	r9, #2
 800b784:	4629      	mov	r1, r5
 800b786:	4620      	mov	r0, r4
 800b788:	f7ff febe 	bl	800b508 <rshift>
 800b78c:	442f      	add	r7, r5
 800b78e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b792:	42bb      	cmp	r3, r7
 800b794:	da42      	bge.n	800b81c <__gethex+0x244>
 800b796:	4621      	mov	r1, r4
 800b798:	9801      	ldr	r0, [sp, #4]
 800b79a:	f7fe f957 	bl	8009a4c <_Bfree>
 800b79e:	2300      	movs	r3, #0
 800b7a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b7a2:	25a3      	movs	r5, #163	@ 0xa3
 800b7a4:	6013      	str	r3, [r2, #0]
 800b7a6:	e793      	b.n	800b6d0 <__gethex+0xf8>
 800b7a8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b7ac:	2a2e      	cmp	r2, #46	@ 0x2e
 800b7ae:	d012      	beq.n	800b7d6 <__gethex+0x1fe>
 800b7b0:	2b20      	cmp	r3, #32
 800b7b2:	d104      	bne.n	800b7be <__gethex+0x1e6>
 800b7b4:	f845 bb04 	str.w	fp, [r5], #4
 800b7b8:	f04f 0b00 	mov.w	fp, #0
 800b7bc:	465b      	mov	r3, fp
 800b7be:	7830      	ldrb	r0, [r6, #0]
 800b7c0:	9303      	str	r3, [sp, #12]
 800b7c2:	f7ff fef4 	bl	800b5ae <__hexdig_fun>
 800b7c6:	9b03      	ldr	r3, [sp, #12]
 800b7c8:	f000 000f 	and.w	r0, r0, #15
 800b7cc:	4098      	lsls	r0, r3
 800b7ce:	ea4b 0b00 	orr.w	fp, fp, r0
 800b7d2:	3304      	adds	r3, #4
 800b7d4:	e7ae      	b.n	800b734 <__gethex+0x15c>
 800b7d6:	45b1      	cmp	r9, r6
 800b7d8:	d8ea      	bhi.n	800b7b0 <__gethex+0x1d8>
 800b7da:	2201      	movs	r2, #1
 800b7dc:	4630      	mov	r0, r6
 800b7de:	492a      	ldr	r1, [pc, #168]	@ (800b888 <__gethex+0x2b0>)
 800b7e0:	9303      	str	r3, [sp, #12]
 800b7e2:	f7ff fe29 	bl	800b438 <strncmp>
 800b7e6:	9b03      	ldr	r3, [sp, #12]
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	d1e1      	bne.n	800b7b0 <__gethex+0x1d8>
 800b7ec:	e7a2      	b.n	800b734 <__gethex+0x15c>
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	1ea9      	subs	r1, r5, #2
 800b7f2:	f7fe fd6a 	bl	800a2ca <__any_on>
 800b7f6:	2800      	cmp	r0, #0
 800b7f8:	d0c2      	beq.n	800b780 <__gethex+0x1a8>
 800b7fa:	f04f 0903 	mov.w	r9, #3
 800b7fe:	e7c1      	b.n	800b784 <__gethex+0x1ac>
 800b800:	da09      	bge.n	800b816 <__gethex+0x23e>
 800b802:	1b75      	subs	r5, r6, r5
 800b804:	4621      	mov	r1, r4
 800b806:	462a      	mov	r2, r5
 800b808:	9801      	ldr	r0, [sp, #4]
 800b80a:	f7fe fb2f 	bl	8009e6c <__lshift>
 800b80e:	4604      	mov	r4, r0
 800b810:	1b7f      	subs	r7, r7, r5
 800b812:	f100 0a14 	add.w	sl, r0, #20
 800b816:	f04f 0900 	mov.w	r9, #0
 800b81a:	e7b8      	b.n	800b78e <__gethex+0x1b6>
 800b81c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b820:	42bd      	cmp	r5, r7
 800b822:	dd6f      	ble.n	800b904 <__gethex+0x32c>
 800b824:	1bed      	subs	r5, r5, r7
 800b826:	42ae      	cmp	r6, r5
 800b828:	dc34      	bgt.n	800b894 <__gethex+0x2bc>
 800b82a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b82e:	2b02      	cmp	r3, #2
 800b830:	d022      	beq.n	800b878 <__gethex+0x2a0>
 800b832:	2b03      	cmp	r3, #3
 800b834:	d024      	beq.n	800b880 <__gethex+0x2a8>
 800b836:	2b01      	cmp	r3, #1
 800b838:	d115      	bne.n	800b866 <__gethex+0x28e>
 800b83a:	42ae      	cmp	r6, r5
 800b83c:	d113      	bne.n	800b866 <__gethex+0x28e>
 800b83e:	2e01      	cmp	r6, #1
 800b840:	d10b      	bne.n	800b85a <__gethex+0x282>
 800b842:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b846:	9a02      	ldr	r2, [sp, #8]
 800b848:	2562      	movs	r5, #98	@ 0x62
 800b84a:	6013      	str	r3, [r2, #0]
 800b84c:	2301      	movs	r3, #1
 800b84e:	6123      	str	r3, [r4, #16]
 800b850:	f8ca 3000 	str.w	r3, [sl]
 800b854:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b856:	601c      	str	r4, [r3, #0]
 800b858:	e73a      	b.n	800b6d0 <__gethex+0xf8>
 800b85a:	4620      	mov	r0, r4
 800b85c:	1e71      	subs	r1, r6, #1
 800b85e:	f7fe fd34 	bl	800a2ca <__any_on>
 800b862:	2800      	cmp	r0, #0
 800b864:	d1ed      	bne.n	800b842 <__gethex+0x26a>
 800b866:	4621      	mov	r1, r4
 800b868:	9801      	ldr	r0, [sp, #4]
 800b86a:	f7fe f8ef 	bl	8009a4c <_Bfree>
 800b86e:	2300      	movs	r3, #0
 800b870:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b872:	2550      	movs	r5, #80	@ 0x50
 800b874:	6013      	str	r3, [r2, #0]
 800b876:	e72b      	b.n	800b6d0 <__gethex+0xf8>
 800b878:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d1f3      	bne.n	800b866 <__gethex+0x28e>
 800b87e:	e7e0      	b.n	800b842 <__gethex+0x26a>
 800b880:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b882:	2b00      	cmp	r3, #0
 800b884:	d1dd      	bne.n	800b842 <__gethex+0x26a>
 800b886:	e7ee      	b.n	800b866 <__gethex+0x28e>
 800b888:	0800da55 	.word	0x0800da55
 800b88c:	0800d9eb 	.word	0x0800d9eb
 800b890:	0800daac 	.word	0x0800daac
 800b894:	1e6f      	subs	r7, r5, #1
 800b896:	f1b9 0f00 	cmp.w	r9, #0
 800b89a:	d130      	bne.n	800b8fe <__gethex+0x326>
 800b89c:	b127      	cbz	r7, 800b8a8 <__gethex+0x2d0>
 800b89e:	4639      	mov	r1, r7
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	f7fe fd12 	bl	800a2ca <__any_on>
 800b8a6:	4681      	mov	r9, r0
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	4629      	mov	r1, r5
 800b8ac:	1b76      	subs	r6, r6, r5
 800b8ae:	2502      	movs	r5, #2
 800b8b0:	117a      	asrs	r2, r7, #5
 800b8b2:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b8b6:	f007 071f 	and.w	r7, r7, #31
 800b8ba:	40bb      	lsls	r3, r7
 800b8bc:	4213      	tst	r3, r2
 800b8be:	4620      	mov	r0, r4
 800b8c0:	bf18      	it	ne
 800b8c2:	f049 0902 	orrne.w	r9, r9, #2
 800b8c6:	f7ff fe1f 	bl	800b508 <rshift>
 800b8ca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b8ce:	f1b9 0f00 	cmp.w	r9, #0
 800b8d2:	d047      	beq.n	800b964 <__gethex+0x38c>
 800b8d4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b8d8:	2b02      	cmp	r3, #2
 800b8da:	d015      	beq.n	800b908 <__gethex+0x330>
 800b8dc:	2b03      	cmp	r3, #3
 800b8de:	d017      	beq.n	800b910 <__gethex+0x338>
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	d109      	bne.n	800b8f8 <__gethex+0x320>
 800b8e4:	f019 0f02 	tst.w	r9, #2
 800b8e8:	d006      	beq.n	800b8f8 <__gethex+0x320>
 800b8ea:	f8da 3000 	ldr.w	r3, [sl]
 800b8ee:	ea49 0903 	orr.w	r9, r9, r3
 800b8f2:	f019 0f01 	tst.w	r9, #1
 800b8f6:	d10e      	bne.n	800b916 <__gethex+0x33e>
 800b8f8:	f045 0510 	orr.w	r5, r5, #16
 800b8fc:	e032      	b.n	800b964 <__gethex+0x38c>
 800b8fe:	f04f 0901 	mov.w	r9, #1
 800b902:	e7d1      	b.n	800b8a8 <__gethex+0x2d0>
 800b904:	2501      	movs	r5, #1
 800b906:	e7e2      	b.n	800b8ce <__gethex+0x2f6>
 800b908:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b90a:	f1c3 0301 	rsb	r3, r3, #1
 800b90e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b910:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b912:	2b00      	cmp	r3, #0
 800b914:	d0f0      	beq.n	800b8f8 <__gethex+0x320>
 800b916:	f04f 0c00 	mov.w	ip, #0
 800b91a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b91e:	f104 0314 	add.w	r3, r4, #20
 800b922:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b926:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b92a:	4618      	mov	r0, r3
 800b92c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b930:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b934:	d01b      	beq.n	800b96e <__gethex+0x396>
 800b936:	3201      	adds	r2, #1
 800b938:	6002      	str	r2, [r0, #0]
 800b93a:	2d02      	cmp	r5, #2
 800b93c:	f104 0314 	add.w	r3, r4, #20
 800b940:	d13c      	bne.n	800b9bc <__gethex+0x3e4>
 800b942:	f8d8 2000 	ldr.w	r2, [r8]
 800b946:	3a01      	subs	r2, #1
 800b948:	42b2      	cmp	r2, r6
 800b94a:	d109      	bne.n	800b960 <__gethex+0x388>
 800b94c:	2201      	movs	r2, #1
 800b94e:	1171      	asrs	r1, r6, #5
 800b950:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b954:	f006 061f 	and.w	r6, r6, #31
 800b958:	fa02 f606 	lsl.w	r6, r2, r6
 800b95c:	421e      	tst	r6, r3
 800b95e:	d13a      	bne.n	800b9d6 <__gethex+0x3fe>
 800b960:	f045 0520 	orr.w	r5, r5, #32
 800b964:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b966:	601c      	str	r4, [r3, #0]
 800b968:	9b02      	ldr	r3, [sp, #8]
 800b96a:	601f      	str	r7, [r3, #0]
 800b96c:	e6b0      	b.n	800b6d0 <__gethex+0xf8>
 800b96e:	4299      	cmp	r1, r3
 800b970:	f843 cc04 	str.w	ip, [r3, #-4]
 800b974:	d8d9      	bhi.n	800b92a <__gethex+0x352>
 800b976:	68a3      	ldr	r3, [r4, #8]
 800b978:	459b      	cmp	fp, r3
 800b97a:	db17      	blt.n	800b9ac <__gethex+0x3d4>
 800b97c:	6861      	ldr	r1, [r4, #4]
 800b97e:	9801      	ldr	r0, [sp, #4]
 800b980:	3101      	adds	r1, #1
 800b982:	f7fe f823 	bl	80099cc <_Balloc>
 800b986:	4681      	mov	r9, r0
 800b988:	b918      	cbnz	r0, 800b992 <__gethex+0x3ba>
 800b98a:	4602      	mov	r2, r0
 800b98c:	2184      	movs	r1, #132	@ 0x84
 800b98e:	4b19      	ldr	r3, [pc, #100]	@ (800b9f4 <__gethex+0x41c>)
 800b990:	e6c5      	b.n	800b71e <__gethex+0x146>
 800b992:	6922      	ldr	r2, [r4, #16]
 800b994:	f104 010c 	add.w	r1, r4, #12
 800b998:	3202      	adds	r2, #2
 800b99a:	0092      	lsls	r2, r2, #2
 800b99c:	300c      	adds	r0, #12
 800b99e:	f7ff fd6d 	bl	800b47c <memcpy>
 800b9a2:	4621      	mov	r1, r4
 800b9a4:	9801      	ldr	r0, [sp, #4]
 800b9a6:	f7fe f851 	bl	8009a4c <_Bfree>
 800b9aa:	464c      	mov	r4, r9
 800b9ac:	6923      	ldr	r3, [r4, #16]
 800b9ae:	1c5a      	adds	r2, r3, #1
 800b9b0:	6122      	str	r2, [r4, #16]
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b9b8:	615a      	str	r2, [r3, #20]
 800b9ba:	e7be      	b.n	800b93a <__gethex+0x362>
 800b9bc:	6922      	ldr	r2, [r4, #16]
 800b9be:	455a      	cmp	r2, fp
 800b9c0:	dd0b      	ble.n	800b9da <__gethex+0x402>
 800b9c2:	2101      	movs	r1, #1
 800b9c4:	4620      	mov	r0, r4
 800b9c6:	f7ff fd9f 	bl	800b508 <rshift>
 800b9ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b9ce:	3701      	adds	r7, #1
 800b9d0:	42bb      	cmp	r3, r7
 800b9d2:	f6ff aee0 	blt.w	800b796 <__gethex+0x1be>
 800b9d6:	2501      	movs	r5, #1
 800b9d8:	e7c2      	b.n	800b960 <__gethex+0x388>
 800b9da:	f016 061f 	ands.w	r6, r6, #31
 800b9de:	d0fa      	beq.n	800b9d6 <__gethex+0x3fe>
 800b9e0:	4453      	add	r3, sl
 800b9e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b9e6:	f7fe f8e3 	bl	8009bb0 <__hi0bits>
 800b9ea:	f1c6 0620 	rsb	r6, r6, #32
 800b9ee:	42b0      	cmp	r0, r6
 800b9f0:	dbe7      	blt.n	800b9c2 <__gethex+0x3ea>
 800b9f2:	e7f0      	b.n	800b9d6 <__gethex+0x3fe>
 800b9f4:	0800d9eb 	.word	0x0800d9eb

0800b9f8 <L_shift>:
 800b9f8:	f1c2 0208 	rsb	r2, r2, #8
 800b9fc:	0092      	lsls	r2, r2, #2
 800b9fe:	b570      	push	{r4, r5, r6, lr}
 800ba00:	f1c2 0620 	rsb	r6, r2, #32
 800ba04:	6843      	ldr	r3, [r0, #4]
 800ba06:	6804      	ldr	r4, [r0, #0]
 800ba08:	fa03 f506 	lsl.w	r5, r3, r6
 800ba0c:	432c      	orrs	r4, r5
 800ba0e:	40d3      	lsrs	r3, r2
 800ba10:	6004      	str	r4, [r0, #0]
 800ba12:	f840 3f04 	str.w	r3, [r0, #4]!
 800ba16:	4288      	cmp	r0, r1
 800ba18:	d3f4      	bcc.n	800ba04 <L_shift+0xc>
 800ba1a:	bd70      	pop	{r4, r5, r6, pc}

0800ba1c <__match>:
 800ba1c:	b530      	push	{r4, r5, lr}
 800ba1e:	6803      	ldr	r3, [r0, #0]
 800ba20:	3301      	adds	r3, #1
 800ba22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba26:	b914      	cbnz	r4, 800ba2e <__match+0x12>
 800ba28:	6003      	str	r3, [r0, #0]
 800ba2a:	2001      	movs	r0, #1
 800ba2c:	bd30      	pop	{r4, r5, pc}
 800ba2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba32:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ba36:	2d19      	cmp	r5, #25
 800ba38:	bf98      	it	ls
 800ba3a:	3220      	addls	r2, #32
 800ba3c:	42a2      	cmp	r2, r4
 800ba3e:	d0f0      	beq.n	800ba22 <__match+0x6>
 800ba40:	2000      	movs	r0, #0
 800ba42:	e7f3      	b.n	800ba2c <__match+0x10>

0800ba44 <__hexnan>:
 800ba44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba48:	2500      	movs	r5, #0
 800ba4a:	680b      	ldr	r3, [r1, #0]
 800ba4c:	4682      	mov	sl, r0
 800ba4e:	115e      	asrs	r6, r3, #5
 800ba50:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ba54:	f013 031f 	ands.w	r3, r3, #31
 800ba58:	bf18      	it	ne
 800ba5a:	3604      	addne	r6, #4
 800ba5c:	1f37      	subs	r7, r6, #4
 800ba5e:	4690      	mov	r8, r2
 800ba60:	46b9      	mov	r9, r7
 800ba62:	463c      	mov	r4, r7
 800ba64:	46ab      	mov	fp, r5
 800ba66:	b087      	sub	sp, #28
 800ba68:	6801      	ldr	r1, [r0, #0]
 800ba6a:	9301      	str	r3, [sp, #4]
 800ba6c:	f846 5c04 	str.w	r5, [r6, #-4]
 800ba70:	9502      	str	r5, [sp, #8]
 800ba72:	784a      	ldrb	r2, [r1, #1]
 800ba74:	1c4b      	adds	r3, r1, #1
 800ba76:	9303      	str	r3, [sp, #12]
 800ba78:	b342      	cbz	r2, 800bacc <__hexnan+0x88>
 800ba7a:	4610      	mov	r0, r2
 800ba7c:	9105      	str	r1, [sp, #20]
 800ba7e:	9204      	str	r2, [sp, #16]
 800ba80:	f7ff fd95 	bl	800b5ae <__hexdig_fun>
 800ba84:	2800      	cmp	r0, #0
 800ba86:	d151      	bne.n	800bb2c <__hexnan+0xe8>
 800ba88:	9a04      	ldr	r2, [sp, #16]
 800ba8a:	9905      	ldr	r1, [sp, #20]
 800ba8c:	2a20      	cmp	r2, #32
 800ba8e:	d818      	bhi.n	800bac2 <__hexnan+0x7e>
 800ba90:	9b02      	ldr	r3, [sp, #8]
 800ba92:	459b      	cmp	fp, r3
 800ba94:	dd13      	ble.n	800babe <__hexnan+0x7a>
 800ba96:	454c      	cmp	r4, r9
 800ba98:	d206      	bcs.n	800baa8 <__hexnan+0x64>
 800ba9a:	2d07      	cmp	r5, #7
 800ba9c:	dc04      	bgt.n	800baa8 <__hexnan+0x64>
 800ba9e:	462a      	mov	r2, r5
 800baa0:	4649      	mov	r1, r9
 800baa2:	4620      	mov	r0, r4
 800baa4:	f7ff ffa8 	bl	800b9f8 <L_shift>
 800baa8:	4544      	cmp	r4, r8
 800baaa:	d952      	bls.n	800bb52 <__hexnan+0x10e>
 800baac:	2300      	movs	r3, #0
 800baae:	f1a4 0904 	sub.w	r9, r4, #4
 800bab2:	f844 3c04 	str.w	r3, [r4, #-4]
 800bab6:	461d      	mov	r5, r3
 800bab8:	464c      	mov	r4, r9
 800baba:	f8cd b008 	str.w	fp, [sp, #8]
 800babe:	9903      	ldr	r1, [sp, #12]
 800bac0:	e7d7      	b.n	800ba72 <__hexnan+0x2e>
 800bac2:	2a29      	cmp	r2, #41	@ 0x29
 800bac4:	d157      	bne.n	800bb76 <__hexnan+0x132>
 800bac6:	3102      	adds	r1, #2
 800bac8:	f8ca 1000 	str.w	r1, [sl]
 800bacc:	f1bb 0f00 	cmp.w	fp, #0
 800bad0:	d051      	beq.n	800bb76 <__hexnan+0x132>
 800bad2:	454c      	cmp	r4, r9
 800bad4:	d206      	bcs.n	800bae4 <__hexnan+0xa0>
 800bad6:	2d07      	cmp	r5, #7
 800bad8:	dc04      	bgt.n	800bae4 <__hexnan+0xa0>
 800bada:	462a      	mov	r2, r5
 800badc:	4649      	mov	r1, r9
 800bade:	4620      	mov	r0, r4
 800bae0:	f7ff ff8a 	bl	800b9f8 <L_shift>
 800bae4:	4544      	cmp	r4, r8
 800bae6:	d936      	bls.n	800bb56 <__hexnan+0x112>
 800bae8:	4623      	mov	r3, r4
 800baea:	f1a8 0204 	sub.w	r2, r8, #4
 800baee:	f853 1b04 	ldr.w	r1, [r3], #4
 800baf2:	429f      	cmp	r7, r3
 800baf4:	f842 1f04 	str.w	r1, [r2, #4]!
 800baf8:	d2f9      	bcs.n	800baee <__hexnan+0xaa>
 800bafa:	1b3b      	subs	r3, r7, r4
 800bafc:	f023 0303 	bic.w	r3, r3, #3
 800bb00:	3304      	adds	r3, #4
 800bb02:	3401      	adds	r4, #1
 800bb04:	3e03      	subs	r6, #3
 800bb06:	42b4      	cmp	r4, r6
 800bb08:	bf88      	it	hi
 800bb0a:	2304      	movhi	r3, #4
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	4443      	add	r3, r8
 800bb10:	f843 2b04 	str.w	r2, [r3], #4
 800bb14:	429f      	cmp	r7, r3
 800bb16:	d2fb      	bcs.n	800bb10 <__hexnan+0xcc>
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	b91b      	cbnz	r3, 800bb24 <__hexnan+0xe0>
 800bb1c:	4547      	cmp	r7, r8
 800bb1e:	d128      	bne.n	800bb72 <__hexnan+0x12e>
 800bb20:	2301      	movs	r3, #1
 800bb22:	603b      	str	r3, [r7, #0]
 800bb24:	2005      	movs	r0, #5
 800bb26:	b007      	add	sp, #28
 800bb28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb2c:	3501      	adds	r5, #1
 800bb2e:	2d08      	cmp	r5, #8
 800bb30:	f10b 0b01 	add.w	fp, fp, #1
 800bb34:	dd06      	ble.n	800bb44 <__hexnan+0x100>
 800bb36:	4544      	cmp	r4, r8
 800bb38:	d9c1      	bls.n	800babe <__hexnan+0x7a>
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	2501      	movs	r5, #1
 800bb3e:	f844 3c04 	str.w	r3, [r4, #-4]
 800bb42:	3c04      	subs	r4, #4
 800bb44:	6822      	ldr	r2, [r4, #0]
 800bb46:	f000 000f 	and.w	r0, r0, #15
 800bb4a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bb4e:	6020      	str	r0, [r4, #0]
 800bb50:	e7b5      	b.n	800babe <__hexnan+0x7a>
 800bb52:	2508      	movs	r5, #8
 800bb54:	e7b3      	b.n	800babe <__hexnan+0x7a>
 800bb56:	9b01      	ldr	r3, [sp, #4]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d0dd      	beq.n	800bb18 <__hexnan+0xd4>
 800bb5c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb60:	f1c3 0320 	rsb	r3, r3, #32
 800bb64:	40da      	lsrs	r2, r3
 800bb66:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bb6a:	4013      	ands	r3, r2
 800bb6c:	f846 3c04 	str.w	r3, [r6, #-4]
 800bb70:	e7d2      	b.n	800bb18 <__hexnan+0xd4>
 800bb72:	3f04      	subs	r7, #4
 800bb74:	e7d0      	b.n	800bb18 <__hexnan+0xd4>
 800bb76:	2004      	movs	r0, #4
 800bb78:	e7d5      	b.n	800bb26 <__hexnan+0xe2>

0800bb7a <__ascii_mbtowc>:
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	b901      	cbnz	r1, 800bb80 <__ascii_mbtowc+0x6>
 800bb7e:	a901      	add	r1, sp, #4
 800bb80:	b142      	cbz	r2, 800bb94 <__ascii_mbtowc+0x1a>
 800bb82:	b14b      	cbz	r3, 800bb98 <__ascii_mbtowc+0x1e>
 800bb84:	7813      	ldrb	r3, [r2, #0]
 800bb86:	600b      	str	r3, [r1, #0]
 800bb88:	7812      	ldrb	r2, [r2, #0]
 800bb8a:	1e10      	subs	r0, r2, #0
 800bb8c:	bf18      	it	ne
 800bb8e:	2001      	movne	r0, #1
 800bb90:	b002      	add	sp, #8
 800bb92:	4770      	bx	lr
 800bb94:	4610      	mov	r0, r2
 800bb96:	e7fb      	b.n	800bb90 <__ascii_mbtowc+0x16>
 800bb98:	f06f 0001 	mvn.w	r0, #1
 800bb9c:	e7f8      	b.n	800bb90 <__ascii_mbtowc+0x16>

0800bb9e <_realloc_r>:
 800bb9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bba2:	4607      	mov	r7, r0
 800bba4:	4614      	mov	r4, r2
 800bba6:	460d      	mov	r5, r1
 800bba8:	b921      	cbnz	r1, 800bbb4 <_realloc_r+0x16>
 800bbaa:	4611      	mov	r1, r2
 800bbac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb0:	f7fd be80 	b.w	80098b4 <_malloc_r>
 800bbb4:	b92a      	cbnz	r2, 800bbc2 <_realloc_r+0x24>
 800bbb6:	f7fd fe0b 	bl	80097d0 <_free_r>
 800bbba:	4625      	mov	r5, r4
 800bbbc:	4628      	mov	r0, r5
 800bbbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbc2:	f000 f840 	bl	800bc46 <_malloc_usable_size_r>
 800bbc6:	4284      	cmp	r4, r0
 800bbc8:	4606      	mov	r6, r0
 800bbca:	d802      	bhi.n	800bbd2 <_realloc_r+0x34>
 800bbcc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bbd0:	d8f4      	bhi.n	800bbbc <_realloc_r+0x1e>
 800bbd2:	4621      	mov	r1, r4
 800bbd4:	4638      	mov	r0, r7
 800bbd6:	f7fd fe6d 	bl	80098b4 <_malloc_r>
 800bbda:	4680      	mov	r8, r0
 800bbdc:	b908      	cbnz	r0, 800bbe2 <_realloc_r+0x44>
 800bbde:	4645      	mov	r5, r8
 800bbe0:	e7ec      	b.n	800bbbc <_realloc_r+0x1e>
 800bbe2:	42b4      	cmp	r4, r6
 800bbe4:	4622      	mov	r2, r4
 800bbe6:	4629      	mov	r1, r5
 800bbe8:	bf28      	it	cs
 800bbea:	4632      	movcs	r2, r6
 800bbec:	f7ff fc46 	bl	800b47c <memcpy>
 800bbf0:	4629      	mov	r1, r5
 800bbf2:	4638      	mov	r0, r7
 800bbf4:	f7fd fdec 	bl	80097d0 <_free_r>
 800bbf8:	e7f1      	b.n	800bbde <_realloc_r+0x40>

0800bbfa <__ascii_wctomb>:
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	4608      	mov	r0, r1
 800bbfe:	b141      	cbz	r1, 800bc12 <__ascii_wctomb+0x18>
 800bc00:	2aff      	cmp	r2, #255	@ 0xff
 800bc02:	d904      	bls.n	800bc0e <__ascii_wctomb+0x14>
 800bc04:	228a      	movs	r2, #138	@ 0x8a
 800bc06:	f04f 30ff 	mov.w	r0, #4294967295
 800bc0a:	601a      	str	r2, [r3, #0]
 800bc0c:	4770      	bx	lr
 800bc0e:	2001      	movs	r0, #1
 800bc10:	700a      	strb	r2, [r1, #0]
 800bc12:	4770      	bx	lr

0800bc14 <fiprintf>:
 800bc14:	b40e      	push	{r1, r2, r3}
 800bc16:	b503      	push	{r0, r1, lr}
 800bc18:	4601      	mov	r1, r0
 800bc1a:	ab03      	add	r3, sp, #12
 800bc1c:	4805      	ldr	r0, [pc, #20]	@ (800bc34 <fiprintf+0x20>)
 800bc1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc22:	6800      	ldr	r0, [r0, #0]
 800bc24:	9301      	str	r3, [sp, #4]
 800bc26:	f000 f83d 	bl	800bca4 <_vfiprintf_r>
 800bc2a:	b002      	add	sp, #8
 800bc2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc30:	b003      	add	sp, #12
 800bc32:	4770      	bx	lr
 800bc34:	20000050 	.word	0x20000050

0800bc38 <abort>:
 800bc38:	2006      	movs	r0, #6
 800bc3a:	b508      	push	{r3, lr}
 800bc3c:	f000 fa06 	bl	800c04c <raise>
 800bc40:	2001      	movs	r0, #1
 800bc42:	f7f5 ff1c 	bl	8001a7e <_exit>

0800bc46 <_malloc_usable_size_r>:
 800bc46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc4a:	1f18      	subs	r0, r3, #4
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	bfbc      	itt	lt
 800bc50:	580b      	ldrlt	r3, [r1, r0]
 800bc52:	18c0      	addlt	r0, r0, r3
 800bc54:	4770      	bx	lr

0800bc56 <__sfputc_r>:
 800bc56:	6893      	ldr	r3, [r2, #8]
 800bc58:	b410      	push	{r4}
 800bc5a:	3b01      	subs	r3, #1
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	6093      	str	r3, [r2, #8]
 800bc60:	da07      	bge.n	800bc72 <__sfputc_r+0x1c>
 800bc62:	6994      	ldr	r4, [r2, #24]
 800bc64:	42a3      	cmp	r3, r4
 800bc66:	db01      	blt.n	800bc6c <__sfputc_r+0x16>
 800bc68:	290a      	cmp	r1, #10
 800bc6a:	d102      	bne.n	800bc72 <__sfputc_r+0x1c>
 800bc6c:	bc10      	pop	{r4}
 800bc6e:	f000 b931 	b.w	800bed4 <__swbuf_r>
 800bc72:	6813      	ldr	r3, [r2, #0]
 800bc74:	1c58      	adds	r0, r3, #1
 800bc76:	6010      	str	r0, [r2, #0]
 800bc78:	7019      	strb	r1, [r3, #0]
 800bc7a:	4608      	mov	r0, r1
 800bc7c:	bc10      	pop	{r4}
 800bc7e:	4770      	bx	lr

0800bc80 <__sfputs_r>:
 800bc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc82:	4606      	mov	r6, r0
 800bc84:	460f      	mov	r7, r1
 800bc86:	4614      	mov	r4, r2
 800bc88:	18d5      	adds	r5, r2, r3
 800bc8a:	42ac      	cmp	r4, r5
 800bc8c:	d101      	bne.n	800bc92 <__sfputs_r+0x12>
 800bc8e:	2000      	movs	r0, #0
 800bc90:	e007      	b.n	800bca2 <__sfputs_r+0x22>
 800bc92:	463a      	mov	r2, r7
 800bc94:	4630      	mov	r0, r6
 800bc96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc9a:	f7ff ffdc 	bl	800bc56 <__sfputc_r>
 800bc9e:	1c43      	adds	r3, r0, #1
 800bca0:	d1f3      	bne.n	800bc8a <__sfputs_r+0xa>
 800bca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bca4 <_vfiprintf_r>:
 800bca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca8:	460d      	mov	r5, r1
 800bcaa:	4614      	mov	r4, r2
 800bcac:	4698      	mov	r8, r3
 800bcae:	4606      	mov	r6, r0
 800bcb0:	b09d      	sub	sp, #116	@ 0x74
 800bcb2:	b118      	cbz	r0, 800bcbc <_vfiprintf_r+0x18>
 800bcb4:	6a03      	ldr	r3, [r0, #32]
 800bcb6:	b90b      	cbnz	r3, 800bcbc <_vfiprintf_r+0x18>
 800bcb8:	f7fc fdee 	bl	8008898 <__sinit>
 800bcbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bcbe:	07d9      	lsls	r1, r3, #31
 800bcc0:	d405      	bmi.n	800bcce <_vfiprintf_r+0x2a>
 800bcc2:	89ab      	ldrh	r3, [r5, #12]
 800bcc4:	059a      	lsls	r2, r3, #22
 800bcc6:	d402      	bmi.n	800bcce <_vfiprintf_r+0x2a>
 800bcc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bcca:	f7fc ff0e 	bl	8008aea <__retarget_lock_acquire_recursive>
 800bcce:	89ab      	ldrh	r3, [r5, #12]
 800bcd0:	071b      	lsls	r3, r3, #28
 800bcd2:	d501      	bpl.n	800bcd8 <_vfiprintf_r+0x34>
 800bcd4:	692b      	ldr	r3, [r5, #16]
 800bcd6:	b99b      	cbnz	r3, 800bd00 <_vfiprintf_r+0x5c>
 800bcd8:	4629      	mov	r1, r5
 800bcda:	4630      	mov	r0, r6
 800bcdc:	f000 f938 	bl	800bf50 <__swsetup_r>
 800bce0:	b170      	cbz	r0, 800bd00 <_vfiprintf_r+0x5c>
 800bce2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bce4:	07dc      	lsls	r4, r3, #31
 800bce6:	d504      	bpl.n	800bcf2 <_vfiprintf_r+0x4e>
 800bce8:	f04f 30ff 	mov.w	r0, #4294967295
 800bcec:	b01d      	add	sp, #116	@ 0x74
 800bcee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcf2:	89ab      	ldrh	r3, [r5, #12]
 800bcf4:	0598      	lsls	r0, r3, #22
 800bcf6:	d4f7      	bmi.n	800bce8 <_vfiprintf_r+0x44>
 800bcf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bcfa:	f7fc fef7 	bl	8008aec <__retarget_lock_release_recursive>
 800bcfe:	e7f3      	b.n	800bce8 <_vfiprintf_r+0x44>
 800bd00:	2300      	movs	r3, #0
 800bd02:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd04:	2320      	movs	r3, #32
 800bd06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd0a:	2330      	movs	r3, #48	@ 0x30
 800bd0c:	f04f 0901 	mov.w	r9, #1
 800bd10:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd14:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800bec0 <_vfiprintf_r+0x21c>
 800bd18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd1c:	4623      	mov	r3, r4
 800bd1e:	469a      	mov	sl, r3
 800bd20:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd24:	b10a      	cbz	r2, 800bd2a <_vfiprintf_r+0x86>
 800bd26:	2a25      	cmp	r2, #37	@ 0x25
 800bd28:	d1f9      	bne.n	800bd1e <_vfiprintf_r+0x7a>
 800bd2a:	ebba 0b04 	subs.w	fp, sl, r4
 800bd2e:	d00b      	beq.n	800bd48 <_vfiprintf_r+0xa4>
 800bd30:	465b      	mov	r3, fp
 800bd32:	4622      	mov	r2, r4
 800bd34:	4629      	mov	r1, r5
 800bd36:	4630      	mov	r0, r6
 800bd38:	f7ff ffa2 	bl	800bc80 <__sfputs_r>
 800bd3c:	3001      	adds	r0, #1
 800bd3e:	f000 80a7 	beq.w	800be90 <_vfiprintf_r+0x1ec>
 800bd42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd44:	445a      	add	r2, fp
 800bd46:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd48:	f89a 3000 	ldrb.w	r3, [sl]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	f000 809f 	beq.w	800be90 <_vfiprintf_r+0x1ec>
 800bd52:	2300      	movs	r3, #0
 800bd54:	f04f 32ff 	mov.w	r2, #4294967295
 800bd58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd5c:	f10a 0a01 	add.w	sl, sl, #1
 800bd60:	9304      	str	r3, [sp, #16]
 800bd62:	9307      	str	r3, [sp, #28]
 800bd64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bd68:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd6a:	4654      	mov	r4, sl
 800bd6c:	2205      	movs	r2, #5
 800bd6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd72:	4853      	ldr	r0, [pc, #332]	@ (800bec0 <_vfiprintf_r+0x21c>)
 800bd74:	f7fc febb 	bl	8008aee <memchr>
 800bd78:	9a04      	ldr	r2, [sp, #16]
 800bd7a:	b9d8      	cbnz	r0, 800bdb4 <_vfiprintf_r+0x110>
 800bd7c:	06d1      	lsls	r1, r2, #27
 800bd7e:	bf44      	itt	mi
 800bd80:	2320      	movmi	r3, #32
 800bd82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd86:	0713      	lsls	r3, r2, #28
 800bd88:	bf44      	itt	mi
 800bd8a:	232b      	movmi	r3, #43	@ 0x2b
 800bd8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd90:	f89a 3000 	ldrb.w	r3, [sl]
 800bd94:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd96:	d015      	beq.n	800bdc4 <_vfiprintf_r+0x120>
 800bd98:	4654      	mov	r4, sl
 800bd9a:	2000      	movs	r0, #0
 800bd9c:	f04f 0c0a 	mov.w	ip, #10
 800bda0:	9a07      	ldr	r2, [sp, #28]
 800bda2:	4621      	mov	r1, r4
 800bda4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bda8:	3b30      	subs	r3, #48	@ 0x30
 800bdaa:	2b09      	cmp	r3, #9
 800bdac:	d94b      	bls.n	800be46 <_vfiprintf_r+0x1a2>
 800bdae:	b1b0      	cbz	r0, 800bdde <_vfiprintf_r+0x13a>
 800bdb0:	9207      	str	r2, [sp, #28]
 800bdb2:	e014      	b.n	800bdde <_vfiprintf_r+0x13a>
 800bdb4:	eba0 0308 	sub.w	r3, r0, r8
 800bdb8:	fa09 f303 	lsl.w	r3, r9, r3
 800bdbc:	4313      	orrs	r3, r2
 800bdbe:	46a2      	mov	sl, r4
 800bdc0:	9304      	str	r3, [sp, #16]
 800bdc2:	e7d2      	b.n	800bd6a <_vfiprintf_r+0xc6>
 800bdc4:	9b03      	ldr	r3, [sp, #12]
 800bdc6:	1d19      	adds	r1, r3, #4
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	9103      	str	r1, [sp, #12]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	bfbb      	ittet	lt
 800bdd0:	425b      	neglt	r3, r3
 800bdd2:	f042 0202 	orrlt.w	r2, r2, #2
 800bdd6:	9307      	strge	r3, [sp, #28]
 800bdd8:	9307      	strlt	r3, [sp, #28]
 800bdda:	bfb8      	it	lt
 800bddc:	9204      	strlt	r2, [sp, #16]
 800bdde:	7823      	ldrb	r3, [r4, #0]
 800bde0:	2b2e      	cmp	r3, #46	@ 0x2e
 800bde2:	d10a      	bne.n	800bdfa <_vfiprintf_r+0x156>
 800bde4:	7863      	ldrb	r3, [r4, #1]
 800bde6:	2b2a      	cmp	r3, #42	@ 0x2a
 800bde8:	d132      	bne.n	800be50 <_vfiprintf_r+0x1ac>
 800bdea:	9b03      	ldr	r3, [sp, #12]
 800bdec:	3402      	adds	r4, #2
 800bdee:	1d1a      	adds	r2, r3, #4
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	9203      	str	r2, [sp, #12]
 800bdf4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bdf8:	9305      	str	r3, [sp, #20]
 800bdfa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800bec4 <_vfiprintf_r+0x220>
 800bdfe:	2203      	movs	r2, #3
 800be00:	4650      	mov	r0, sl
 800be02:	7821      	ldrb	r1, [r4, #0]
 800be04:	f7fc fe73 	bl	8008aee <memchr>
 800be08:	b138      	cbz	r0, 800be1a <_vfiprintf_r+0x176>
 800be0a:	2240      	movs	r2, #64	@ 0x40
 800be0c:	9b04      	ldr	r3, [sp, #16]
 800be0e:	eba0 000a 	sub.w	r0, r0, sl
 800be12:	4082      	lsls	r2, r0
 800be14:	4313      	orrs	r3, r2
 800be16:	3401      	adds	r4, #1
 800be18:	9304      	str	r3, [sp, #16]
 800be1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be1e:	2206      	movs	r2, #6
 800be20:	4829      	ldr	r0, [pc, #164]	@ (800bec8 <_vfiprintf_r+0x224>)
 800be22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be26:	f7fc fe62 	bl	8008aee <memchr>
 800be2a:	2800      	cmp	r0, #0
 800be2c:	d03f      	beq.n	800beae <_vfiprintf_r+0x20a>
 800be2e:	4b27      	ldr	r3, [pc, #156]	@ (800becc <_vfiprintf_r+0x228>)
 800be30:	bb1b      	cbnz	r3, 800be7a <_vfiprintf_r+0x1d6>
 800be32:	9b03      	ldr	r3, [sp, #12]
 800be34:	3307      	adds	r3, #7
 800be36:	f023 0307 	bic.w	r3, r3, #7
 800be3a:	3308      	adds	r3, #8
 800be3c:	9303      	str	r3, [sp, #12]
 800be3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be40:	443b      	add	r3, r7
 800be42:	9309      	str	r3, [sp, #36]	@ 0x24
 800be44:	e76a      	b.n	800bd1c <_vfiprintf_r+0x78>
 800be46:	460c      	mov	r4, r1
 800be48:	2001      	movs	r0, #1
 800be4a:	fb0c 3202 	mla	r2, ip, r2, r3
 800be4e:	e7a8      	b.n	800bda2 <_vfiprintf_r+0xfe>
 800be50:	2300      	movs	r3, #0
 800be52:	f04f 0c0a 	mov.w	ip, #10
 800be56:	4619      	mov	r1, r3
 800be58:	3401      	adds	r4, #1
 800be5a:	9305      	str	r3, [sp, #20]
 800be5c:	4620      	mov	r0, r4
 800be5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be62:	3a30      	subs	r2, #48	@ 0x30
 800be64:	2a09      	cmp	r2, #9
 800be66:	d903      	bls.n	800be70 <_vfiprintf_r+0x1cc>
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d0c6      	beq.n	800bdfa <_vfiprintf_r+0x156>
 800be6c:	9105      	str	r1, [sp, #20]
 800be6e:	e7c4      	b.n	800bdfa <_vfiprintf_r+0x156>
 800be70:	4604      	mov	r4, r0
 800be72:	2301      	movs	r3, #1
 800be74:	fb0c 2101 	mla	r1, ip, r1, r2
 800be78:	e7f0      	b.n	800be5c <_vfiprintf_r+0x1b8>
 800be7a:	ab03      	add	r3, sp, #12
 800be7c:	9300      	str	r3, [sp, #0]
 800be7e:	462a      	mov	r2, r5
 800be80:	4630      	mov	r0, r6
 800be82:	4b13      	ldr	r3, [pc, #76]	@ (800bed0 <_vfiprintf_r+0x22c>)
 800be84:	a904      	add	r1, sp, #16
 800be86:	f7fb feb5 	bl	8007bf4 <_printf_float>
 800be8a:	4607      	mov	r7, r0
 800be8c:	1c78      	adds	r0, r7, #1
 800be8e:	d1d6      	bne.n	800be3e <_vfiprintf_r+0x19a>
 800be90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be92:	07d9      	lsls	r1, r3, #31
 800be94:	d405      	bmi.n	800bea2 <_vfiprintf_r+0x1fe>
 800be96:	89ab      	ldrh	r3, [r5, #12]
 800be98:	059a      	lsls	r2, r3, #22
 800be9a:	d402      	bmi.n	800bea2 <_vfiprintf_r+0x1fe>
 800be9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be9e:	f7fc fe25 	bl	8008aec <__retarget_lock_release_recursive>
 800bea2:	89ab      	ldrh	r3, [r5, #12]
 800bea4:	065b      	lsls	r3, r3, #25
 800bea6:	f53f af1f 	bmi.w	800bce8 <_vfiprintf_r+0x44>
 800beaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800beac:	e71e      	b.n	800bcec <_vfiprintf_r+0x48>
 800beae:	ab03      	add	r3, sp, #12
 800beb0:	9300      	str	r3, [sp, #0]
 800beb2:	462a      	mov	r2, r5
 800beb4:	4630      	mov	r0, r6
 800beb6:	4b06      	ldr	r3, [pc, #24]	@ (800bed0 <_vfiprintf_r+0x22c>)
 800beb8:	a904      	add	r1, sp, #16
 800beba:	f7fc f939 	bl	8008130 <_printf_i>
 800bebe:	e7e4      	b.n	800be8a <_vfiprintf_r+0x1e6>
 800bec0:	0800da57 	.word	0x0800da57
 800bec4:	0800da5d 	.word	0x0800da5d
 800bec8:	0800da61 	.word	0x0800da61
 800becc:	08007bf5 	.word	0x08007bf5
 800bed0:	0800bc81 	.word	0x0800bc81

0800bed4 <__swbuf_r>:
 800bed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bed6:	460e      	mov	r6, r1
 800bed8:	4614      	mov	r4, r2
 800beda:	4605      	mov	r5, r0
 800bedc:	b118      	cbz	r0, 800bee6 <__swbuf_r+0x12>
 800bede:	6a03      	ldr	r3, [r0, #32]
 800bee0:	b90b      	cbnz	r3, 800bee6 <__swbuf_r+0x12>
 800bee2:	f7fc fcd9 	bl	8008898 <__sinit>
 800bee6:	69a3      	ldr	r3, [r4, #24]
 800bee8:	60a3      	str	r3, [r4, #8]
 800beea:	89a3      	ldrh	r3, [r4, #12]
 800beec:	071a      	lsls	r2, r3, #28
 800beee:	d501      	bpl.n	800bef4 <__swbuf_r+0x20>
 800bef0:	6923      	ldr	r3, [r4, #16]
 800bef2:	b943      	cbnz	r3, 800bf06 <__swbuf_r+0x32>
 800bef4:	4621      	mov	r1, r4
 800bef6:	4628      	mov	r0, r5
 800bef8:	f000 f82a 	bl	800bf50 <__swsetup_r>
 800befc:	b118      	cbz	r0, 800bf06 <__swbuf_r+0x32>
 800befe:	f04f 37ff 	mov.w	r7, #4294967295
 800bf02:	4638      	mov	r0, r7
 800bf04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf06:	6823      	ldr	r3, [r4, #0]
 800bf08:	6922      	ldr	r2, [r4, #16]
 800bf0a:	b2f6      	uxtb	r6, r6
 800bf0c:	1a98      	subs	r0, r3, r2
 800bf0e:	6963      	ldr	r3, [r4, #20]
 800bf10:	4637      	mov	r7, r6
 800bf12:	4283      	cmp	r3, r0
 800bf14:	dc05      	bgt.n	800bf22 <__swbuf_r+0x4e>
 800bf16:	4621      	mov	r1, r4
 800bf18:	4628      	mov	r0, r5
 800bf1a:	f7ff fa4b 	bl	800b3b4 <_fflush_r>
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	d1ed      	bne.n	800befe <__swbuf_r+0x2a>
 800bf22:	68a3      	ldr	r3, [r4, #8]
 800bf24:	3b01      	subs	r3, #1
 800bf26:	60a3      	str	r3, [r4, #8]
 800bf28:	6823      	ldr	r3, [r4, #0]
 800bf2a:	1c5a      	adds	r2, r3, #1
 800bf2c:	6022      	str	r2, [r4, #0]
 800bf2e:	701e      	strb	r6, [r3, #0]
 800bf30:	6962      	ldr	r2, [r4, #20]
 800bf32:	1c43      	adds	r3, r0, #1
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d004      	beq.n	800bf42 <__swbuf_r+0x6e>
 800bf38:	89a3      	ldrh	r3, [r4, #12]
 800bf3a:	07db      	lsls	r3, r3, #31
 800bf3c:	d5e1      	bpl.n	800bf02 <__swbuf_r+0x2e>
 800bf3e:	2e0a      	cmp	r6, #10
 800bf40:	d1df      	bne.n	800bf02 <__swbuf_r+0x2e>
 800bf42:	4621      	mov	r1, r4
 800bf44:	4628      	mov	r0, r5
 800bf46:	f7ff fa35 	bl	800b3b4 <_fflush_r>
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	d0d9      	beq.n	800bf02 <__swbuf_r+0x2e>
 800bf4e:	e7d6      	b.n	800befe <__swbuf_r+0x2a>

0800bf50 <__swsetup_r>:
 800bf50:	b538      	push	{r3, r4, r5, lr}
 800bf52:	4b29      	ldr	r3, [pc, #164]	@ (800bff8 <__swsetup_r+0xa8>)
 800bf54:	4605      	mov	r5, r0
 800bf56:	6818      	ldr	r0, [r3, #0]
 800bf58:	460c      	mov	r4, r1
 800bf5a:	b118      	cbz	r0, 800bf64 <__swsetup_r+0x14>
 800bf5c:	6a03      	ldr	r3, [r0, #32]
 800bf5e:	b90b      	cbnz	r3, 800bf64 <__swsetup_r+0x14>
 800bf60:	f7fc fc9a 	bl	8008898 <__sinit>
 800bf64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf68:	0719      	lsls	r1, r3, #28
 800bf6a:	d422      	bmi.n	800bfb2 <__swsetup_r+0x62>
 800bf6c:	06da      	lsls	r2, r3, #27
 800bf6e:	d407      	bmi.n	800bf80 <__swsetup_r+0x30>
 800bf70:	2209      	movs	r2, #9
 800bf72:	602a      	str	r2, [r5, #0]
 800bf74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf78:	f04f 30ff 	mov.w	r0, #4294967295
 800bf7c:	81a3      	strh	r3, [r4, #12]
 800bf7e:	e033      	b.n	800bfe8 <__swsetup_r+0x98>
 800bf80:	0758      	lsls	r0, r3, #29
 800bf82:	d512      	bpl.n	800bfaa <__swsetup_r+0x5a>
 800bf84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bf86:	b141      	cbz	r1, 800bf9a <__swsetup_r+0x4a>
 800bf88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bf8c:	4299      	cmp	r1, r3
 800bf8e:	d002      	beq.n	800bf96 <__swsetup_r+0x46>
 800bf90:	4628      	mov	r0, r5
 800bf92:	f7fd fc1d 	bl	80097d0 <_free_r>
 800bf96:	2300      	movs	r3, #0
 800bf98:	6363      	str	r3, [r4, #52]	@ 0x34
 800bf9a:	89a3      	ldrh	r3, [r4, #12]
 800bf9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bfa0:	81a3      	strh	r3, [r4, #12]
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	6063      	str	r3, [r4, #4]
 800bfa6:	6923      	ldr	r3, [r4, #16]
 800bfa8:	6023      	str	r3, [r4, #0]
 800bfaa:	89a3      	ldrh	r3, [r4, #12]
 800bfac:	f043 0308 	orr.w	r3, r3, #8
 800bfb0:	81a3      	strh	r3, [r4, #12]
 800bfb2:	6923      	ldr	r3, [r4, #16]
 800bfb4:	b94b      	cbnz	r3, 800bfca <__swsetup_r+0x7a>
 800bfb6:	89a3      	ldrh	r3, [r4, #12]
 800bfb8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bfbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bfc0:	d003      	beq.n	800bfca <__swsetup_r+0x7a>
 800bfc2:	4621      	mov	r1, r4
 800bfc4:	4628      	mov	r0, r5
 800bfc6:	f000 f882 	bl	800c0ce <__smakebuf_r>
 800bfca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfce:	f013 0201 	ands.w	r2, r3, #1
 800bfd2:	d00a      	beq.n	800bfea <__swsetup_r+0x9a>
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	60a2      	str	r2, [r4, #8]
 800bfd8:	6962      	ldr	r2, [r4, #20]
 800bfda:	4252      	negs	r2, r2
 800bfdc:	61a2      	str	r2, [r4, #24]
 800bfde:	6922      	ldr	r2, [r4, #16]
 800bfe0:	b942      	cbnz	r2, 800bff4 <__swsetup_r+0xa4>
 800bfe2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bfe6:	d1c5      	bne.n	800bf74 <__swsetup_r+0x24>
 800bfe8:	bd38      	pop	{r3, r4, r5, pc}
 800bfea:	0799      	lsls	r1, r3, #30
 800bfec:	bf58      	it	pl
 800bfee:	6962      	ldrpl	r2, [r4, #20]
 800bff0:	60a2      	str	r2, [r4, #8]
 800bff2:	e7f4      	b.n	800bfde <__swsetup_r+0x8e>
 800bff4:	2000      	movs	r0, #0
 800bff6:	e7f7      	b.n	800bfe8 <__swsetup_r+0x98>
 800bff8:	20000050 	.word	0x20000050

0800bffc <_raise_r>:
 800bffc:	291f      	cmp	r1, #31
 800bffe:	b538      	push	{r3, r4, r5, lr}
 800c000:	4605      	mov	r5, r0
 800c002:	460c      	mov	r4, r1
 800c004:	d904      	bls.n	800c010 <_raise_r+0x14>
 800c006:	2316      	movs	r3, #22
 800c008:	6003      	str	r3, [r0, #0]
 800c00a:	f04f 30ff 	mov.w	r0, #4294967295
 800c00e:	bd38      	pop	{r3, r4, r5, pc}
 800c010:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c012:	b112      	cbz	r2, 800c01a <_raise_r+0x1e>
 800c014:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c018:	b94b      	cbnz	r3, 800c02e <_raise_r+0x32>
 800c01a:	4628      	mov	r0, r5
 800c01c:	f000 f830 	bl	800c080 <_getpid_r>
 800c020:	4622      	mov	r2, r4
 800c022:	4601      	mov	r1, r0
 800c024:	4628      	mov	r0, r5
 800c026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c02a:	f000 b817 	b.w	800c05c <_kill_r>
 800c02e:	2b01      	cmp	r3, #1
 800c030:	d00a      	beq.n	800c048 <_raise_r+0x4c>
 800c032:	1c59      	adds	r1, r3, #1
 800c034:	d103      	bne.n	800c03e <_raise_r+0x42>
 800c036:	2316      	movs	r3, #22
 800c038:	6003      	str	r3, [r0, #0]
 800c03a:	2001      	movs	r0, #1
 800c03c:	e7e7      	b.n	800c00e <_raise_r+0x12>
 800c03e:	2100      	movs	r1, #0
 800c040:	4620      	mov	r0, r4
 800c042:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c046:	4798      	blx	r3
 800c048:	2000      	movs	r0, #0
 800c04a:	e7e0      	b.n	800c00e <_raise_r+0x12>

0800c04c <raise>:
 800c04c:	4b02      	ldr	r3, [pc, #8]	@ (800c058 <raise+0xc>)
 800c04e:	4601      	mov	r1, r0
 800c050:	6818      	ldr	r0, [r3, #0]
 800c052:	f7ff bfd3 	b.w	800bffc <_raise_r>
 800c056:	bf00      	nop
 800c058:	20000050 	.word	0x20000050

0800c05c <_kill_r>:
 800c05c:	b538      	push	{r3, r4, r5, lr}
 800c05e:	2300      	movs	r3, #0
 800c060:	4d06      	ldr	r5, [pc, #24]	@ (800c07c <_kill_r+0x20>)
 800c062:	4604      	mov	r4, r0
 800c064:	4608      	mov	r0, r1
 800c066:	4611      	mov	r1, r2
 800c068:	602b      	str	r3, [r5, #0]
 800c06a:	f7f5 fcf8 	bl	8001a5e <_kill>
 800c06e:	1c43      	adds	r3, r0, #1
 800c070:	d102      	bne.n	800c078 <_kill_r+0x1c>
 800c072:	682b      	ldr	r3, [r5, #0]
 800c074:	b103      	cbz	r3, 800c078 <_kill_r+0x1c>
 800c076:	6023      	str	r3, [r4, #0]
 800c078:	bd38      	pop	{r3, r4, r5, pc}
 800c07a:	bf00      	nop
 800c07c:	20000424 	.word	0x20000424

0800c080 <_getpid_r>:
 800c080:	f7f5 bce6 	b.w	8001a50 <_getpid>

0800c084 <__swhatbuf_r>:
 800c084:	b570      	push	{r4, r5, r6, lr}
 800c086:	460c      	mov	r4, r1
 800c088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c08c:	4615      	mov	r5, r2
 800c08e:	2900      	cmp	r1, #0
 800c090:	461e      	mov	r6, r3
 800c092:	b096      	sub	sp, #88	@ 0x58
 800c094:	da0c      	bge.n	800c0b0 <__swhatbuf_r+0x2c>
 800c096:	89a3      	ldrh	r3, [r4, #12]
 800c098:	2100      	movs	r1, #0
 800c09a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c09e:	bf14      	ite	ne
 800c0a0:	2340      	movne	r3, #64	@ 0x40
 800c0a2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c0a6:	2000      	movs	r0, #0
 800c0a8:	6031      	str	r1, [r6, #0]
 800c0aa:	602b      	str	r3, [r5, #0]
 800c0ac:	b016      	add	sp, #88	@ 0x58
 800c0ae:	bd70      	pop	{r4, r5, r6, pc}
 800c0b0:	466a      	mov	r2, sp
 800c0b2:	f000 f849 	bl	800c148 <_fstat_r>
 800c0b6:	2800      	cmp	r0, #0
 800c0b8:	dbed      	blt.n	800c096 <__swhatbuf_r+0x12>
 800c0ba:	9901      	ldr	r1, [sp, #4]
 800c0bc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c0c0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c0c4:	4259      	negs	r1, r3
 800c0c6:	4159      	adcs	r1, r3
 800c0c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c0cc:	e7eb      	b.n	800c0a6 <__swhatbuf_r+0x22>

0800c0ce <__smakebuf_r>:
 800c0ce:	898b      	ldrh	r3, [r1, #12]
 800c0d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0d2:	079d      	lsls	r5, r3, #30
 800c0d4:	4606      	mov	r6, r0
 800c0d6:	460c      	mov	r4, r1
 800c0d8:	d507      	bpl.n	800c0ea <__smakebuf_r+0x1c>
 800c0da:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c0de:	6023      	str	r3, [r4, #0]
 800c0e0:	6123      	str	r3, [r4, #16]
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	6163      	str	r3, [r4, #20]
 800c0e6:	b003      	add	sp, #12
 800c0e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0ea:	466a      	mov	r2, sp
 800c0ec:	ab01      	add	r3, sp, #4
 800c0ee:	f7ff ffc9 	bl	800c084 <__swhatbuf_r>
 800c0f2:	9f00      	ldr	r7, [sp, #0]
 800c0f4:	4605      	mov	r5, r0
 800c0f6:	4639      	mov	r1, r7
 800c0f8:	4630      	mov	r0, r6
 800c0fa:	f7fd fbdb 	bl	80098b4 <_malloc_r>
 800c0fe:	b948      	cbnz	r0, 800c114 <__smakebuf_r+0x46>
 800c100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c104:	059a      	lsls	r2, r3, #22
 800c106:	d4ee      	bmi.n	800c0e6 <__smakebuf_r+0x18>
 800c108:	f023 0303 	bic.w	r3, r3, #3
 800c10c:	f043 0302 	orr.w	r3, r3, #2
 800c110:	81a3      	strh	r3, [r4, #12]
 800c112:	e7e2      	b.n	800c0da <__smakebuf_r+0xc>
 800c114:	89a3      	ldrh	r3, [r4, #12]
 800c116:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c11a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c11e:	81a3      	strh	r3, [r4, #12]
 800c120:	9b01      	ldr	r3, [sp, #4]
 800c122:	6020      	str	r0, [r4, #0]
 800c124:	b15b      	cbz	r3, 800c13e <__smakebuf_r+0x70>
 800c126:	4630      	mov	r0, r6
 800c128:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c12c:	f000 f81e 	bl	800c16c <_isatty_r>
 800c130:	b128      	cbz	r0, 800c13e <__smakebuf_r+0x70>
 800c132:	89a3      	ldrh	r3, [r4, #12]
 800c134:	f023 0303 	bic.w	r3, r3, #3
 800c138:	f043 0301 	orr.w	r3, r3, #1
 800c13c:	81a3      	strh	r3, [r4, #12]
 800c13e:	89a3      	ldrh	r3, [r4, #12]
 800c140:	431d      	orrs	r5, r3
 800c142:	81a5      	strh	r5, [r4, #12]
 800c144:	e7cf      	b.n	800c0e6 <__smakebuf_r+0x18>
	...

0800c148 <_fstat_r>:
 800c148:	b538      	push	{r3, r4, r5, lr}
 800c14a:	2300      	movs	r3, #0
 800c14c:	4d06      	ldr	r5, [pc, #24]	@ (800c168 <_fstat_r+0x20>)
 800c14e:	4604      	mov	r4, r0
 800c150:	4608      	mov	r0, r1
 800c152:	4611      	mov	r1, r2
 800c154:	602b      	str	r3, [r5, #0]
 800c156:	f7f5 fce1 	bl	8001b1c <_fstat>
 800c15a:	1c43      	adds	r3, r0, #1
 800c15c:	d102      	bne.n	800c164 <_fstat_r+0x1c>
 800c15e:	682b      	ldr	r3, [r5, #0]
 800c160:	b103      	cbz	r3, 800c164 <_fstat_r+0x1c>
 800c162:	6023      	str	r3, [r4, #0]
 800c164:	bd38      	pop	{r3, r4, r5, pc}
 800c166:	bf00      	nop
 800c168:	20000424 	.word	0x20000424

0800c16c <_isatty_r>:
 800c16c:	b538      	push	{r3, r4, r5, lr}
 800c16e:	2300      	movs	r3, #0
 800c170:	4d05      	ldr	r5, [pc, #20]	@ (800c188 <_isatty_r+0x1c>)
 800c172:	4604      	mov	r4, r0
 800c174:	4608      	mov	r0, r1
 800c176:	602b      	str	r3, [r5, #0]
 800c178:	f7f5 fcdf 	bl	8001b3a <_isatty>
 800c17c:	1c43      	adds	r3, r0, #1
 800c17e:	d102      	bne.n	800c186 <_isatty_r+0x1a>
 800c180:	682b      	ldr	r3, [r5, #0]
 800c182:	b103      	cbz	r3, 800c186 <_isatty_r+0x1a>
 800c184:	6023      	str	r3, [r4, #0]
 800c186:	bd38      	pop	{r3, r4, r5, pc}
 800c188:	20000424 	.word	0x20000424

0800c18c <asin>:
 800c18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c18e:	4604      	mov	r4, r0
 800c190:	460d      	mov	r5, r1
 800c192:	f000 f829 	bl	800c1e8 <__ieee754_asin>
 800c196:	4622      	mov	r2, r4
 800c198:	4606      	mov	r6, r0
 800c19a:	460f      	mov	r7, r1
 800c19c:	462b      	mov	r3, r5
 800c19e:	4620      	mov	r0, r4
 800c1a0:	4629      	mov	r1, r5
 800c1a2:	f7f4 fc33 	bl	8000a0c <__aeabi_dcmpun>
 800c1a6:	b988      	cbnz	r0, 800c1cc <asin+0x40>
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	4629      	mov	r1, r5
 800c1ac:	f000 f818 	bl	800c1e0 <fabs>
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	4b08      	ldr	r3, [pc, #32]	@ (800c1d4 <asin+0x48>)
 800c1b4:	f7f4 fc20 	bl	80009f8 <__aeabi_dcmpgt>
 800c1b8:	b140      	cbz	r0, 800c1cc <asin+0x40>
 800c1ba:	f7fc fc6b 	bl	8008a94 <__errno>
 800c1be:	2321      	movs	r3, #33	@ 0x21
 800c1c0:	6003      	str	r3, [r0, #0]
 800c1c2:	4805      	ldr	r0, [pc, #20]	@ (800c1d8 <asin+0x4c>)
 800c1c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c1c8:	f7ff b966 	b.w	800b498 <nan>
 800c1cc:	4630      	mov	r0, r6
 800c1ce:	4639      	mov	r1, r7
 800c1d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1d2:	bf00      	nop
 800c1d4:	3ff00000 	.word	0x3ff00000
 800c1d8:	0800daab 	.word	0x0800daab

0800c1dc <atan2>:
 800c1dc:	f000 ba00 	b.w	800c5e0 <__ieee754_atan2>

0800c1e0 <fabs>:
 800c1e0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	4770      	bx	lr

0800c1e8 <__ieee754_asin>:
 800c1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ec:	4bc4      	ldr	r3, [pc, #784]	@ (800c500 <__ieee754_asin+0x318>)
 800c1ee:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800c1f2:	b087      	sub	sp, #28
 800c1f4:	429e      	cmp	r6, r3
 800c1f6:	4604      	mov	r4, r0
 800c1f8:	460d      	mov	r5, r1
 800c1fa:	9101      	str	r1, [sp, #4]
 800c1fc:	d929      	bls.n	800c252 <__ieee754_asin+0x6a>
 800c1fe:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800c202:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800c206:	4306      	orrs	r6, r0
 800c208:	d114      	bne.n	800c234 <__ieee754_asin+0x4c>
 800c20a:	a3a3      	add	r3, pc, #652	@ (adr r3, 800c498 <__ieee754_asin+0x2b0>)
 800c20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c210:	f7f4 f962 	bl	80004d8 <__aeabi_dmul>
 800c214:	a3a2      	add	r3, pc, #648	@ (adr r3, 800c4a0 <__ieee754_asin+0x2b8>)
 800c216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c21a:	4606      	mov	r6, r0
 800c21c:	460f      	mov	r7, r1
 800c21e:	4620      	mov	r0, r4
 800c220:	4629      	mov	r1, r5
 800c222:	f7f4 f959 	bl	80004d8 <__aeabi_dmul>
 800c226:	4602      	mov	r2, r0
 800c228:	460b      	mov	r3, r1
 800c22a:	4630      	mov	r0, r6
 800c22c:	4639      	mov	r1, r7
 800c22e:	f7f3 ff9d 	bl	800016c <__adddf3>
 800c232:	e007      	b.n	800c244 <__ieee754_asin+0x5c>
 800c234:	4602      	mov	r2, r0
 800c236:	460b      	mov	r3, r1
 800c238:	f7f3 ff96 	bl	8000168 <__aeabi_dsub>
 800c23c:	4602      	mov	r2, r0
 800c23e:	460b      	mov	r3, r1
 800c240:	f7f4 fa74 	bl	800072c <__aeabi_ddiv>
 800c244:	4604      	mov	r4, r0
 800c246:	460d      	mov	r5, r1
 800c248:	4620      	mov	r0, r4
 800c24a:	4629      	mov	r1, r5
 800c24c:	b007      	add	sp, #28
 800c24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c252:	4bac      	ldr	r3, [pc, #688]	@ (800c504 <__ieee754_asin+0x31c>)
 800c254:	429e      	cmp	r6, r3
 800c256:	d80e      	bhi.n	800c276 <__ieee754_asin+0x8e>
 800c258:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800c25c:	f080 80ab 	bcs.w	800c3b6 <__ieee754_asin+0x1ce>
 800c260:	a391      	add	r3, pc, #580	@ (adr r3, 800c4a8 <__ieee754_asin+0x2c0>)
 800c262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c266:	f7f3 ff81 	bl	800016c <__adddf3>
 800c26a:	2200      	movs	r2, #0
 800c26c:	4ba6      	ldr	r3, [pc, #664]	@ (800c508 <__ieee754_asin+0x320>)
 800c26e:	f7f4 fbc3 	bl	80009f8 <__aeabi_dcmpgt>
 800c272:	2800      	cmp	r0, #0
 800c274:	d1e8      	bne.n	800c248 <__ieee754_asin+0x60>
 800c276:	4620      	mov	r0, r4
 800c278:	4629      	mov	r1, r5
 800c27a:	f7ff ffb1 	bl	800c1e0 <fabs>
 800c27e:	4602      	mov	r2, r0
 800c280:	460b      	mov	r3, r1
 800c282:	2000      	movs	r0, #0
 800c284:	49a0      	ldr	r1, [pc, #640]	@ (800c508 <__ieee754_asin+0x320>)
 800c286:	f7f3 ff6f 	bl	8000168 <__aeabi_dsub>
 800c28a:	2200      	movs	r2, #0
 800c28c:	4b9f      	ldr	r3, [pc, #636]	@ (800c50c <__ieee754_asin+0x324>)
 800c28e:	f7f4 f923 	bl	80004d8 <__aeabi_dmul>
 800c292:	a387      	add	r3, pc, #540	@ (adr r3, 800c4b0 <__ieee754_asin+0x2c8>)
 800c294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c298:	4604      	mov	r4, r0
 800c29a:	460d      	mov	r5, r1
 800c29c:	f7f4 f91c 	bl	80004d8 <__aeabi_dmul>
 800c2a0:	a385      	add	r3, pc, #532	@ (adr r3, 800c4b8 <__ieee754_asin+0x2d0>)
 800c2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a6:	f7f3 ff61 	bl	800016c <__adddf3>
 800c2aa:	4622      	mov	r2, r4
 800c2ac:	462b      	mov	r3, r5
 800c2ae:	f7f4 f913 	bl	80004d8 <__aeabi_dmul>
 800c2b2:	a383      	add	r3, pc, #524	@ (adr r3, 800c4c0 <__ieee754_asin+0x2d8>)
 800c2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b8:	f7f3 ff56 	bl	8000168 <__aeabi_dsub>
 800c2bc:	4622      	mov	r2, r4
 800c2be:	462b      	mov	r3, r5
 800c2c0:	f7f4 f90a 	bl	80004d8 <__aeabi_dmul>
 800c2c4:	a380      	add	r3, pc, #512	@ (adr r3, 800c4c8 <__ieee754_asin+0x2e0>)
 800c2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ca:	f7f3 ff4f 	bl	800016c <__adddf3>
 800c2ce:	4622      	mov	r2, r4
 800c2d0:	462b      	mov	r3, r5
 800c2d2:	f7f4 f901 	bl	80004d8 <__aeabi_dmul>
 800c2d6:	a37e      	add	r3, pc, #504	@ (adr r3, 800c4d0 <__ieee754_asin+0x2e8>)
 800c2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2dc:	f7f3 ff44 	bl	8000168 <__aeabi_dsub>
 800c2e0:	4622      	mov	r2, r4
 800c2e2:	462b      	mov	r3, r5
 800c2e4:	f7f4 f8f8 	bl	80004d8 <__aeabi_dmul>
 800c2e8:	a37b      	add	r3, pc, #492	@ (adr r3, 800c4d8 <__ieee754_asin+0x2f0>)
 800c2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ee:	f7f3 ff3d 	bl	800016c <__adddf3>
 800c2f2:	4622      	mov	r2, r4
 800c2f4:	462b      	mov	r3, r5
 800c2f6:	f7f4 f8ef 	bl	80004d8 <__aeabi_dmul>
 800c2fa:	a379      	add	r3, pc, #484	@ (adr r3, 800c4e0 <__ieee754_asin+0x2f8>)
 800c2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c300:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c304:	4620      	mov	r0, r4
 800c306:	4629      	mov	r1, r5
 800c308:	f7f4 f8e6 	bl	80004d8 <__aeabi_dmul>
 800c30c:	a376      	add	r3, pc, #472	@ (adr r3, 800c4e8 <__ieee754_asin+0x300>)
 800c30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c312:	f7f3 ff29 	bl	8000168 <__aeabi_dsub>
 800c316:	4622      	mov	r2, r4
 800c318:	462b      	mov	r3, r5
 800c31a:	f7f4 f8dd 	bl	80004d8 <__aeabi_dmul>
 800c31e:	a374      	add	r3, pc, #464	@ (adr r3, 800c4f0 <__ieee754_asin+0x308>)
 800c320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c324:	f7f3 ff22 	bl	800016c <__adddf3>
 800c328:	4622      	mov	r2, r4
 800c32a:	462b      	mov	r3, r5
 800c32c:	f7f4 f8d4 	bl	80004d8 <__aeabi_dmul>
 800c330:	a371      	add	r3, pc, #452	@ (adr r3, 800c4f8 <__ieee754_asin+0x310>)
 800c332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c336:	f7f3 ff17 	bl	8000168 <__aeabi_dsub>
 800c33a:	4622      	mov	r2, r4
 800c33c:	462b      	mov	r3, r5
 800c33e:	f7f4 f8cb 	bl	80004d8 <__aeabi_dmul>
 800c342:	4b71      	ldr	r3, [pc, #452]	@ (800c508 <__ieee754_asin+0x320>)
 800c344:	2200      	movs	r2, #0
 800c346:	f7f3 ff11 	bl	800016c <__adddf3>
 800c34a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c34e:	4620      	mov	r0, r4
 800c350:	4629      	mov	r1, r5
 800c352:	f000 fba9 	bl	800caa8 <__ieee754_sqrt>
 800c356:	4b6e      	ldr	r3, [pc, #440]	@ (800c510 <__ieee754_asin+0x328>)
 800c358:	4682      	mov	sl, r0
 800c35a:	429e      	cmp	r6, r3
 800c35c:	468b      	mov	fp, r1
 800c35e:	f240 80d9 	bls.w	800c514 <__ieee754_asin+0x32c>
 800c362:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c36a:	f7f4 f9df 	bl	800072c <__aeabi_ddiv>
 800c36e:	4652      	mov	r2, sl
 800c370:	465b      	mov	r3, fp
 800c372:	f7f4 f8b1 	bl	80004d8 <__aeabi_dmul>
 800c376:	4652      	mov	r2, sl
 800c378:	465b      	mov	r3, fp
 800c37a:	f7f3 fef7 	bl	800016c <__adddf3>
 800c37e:	4602      	mov	r2, r0
 800c380:	460b      	mov	r3, r1
 800c382:	f7f3 fef3 	bl	800016c <__adddf3>
 800c386:	a346      	add	r3, pc, #280	@ (adr r3, 800c4a0 <__ieee754_asin+0x2b8>)
 800c388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c38c:	f7f3 feec 	bl	8000168 <__aeabi_dsub>
 800c390:	4602      	mov	r2, r0
 800c392:	460b      	mov	r3, r1
 800c394:	a140      	add	r1, pc, #256	@ (adr r1, 800c498 <__ieee754_asin+0x2b0>)
 800c396:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c39a:	f7f3 fee5 	bl	8000168 <__aeabi_dsub>
 800c39e:	9b01      	ldr	r3, [sp, #4]
 800c3a0:	4604      	mov	r4, r0
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	bfdc      	itt	le
 800c3a6:	4602      	movle	r2, r0
 800c3a8:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 800c3ac:	460d      	mov	r5, r1
 800c3ae:	bfdc      	itt	le
 800c3b0:	4614      	movle	r4, r2
 800c3b2:	461d      	movle	r5, r3
 800c3b4:	e748      	b.n	800c248 <__ieee754_asin+0x60>
 800c3b6:	4602      	mov	r2, r0
 800c3b8:	460b      	mov	r3, r1
 800c3ba:	f7f4 f88d 	bl	80004d8 <__aeabi_dmul>
 800c3be:	a33c      	add	r3, pc, #240	@ (adr r3, 800c4b0 <__ieee754_asin+0x2c8>)
 800c3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c4:	4606      	mov	r6, r0
 800c3c6:	460f      	mov	r7, r1
 800c3c8:	f7f4 f886 	bl	80004d8 <__aeabi_dmul>
 800c3cc:	a33a      	add	r3, pc, #232	@ (adr r3, 800c4b8 <__ieee754_asin+0x2d0>)
 800c3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d2:	f7f3 fecb 	bl	800016c <__adddf3>
 800c3d6:	4632      	mov	r2, r6
 800c3d8:	463b      	mov	r3, r7
 800c3da:	f7f4 f87d 	bl	80004d8 <__aeabi_dmul>
 800c3de:	a338      	add	r3, pc, #224	@ (adr r3, 800c4c0 <__ieee754_asin+0x2d8>)
 800c3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e4:	f7f3 fec0 	bl	8000168 <__aeabi_dsub>
 800c3e8:	4632      	mov	r2, r6
 800c3ea:	463b      	mov	r3, r7
 800c3ec:	f7f4 f874 	bl	80004d8 <__aeabi_dmul>
 800c3f0:	a335      	add	r3, pc, #212	@ (adr r3, 800c4c8 <__ieee754_asin+0x2e0>)
 800c3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f6:	f7f3 feb9 	bl	800016c <__adddf3>
 800c3fa:	4632      	mov	r2, r6
 800c3fc:	463b      	mov	r3, r7
 800c3fe:	f7f4 f86b 	bl	80004d8 <__aeabi_dmul>
 800c402:	a333      	add	r3, pc, #204	@ (adr r3, 800c4d0 <__ieee754_asin+0x2e8>)
 800c404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c408:	f7f3 feae 	bl	8000168 <__aeabi_dsub>
 800c40c:	4632      	mov	r2, r6
 800c40e:	463b      	mov	r3, r7
 800c410:	f7f4 f862 	bl	80004d8 <__aeabi_dmul>
 800c414:	a330      	add	r3, pc, #192	@ (adr r3, 800c4d8 <__ieee754_asin+0x2f0>)
 800c416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41a:	f7f3 fea7 	bl	800016c <__adddf3>
 800c41e:	4632      	mov	r2, r6
 800c420:	463b      	mov	r3, r7
 800c422:	f7f4 f859 	bl	80004d8 <__aeabi_dmul>
 800c426:	a32e      	add	r3, pc, #184	@ (adr r3, 800c4e0 <__ieee754_asin+0x2f8>)
 800c428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42c:	4680      	mov	r8, r0
 800c42e:	4689      	mov	r9, r1
 800c430:	4630      	mov	r0, r6
 800c432:	4639      	mov	r1, r7
 800c434:	f7f4 f850 	bl	80004d8 <__aeabi_dmul>
 800c438:	a32b      	add	r3, pc, #172	@ (adr r3, 800c4e8 <__ieee754_asin+0x300>)
 800c43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c43e:	f7f3 fe93 	bl	8000168 <__aeabi_dsub>
 800c442:	4632      	mov	r2, r6
 800c444:	463b      	mov	r3, r7
 800c446:	f7f4 f847 	bl	80004d8 <__aeabi_dmul>
 800c44a:	a329      	add	r3, pc, #164	@ (adr r3, 800c4f0 <__ieee754_asin+0x308>)
 800c44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c450:	f7f3 fe8c 	bl	800016c <__adddf3>
 800c454:	4632      	mov	r2, r6
 800c456:	463b      	mov	r3, r7
 800c458:	f7f4 f83e 	bl	80004d8 <__aeabi_dmul>
 800c45c:	a326      	add	r3, pc, #152	@ (adr r3, 800c4f8 <__ieee754_asin+0x310>)
 800c45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c462:	f7f3 fe81 	bl	8000168 <__aeabi_dsub>
 800c466:	4632      	mov	r2, r6
 800c468:	463b      	mov	r3, r7
 800c46a:	f7f4 f835 	bl	80004d8 <__aeabi_dmul>
 800c46e:	2200      	movs	r2, #0
 800c470:	4b25      	ldr	r3, [pc, #148]	@ (800c508 <__ieee754_asin+0x320>)
 800c472:	f7f3 fe7b 	bl	800016c <__adddf3>
 800c476:	4602      	mov	r2, r0
 800c478:	460b      	mov	r3, r1
 800c47a:	4640      	mov	r0, r8
 800c47c:	4649      	mov	r1, r9
 800c47e:	f7f4 f955 	bl	800072c <__aeabi_ddiv>
 800c482:	4622      	mov	r2, r4
 800c484:	462b      	mov	r3, r5
 800c486:	f7f4 f827 	bl	80004d8 <__aeabi_dmul>
 800c48a:	4602      	mov	r2, r0
 800c48c:	460b      	mov	r3, r1
 800c48e:	4620      	mov	r0, r4
 800c490:	4629      	mov	r1, r5
 800c492:	e6cc      	b.n	800c22e <__ieee754_asin+0x46>
 800c494:	f3af 8000 	nop.w
 800c498:	54442d18 	.word	0x54442d18
 800c49c:	3ff921fb 	.word	0x3ff921fb
 800c4a0:	33145c07 	.word	0x33145c07
 800c4a4:	3c91a626 	.word	0x3c91a626
 800c4a8:	8800759c 	.word	0x8800759c
 800c4ac:	7e37e43c 	.word	0x7e37e43c
 800c4b0:	0dfdf709 	.word	0x0dfdf709
 800c4b4:	3f023de1 	.word	0x3f023de1
 800c4b8:	7501b288 	.word	0x7501b288
 800c4bc:	3f49efe0 	.word	0x3f49efe0
 800c4c0:	b5688f3b 	.word	0xb5688f3b
 800c4c4:	3fa48228 	.word	0x3fa48228
 800c4c8:	0e884455 	.word	0x0e884455
 800c4cc:	3fc9c155 	.word	0x3fc9c155
 800c4d0:	03eb6f7d 	.word	0x03eb6f7d
 800c4d4:	3fd4d612 	.word	0x3fd4d612
 800c4d8:	55555555 	.word	0x55555555
 800c4dc:	3fc55555 	.word	0x3fc55555
 800c4e0:	b12e9282 	.word	0xb12e9282
 800c4e4:	3fb3b8c5 	.word	0x3fb3b8c5
 800c4e8:	1b8d0159 	.word	0x1b8d0159
 800c4ec:	3fe6066c 	.word	0x3fe6066c
 800c4f0:	9c598ac8 	.word	0x9c598ac8
 800c4f4:	40002ae5 	.word	0x40002ae5
 800c4f8:	1c8a2d4b 	.word	0x1c8a2d4b
 800c4fc:	40033a27 	.word	0x40033a27
 800c500:	3fefffff 	.word	0x3fefffff
 800c504:	3fdfffff 	.word	0x3fdfffff
 800c508:	3ff00000 	.word	0x3ff00000
 800c50c:	3fe00000 	.word	0x3fe00000
 800c510:	3fef3332 	.word	0x3fef3332
 800c514:	4602      	mov	r2, r0
 800c516:	460b      	mov	r3, r1
 800c518:	f7f3 fe28 	bl	800016c <__adddf3>
 800c51c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c520:	4606      	mov	r6, r0
 800c522:	460f      	mov	r7, r1
 800c524:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c528:	f7f4 f900 	bl	800072c <__aeabi_ddiv>
 800c52c:	4602      	mov	r2, r0
 800c52e:	460b      	mov	r3, r1
 800c530:	4630      	mov	r0, r6
 800c532:	4639      	mov	r1, r7
 800c534:	f7f3 ffd0 	bl	80004d8 <__aeabi_dmul>
 800c538:	f04f 0800 	mov.w	r8, #0
 800c53c:	4606      	mov	r6, r0
 800c53e:	460f      	mov	r7, r1
 800c540:	4642      	mov	r2, r8
 800c542:	465b      	mov	r3, fp
 800c544:	4640      	mov	r0, r8
 800c546:	4659      	mov	r1, fp
 800c548:	f7f3 ffc6 	bl	80004d8 <__aeabi_dmul>
 800c54c:	4602      	mov	r2, r0
 800c54e:	460b      	mov	r3, r1
 800c550:	4620      	mov	r0, r4
 800c552:	4629      	mov	r1, r5
 800c554:	f7f3 fe08 	bl	8000168 <__aeabi_dsub>
 800c558:	4642      	mov	r2, r8
 800c55a:	4604      	mov	r4, r0
 800c55c:	460d      	mov	r5, r1
 800c55e:	465b      	mov	r3, fp
 800c560:	4650      	mov	r0, sl
 800c562:	4659      	mov	r1, fp
 800c564:	f7f3 fe02 	bl	800016c <__adddf3>
 800c568:	4602      	mov	r2, r0
 800c56a:	460b      	mov	r3, r1
 800c56c:	4620      	mov	r0, r4
 800c56e:	4629      	mov	r1, r5
 800c570:	f7f4 f8dc 	bl	800072c <__aeabi_ddiv>
 800c574:	4602      	mov	r2, r0
 800c576:	460b      	mov	r3, r1
 800c578:	f7f3 fdf8 	bl	800016c <__adddf3>
 800c57c:	4602      	mov	r2, r0
 800c57e:	460b      	mov	r3, r1
 800c580:	a113      	add	r1, pc, #76	@ (adr r1, 800c5d0 <__ieee754_asin+0x3e8>)
 800c582:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c586:	f7f3 fdef 	bl	8000168 <__aeabi_dsub>
 800c58a:	4602      	mov	r2, r0
 800c58c:	460b      	mov	r3, r1
 800c58e:	4630      	mov	r0, r6
 800c590:	4639      	mov	r1, r7
 800c592:	f7f3 fde9 	bl	8000168 <__aeabi_dsub>
 800c596:	4642      	mov	r2, r8
 800c598:	4604      	mov	r4, r0
 800c59a:	460d      	mov	r5, r1
 800c59c:	465b      	mov	r3, fp
 800c59e:	4640      	mov	r0, r8
 800c5a0:	4659      	mov	r1, fp
 800c5a2:	f7f3 fde3 	bl	800016c <__adddf3>
 800c5a6:	4602      	mov	r2, r0
 800c5a8:	460b      	mov	r3, r1
 800c5aa:	a10b      	add	r1, pc, #44	@ (adr r1, 800c5d8 <__ieee754_asin+0x3f0>)
 800c5ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5b0:	f7f3 fdda 	bl	8000168 <__aeabi_dsub>
 800c5b4:	4602      	mov	r2, r0
 800c5b6:	460b      	mov	r3, r1
 800c5b8:	4620      	mov	r0, r4
 800c5ba:	4629      	mov	r1, r5
 800c5bc:	f7f3 fdd4 	bl	8000168 <__aeabi_dsub>
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	460b      	mov	r3, r1
 800c5c4:	a104      	add	r1, pc, #16	@ (adr r1, 800c5d8 <__ieee754_asin+0x3f0>)
 800c5c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5ca:	e6e6      	b.n	800c39a <__ieee754_asin+0x1b2>
 800c5cc:	f3af 8000 	nop.w
 800c5d0:	33145c07 	.word	0x33145c07
 800c5d4:	3c91a626 	.word	0x3c91a626
 800c5d8:	54442d18 	.word	0x54442d18
 800c5dc:	3fe921fb 	.word	0x3fe921fb

0800c5e0 <__ieee754_atan2>:
 800c5e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e4:	4617      	mov	r7, r2
 800c5e6:	4690      	mov	r8, r2
 800c5e8:	4699      	mov	r9, r3
 800c5ea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c5ee:	427b      	negs	r3, r7
 800c5f0:	f8df a184 	ldr.w	sl, [pc, #388]	@ 800c778 <__ieee754_atan2+0x198>
 800c5f4:	433b      	orrs	r3, r7
 800c5f6:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c5fa:	4553      	cmp	r3, sl
 800c5fc:	4604      	mov	r4, r0
 800c5fe:	460d      	mov	r5, r1
 800c600:	d809      	bhi.n	800c616 <__ieee754_atan2+0x36>
 800c602:	4246      	negs	r6, r0
 800c604:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c608:	4306      	orrs	r6, r0
 800c60a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800c60e:	4556      	cmp	r6, sl
 800c610:	468e      	mov	lr, r1
 800c612:	4683      	mov	fp, r0
 800c614:	d908      	bls.n	800c628 <__ieee754_atan2+0x48>
 800c616:	4642      	mov	r2, r8
 800c618:	464b      	mov	r3, r9
 800c61a:	4620      	mov	r0, r4
 800c61c:	4629      	mov	r1, r5
 800c61e:	f7f3 fda5 	bl	800016c <__adddf3>
 800c622:	4604      	mov	r4, r0
 800c624:	460d      	mov	r5, r1
 800c626:	e016      	b.n	800c656 <__ieee754_atan2+0x76>
 800c628:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 800c62c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800c630:	433e      	orrs	r6, r7
 800c632:	d103      	bne.n	800c63c <__ieee754_atan2+0x5c>
 800c634:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c638:	f000 b8a6 	b.w	800c788 <atan>
 800c63c:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800c640:	f006 0602 	and.w	r6, r6, #2
 800c644:	ea53 0b0b 	orrs.w	fp, r3, fp
 800c648:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800c64c:	d107      	bne.n	800c65e <__ieee754_atan2+0x7e>
 800c64e:	2e02      	cmp	r6, #2
 800c650:	d064      	beq.n	800c71c <__ieee754_atan2+0x13c>
 800c652:	2e03      	cmp	r6, #3
 800c654:	d066      	beq.n	800c724 <__ieee754_atan2+0x144>
 800c656:	4620      	mov	r0, r4
 800c658:	4629      	mov	r1, r5
 800c65a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c65e:	4317      	orrs	r7, r2
 800c660:	d106      	bne.n	800c670 <__ieee754_atan2+0x90>
 800c662:	f1be 0f00 	cmp.w	lr, #0
 800c666:	db68      	blt.n	800c73a <__ieee754_atan2+0x15a>
 800c668:	a537      	add	r5, pc, #220	@ (adr r5, 800c748 <__ieee754_atan2+0x168>)
 800c66a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c66e:	e7f2      	b.n	800c656 <__ieee754_atan2+0x76>
 800c670:	4552      	cmp	r2, sl
 800c672:	d10f      	bne.n	800c694 <__ieee754_atan2+0xb4>
 800c674:	4293      	cmp	r3, r2
 800c676:	f106 36ff 	add.w	r6, r6, #4294967295
 800c67a:	d107      	bne.n	800c68c <__ieee754_atan2+0xac>
 800c67c:	2e02      	cmp	r6, #2
 800c67e:	d855      	bhi.n	800c72c <__ieee754_atan2+0x14c>
 800c680:	4b3e      	ldr	r3, [pc, #248]	@ (800c77c <__ieee754_atan2+0x19c>)
 800c682:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c686:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c68a:	e7e4      	b.n	800c656 <__ieee754_atan2+0x76>
 800c68c:	2e02      	cmp	r6, #2
 800c68e:	d851      	bhi.n	800c734 <__ieee754_atan2+0x154>
 800c690:	4b3b      	ldr	r3, [pc, #236]	@ (800c780 <__ieee754_atan2+0x1a0>)
 800c692:	e7f6      	b.n	800c682 <__ieee754_atan2+0xa2>
 800c694:	4553      	cmp	r3, sl
 800c696:	d0e4      	beq.n	800c662 <__ieee754_atan2+0x82>
 800c698:	1a9b      	subs	r3, r3, r2
 800c69a:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800c69e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c6a2:	da21      	bge.n	800c6e8 <__ieee754_atan2+0x108>
 800c6a4:	f1b9 0f00 	cmp.w	r9, #0
 800c6a8:	da01      	bge.n	800c6ae <__ieee754_atan2+0xce>
 800c6aa:	323c      	adds	r2, #60	@ 0x3c
 800c6ac:	db20      	blt.n	800c6f0 <__ieee754_atan2+0x110>
 800c6ae:	4642      	mov	r2, r8
 800c6b0:	464b      	mov	r3, r9
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	4629      	mov	r1, r5
 800c6b6:	f7f4 f839 	bl	800072c <__aeabi_ddiv>
 800c6ba:	f7ff fd91 	bl	800c1e0 <fabs>
 800c6be:	f000 f863 	bl	800c788 <atan>
 800c6c2:	4604      	mov	r4, r0
 800c6c4:	460d      	mov	r5, r1
 800c6c6:	2e01      	cmp	r6, #1
 800c6c8:	d015      	beq.n	800c6f6 <__ieee754_atan2+0x116>
 800c6ca:	2e02      	cmp	r6, #2
 800c6cc:	d017      	beq.n	800c6fe <__ieee754_atan2+0x11e>
 800c6ce:	2e00      	cmp	r6, #0
 800c6d0:	d0c1      	beq.n	800c656 <__ieee754_atan2+0x76>
 800c6d2:	a31f      	add	r3, pc, #124	@ (adr r3, 800c750 <__ieee754_atan2+0x170>)
 800c6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d8:	4620      	mov	r0, r4
 800c6da:	4629      	mov	r1, r5
 800c6dc:	f7f3 fd44 	bl	8000168 <__aeabi_dsub>
 800c6e0:	a31d      	add	r3, pc, #116	@ (adr r3, 800c758 <__ieee754_atan2+0x178>)
 800c6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e6:	e016      	b.n	800c716 <__ieee754_atan2+0x136>
 800c6e8:	a517      	add	r5, pc, #92	@ (adr r5, 800c748 <__ieee754_atan2+0x168>)
 800c6ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c6ee:	e7ea      	b.n	800c6c6 <__ieee754_atan2+0xe6>
 800c6f0:	2400      	movs	r4, #0
 800c6f2:	2500      	movs	r5, #0
 800c6f4:	e7e7      	b.n	800c6c6 <__ieee754_atan2+0xe6>
 800c6f6:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 800c6fa:	461d      	mov	r5, r3
 800c6fc:	e7ab      	b.n	800c656 <__ieee754_atan2+0x76>
 800c6fe:	a314      	add	r3, pc, #80	@ (adr r3, 800c750 <__ieee754_atan2+0x170>)
 800c700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c704:	4620      	mov	r0, r4
 800c706:	4629      	mov	r1, r5
 800c708:	f7f3 fd2e 	bl	8000168 <__aeabi_dsub>
 800c70c:	4602      	mov	r2, r0
 800c70e:	460b      	mov	r3, r1
 800c710:	a111      	add	r1, pc, #68	@ (adr r1, 800c758 <__ieee754_atan2+0x178>)
 800c712:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c716:	f7f3 fd27 	bl	8000168 <__aeabi_dsub>
 800c71a:	e782      	b.n	800c622 <__ieee754_atan2+0x42>
 800c71c:	a50e      	add	r5, pc, #56	@ (adr r5, 800c758 <__ieee754_atan2+0x178>)
 800c71e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c722:	e798      	b.n	800c656 <__ieee754_atan2+0x76>
 800c724:	a50e      	add	r5, pc, #56	@ (adr r5, 800c760 <__ieee754_atan2+0x180>)
 800c726:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c72a:	e794      	b.n	800c656 <__ieee754_atan2+0x76>
 800c72c:	a50e      	add	r5, pc, #56	@ (adr r5, 800c768 <__ieee754_atan2+0x188>)
 800c72e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c732:	e790      	b.n	800c656 <__ieee754_atan2+0x76>
 800c734:	2400      	movs	r4, #0
 800c736:	2500      	movs	r5, #0
 800c738:	e78d      	b.n	800c656 <__ieee754_atan2+0x76>
 800c73a:	a50d      	add	r5, pc, #52	@ (adr r5, 800c770 <__ieee754_atan2+0x190>)
 800c73c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c740:	e789      	b.n	800c656 <__ieee754_atan2+0x76>
 800c742:	bf00      	nop
 800c744:	f3af 8000 	nop.w
 800c748:	54442d18 	.word	0x54442d18
 800c74c:	3ff921fb 	.word	0x3ff921fb
 800c750:	33145c07 	.word	0x33145c07
 800c754:	3ca1a626 	.word	0x3ca1a626
 800c758:	54442d18 	.word	0x54442d18
 800c75c:	400921fb 	.word	0x400921fb
 800c760:	54442d18 	.word	0x54442d18
 800c764:	c00921fb 	.word	0xc00921fb
 800c768:	54442d18 	.word	0x54442d18
 800c76c:	3fe921fb 	.word	0x3fe921fb
 800c770:	54442d18 	.word	0x54442d18
 800c774:	bff921fb 	.word	0xbff921fb
 800c778:	7ff00000 	.word	0x7ff00000
 800c77c:	0800dd78 	.word	0x0800dd78
 800c780:	0800dd60 	.word	0x0800dd60
 800c784:	00000000 	.word	0x00000000

0800c788 <atan>:
 800c788:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c78c:	4bbc      	ldr	r3, [pc, #752]	@ (800ca80 <atan+0x2f8>)
 800c78e:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800c792:	429e      	cmp	r6, r3
 800c794:	4604      	mov	r4, r0
 800c796:	460d      	mov	r5, r1
 800c798:	468b      	mov	fp, r1
 800c79a:	d918      	bls.n	800c7ce <atan+0x46>
 800c79c:	4bb9      	ldr	r3, [pc, #740]	@ (800ca84 <atan+0x2fc>)
 800c79e:	429e      	cmp	r6, r3
 800c7a0:	d801      	bhi.n	800c7a6 <atan+0x1e>
 800c7a2:	d109      	bne.n	800c7b8 <atan+0x30>
 800c7a4:	b140      	cbz	r0, 800c7b8 <atan+0x30>
 800c7a6:	4622      	mov	r2, r4
 800c7a8:	462b      	mov	r3, r5
 800c7aa:	4620      	mov	r0, r4
 800c7ac:	4629      	mov	r1, r5
 800c7ae:	f7f3 fcdd 	bl	800016c <__adddf3>
 800c7b2:	4604      	mov	r4, r0
 800c7b4:	460d      	mov	r5, r1
 800c7b6:	e006      	b.n	800c7c6 <atan+0x3e>
 800c7b8:	f1bb 0f00 	cmp.w	fp, #0
 800c7bc:	f340 8123 	ble.w	800ca06 <atan+0x27e>
 800c7c0:	a593      	add	r5, pc, #588	@ (adr r5, 800ca10 <atan+0x288>)
 800c7c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	4629      	mov	r1, r5
 800c7ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7ce:	4bae      	ldr	r3, [pc, #696]	@ (800ca88 <atan+0x300>)
 800c7d0:	429e      	cmp	r6, r3
 800c7d2:	d811      	bhi.n	800c7f8 <atan+0x70>
 800c7d4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800c7d8:	429e      	cmp	r6, r3
 800c7da:	d80a      	bhi.n	800c7f2 <atan+0x6a>
 800c7dc:	a38e      	add	r3, pc, #568	@ (adr r3, 800ca18 <atan+0x290>)
 800c7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e2:	f7f3 fcc3 	bl	800016c <__adddf3>
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	4ba8      	ldr	r3, [pc, #672]	@ (800ca8c <atan+0x304>)
 800c7ea:	f7f4 f905 	bl	80009f8 <__aeabi_dcmpgt>
 800c7ee:	2800      	cmp	r0, #0
 800c7f0:	d1e9      	bne.n	800c7c6 <atan+0x3e>
 800c7f2:	f04f 3aff 	mov.w	sl, #4294967295
 800c7f6:	e027      	b.n	800c848 <atan+0xc0>
 800c7f8:	f7ff fcf2 	bl	800c1e0 <fabs>
 800c7fc:	4ba4      	ldr	r3, [pc, #656]	@ (800ca90 <atan+0x308>)
 800c7fe:	4604      	mov	r4, r0
 800c800:	429e      	cmp	r6, r3
 800c802:	460d      	mov	r5, r1
 800c804:	f200 80b8 	bhi.w	800c978 <atan+0x1f0>
 800c808:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800c80c:	429e      	cmp	r6, r3
 800c80e:	f200 809c 	bhi.w	800c94a <atan+0x1c2>
 800c812:	4602      	mov	r2, r0
 800c814:	460b      	mov	r3, r1
 800c816:	f7f3 fca9 	bl	800016c <__adddf3>
 800c81a:	2200      	movs	r2, #0
 800c81c:	4b9b      	ldr	r3, [pc, #620]	@ (800ca8c <atan+0x304>)
 800c81e:	f7f3 fca3 	bl	8000168 <__aeabi_dsub>
 800c822:	2200      	movs	r2, #0
 800c824:	4606      	mov	r6, r0
 800c826:	460f      	mov	r7, r1
 800c828:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c82c:	4620      	mov	r0, r4
 800c82e:	4629      	mov	r1, r5
 800c830:	f7f3 fc9c 	bl	800016c <__adddf3>
 800c834:	4602      	mov	r2, r0
 800c836:	460b      	mov	r3, r1
 800c838:	4630      	mov	r0, r6
 800c83a:	4639      	mov	r1, r7
 800c83c:	f7f3 ff76 	bl	800072c <__aeabi_ddiv>
 800c840:	f04f 0a00 	mov.w	sl, #0
 800c844:	4604      	mov	r4, r0
 800c846:	460d      	mov	r5, r1
 800c848:	4622      	mov	r2, r4
 800c84a:	462b      	mov	r3, r5
 800c84c:	4620      	mov	r0, r4
 800c84e:	4629      	mov	r1, r5
 800c850:	f7f3 fe42 	bl	80004d8 <__aeabi_dmul>
 800c854:	4602      	mov	r2, r0
 800c856:	460b      	mov	r3, r1
 800c858:	4680      	mov	r8, r0
 800c85a:	4689      	mov	r9, r1
 800c85c:	f7f3 fe3c 	bl	80004d8 <__aeabi_dmul>
 800c860:	a36f      	add	r3, pc, #444	@ (adr r3, 800ca20 <atan+0x298>)
 800c862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c866:	4606      	mov	r6, r0
 800c868:	460f      	mov	r7, r1
 800c86a:	f7f3 fe35 	bl	80004d8 <__aeabi_dmul>
 800c86e:	a36e      	add	r3, pc, #440	@ (adr r3, 800ca28 <atan+0x2a0>)
 800c870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c874:	f7f3 fc7a 	bl	800016c <__adddf3>
 800c878:	4632      	mov	r2, r6
 800c87a:	463b      	mov	r3, r7
 800c87c:	f7f3 fe2c 	bl	80004d8 <__aeabi_dmul>
 800c880:	a36b      	add	r3, pc, #428	@ (adr r3, 800ca30 <atan+0x2a8>)
 800c882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c886:	f7f3 fc71 	bl	800016c <__adddf3>
 800c88a:	4632      	mov	r2, r6
 800c88c:	463b      	mov	r3, r7
 800c88e:	f7f3 fe23 	bl	80004d8 <__aeabi_dmul>
 800c892:	a369      	add	r3, pc, #420	@ (adr r3, 800ca38 <atan+0x2b0>)
 800c894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c898:	f7f3 fc68 	bl	800016c <__adddf3>
 800c89c:	4632      	mov	r2, r6
 800c89e:	463b      	mov	r3, r7
 800c8a0:	f7f3 fe1a 	bl	80004d8 <__aeabi_dmul>
 800c8a4:	a366      	add	r3, pc, #408	@ (adr r3, 800ca40 <atan+0x2b8>)
 800c8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8aa:	f7f3 fc5f 	bl	800016c <__adddf3>
 800c8ae:	4632      	mov	r2, r6
 800c8b0:	463b      	mov	r3, r7
 800c8b2:	f7f3 fe11 	bl	80004d8 <__aeabi_dmul>
 800c8b6:	a364      	add	r3, pc, #400	@ (adr r3, 800ca48 <atan+0x2c0>)
 800c8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8bc:	f7f3 fc56 	bl	800016c <__adddf3>
 800c8c0:	4642      	mov	r2, r8
 800c8c2:	464b      	mov	r3, r9
 800c8c4:	f7f3 fe08 	bl	80004d8 <__aeabi_dmul>
 800c8c8:	a361      	add	r3, pc, #388	@ (adr r3, 800ca50 <atan+0x2c8>)
 800c8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ce:	4680      	mov	r8, r0
 800c8d0:	4689      	mov	r9, r1
 800c8d2:	4630      	mov	r0, r6
 800c8d4:	4639      	mov	r1, r7
 800c8d6:	f7f3 fdff 	bl	80004d8 <__aeabi_dmul>
 800c8da:	a35f      	add	r3, pc, #380	@ (adr r3, 800ca58 <atan+0x2d0>)
 800c8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e0:	f7f3 fc42 	bl	8000168 <__aeabi_dsub>
 800c8e4:	4632      	mov	r2, r6
 800c8e6:	463b      	mov	r3, r7
 800c8e8:	f7f3 fdf6 	bl	80004d8 <__aeabi_dmul>
 800c8ec:	a35c      	add	r3, pc, #368	@ (adr r3, 800ca60 <atan+0x2d8>)
 800c8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f2:	f7f3 fc39 	bl	8000168 <__aeabi_dsub>
 800c8f6:	4632      	mov	r2, r6
 800c8f8:	463b      	mov	r3, r7
 800c8fa:	f7f3 fded 	bl	80004d8 <__aeabi_dmul>
 800c8fe:	a35a      	add	r3, pc, #360	@ (adr r3, 800ca68 <atan+0x2e0>)
 800c900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c904:	f7f3 fc30 	bl	8000168 <__aeabi_dsub>
 800c908:	4632      	mov	r2, r6
 800c90a:	463b      	mov	r3, r7
 800c90c:	f7f3 fde4 	bl	80004d8 <__aeabi_dmul>
 800c910:	a357      	add	r3, pc, #348	@ (adr r3, 800ca70 <atan+0x2e8>)
 800c912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c916:	f7f3 fc27 	bl	8000168 <__aeabi_dsub>
 800c91a:	4632      	mov	r2, r6
 800c91c:	463b      	mov	r3, r7
 800c91e:	f7f3 fddb 	bl	80004d8 <__aeabi_dmul>
 800c922:	4602      	mov	r2, r0
 800c924:	460b      	mov	r3, r1
 800c926:	4640      	mov	r0, r8
 800c928:	4649      	mov	r1, r9
 800c92a:	f7f3 fc1f 	bl	800016c <__adddf3>
 800c92e:	4622      	mov	r2, r4
 800c930:	462b      	mov	r3, r5
 800c932:	f7f3 fdd1 	bl	80004d8 <__aeabi_dmul>
 800c936:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c93a:	4602      	mov	r2, r0
 800c93c:	460b      	mov	r3, r1
 800c93e:	d144      	bne.n	800c9ca <atan+0x242>
 800c940:	4620      	mov	r0, r4
 800c942:	4629      	mov	r1, r5
 800c944:	f7f3 fc10 	bl	8000168 <__aeabi_dsub>
 800c948:	e733      	b.n	800c7b2 <atan+0x2a>
 800c94a:	2200      	movs	r2, #0
 800c94c:	4b4f      	ldr	r3, [pc, #316]	@ (800ca8c <atan+0x304>)
 800c94e:	f7f3 fc0b 	bl	8000168 <__aeabi_dsub>
 800c952:	2200      	movs	r2, #0
 800c954:	4606      	mov	r6, r0
 800c956:	460f      	mov	r7, r1
 800c958:	4620      	mov	r0, r4
 800c95a:	4629      	mov	r1, r5
 800c95c:	4b4b      	ldr	r3, [pc, #300]	@ (800ca8c <atan+0x304>)
 800c95e:	f7f3 fc05 	bl	800016c <__adddf3>
 800c962:	4602      	mov	r2, r0
 800c964:	460b      	mov	r3, r1
 800c966:	4630      	mov	r0, r6
 800c968:	4639      	mov	r1, r7
 800c96a:	f7f3 fedf 	bl	800072c <__aeabi_ddiv>
 800c96e:	f04f 0a01 	mov.w	sl, #1
 800c972:	4604      	mov	r4, r0
 800c974:	460d      	mov	r5, r1
 800c976:	e767      	b.n	800c848 <atan+0xc0>
 800c978:	4b46      	ldr	r3, [pc, #280]	@ (800ca94 <atan+0x30c>)
 800c97a:	429e      	cmp	r6, r3
 800c97c:	d21a      	bcs.n	800c9b4 <atan+0x22c>
 800c97e:	2200      	movs	r2, #0
 800c980:	4b45      	ldr	r3, [pc, #276]	@ (800ca98 <atan+0x310>)
 800c982:	f7f3 fbf1 	bl	8000168 <__aeabi_dsub>
 800c986:	2200      	movs	r2, #0
 800c988:	4606      	mov	r6, r0
 800c98a:	460f      	mov	r7, r1
 800c98c:	4620      	mov	r0, r4
 800c98e:	4629      	mov	r1, r5
 800c990:	4b41      	ldr	r3, [pc, #260]	@ (800ca98 <atan+0x310>)
 800c992:	f7f3 fda1 	bl	80004d8 <__aeabi_dmul>
 800c996:	2200      	movs	r2, #0
 800c998:	4b3c      	ldr	r3, [pc, #240]	@ (800ca8c <atan+0x304>)
 800c99a:	f7f3 fbe7 	bl	800016c <__adddf3>
 800c99e:	4602      	mov	r2, r0
 800c9a0:	460b      	mov	r3, r1
 800c9a2:	4630      	mov	r0, r6
 800c9a4:	4639      	mov	r1, r7
 800c9a6:	f7f3 fec1 	bl	800072c <__aeabi_ddiv>
 800c9aa:	f04f 0a02 	mov.w	sl, #2
 800c9ae:	4604      	mov	r4, r0
 800c9b0:	460d      	mov	r5, r1
 800c9b2:	e749      	b.n	800c848 <atan+0xc0>
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	460b      	mov	r3, r1
 800c9b8:	2000      	movs	r0, #0
 800c9ba:	4938      	ldr	r1, [pc, #224]	@ (800ca9c <atan+0x314>)
 800c9bc:	f7f3 feb6 	bl	800072c <__aeabi_ddiv>
 800c9c0:	f04f 0a03 	mov.w	sl, #3
 800c9c4:	4604      	mov	r4, r0
 800c9c6:	460d      	mov	r5, r1
 800c9c8:	e73e      	b.n	800c848 <atan+0xc0>
 800c9ca:	4b35      	ldr	r3, [pc, #212]	@ (800caa0 <atan+0x318>)
 800c9cc:	4e35      	ldr	r6, [pc, #212]	@ (800caa4 <atan+0x31c>)
 800c9ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d6:	f7f3 fbc7 	bl	8000168 <__aeabi_dsub>
 800c9da:	4622      	mov	r2, r4
 800c9dc:	462b      	mov	r3, r5
 800c9de:	f7f3 fbc3 	bl	8000168 <__aeabi_dsub>
 800c9e2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c9e6:	4602      	mov	r2, r0
 800c9e8:	460b      	mov	r3, r1
 800c9ea:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c9ee:	f7f3 fbbb 	bl	8000168 <__aeabi_dsub>
 800c9f2:	f1bb 0f00 	cmp.w	fp, #0
 800c9f6:	4604      	mov	r4, r0
 800c9f8:	460d      	mov	r5, r1
 800c9fa:	f6bf aee4 	bge.w	800c7c6 <atan+0x3e>
 800c9fe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ca02:	461d      	mov	r5, r3
 800ca04:	e6df      	b.n	800c7c6 <atan+0x3e>
 800ca06:	a51c      	add	r5, pc, #112	@ (adr r5, 800ca78 <atan+0x2f0>)
 800ca08:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ca0c:	e6db      	b.n	800c7c6 <atan+0x3e>
 800ca0e:	bf00      	nop
 800ca10:	54442d18 	.word	0x54442d18
 800ca14:	3ff921fb 	.word	0x3ff921fb
 800ca18:	8800759c 	.word	0x8800759c
 800ca1c:	7e37e43c 	.word	0x7e37e43c
 800ca20:	e322da11 	.word	0xe322da11
 800ca24:	3f90ad3a 	.word	0x3f90ad3a
 800ca28:	24760deb 	.word	0x24760deb
 800ca2c:	3fa97b4b 	.word	0x3fa97b4b
 800ca30:	a0d03d51 	.word	0xa0d03d51
 800ca34:	3fb10d66 	.word	0x3fb10d66
 800ca38:	c54c206e 	.word	0xc54c206e
 800ca3c:	3fb745cd 	.word	0x3fb745cd
 800ca40:	920083ff 	.word	0x920083ff
 800ca44:	3fc24924 	.word	0x3fc24924
 800ca48:	5555550d 	.word	0x5555550d
 800ca4c:	3fd55555 	.word	0x3fd55555
 800ca50:	2c6a6c2f 	.word	0x2c6a6c2f
 800ca54:	bfa2b444 	.word	0xbfa2b444
 800ca58:	52defd9a 	.word	0x52defd9a
 800ca5c:	3fadde2d 	.word	0x3fadde2d
 800ca60:	af749a6d 	.word	0xaf749a6d
 800ca64:	3fb3b0f2 	.word	0x3fb3b0f2
 800ca68:	fe231671 	.word	0xfe231671
 800ca6c:	3fbc71c6 	.word	0x3fbc71c6
 800ca70:	9998ebc4 	.word	0x9998ebc4
 800ca74:	3fc99999 	.word	0x3fc99999
 800ca78:	54442d18 	.word	0x54442d18
 800ca7c:	bff921fb 	.word	0xbff921fb
 800ca80:	440fffff 	.word	0x440fffff
 800ca84:	7ff00000 	.word	0x7ff00000
 800ca88:	3fdbffff 	.word	0x3fdbffff
 800ca8c:	3ff00000 	.word	0x3ff00000
 800ca90:	3ff2ffff 	.word	0x3ff2ffff
 800ca94:	40038000 	.word	0x40038000
 800ca98:	3ff80000 	.word	0x3ff80000
 800ca9c:	bff00000 	.word	0xbff00000
 800caa0:	0800dd90 	.word	0x0800dd90
 800caa4:	0800ddb0 	.word	0x0800ddb0

0800caa8 <__ieee754_sqrt>:
 800caa8:	4a65      	ldr	r2, [pc, #404]	@ (800cc40 <__ieee754_sqrt+0x198>)
 800caaa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caae:	438a      	bics	r2, r1
 800cab0:	4606      	mov	r6, r0
 800cab2:	460f      	mov	r7, r1
 800cab4:	460b      	mov	r3, r1
 800cab6:	4604      	mov	r4, r0
 800cab8:	d10e      	bne.n	800cad8 <__ieee754_sqrt+0x30>
 800caba:	4602      	mov	r2, r0
 800cabc:	f7f3 fd0c 	bl	80004d8 <__aeabi_dmul>
 800cac0:	4602      	mov	r2, r0
 800cac2:	460b      	mov	r3, r1
 800cac4:	4630      	mov	r0, r6
 800cac6:	4639      	mov	r1, r7
 800cac8:	f7f3 fb50 	bl	800016c <__adddf3>
 800cacc:	4606      	mov	r6, r0
 800cace:	460f      	mov	r7, r1
 800cad0:	4630      	mov	r0, r6
 800cad2:	4639      	mov	r1, r7
 800cad4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cad8:	2900      	cmp	r1, #0
 800cada:	dc0c      	bgt.n	800caf6 <__ieee754_sqrt+0x4e>
 800cadc:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800cae0:	4302      	orrs	r2, r0
 800cae2:	d0f5      	beq.n	800cad0 <__ieee754_sqrt+0x28>
 800cae4:	b189      	cbz	r1, 800cb0a <__ieee754_sqrt+0x62>
 800cae6:	4602      	mov	r2, r0
 800cae8:	f7f3 fb3e 	bl	8000168 <__aeabi_dsub>
 800caec:	4602      	mov	r2, r0
 800caee:	460b      	mov	r3, r1
 800caf0:	f7f3 fe1c 	bl	800072c <__aeabi_ddiv>
 800caf4:	e7ea      	b.n	800cacc <__ieee754_sqrt+0x24>
 800caf6:	150a      	asrs	r2, r1, #20
 800caf8:	d115      	bne.n	800cb26 <__ieee754_sqrt+0x7e>
 800cafa:	2100      	movs	r1, #0
 800cafc:	e009      	b.n	800cb12 <__ieee754_sqrt+0x6a>
 800cafe:	0ae3      	lsrs	r3, r4, #11
 800cb00:	3a15      	subs	r2, #21
 800cb02:	0564      	lsls	r4, r4, #21
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d0fa      	beq.n	800cafe <__ieee754_sqrt+0x56>
 800cb08:	e7f7      	b.n	800cafa <__ieee754_sqrt+0x52>
 800cb0a:	460a      	mov	r2, r1
 800cb0c:	e7fa      	b.n	800cb04 <__ieee754_sqrt+0x5c>
 800cb0e:	005b      	lsls	r3, r3, #1
 800cb10:	3101      	adds	r1, #1
 800cb12:	02d8      	lsls	r0, r3, #11
 800cb14:	d5fb      	bpl.n	800cb0e <__ieee754_sqrt+0x66>
 800cb16:	1e48      	subs	r0, r1, #1
 800cb18:	1a12      	subs	r2, r2, r0
 800cb1a:	f1c1 0020 	rsb	r0, r1, #32
 800cb1e:	fa24 f000 	lsr.w	r0, r4, r0
 800cb22:	4303      	orrs	r3, r0
 800cb24:	408c      	lsls	r4, r1
 800cb26:	2700      	movs	r7, #0
 800cb28:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 800cb2c:	2116      	movs	r1, #22
 800cb2e:	07d2      	lsls	r2, r2, #31
 800cb30:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800cb34:	463a      	mov	r2, r7
 800cb36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cb3e:	bf5c      	itt	pl
 800cb40:	005b      	lslpl	r3, r3, #1
 800cb42:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800cb46:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cb4a:	bf58      	it	pl
 800cb4c:	0064      	lslpl	r4, r4, #1
 800cb4e:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800cb52:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cb56:	0064      	lsls	r4, r4, #1
 800cb58:	1815      	adds	r5, r2, r0
 800cb5a:	429d      	cmp	r5, r3
 800cb5c:	bfde      	ittt	le
 800cb5e:	182a      	addle	r2, r5, r0
 800cb60:	1b5b      	suble	r3, r3, r5
 800cb62:	183f      	addle	r7, r7, r0
 800cb64:	0fe5      	lsrs	r5, r4, #31
 800cb66:	3901      	subs	r1, #1
 800cb68:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800cb6c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800cb70:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800cb74:	d1f0      	bne.n	800cb58 <__ieee754_sqrt+0xb0>
 800cb76:	460d      	mov	r5, r1
 800cb78:	2620      	movs	r6, #32
 800cb7a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	eb00 0c01 	add.w	ip, r0, r1
 800cb84:	dc02      	bgt.n	800cb8c <__ieee754_sqrt+0xe4>
 800cb86:	d113      	bne.n	800cbb0 <__ieee754_sqrt+0x108>
 800cb88:	45a4      	cmp	ip, r4
 800cb8a:	d811      	bhi.n	800cbb0 <__ieee754_sqrt+0x108>
 800cb8c:	f1bc 0f00 	cmp.w	ip, #0
 800cb90:	eb0c 0100 	add.w	r1, ip, r0
 800cb94:	da3e      	bge.n	800cc14 <__ieee754_sqrt+0x16c>
 800cb96:	2900      	cmp	r1, #0
 800cb98:	db3c      	blt.n	800cc14 <__ieee754_sqrt+0x16c>
 800cb9a:	f102 0e01 	add.w	lr, r2, #1
 800cb9e:	1a9b      	subs	r3, r3, r2
 800cba0:	4672      	mov	r2, lr
 800cba2:	45a4      	cmp	ip, r4
 800cba4:	bf88      	it	hi
 800cba6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800cbaa:	eba4 040c 	sub.w	r4, r4, ip
 800cbae:	4405      	add	r5, r0
 800cbb0:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800cbb4:	3e01      	subs	r6, #1
 800cbb6:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800cbba:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800cbbe:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800cbc2:	d1dc      	bne.n	800cb7e <__ieee754_sqrt+0xd6>
 800cbc4:	431c      	orrs	r4, r3
 800cbc6:	d01a      	beq.n	800cbfe <__ieee754_sqrt+0x156>
 800cbc8:	4c1e      	ldr	r4, [pc, #120]	@ (800cc44 <__ieee754_sqrt+0x19c>)
 800cbca:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 800cc48 <__ieee754_sqrt+0x1a0>
 800cbce:	e9d4 0100 	ldrd	r0, r1, [r4]
 800cbd2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cbd6:	f7f3 fac7 	bl	8000168 <__aeabi_dsub>
 800cbda:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800cbde:	4602      	mov	r2, r0
 800cbe0:	460b      	mov	r3, r1
 800cbe2:	4650      	mov	r0, sl
 800cbe4:	4659      	mov	r1, fp
 800cbe6:	f7f3 fef3 	bl	80009d0 <__aeabi_dcmple>
 800cbea:	b140      	cbz	r0, 800cbfe <__ieee754_sqrt+0x156>
 800cbec:	e9d4 0100 	ldrd	r0, r1, [r4]
 800cbf0:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cbf4:	f1b5 3fff 	cmp.w	r5, #4294967295
 800cbf8:	d10e      	bne.n	800cc18 <__ieee754_sqrt+0x170>
 800cbfa:	4635      	mov	r5, r6
 800cbfc:	3701      	adds	r7, #1
 800cbfe:	107b      	asrs	r3, r7, #1
 800cc00:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800cc04:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800cc08:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 800cc0c:	086b      	lsrs	r3, r5, #1
 800cc0e:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 800cc12:	e75b      	b.n	800cacc <__ieee754_sqrt+0x24>
 800cc14:	4696      	mov	lr, r2
 800cc16:	e7c2      	b.n	800cb9e <__ieee754_sqrt+0xf6>
 800cc18:	f7f3 faa8 	bl	800016c <__adddf3>
 800cc1c:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800cc20:	4602      	mov	r2, r0
 800cc22:	460b      	mov	r3, r1
 800cc24:	4650      	mov	r0, sl
 800cc26:	4659      	mov	r1, fp
 800cc28:	f7f3 fec8 	bl	80009bc <__aeabi_dcmplt>
 800cc2c:	b120      	cbz	r0, 800cc38 <__ieee754_sqrt+0x190>
 800cc2e:	1cab      	adds	r3, r5, #2
 800cc30:	bf08      	it	eq
 800cc32:	3701      	addeq	r7, #1
 800cc34:	3502      	adds	r5, #2
 800cc36:	e7e2      	b.n	800cbfe <__ieee754_sqrt+0x156>
 800cc38:	1c6b      	adds	r3, r5, #1
 800cc3a:	f023 0501 	bic.w	r5, r3, #1
 800cc3e:	e7de      	b.n	800cbfe <__ieee754_sqrt+0x156>
 800cc40:	7ff00000 	.word	0x7ff00000
 800cc44:	0800ddd8 	.word	0x0800ddd8
 800cc48:	0800ddd0 	.word	0x0800ddd0

0800cc4c <_init>:
 800cc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc4e:	bf00      	nop
 800cc50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc52:	bc08      	pop	{r3}
 800cc54:	469e      	mov	lr, r3
 800cc56:	4770      	bx	lr

0800cc58 <_fini>:
 800cc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc5a:	bf00      	nop
 800cc5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc5e:	bc08      	pop	{r3}
 800cc60:	469e      	mov	lr, r3
 800cc62:	4770      	bx	lr
