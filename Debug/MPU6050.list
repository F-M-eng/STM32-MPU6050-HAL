
MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ab0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  08008bc0  08008bc0  00009bc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009090  08009090  0000b1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009090  08009090  0000a090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009098  08009098  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009098  08009098  0000a098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800909c  0800909c  0000a09c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080090a0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  200001d8  08009278  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  08009278  0000b430  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a6c9  00000000  00000000  0000b201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e14  00000000  00000000  000158ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  000176e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f5  00000000  00000000  00018130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001873e  00000000  00000000  00018925  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed1b  00000000  00000000  00031063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008709d  00000000  00000000  0003fd7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6e1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f50  00000000  00000000  000c6e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000cadb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008ba8 	.word	0x08008ba8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08008ba8 	.word	0x08008ba8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	2200      	movs	r2, #0
 8001028:	2300      	movs	r3, #0
 800102a:	4604      	mov	r4, r0
 800102c:	460d      	mov	r5, r1
 800102e:	f7ff fcc5 	bl	80009bc <__aeabi_dcmplt>
 8001032:	b928      	cbnz	r0, 8001040 <__aeabi_d2lz+0x1c>
 8001034:	4620      	mov	r0, r4
 8001036:	4629      	mov	r1, r5
 8001038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800103c:	f000 b80a 	b.w	8001054 <__aeabi_d2ulz>
 8001040:	4620      	mov	r0, r4
 8001042:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001046:	f000 f805 	bl	8001054 <__aeabi_d2ulz>
 800104a:	4240      	negs	r0, r0
 800104c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop

08001054 <__aeabi_d2ulz>:
 8001054:	b5d0      	push	{r4, r6, r7, lr}
 8001056:	2200      	movs	r2, #0
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <__aeabi_d2ulz+0x34>)
 800105a:	4606      	mov	r6, r0
 800105c:	460f      	mov	r7, r1
 800105e:	f7ff fa3b 	bl	80004d8 <__aeabi_dmul>
 8001062:	f7ff fd11 	bl	8000a88 <__aeabi_d2uiz>
 8001066:	4604      	mov	r4, r0
 8001068:	f7ff f9bc 	bl	80003e4 <__aeabi_ui2d>
 800106c:	2200      	movs	r2, #0
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <__aeabi_d2ulz+0x38>)
 8001070:	f7ff fa32 	bl	80004d8 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4630      	mov	r0, r6
 800107a:	4639      	mov	r1, r7
 800107c:	f7ff f874 	bl	8000168 <__aeabi_dsub>
 8001080:	f7ff fd02 	bl	8000a88 <__aeabi_d2uiz>
 8001084:	4621      	mov	r1, r4
 8001086:	bdd0      	pop	{r4, r6, r7, pc}
 8001088:	3df00000 	.word	0x3df00000
 800108c:	41f00000 	.word	0x41f00000

08001090 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001096:	f107 0310 	add.w	r3, r7, #16
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a4:	4b2d      	ldr	r3, [pc, #180]	@ (800115c <MX_GPIO_Init+0xcc>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a2c      	ldr	r2, [pc, #176]	@ (800115c <MX_GPIO_Init+0xcc>)
 80010aa:	f043 0310 	orr.w	r3, r3, #16
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b2a      	ldr	r3, [pc, #168]	@ (800115c <MX_GPIO_Init+0xcc>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0310 	and.w	r3, r3, #16
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010bc:	4b27      	ldr	r3, [pc, #156]	@ (800115c <MX_GPIO_Init+0xcc>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a26      	ldr	r2, [pc, #152]	@ (800115c <MX_GPIO_Init+0xcc>)
 80010c2:	f043 0320 	orr.w	r3, r3, #32
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b24      	ldr	r3, [pc, #144]	@ (800115c <MX_GPIO_Init+0xcc>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f003 0320 	and.w	r3, r3, #32
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	4b21      	ldr	r3, [pc, #132]	@ (800115c <MX_GPIO_Init+0xcc>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a20      	ldr	r2, [pc, #128]	@ (800115c <MX_GPIO_Init+0xcc>)
 80010da:	f043 0304 	orr.w	r3, r3, #4
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b1e      	ldr	r3, [pc, #120]	@ (800115c <MX_GPIO_Init+0xcc>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ec:	4b1b      	ldr	r3, [pc, #108]	@ (800115c <MX_GPIO_Init+0xcc>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a1a      	ldr	r2, [pc, #104]	@ (800115c <MX_GPIO_Init+0xcc>)
 80010f2:	f043 0308 	orr.w	r3, r3, #8
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b18      	ldr	r3, [pc, #96]	@ (800115c <MX_GPIO_Init+0xcc>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	603b      	str	r3, [r7, #0]
 8001102:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	2110      	movs	r1, #16
 8001108:	4815      	ldr	r0, [pc, #84]	@ (8001160 <MX_GPIO_Init+0xd0>)
 800110a:	f001 f90b 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INT_GPIO_Port, INT_Pin, GPIO_PIN_SET);
 800110e:	2201      	movs	r2, #1
 8001110:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001114:	4812      	ldr	r0, [pc, #72]	@ (8001160 <MX_GPIO_Init+0xd0>)
 8001116:	f001 f905 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800111a:	2310      	movs	r3, #16
 800111c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	2301      	movs	r3, #1
 8001120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2302      	movs	r3, #2
 8001128:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800112a:	f107 0310 	add.w	r3, r7, #16
 800112e:	4619      	mov	r1, r3
 8001130:	480b      	ldr	r0, [pc, #44]	@ (8001160 <MX_GPIO_Init+0xd0>)
 8001132:	f000 ff73 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8001136:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800113a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001144:	2303      	movs	r3, #3
 8001146:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	4619      	mov	r1, r3
 800114e:	4804      	ldr	r0, [pc, #16]	@ (8001160 <MX_GPIO_Init+0xd0>)
 8001150:	f000 ff64 	bl	800201c <HAL_GPIO_Init>

}
 8001154:	bf00      	nop
 8001156:	3720      	adds	r7, #32
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40021000 	.word	0x40021000
 8001160:	40010800 	.word	0x40010800

08001164 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001168:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <MX_I2C1_Init+0x50>)
 800116a:	4a13      	ldr	r2, [pc, #76]	@ (80011b8 <MX_I2C1_Init+0x54>)
 800116c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800116e:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <MX_I2C1_Init+0x50>)
 8001170:	4a12      	ldr	r2, [pc, #72]	@ (80011bc <MX_I2C1_Init+0x58>)
 8001172:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001174:	4b0f      	ldr	r3, [pc, #60]	@ (80011b4 <MX_I2C1_Init+0x50>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800117a:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <MX_I2C1_Init+0x50>)
 800117c:	2200      	movs	r2, #0
 800117e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001180:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <MX_I2C1_Init+0x50>)
 8001182:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001186:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001188:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <MX_I2C1_Init+0x50>)
 800118a:	2200      	movs	r2, #0
 800118c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800118e:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <MX_I2C1_Init+0x50>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001194:	4b07      	ldr	r3, [pc, #28]	@ (80011b4 <MX_I2C1_Init+0x50>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <MX_I2C1_Init+0x50>)
 800119c:	2200      	movs	r2, #0
 800119e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011a0:	4804      	ldr	r0, [pc, #16]	@ (80011b4 <MX_I2C1_Init+0x50>)
 80011a2:	f001 f8d7 	bl	8002354 <HAL_I2C_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011ac:	f000 f8fb 	bl	80013a6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200001f4 	.word	0x200001f4
 80011b8:	40005400 	.word	0x40005400
 80011bc:	000186a0 	.word	0x000186a0

080011c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	@ 0x28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a1d      	ldr	r2, [pc, #116]	@ (8001250 <HAL_I2C_MspInit+0x90>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d132      	bne.n	8001246 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001254 <HAL_I2C_MspInit+0x94>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001254 <HAL_I2C_MspInit+0x94>)
 80011e6:	f043 0308 	orr.w	r3, r3, #8
 80011ea:	6193      	str	r3, [r2, #24]
 80011ec:	4b19      	ldr	r3, [pc, #100]	@ (8001254 <HAL_I2C_MspInit+0x94>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	f003 0308 	and.w	r3, r3, #8
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011fe:	2312      	movs	r3, #18
 8001200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001202:	2303      	movs	r3, #3
 8001204:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	4812      	ldr	r0, [pc, #72]	@ (8001258 <HAL_I2C_MspInit+0x98>)
 800120e:	f000 ff05 	bl	800201c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001212:	4b12      	ldr	r3, [pc, #72]	@ (800125c <HAL_I2C_MspInit+0x9c>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	627b      	str	r3, [r7, #36]	@ 0x24
 8001218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800121a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800121e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001222:	f043 0302 	orr.w	r3, r3, #2
 8001226:	627b      	str	r3, [r7, #36]	@ 0x24
 8001228:	4a0c      	ldr	r2, [pc, #48]	@ (800125c <HAL_I2C_MspInit+0x9c>)
 800122a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122c:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800122e:	4b09      	ldr	r3, [pc, #36]	@ (8001254 <HAL_I2C_MspInit+0x94>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	4a08      	ldr	r2, [pc, #32]	@ (8001254 <HAL_I2C_MspInit+0x94>)
 8001234:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001238:	61d3      	str	r3, [r2, #28]
 800123a:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <HAL_I2C_MspInit+0x94>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001246:	bf00      	nop
 8001248:	3728      	adds	r7, #40	@ 0x28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40005400 	.word	0x40005400
 8001254:	40021000 	.word	0x40021000
 8001258:	40010c00 	.word	0x40010c00
 800125c:	40010000 	.word	0x40010000

08001260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001260:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001264:	b0a8      	sub	sp, #160	@ 0xa0
 8001266:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001268:	f000 fd6e 	bl	8001d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800126c:	f000 f856 	bl	800131c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001270:	f7ff ff0e 	bl	8001090 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001274:	f000 f9c4 	bl	8001600 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001278:	f7ff ff74 	bl	8001164 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Init();
 800127c:	f000 fa96 	bl	80017ac <MPU6050_Init>
  MPU6050_ZeroOffsetCalibrated();
 8001280:	f000 fb8a 	bl	8001998 <MPU6050_ZeroOffsetCalibrated>

  float Roll = 0, Yaw = 0, Pitch = 0;
 8001284:	f04f 0300 	mov.w	r3, #0
 8001288:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001294:	f04f 0300 	mov.w	r3, #0
 8001298:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t Timer = HAL_GetTick();
 800129c:	f000 fdac 	bl	8001df8 <HAL_GetTick>
 80012a0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MPU6050_GetEularAngle();
 80012a4:	f000 fbe4 	bl	8001a70 <MPU6050_GetEularAngle>
	  Pitch = MPU6050_GetPitch();
 80012a8:	f000 fd3a 	bl	8001d20 <MPU6050_GetPitch>
 80012ac:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	  Roll = MPU6050_GetRoll();
 80012b0:	f000 fd40 	bl	8001d34 <MPU6050_GetRoll>
 80012b4:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	  Yaw = MPU6050_GetYaw();
 80012b8:	f000 fd28 	bl	8001d0c <MPU6050_GetYaw>
 80012bc:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88

	  char buffer[128];
	  sprintf(buffer, "%f, %f, %f\n",Roll, Yaw, Pitch);
 80012c0:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80012c4:	f7ff f8b0 	bl	8000428 <__aeabi_f2d>
 80012c8:	4680      	mov	r8, r0
 80012ca:	4689      	mov	r9, r1
 80012cc:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80012d0:	f7ff f8aa 	bl	8000428 <__aeabi_f2d>
 80012d4:	4604      	mov	r4, r0
 80012d6:	460d      	mov	r5, r1
 80012d8:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80012dc:	f7ff f8a4 	bl	8000428 <__aeabi_f2d>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4638      	mov	r0, r7
 80012e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012ea:	e9cd 4500 	strd	r4, r5, [sp]
 80012ee:	4642      	mov	r2, r8
 80012f0:	464b      	mov	r3, r9
 80012f2:	4908      	ldr	r1, [pc, #32]	@ (8001314 <main+0xb4>)
 80012f4:	f003 fdbc 	bl	8004e70 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80012f8:	463b      	mov	r3, r7
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7fe ff28 	bl	8000150 <strlen>
 8001300:	4603      	mov	r3, r0
 8001302:	b29a      	uxth	r2, r3
 8001304:	4639      	mov	r1, r7
 8001306:	f04f 33ff 	mov.w	r3, #4294967295
 800130a:	4803      	ldr	r0, [pc, #12]	@ (8001318 <main+0xb8>)
 800130c:	f002 fcb6 	bl	8003c7c <HAL_UART_Transmit>
  {
 8001310:	bf00      	nop
 8001312:	e7c7      	b.n	80012a4 <main+0x44>
 8001314:	08008bc0 	.word	0x08008bc0
 8001318:	2000024c 	.word	0x2000024c

0800131c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b090      	sub	sp, #64	@ 0x40
 8001320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001322:	f107 0318 	add.w	r3, r7, #24
 8001326:	2228      	movs	r2, #40	@ 0x28
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f003 fe05 	bl	8004f3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800133e:	2301      	movs	r3, #1
 8001340:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001342:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001346:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800134c:	2301      	movs	r3, #1
 800134e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001350:	2302      	movs	r3, #2
 8001352:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001354:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001358:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800135a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800135e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001360:	f107 0318 	add.w	r3, r7, #24
 8001364:	4618      	mov	r0, r3
 8001366:	f002 f829 	bl	80033bc <HAL_RCC_OscConfig>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001370:	f000 f819 	bl	80013a6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001374:	230f      	movs	r3, #15
 8001376:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001378:	2302      	movs	r3, #2
 800137a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001380:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001384:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2102      	movs	r1, #2
 800138e:	4618      	mov	r0, r3
 8001390:	f002 fa96 	bl	80038c0 <HAL_RCC_ClockConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800139a:	f000 f804 	bl	80013a6 <Error_Handler>
  }
}
 800139e:	bf00      	nop
 80013a0:	3740      	adds	r7, #64	@ 0x40
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013aa:	b672      	cpsid	i
}
 80013ac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ae:	bf00      	nop
 80013b0:	e7fd      	b.n	80013ae <Error_Handler+0x8>
	...

080013b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013ba:	4b15      	ldr	r3, [pc, #84]	@ (8001410 <HAL_MspInit+0x5c>)
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	4a14      	ldr	r2, [pc, #80]	@ (8001410 <HAL_MspInit+0x5c>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6193      	str	r3, [r2, #24]
 80013c6:	4b12      	ldr	r3, [pc, #72]	@ (8001410 <HAL_MspInit+0x5c>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001410 <HAL_MspInit+0x5c>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001410 <HAL_MspInit+0x5c>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013dc:	61d3      	str	r3, [r2, #28]
 80013de:	4b0c      	ldr	r3, [pc, #48]	@ (8001410 <HAL_MspInit+0x5c>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001414 <HAL_MspInit+0x60>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	4a04      	ldr	r2, [pc, #16]	@ (8001414 <HAL_MspInit+0x60>)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001406:	bf00      	nop
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	40021000 	.word	0x40021000
 8001414:	40010000 	.word	0x40010000

08001418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <NMI_Handler+0x4>

08001420 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <HardFault_Handler+0x4>

08001428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <MemManage_Handler+0x4>

08001430 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <BusFault_Handler+0x4>

08001438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <UsageFault_Handler+0x4>

08001440 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001468:	f000 fcb4 	bl	8001dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}

08001470 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return 1;
 8001474:	2301      	movs	r3, #1
}
 8001476:	4618      	mov	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr

0800147e <_kill>:

int _kill(int pid, int sig)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001488:	f003 fdaa 	bl	8004fe0 <__errno>
 800148c:	4603      	mov	r3, r0
 800148e:	2216      	movs	r2, #22
 8001490:	601a      	str	r2, [r3, #0]
  return -1;
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <_exit>:

void _exit (int status)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014a6:	f04f 31ff 	mov.w	r1, #4294967295
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff ffe7 	bl	800147e <_kill>
  while (1) {}    /* Make sure we hang here */
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <_exit+0x12>

080014b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	e00a      	b.n	80014dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014c6:	f3af 8000 	nop.w
 80014ca:	4601      	mov	r1, r0
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	1c5a      	adds	r2, r3, #1
 80014d0:	60ba      	str	r2, [r7, #8]
 80014d2:	b2ca      	uxtb	r2, r1
 80014d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	3301      	adds	r3, #1
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	dbf0      	blt.n	80014c6 <_read+0x12>
  }

  return len;
 80014e4:	687b      	ldr	r3, [r7, #4]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b086      	sub	sp, #24
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	60f8      	str	r0, [r7, #12]
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	e009      	b.n	8001514 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	60ba      	str	r2, [r7, #8]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	3301      	adds	r3, #1
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	429a      	cmp	r2, r3
 800151a:	dbf1      	blt.n	8001500 <_write+0x12>
  }
  return len;
 800151c:	687b      	ldr	r3, [r7, #4]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <_close>:

int _close(int file)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001532:	4618      	mov	r0, r3
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800154c:	605a      	str	r2, [r3, #4]
  return 0;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr

0800155a <_isatty>:

int _isatty(int file)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001562:	2301      	movs	r3, #1
}
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr

0800156e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800156e:	b480      	push	{r7}
 8001570:	b085      	sub	sp, #20
 8001572:	af00      	add	r7, sp, #0
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr
	...

08001588 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001590:	4a14      	ldr	r2, [pc, #80]	@ (80015e4 <_sbrk+0x5c>)
 8001592:	4b15      	ldr	r3, [pc, #84]	@ (80015e8 <_sbrk+0x60>)
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800159c:	4b13      	ldr	r3, [pc, #76]	@ (80015ec <_sbrk+0x64>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d102      	bne.n	80015aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a4:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <_sbrk+0x64>)
 80015a6:	4a12      	ldr	r2, [pc, #72]	@ (80015f0 <_sbrk+0x68>)
 80015a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015aa:	4b10      	ldr	r3, [pc, #64]	@ (80015ec <_sbrk+0x64>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d207      	bcs.n	80015c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b8:	f003 fd12 	bl	8004fe0 <__errno>
 80015bc:	4603      	mov	r3, r0
 80015be:	220c      	movs	r2, #12
 80015c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
 80015c6:	e009      	b.n	80015dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c8:	4b08      	ldr	r3, [pc, #32]	@ (80015ec <_sbrk+0x64>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ce:	4b07      	ldr	r3, [pc, #28]	@ (80015ec <_sbrk+0x64>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	4a05      	ldr	r2, [pc, #20]	@ (80015ec <_sbrk+0x64>)
 80015d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015da:	68fb      	ldr	r3, [r7, #12]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20005000 	.word	0x20005000
 80015e8:	00000400 	.word	0x00000400
 80015ec:	20000248 	.word	0x20000248
 80015f0:	20000430 	.word	0x20000430

080015f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001604:	4b11      	ldr	r3, [pc, #68]	@ (800164c <MX_USART2_UART_Init+0x4c>)
 8001606:	4a12      	ldr	r2, [pc, #72]	@ (8001650 <MX_USART2_UART_Init+0x50>)
 8001608:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <MX_USART2_UART_Init+0x4c>)
 800160c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001610:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001612:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <MX_USART2_UART_Init+0x4c>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001618:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <MX_USART2_UART_Init+0x4c>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800161e:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <MX_USART2_UART_Init+0x4c>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001624:	4b09      	ldr	r3, [pc, #36]	@ (800164c <MX_USART2_UART_Init+0x4c>)
 8001626:	220c      	movs	r2, #12
 8001628:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162a:	4b08      	ldr	r3, [pc, #32]	@ (800164c <MX_USART2_UART_Init+0x4c>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001630:	4b06      	ldr	r3, [pc, #24]	@ (800164c <MX_USART2_UART_Init+0x4c>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001636:	4805      	ldr	r0, [pc, #20]	@ (800164c <MX_USART2_UART_Init+0x4c>)
 8001638:	f002 fad0 	bl	8003bdc <HAL_UART_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001642:	f7ff feb0 	bl	80013a6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	2000024c 	.word	0x2000024c
 8001650:	40004400 	.word	0x40004400

08001654 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 0310 	add.w	r3, r7, #16
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a1b      	ldr	r2, [pc, #108]	@ (80016dc <HAL_UART_MspInit+0x88>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d12f      	bne.n	80016d4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001674:	4b1a      	ldr	r3, [pc, #104]	@ (80016e0 <HAL_UART_MspInit+0x8c>)
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	4a19      	ldr	r2, [pc, #100]	@ (80016e0 <HAL_UART_MspInit+0x8c>)
 800167a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800167e:	61d3      	str	r3, [r2, #28]
 8001680:	4b17      	ldr	r3, [pc, #92]	@ (80016e0 <HAL_UART_MspInit+0x8c>)
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168c:	4b14      	ldr	r3, [pc, #80]	@ (80016e0 <HAL_UART_MspInit+0x8c>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	4a13      	ldr	r2, [pc, #76]	@ (80016e0 <HAL_UART_MspInit+0x8c>)
 8001692:	f043 0304 	orr.w	r3, r3, #4
 8001696:	6193      	str	r3, [r2, #24]
 8001698:	4b11      	ldr	r3, [pc, #68]	@ (80016e0 <HAL_UART_MspInit+0x8c>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016a4:	2304      	movs	r3, #4
 80016a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ac:	2303      	movs	r3, #3
 80016ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	4619      	mov	r1, r3
 80016b6:	480b      	ldr	r0, [pc, #44]	@ (80016e4 <HAL_UART_MspInit+0x90>)
 80016b8:	f000 fcb0 	bl	800201c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016bc:	2308      	movs	r3, #8
 80016be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c8:	f107 0310 	add.w	r3, r7, #16
 80016cc:	4619      	mov	r1, r3
 80016ce:	4805      	ldr	r0, [pc, #20]	@ (80016e4 <HAL_UART_MspInit+0x90>)
 80016d0:	f000 fca4 	bl	800201c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016d4:	bf00      	nop
 80016d6:	3720      	adds	r7, #32
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40004400 	.word	0x40004400
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40010800 	.word	0x40010800

080016e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016e8:	f7ff ff84 	bl	80015f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016ec:	480b      	ldr	r0, [pc, #44]	@ (800171c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016ee:	490c      	ldr	r1, [pc, #48]	@ (8001720 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001724 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f4:	e002      	b.n	80016fc <LoopCopyDataInit>

080016f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fa:	3304      	adds	r3, #4

080016fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001700:	d3f9      	bcc.n	80016f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001702:	4a09      	ldr	r2, [pc, #36]	@ (8001728 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001704:	4c09      	ldr	r4, [pc, #36]	@ (800172c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001708:	e001      	b.n	800170e <LoopFillZerobss>

0800170a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800170c:	3204      	adds	r2, #4

0800170e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001710:	d3fb      	bcc.n	800170a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001712:	f003 fc6b 	bl	8004fec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001716:	f7ff fda3 	bl	8001260 <main>
  bx lr
 800171a:	4770      	bx	lr
  ldr r0, =_sdata
 800171c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001720:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001724:	080090a0 	.word	0x080090a0
  ldr r2, =_sbss
 8001728:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800172c:	20000430 	.word	0x20000430

08001730 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001730:	e7fe      	b.n	8001730 <ADC1_2_IRQHandler>
	...

08001734 <MPU6050_WriteReg>:
 * @param Reg:寄存器地址
 * @param value:写入的值
 * @retval None
 * */
void MPU6050_WriteReg(uint8_t Reg, uint8_t value)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af02      	add	r7, sp, #8
 800173a:	4603      	mov	r3, r0
 800173c:	460a      	mov	r2, r1
 800173e:	71fb      	strb	r3, [r7, #7]
 8001740:	4613      	mov	r3, r2
 8001742:	71bb      	strb	r3, [r7, #6]
	uint8_t SendData[] = {Reg, value};
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	733b      	strb	r3, [r7, #12]
 8001748:	79bb      	ldrb	r3, [r7, #6]
 800174a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, MPU6050_Location, SendData, sizeof(SendData)/sizeof(SendData[0]), HAL_MAX_DELAY);
 800174c:	f107 020c 	add.w	r2, r7, #12
 8001750:	f04f 33ff 	mov.w	r3, #4294967295
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	2302      	movs	r3, #2
 8001758:	21d0      	movs	r1, #208	@ 0xd0
 800175a:	4803      	ldr	r0, [pc, #12]	@ (8001768 <MPU6050_WriteReg+0x34>)
 800175c:	f000 ff3e 	bl	80025dc <HAL_I2C_Master_Transmit>
}
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	200001f4 	.word	0x200001f4

0800176c <MPU6050_ReadReg>:
 * @brief 在指定寄存器读数据
 * @param Reg:寄存器地址
 * @retval 读取结果
 * */
uint8_t MPU6050_ReadReg(uint8_t Reg)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af02      	add	r7, sp, #8
 8001772:	4603      	mov	r3, r0
 8001774:	71fb      	strb	r3, [r7, #7]
	uint8_t Value;

	//发送要读取的寄存器地址
	HAL_I2C_Master_Transmit(&hi2c1, MPU6050_Location, &Reg, 1, HAL_MAX_DELAY);
 8001776:	1dfa      	adds	r2, r7, #7
 8001778:	f04f 33ff 	mov.w	r3, #4294967295
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	2301      	movs	r3, #1
 8001780:	21d0      	movs	r1, #208	@ 0xd0
 8001782:	4809      	ldr	r0, [pc, #36]	@ (80017a8 <MPU6050_ReadReg+0x3c>)
 8001784:	f000 ff2a 	bl	80025dc <HAL_I2C_Master_Transmit>

	//读取寄存器的值
	HAL_I2C_Master_Receive(&hi2c1, MPU6050_Location, &Value, 1, HAL_MAX_DELAY);
 8001788:	f107 020f 	add.w	r2, r7, #15
 800178c:	f04f 33ff 	mov.w	r3, #4294967295
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	2301      	movs	r3, #1
 8001794:	21d0      	movs	r1, #208	@ 0xd0
 8001796:	4804      	ldr	r0, [pc, #16]	@ (80017a8 <MPU6050_ReadReg+0x3c>)
 8001798:	f001 f81e 	bl	80027d8 <HAL_I2C_Master_Receive>

	return Value;
 800179c:	7bfb      	ldrb	r3, [r7, #15]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200001f4 	.word	0x200001f4

080017ac <MPU6050_Init>:
 * @brief MPU6050初始化
 * @param None
 * @retval None
 * */
void MPU6050_Init()
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
	MPU6050_WriteReg(0x6b, 0x80);		//复位
 80017b0:	2180      	movs	r1, #128	@ 0x80
 80017b2:	206b      	movs	r0, #107	@ 0x6b
 80017b4:	f7ff ffbe 	bl	8001734 <MPU6050_WriteReg>
	HAL_Delay(100);
 80017b8:	2064      	movs	r0, #100	@ 0x64
 80017ba:	f000 fb27 	bl	8001e0c <HAL_Delay>

	MPU6050_WriteReg(0x6B, 0x00);		//关闭睡眠模式
 80017be:	2100      	movs	r1, #0
 80017c0:	206b      	movs	r0, #107	@ 0x6b
 80017c2:	f7ff ffb7 	bl	8001734 <MPU6050_WriteReg>

	MPU6050_WriteReg(0x1B, 0x10);		//陀螺仪量程，+-1000°/s
 80017c6:	2110      	movs	r1, #16
 80017c8:	201b      	movs	r0, #27
 80017ca:	f7ff ffb3 	bl	8001734 <MPU6050_WriteReg>
	MPU6050_WriteReg(0x1C, 0x00);		//加速度计量程，+-2g
 80017ce:	2100      	movs	r1, #0
 80017d0:	201c      	movs	r0, #28
 80017d2:	f7ff ffaf 	bl	8001734 <MPU6050_WriteReg>
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <MPU6050_UpdateData>:
 * @brief 更新MPU6050数据
 * @param None
 * @retval None
 * */
void MPU6050_UpdateData()
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
	uint8_t ax_h = MPU6050_ReadReg(0x3B);			//获取ax高8位
 80017e2:	203b      	movs	r0, #59	@ 0x3b
 80017e4:	f7ff ffc2 	bl	800176c <MPU6050_ReadReg>
 80017e8:	4603      	mov	r3, r0
 80017ea:	75fb      	strb	r3, [r7, #23]
	uint8_t ax_l = MPU6050_ReadReg(0x3C);			//获取ax低8位
 80017ec:	203c      	movs	r0, #60	@ 0x3c
 80017ee:	f7ff ffbd 	bl	800176c <MPU6050_ReadReg>
 80017f2:	4603      	mov	r3, r0
 80017f4:	75bb      	strb	r3, [r7, #22]
	int16_t ax_raw = (ax_h << 8) + ax_l;			//计算ax原始值
 80017f6:	7dfb      	ldrb	r3, [r7, #23]
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	021b      	lsls	r3, r3, #8
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	7dbb      	ldrb	r3, [r7, #22]
 8001800:	b29b      	uxth	r3, r3
 8001802:	4413      	add	r3, r2
 8001804:	b29b      	uxth	r3, r3
 8001806:	82bb      	strh	r3, [r7, #20]
	ax = ax_raw / 16384.0f;							//计算ax最终结果
 8001808:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fa65 	bl	8000cdc <__aeabi_i2f>
 8001812:	4603      	mov	r3, r0
 8001814:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fb67 	bl	8000eec <__aeabi_fdiv>
 800181e:	4603      	mov	r3, r0
 8001820:	461a      	mov	r2, r3
 8001822:	4b56      	ldr	r3, [pc, #344]	@ (800197c <MPU6050_UpdateData+0x1a0>)
 8001824:	601a      	str	r2, [r3, #0]

	uint8_t ay_h = MPU6050_ReadReg(0x3D);			//获取ay高8位
 8001826:	203d      	movs	r0, #61	@ 0x3d
 8001828:	f7ff ffa0 	bl	800176c <MPU6050_ReadReg>
 800182c:	4603      	mov	r3, r0
 800182e:	74fb      	strb	r3, [r7, #19]
	uint8_t ay_l = MPU6050_ReadReg(0x3E);			//获取ay低8位
 8001830:	203e      	movs	r0, #62	@ 0x3e
 8001832:	f7ff ff9b 	bl	800176c <MPU6050_ReadReg>
 8001836:	4603      	mov	r3, r0
 8001838:	74bb      	strb	r3, [r7, #18]
	int16_t ay_raw = (ay_h << 8) + ay_l;			//计算ay原始值
 800183a:	7cfb      	ldrb	r3, [r7, #19]
 800183c:	b29b      	uxth	r3, r3
 800183e:	021b      	lsls	r3, r3, #8
 8001840:	b29a      	uxth	r2, r3
 8001842:	7cbb      	ldrb	r3, [r7, #18]
 8001844:	b29b      	uxth	r3, r3
 8001846:	4413      	add	r3, r2
 8001848:	b29b      	uxth	r3, r3
 800184a:	823b      	strh	r3, [r7, #16]
	ay = ay_raw / 16384.0f;
 800184c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fa43 	bl	8000cdc <__aeabi_i2f>
 8001856:	4603      	mov	r3, r0
 8001858:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fb45 	bl	8000eec <__aeabi_fdiv>
 8001862:	4603      	mov	r3, r0
 8001864:	461a      	mov	r2, r3
 8001866:	4b46      	ldr	r3, [pc, #280]	@ (8001980 <MPU6050_UpdateData+0x1a4>)
 8001868:	601a      	str	r2, [r3, #0]

	uint8_t az_h = MPU6050_ReadReg(0x3F);			//获取az高8位
 800186a:	203f      	movs	r0, #63	@ 0x3f
 800186c:	f7ff ff7e 	bl	800176c <MPU6050_ReadReg>
 8001870:	4603      	mov	r3, r0
 8001872:	73fb      	strb	r3, [r7, #15]
	uint8_t az_l = MPU6050_ReadReg(0x40);			//获取az低8位
 8001874:	2040      	movs	r0, #64	@ 0x40
 8001876:	f7ff ff79 	bl	800176c <MPU6050_ReadReg>
 800187a:	4603      	mov	r3, r0
 800187c:	73bb      	strb	r3, [r7, #14]
	int16_t az_raw = (az_h << 8) + az_l;			//计算az原始值
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	b29b      	uxth	r3, r3
 8001882:	021b      	lsls	r3, r3, #8
 8001884:	b29a      	uxth	r2, r3
 8001886:	7bbb      	ldrb	r3, [r7, #14]
 8001888:	b29b      	uxth	r3, r3
 800188a:	4413      	add	r3, r2
 800188c:	b29b      	uxth	r3, r3
 800188e:	81bb      	strh	r3, [r7, #12]
	az = az_raw / 16384.0f;
 8001890:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fa21 	bl	8000cdc <__aeabi_i2f>
 800189a:	4603      	mov	r3, r0
 800189c:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fb23 	bl	8000eec <__aeabi_fdiv>
 80018a6:	4603      	mov	r3, r0
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b36      	ldr	r3, [pc, #216]	@ (8001984 <MPU6050_UpdateData+0x1a8>)
 80018ac:	601a      	str	r2, [r3, #0]

	uint8_t gx_h = MPU6050_ReadReg(0x43);			//获取gx高8位
 80018ae:	2043      	movs	r0, #67	@ 0x43
 80018b0:	f7ff ff5c 	bl	800176c <MPU6050_ReadReg>
 80018b4:	4603      	mov	r3, r0
 80018b6:	72fb      	strb	r3, [r7, #11]
	uint8_t gx_l = MPU6050_ReadReg(0x44);			//获取gx低8位
 80018b8:	2044      	movs	r0, #68	@ 0x44
 80018ba:	f7ff ff57 	bl	800176c <MPU6050_ReadReg>
 80018be:	4603      	mov	r3, r0
 80018c0:	72bb      	strb	r3, [r7, #10]
	int16_t gx_raw = (gx_h << 8) + gx_l;			//计算gx原始值
 80018c2:	7afb      	ldrb	r3, [r7, #11]
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	7abb      	ldrb	r3, [r7, #10]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	4413      	add	r3, r2
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	813b      	strh	r3, [r7, #8]
	gx = gx_raw / 32.8f;
 80018d4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff f9ff 	bl	8000cdc <__aeabi_i2f>
 80018de:	4603      	mov	r3, r0
 80018e0:	4929      	ldr	r1, [pc, #164]	@ (8001988 <MPU6050_UpdateData+0x1ac>)
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fb02 	bl	8000eec <__aeabi_fdiv>
 80018e8:	4603      	mov	r3, r0
 80018ea:	461a      	mov	r2, r3
 80018ec:	4b27      	ldr	r3, [pc, #156]	@ (800198c <MPU6050_UpdateData+0x1b0>)
 80018ee:	601a      	str	r2, [r3, #0]

	uint8_t gy_h = MPU6050_ReadReg(0x45);			//获取gy高8位
 80018f0:	2045      	movs	r0, #69	@ 0x45
 80018f2:	f7ff ff3b 	bl	800176c <MPU6050_ReadReg>
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
	uint8_t gy_l = MPU6050_ReadReg(0x46);			//获取gy低8位
 80018fa:	2046      	movs	r0, #70	@ 0x46
 80018fc:	f7ff ff36 	bl	800176c <MPU6050_ReadReg>
 8001900:	4603      	mov	r3, r0
 8001902:	71bb      	strb	r3, [r7, #6]
	int16_t gy_raw = (gy_h << 8) + gy_l;			//计算gy原始值
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	b29b      	uxth	r3, r3
 8001908:	021b      	lsls	r3, r3, #8
 800190a:	b29a      	uxth	r2, r3
 800190c:	79bb      	ldrb	r3, [r7, #6]
 800190e:	b29b      	uxth	r3, r3
 8001910:	4413      	add	r3, r2
 8001912:	b29b      	uxth	r3, r3
 8001914:	80bb      	strh	r3, [r7, #4]
	gy = gy_raw / 32.8f;
 8001916:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff f9de 	bl	8000cdc <__aeabi_i2f>
 8001920:	4603      	mov	r3, r0
 8001922:	4919      	ldr	r1, [pc, #100]	@ (8001988 <MPU6050_UpdateData+0x1ac>)
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fae1 	bl	8000eec <__aeabi_fdiv>
 800192a:	4603      	mov	r3, r0
 800192c:	461a      	mov	r2, r3
 800192e:	4b18      	ldr	r3, [pc, #96]	@ (8001990 <MPU6050_UpdateData+0x1b4>)
 8001930:	601a      	str	r2, [r3, #0]

	uint8_t gz_h = MPU6050_ReadReg(0x47);			//获取gz高8位
 8001932:	2047      	movs	r0, #71	@ 0x47
 8001934:	f7ff ff1a 	bl	800176c <MPU6050_ReadReg>
 8001938:	4603      	mov	r3, r0
 800193a:	70fb      	strb	r3, [r7, #3]
	uint8_t gz_l = MPU6050_ReadReg(0x48);			//获取gz低8位
 800193c:	2048      	movs	r0, #72	@ 0x48
 800193e:	f7ff ff15 	bl	800176c <MPU6050_ReadReg>
 8001942:	4603      	mov	r3, r0
 8001944:	70bb      	strb	r3, [r7, #2]
	int16_t gz_raw = (gz_h << 8) + gz_l;			//计算gz原始值
 8001946:	78fb      	ldrb	r3, [r7, #3]
 8001948:	b29b      	uxth	r3, r3
 800194a:	021b      	lsls	r3, r3, #8
 800194c:	b29a      	uxth	r2, r3
 800194e:	78bb      	ldrb	r3, [r7, #2]
 8001950:	b29b      	uxth	r3, r3
 8001952:	4413      	add	r3, r2
 8001954:	b29b      	uxth	r3, r3
 8001956:	803b      	strh	r3, [r7, #0]
	gz = gz_raw / 32.8f;
 8001958:	f9b7 3000 	ldrsh.w	r3, [r7]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff f9bd 	bl	8000cdc <__aeabi_i2f>
 8001962:	4603      	mov	r3, r0
 8001964:	4908      	ldr	r1, [pc, #32]	@ (8001988 <MPU6050_UpdateData+0x1ac>)
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fac0 	bl	8000eec <__aeabi_fdiv>
 800196c:	4603      	mov	r3, r0
 800196e:	461a      	mov	r2, r3
 8001970:	4b08      	ldr	r3, [pc, #32]	@ (8001994 <MPU6050_UpdateData+0x1b8>)
 8001972:	601a      	str	r2, [r3, #0]
}
 8001974:	bf00      	nop
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000294 	.word	0x20000294
 8001980:	20000298 	.word	0x20000298
 8001984:	2000029c 	.word	0x2000029c
 8001988:	42033333 	.word	0x42033333
 800198c:	200002a0 	.word	0x200002a0
 8001990:	200002a4 	.word	0x200002a4
 8001994:	200002a8 	.word	0x200002a8

08001998 <MPU6050_ZeroOffsetCalibrated>:

void MPU6050_ZeroOffsetCalibrated()
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
	// 陀螺仪零偏校准
	float gx_sum = 0, gy_sum = 0, gz_sum = 0;
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	f04f 0300 	mov.w	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	60fb      	str	r3, [r7, #12]
	const int samples = 200;
 80019b0:	23c8      	movs	r3, #200	@ 0xc8
 80019b2:	607b      	str	r3, [r7, #4]

	for(int i = 0; i < samples; i++)
 80019b4:	2300      	movs	r3, #0
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	e01f      	b.n	80019fa <MPU6050_ZeroOffsetCalibrated+0x62>
	{
		MPU6050_UpdateData();
 80019ba:	f7ff ff0f 	bl	80017dc <MPU6050_UpdateData>
		gx_sum += gx;
 80019be:	4b25      	ldr	r3, [pc, #148]	@ (8001a54 <MPU6050_ZeroOffsetCalibrated+0xbc>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4619      	mov	r1, r3
 80019c4:	6978      	ldr	r0, [r7, #20]
 80019c6:	f7ff f8d5 	bl	8000b74 <__addsf3>
 80019ca:	4603      	mov	r3, r0
 80019cc:	617b      	str	r3, [r7, #20]
		gy_sum += gy;
 80019ce:	4b22      	ldr	r3, [pc, #136]	@ (8001a58 <MPU6050_ZeroOffsetCalibrated+0xc0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4619      	mov	r1, r3
 80019d4:	6938      	ldr	r0, [r7, #16]
 80019d6:	f7ff f8cd 	bl	8000b74 <__addsf3>
 80019da:	4603      	mov	r3, r0
 80019dc:	613b      	str	r3, [r7, #16]
		gz_sum += gz;
 80019de:	4b1f      	ldr	r3, [pc, #124]	@ (8001a5c <MPU6050_ZeroOffsetCalibrated+0xc4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4619      	mov	r1, r3
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f7ff f8c5 	bl	8000b74 <__addsf3>
 80019ea:	4603      	mov	r3, r0
 80019ec:	60fb      	str	r3, [r7, #12]
		HAL_Delay(5);
 80019ee:	2005      	movs	r0, #5
 80019f0:	f000 fa0c 	bl	8001e0c <HAL_Delay>
	for(int i = 0; i < samples; i++)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	3301      	adds	r3, #1
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	dbdb      	blt.n	80019ba <MPU6050_ZeroOffsetCalibrated+0x22>
	}

	gx_offset = gx_sum / samples;
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff f96a 	bl	8000cdc <__aeabi_i2f>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	6978      	ldr	r0, [r7, #20]
 8001a0e:	f7ff fa6d 	bl	8000eec <__aeabi_fdiv>
 8001a12:	4603      	mov	r3, r0
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <MPU6050_ZeroOffsetCalibrated+0xc8>)
 8001a18:	601a      	str	r2, [r3, #0]
	gy_offset = gy_sum / samples;
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff f95e 	bl	8000cdc <__aeabi_i2f>
 8001a20:	4603      	mov	r3, r0
 8001a22:	4619      	mov	r1, r3
 8001a24:	6938      	ldr	r0, [r7, #16]
 8001a26:	f7ff fa61 	bl	8000eec <__aeabi_fdiv>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a64 <MPU6050_ZeroOffsetCalibrated+0xcc>)
 8001a30:	601a      	str	r2, [r3, #0]
	gz_offset = gz_sum / samples;
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff f952 	bl	8000cdc <__aeabi_i2f>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f7ff fa55 	bl	8000eec <__aeabi_fdiv>
 8001a42:	4603      	mov	r3, r0
 8001a44:	461a      	mov	r2, r3
 8001a46:	4b08      	ldr	r3, [pc, #32]	@ (8001a68 <MPU6050_ZeroOffsetCalibrated+0xd0>)
 8001a48:	601a      	str	r2, [r3, #0]
}
 8001a4a:	bf00      	nop
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	200002a0 	.word	0x200002a0
 8001a58:	200002a4 	.word	0x200002a4
 8001a5c:	200002a8 	.word	0x200002a8
 8001a60:	200002c4 	.word	0x200002c4
 8001a64:	200002c8 	.word	0x200002c8
 8001a68:	200002cc 	.word	0x200002cc
 8001a6c:	00000000 	.word	0x00000000

08001a70 <MPU6050_GetEularAngle>:
 * @brief 计算MPU6050 欧拉角
 * @param None
 * @retval None
 * */
void MPU6050_GetEularAngle()
{
 8001a70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a74:	b086      	sub	sp, #24
 8001a76:	af00      	add	r7, sp, #0
	static uint8_t first_call = 1;
	if (first_call)
 8001a78:	4b8d      	ldr	r3, [pc, #564]	@ (8001cb0 <MPU6050_GetEularAngle+0x240>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d008      	beq.n	8001a92 <MPU6050_GetEularAngle+0x22>
	{
		timer = HAL_GetTick();
 8001a80:	f000 f9ba 	bl	8001df8 <HAL_GetTick>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4a8b      	ldr	r2, [pc, #556]	@ (8001cb4 <MPU6050_GetEularAngle+0x244>)
 8001a88:	6013      	str	r3, [r2, #0]
		first_call = 0;
 8001a8a:	4b89      	ldr	r3, [pc, #548]	@ (8001cb0 <MPU6050_GetEularAngle+0x240>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
	  	return; // 第一次调用更新timer的值，不计算，跳过
 8001a90:	e103      	b.n	8001c9a <MPU6050_GetEularAngle+0x22a>
	}

	float dt = (float)(HAL_GetTick() - timer) / 1000;
 8001a92:	f000 f9b1 	bl	8001df8 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	4b86      	ldr	r3, [pc, #536]	@ (8001cb4 <MPU6050_GetEularAngle+0x244>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff f918 	bl	8000cd4 <__aeabi_ui2f>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4984      	ldr	r1, [pc, #528]	@ (8001cb8 <MPU6050_GetEularAngle+0x248>)
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fa1f 	bl	8000eec <__aeabi_fdiv>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	617b      	str	r3, [r7, #20]
	timer = HAL_GetTick();
 8001ab2:	f000 f9a1 	bl	8001df8 <HAL_GetTick>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4a7e      	ldr	r2, [pc, #504]	@ (8001cb4 <MPU6050_GetEularAngle+0x244>)
 8001aba:	6013      	str	r3, [r2, #0]

	MPU6050_UpdateData();
 8001abc:	f7ff fe8e 	bl	80017dc <MPU6050_UpdateData>

	// 应用零偏校准
	float calibrated_gx = gx - gx_offset;
 8001ac0:	4b7e      	ldr	r3, [pc, #504]	@ (8001cbc <MPU6050_GetEularAngle+0x24c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a7e      	ldr	r2, [pc, #504]	@ (8001cc0 <MPU6050_GetEularAngle+0x250>)
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	4611      	mov	r1, r2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff f850 	bl	8000b70 <__aeabi_fsub>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	613b      	str	r3, [r7, #16]
	float calibrated_gy = gy - gy_offset;
 8001ad4:	4b7b      	ldr	r3, [pc, #492]	@ (8001cc4 <MPU6050_GetEularAngle+0x254>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a7b      	ldr	r2, [pc, #492]	@ (8001cc8 <MPU6050_GetEularAngle+0x258>)
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	4611      	mov	r1, r2
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff f846 	bl	8000b70 <__aeabi_fsub>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	60fb      	str	r3, [r7, #12]
	float calibrated_gz = gz - gz_offset;
 8001ae8:	4b78      	ldr	r3, [pc, #480]	@ (8001ccc <MPU6050_GetEularAngle+0x25c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a78      	ldr	r2, [pc, #480]	@ (8001cd0 <MPU6050_GetEularAngle+0x260>)
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	4611      	mov	r1, r2
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff f83c 	bl	8000b70 <__aeabi_fsub>
 8001af8:	4603      	mov	r3, r0
 8001afa:	60bb      	str	r3, [r7, #8]

	float a = 0.95238;
 8001afc:	4b75      	ldr	r3, [pc, #468]	@ (8001cd4 <MPU6050_GetEularAngle+0x264>)
 8001afe:	607b      	str	r3, [r7, #4]

	//通过陀螺仪（角加速度计）计算欧拉角
	yaw_g = yaw_g + calibrated_gz * dt;
 8001b00:	6979      	ldr	r1, [r7, #20]
 8001b02:	68b8      	ldr	r0, [r7, #8]
 8001b04:	f7ff f93e 	bl	8000d84 <__aeabi_fmul>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	4b72      	ldr	r3, [pc, #456]	@ (8001cd8 <MPU6050_GetEularAngle+0x268>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4619      	mov	r1, r3
 8001b12:	4610      	mov	r0, r2
 8001b14:	f7ff f82e 	bl	8000b74 <__addsf3>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	4b6e      	ldr	r3, [pc, #440]	@ (8001cd8 <MPU6050_GetEularAngle+0x268>)
 8001b1e:	601a      	str	r2, [r3, #0]
	pitch_g = pitch_g + calibrated_gx * dt;
 8001b20:	6979      	ldr	r1, [r7, #20]
 8001b22:	6938      	ldr	r0, [r7, #16]
 8001b24:	f7ff f92e 	bl	8000d84 <__aeabi_fmul>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	4b6b      	ldr	r3, [pc, #428]	@ (8001cdc <MPU6050_GetEularAngle+0x26c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4619      	mov	r1, r3
 8001b32:	4610      	mov	r0, r2
 8001b34:	f7ff f81e 	bl	8000b74 <__addsf3>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4b67      	ldr	r3, [pc, #412]	@ (8001cdc <MPU6050_GetEularAngle+0x26c>)
 8001b3e:	601a      	str	r2, [r3, #0]
	roll_g = roll_g + calibrated_gy * dt;
 8001b40:	6979      	ldr	r1, [r7, #20]
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f7ff f91e 	bl	8000d84 <__aeabi_fmul>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	4b64      	ldr	r3, [pc, #400]	@ (8001ce0 <MPU6050_GetEularAngle+0x270>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4619      	mov	r1, r3
 8001b52:	4610      	mov	r0, r2
 8001b54:	f7ff f80e 	bl	8000b74 <__addsf3>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4b60      	ldr	r3, [pc, #384]	@ (8001ce0 <MPU6050_GetEularAngle+0x270>)
 8001b5e:	601a      	str	r2, [r3, #0]

	//通过加速度计计算欧拉角
	yaw_a = 0;
 8001b60:	4b60      	ldr	r3, [pc, #384]	@ (8001ce4 <MPU6050_GetEularAngle+0x274>)
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
	pitch_a = atan2(ay,az) / 3.14159 * 180.0f;
 8001b68:	4b5f      	ldr	r3, [pc, #380]	@ (8001ce8 <MPU6050_GetEularAngle+0x278>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe fc5b 	bl	8000428 <__aeabi_f2d>
 8001b72:	4680      	mov	r8, r0
 8001b74:	4689      	mov	r9, r1
 8001b76:	4b5d      	ldr	r3, [pc, #372]	@ (8001cec <MPU6050_GetEularAngle+0x27c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fc54 	bl	8000428 <__aeabi_f2d>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4640      	mov	r0, r8
 8001b86:	4649      	mov	r1, r9
 8001b88:	f006 fda4 	bl	80086d4 <atan2>
 8001b8c:	a346      	add	r3, pc, #280	@ (adr r3, 8001ca8 <MPU6050_GetEularAngle+0x238>)
 8001b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b92:	f7fe fdcb 	bl	800072c <__aeabi_ddiv>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	4b53      	ldr	r3, [pc, #332]	@ (8001cf0 <MPU6050_GetEularAngle+0x280>)
 8001ba4:	f7fe fc98 	bl	80004d8 <__aeabi_dmul>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f7fe ff8a 	bl	8000ac8 <__aeabi_d2f>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	4a4f      	ldr	r2, [pc, #316]	@ (8001cf4 <MPU6050_GetEularAngle+0x284>)
 8001bb8:	6013      	str	r3, [r2, #0]
	roll_a = - atan2(ax,az) / 3.14159 * 180.0f;
 8001bba:	4b4f      	ldr	r3, [pc, #316]	@ (8001cf8 <MPU6050_GetEularAngle+0x288>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fc32 	bl	8000428 <__aeabi_f2d>
 8001bc4:	4680      	mov	r8, r0
 8001bc6:	4689      	mov	r9, r1
 8001bc8:	4b48      	ldr	r3, [pc, #288]	@ (8001cec <MPU6050_GetEularAngle+0x27c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe fc2b 	bl	8000428 <__aeabi_f2d>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4640      	mov	r0, r8
 8001bd8:	4649      	mov	r1, r9
 8001bda:	f006 fd7b 	bl	80086d4 <atan2>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4614      	mov	r4, r2
 8001be4:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001be8:	a32f      	add	r3, pc, #188	@ (adr r3, 8001ca8 <MPU6050_GetEularAngle+0x238>)
 8001bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bee:	4620      	mov	r0, r4
 8001bf0:	4629      	mov	r1, r5
 8001bf2:	f7fe fd9b 	bl	800072c <__aeabi_ddiv>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	4b3b      	ldr	r3, [pc, #236]	@ (8001cf0 <MPU6050_GetEularAngle+0x280>)
 8001c04:	f7fe fc68 	bl	80004d8 <__aeabi_dmul>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f7fe ff5a 	bl	8000ac8 <__aeabi_d2f>
 8001c14:	4603      	mov	r3, r0
 8001c16:	4a39      	ldr	r2, [pc, #228]	@ (8001cfc <MPU6050_GetEularAngle+0x28c>)
 8001c18:	6013      	str	r3, [r2, #0]

	//互补滤波
	yaw = yaw_g;
 8001c1a:	4b2f      	ldr	r3, [pc, #188]	@ (8001cd8 <MPU6050_GetEularAngle+0x268>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a38      	ldr	r2, [pc, #224]	@ (8001d00 <MPU6050_GetEularAngle+0x290>)
 8001c20:	6013      	str	r3, [r2, #0]
	pitch = a * pitch_g+ (1 - a) * pitch_a;
 8001c22:	4b2e      	ldr	r3, [pc, #184]	@ (8001cdc <MPU6050_GetEularAngle+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff f8ab 	bl	8000d84 <__aeabi_fmul>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	461c      	mov	r4, r3
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001c38:	f7fe ff9a 	bl	8000b70 <__aeabi_fsub>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	461a      	mov	r2, r3
 8001c40:	4b2c      	ldr	r3, [pc, #176]	@ (8001cf4 <MPU6050_GetEularAngle+0x284>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4619      	mov	r1, r3
 8001c46:	4610      	mov	r0, r2
 8001c48:	f7ff f89c 	bl	8000d84 <__aeabi_fmul>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4620      	mov	r0, r4
 8001c52:	f7fe ff8f 	bl	8000b74 <__addsf3>
 8001c56:	4603      	mov	r3, r0
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001d04 <MPU6050_GetEularAngle+0x294>)
 8001c5c:	601a      	str	r2, [r3, #0]
	roll = a * roll_g + (1-a) * roll_a;
 8001c5e:	4b20      	ldr	r3, [pc, #128]	@ (8001ce0 <MPU6050_GetEularAngle+0x270>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff f88d 	bl	8000d84 <__aeabi_fmul>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	461c      	mov	r4, r3
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001c74:	f7fe ff7c 	bl	8000b70 <__aeabi_fsub>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cfc <MPU6050_GetEularAngle+0x28c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4619      	mov	r1, r3
 8001c82:	4610      	mov	r0, r2
 8001c84:	f7ff f87e 	bl	8000d84 <__aeabi_fmul>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	f7fe ff71 	bl	8000b74 <__addsf3>
 8001c92:	4603      	mov	r3, r0
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b1c      	ldr	r3, [pc, #112]	@ (8001d08 <MPU6050_GetEularAngle+0x298>)
 8001c98:	601a      	str	r2, [r3, #0]
}
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ca2:	bf00      	nop
 8001ca4:	f3af 8000 	nop.w
 8001ca8:	f01b866e 	.word	0xf01b866e
 8001cac:	400921f9 	.word	0x400921f9
 8001cb0:	20000004 	.word	0x20000004
 8001cb4:	200002dc 	.word	0x200002dc
 8001cb8:	447a0000 	.word	0x447a0000
 8001cbc:	200002a0 	.word	0x200002a0
 8001cc0:	200002c4 	.word	0x200002c4
 8001cc4:	200002a4 	.word	0x200002a4
 8001cc8:	200002c8 	.word	0x200002c8
 8001ccc:	200002a8 	.word	0x200002a8
 8001cd0:	200002cc 	.word	0x200002cc
 8001cd4:	3f73cf2d 	.word	0x3f73cf2d
 8001cd8:	200002b8 	.word	0x200002b8
 8001cdc:	200002c0 	.word	0x200002c0
 8001ce0:	200002bc 	.word	0x200002bc
 8001ce4:	200002ac 	.word	0x200002ac
 8001ce8:	20000298 	.word	0x20000298
 8001cec:	2000029c 	.word	0x2000029c
 8001cf0:	40668000 	.word	0x40668000
 8001cf4:	200002b4 	.word	0x200002b4
 8001cf8:	20000294 	.word	0x20000294
 8001cfc:	200002b0 	.word	0x200002b0
 8001d00:	200002d0 	.word	0x200002d0
 8001d04:	200002d8 	.word	0x200002d8
 8001d08:	200002d4 	.word	0x200002d4

08001d0c <MPU6050_GetYaw>:
 * @brief 获取MPU6050 Yaw数据
 * @param None
 * @retval Yaw
 * */
float MPU6050_GetYaw()
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
	return yaw;
 8001d10:	4b02      	ldr	r3, [pc, #8]	@ (8001d1c <MPU6050_GetYaw+0x10>)
 8001d12:	681b      	ldr	r3, [r3, #0]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr
 8001d1c:	200002d0 	.word	0x200002d0

08001d20 <MPU6050_GetPitch>:
 * @brief 获取MPU6050 Pitch数据
 * @param None
 * @retval Pitch
 * */
float MPU6050_GetPitch()
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
	return pitch;
 8001d24:	4b02      	ldr	r3, [pc, #8]	@ (8001d30 <MPU6050_GetPitch+0x10>)
 8001d26:	681b      	ldr	r3, [r3, #0]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	200002d8 	.word	0x200002d8

08001d34 <MPU6050_GetRoll>:
 * @brief 获取MPU6050 Roll数据
 * @param None
 * @retval Roll
 * */
float MPU6050_GetRoll()
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
	return roll;
 8001d38:	4b02      	ldr	r3, [pc, #8]	@ (8001d44 <MPU6050_GetRoll+0x10>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	200002d4 	.word	0x200002d4

08001d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d4c:	4b08      	ldr	r3, [pc, #32]	@ (8001d70 <HAL_Init+0x28>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a07      	ldr	r2, [pc, #28]	@ (8001d70 <HAL_Init+0x28>)
 8001d52:	f043 0310 	orr.w	r3, r3, #16
 8001d56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d58:	2003      	movs	r0, #3
 8001d5a:	f000 f92b 	bl	8001fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d5e:	200f      	movs	r0, #15
 8001d60:	f000 f808 	bl	8001d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d64:	f7ff fb26 	bl	80013b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40022000 	.word	0x40022000

08001d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d7c:	4b12      	ldr	r3, [pc, #72]	@ (8001dc8 <HAL_InitTick+0x54>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b12      	ldr	r3, [pc, #72]	@ (8001dcc <HAL_InitTick+0x58>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	4619      	mov	r1, r3
 8001d86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 f935 	bl	8002002 <HAL_SYSTICK_Config>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e00e      	b.n	8001dc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b0f      	cmp	r3, #15
 8001da6:	d80a      	bhi.n	8001dbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da8:	2200      	movs	r2, #0
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295
 8001db0:	f000 f90b 	bl	8001fca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001db4:	4a06      	ldr	r2, [pc, #24]	@ (8001dd0 <HAL_InitTick+0x5c>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e000      	b.n	8001dc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	2000000c 	.word	0x2000000c
 8001dd0:	20000008 	.word	0x20000008

08001dd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dd8:	4b05      	ldr	r3, [pc, #20]	@ (8001df0 <HAL_IncTick+0x1c>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4b05      	ldr	r3, [pc, #20]	@ (8001df4 <HAL_IncTick+0x20>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4413      	add	r3, r2
 8001de4:	4a03      	ldr	r2, [pc, #12]	@ (8001df4 <HAL_IncTick+0x20>)
 8001de6:	6013      	str	r3, [r2, #0]
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	2000000c 	.word	0x2000000c
 8001df4:	200002e0 	.word	0x200002e0

08001df8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001dfc:	4b02      	ldr	r3, [pc, #8]	@ (8001e08 <HAL_GetTick+0x10>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr
 8001e08:	200002e0 	.word	0x200002e0

08001e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e14:	f7ff fff0 	bl	8001df8 <HAL_GetTick>
 8001e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e24:	d005      	beq.n	8001e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e26:	4b0a      	ldr	r3, [pc, #40]	@ (8001e50 <HAL_Delay+0x44>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4413      	add	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e32:	bf00      	nop
 8001e34:	f7ff ffe0 	bl	8001df8 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d8f7      	bhi.n	8001e34 <HAL_Delay+0x28>
  {
  }
}
 8001e44:	bf00      	nop
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	2000000c 	.word	0x2000000c

08001e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e64:	4b0c      	ldr	r3, [pc, #48]	@ (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e70:	4013      	ands	r3, r2
 8001e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e86:	4a04      	ldr	r2, [pc, #16]	@ (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	60d3      	str	r3, [r2, #12]
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea0:	4b04      	ldr	r3, [pc, #16]	@ (8001eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	0a1b      	lsrs	r3, r3, #8
 8001ea6:	f003 0307 	and.w	r3, r3, #7
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	6039      	str	r1, [r7, #0]
 8001ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	db0a      	blt.n	8001ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	490c      	ldr	r1, [pc, #48]	@ (8001f04 <__NVIC_SetPriority+0x4c>)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	0112      	lsls	r2, r2, #4
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	440b      	add	r3, r1
 8001edc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee0:	e00a      	b.n	8001ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	4908      	ldr	r1, [pc, #32]	@ (8001f08 <__NVIC_SetPriority+0x50>)
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	3b04      	subs	r3, #4
 8001ef0:	0112      	lsls	r2, r2, #4
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	761a      	strb	r2, [r3, #24]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000e100 	.word	0xe000e100
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b089      	sub	sp, #36	@ 0x24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f1c3 0307 	rsb	r3, r3, #7
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	bf28      	it	cs
 8001f2a:	2304      	movcs	r3, #4
 8001f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3304      	adds	r3, #4
 8001f32:	2b06      	cmp	r3, #6
 8001f34:	d902      	bls.n	8001f3c <NVIC_EncodePriority+0x30>
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3b03      	subs	r3, #3
 8001f3a:	e000      	b.n	8001f3e <NVIC_EncodePriority+0x32>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f40:	f04f 32ff 	mov.w	r2, #4294967295
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43da      	mvns	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	401a      	ands	r2, r3
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f54:	f04f 31ff 	mov.w	r1, #4294967295
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5e:	43d9      	mvns	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f64:	4313      	orrs	r3, r2
         );
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3724      	adds	r7, #36	@ 0x24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr

08001f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f80:	d301      	bcc.n	8001f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f82:	2301      	movs	r3, #1
 8001f84:	e00f      	b.n	8001fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f86:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb0 <SysTick_Config+0x40>)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f8e:	210f      	movs	r1, #15
 8001f90:	f04f 30ff 	mov.w	r0, #4294967295
 8001f94:	f7ff ff90 	bl	8001eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f98:	4b05      	ldr	r3, [pc, #20]	@ (8001fb0 <SysTick_Config+0x40>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f9e:	4b04      	ldr	r3, [pc, #16]	@ (8001fb0 <SysTick_Config+0x40>)
 8001fa0:	2207      	movs	r2, #7
 8001fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	e000e010 	.word	0xe000e010

08001fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff ff49 	bl	8001e54 <__NVIC_SetPriorityGrouping>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b086      	sub	sp, #24
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
 8001fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fdc:	f7ff ff5e 	bl	8001e9c <__NVIC_GetPriorityGrouping>
 8001fe0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	68b9      	ldr	r1, [r7, #8]
 8001fe6:	6978      	ldr	r0, [r7, #20]
 8001fe8:	f7ff ff90 	bl	8001f0c <NVIC_EncodePriority>
 8001fec:	4602      	mov	r2, r0
 8001fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff5f 	bl	8001eb8 <__NVIC_SetPriority>
}
 8001ffa:	bf00      	nop
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ffb0 	bl	8001f70 <SysTick_Config>
 8002010:	4603      	mov	r3, r0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800201c:	b480      	push	{r7}
 800201e:	b08b      	sub	sp, #44	@ 0x2c
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002026:	2300      	movs	r3, #0
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800202a:	2300      	movs	r3, #0
 800202c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800202e:	e169      	b.n	8002304 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002030:	2201      	movs	r2, #1
 8002032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	69fa      	ldr	r2, [r7, #28]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	429a      	cmp	r2, r3
 800204a:	f040 8158 	bne.w	80022fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	4a9a      	ldr	r2, [pc, #616]	@ (80022bc <HAL_GPIO_Init+0x2a0>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d05e      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
 8002058:	4a98      	ldr	r2, [pc, #608]	@ (80022bc <HAL_GPIO_Init+0x2a0>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d875      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 800205e:	4a98      	ldr	r2, [pc, #608]	@ (80022c0 <HAL_GPIO_Init+0x2a4>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d058      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
 8002064:	4a96      	ldr	r2, [pc, #600]	@ (80022c0 <HAL_GPIO_Init+0x2a4>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d86f      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 800206a:	4a96      	ldr	r2, [pc, #600]	@ (80022c4 <HAL_GPIO_Init+0x2a8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d052      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
 8002070:	4a94      	ldr	r2, [pc, #592]	@ (80022c4 <HAL_GPIO_Init+0x2a8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d869      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 8002076:	4a94      	ldr	r2, [pc, #592]	@ (80022c8 <HAL_GPIO_Init+0x2ac>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d04c      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
 800207c:	4a92      	ldr	r2, [pc, #584]	@ (80022c8 <HAL_GPIO_Init+0x2ac>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d863      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 8002082:	4a92      	ldr	r2, [pc, #584]	@ (80022cc <HAL_GPIO_Init+0x2b0>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d046      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
 8002088:	4a90      	ldr	r2, [pc, #576]	@ (80022cc <HAL_GPIO_Init+0x2b0>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d85d      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 800208e:	2b12      	cmp	r3, #18
 8002090:	d82a      	bhi.n	80020e8 <HAL_GPIO_Init+0xcc>
 8002092:	2b12      	cmp	r3, #18
 8002094:	d859      	bhi.n	800214a <HAL_GPIO_Init+0x12e>
 8002096:	a201      	add	r2, pc, #4	@ (adr r2, 800209c <HAL_GPIO_Init+0x80>)
 8002098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800209c:	08002117 	.word	0x08002117
 80020a0:	080020f1 	.word	0x080020f1
 80020a4:	08002103 	.word	0x08002103
 80020a8:	08002145 	.word	0x08002145
 80020ac:	0800214b 	.word	0x0800214b
 80020b0:	0800214b 	.word	0x0800214b
 80020b4:	0800214b 	.word	0x0800214b
 80020b8:	0800214b 	.word	0x0800214b
 80020bc:	0800214b 	.word	0x0800214b
 80020c0:	0800214b 	.word	0x0800214b
 80020c4:	0800214b 	.word	0x0800214b
 80020c8:	0800214b 	.word	0x0800214b
 80020cc:	0800214b 	.word	0x0800214b
 80020d0:	0800214b 	.word	0x0800214b
 80020d4:	0800214b 	.word	0x0800214b
 80020d8:	0800214b 	.word	0x0800214b
 80020dc:	0800214b 	.word	0x0800214b
 80020e0:	080020f9 	.word	0x080020f9
 80020e4:	0800210d 	.word	0x0800210d
 80020e8:	4a79      	ldr	r2, [pc, #484]	@ (80022d0 <HAL_GPIO_Init+0x2b4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d013      	beq.n	8002116 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020ee:	e02c      	b.n	800214a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	623b      	str	r3, [r7, #32]
          break;
 80020f6:	e029      	b.n	800214c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	3304      	adds	r3, #4
 80020fe:	623b      	str	r3, [r7, #32]
          break;
 8002100:	e024      	b.n	800214c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	3308      	adds	r3, #8
 8002108:	623b      	str	r3, [r7, #32]
          break;
 800210a:	e01f      	b.n	800214c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	330c      	adds	r3, #12
 8002112:	623b      	str	r3, [r7, #32]
          break;
 8002114:	e01a      	b.n	800214c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d102      	bne.n	8002124 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800211e:	2304      	movs	r3, #4
 8002120:	623b      	str	r3, [r7, #32]
          break;
 8002122:	e013      	b.n	800214c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d105      	bne.n	8002138 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800212c:	2308      	movs	r3, #8
 800212e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69fa      	ldr	r2, [r7, #28]
 8002134:	611a      	str	r2, [r3, #16]
          break;
 8002136:	e009      	b.n	800214c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002138:	2308      	movs	r3, #8
 800213a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	615a      	str	r2, [r3, #20]
          break;
 8002142:	e003      	b.n	800214c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002144:	2300      	movs	r3, #0
 8002146:	623b      	str	r3, [r7, #32]
          break;
 8002148:	e000      	b.n	800214c <HAL_GPIO_Init+0x130>
          break;
 800214a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	2bff      	cmp	r3, #255	@ 0xff
 8002150:	d801      	bhi.n	8002156 <HAL_GPIO_Init+0x13a>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	e001      	b.n	800215a <HAL_GPIO_Init+0x13e>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3304      	adds	r3, #4
 800215a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	2bff      	cmp	r3, #255	@ 0xff
 8002160:	d802      	bhi.n	8002168 <HAL_GPIO_Init+0x14c>
 8002162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	e002      	b.n	800216e <HAL_GPIO_Init+0x152>
 8002168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216a:	3b08      	subs	r3, #8
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	210f      	movs	r1, #15
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	fa01 f303 	lsl.w	r3, r1, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	401a      	ands	r2, r3
 8002180:	6a39      	ldr	r1, [r7, #32]
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	fa01 f303 	lsl.w	r3, r1, r3
 8002188:	431a      	orrs	r2, r3
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 80b1 	beq.w	80022fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800219c:	4b4d      	ldr	r3, [pc, #308]	@ (80022d4 <HAL_GPIO_Init+0x2b8>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	4a4c      	ldr	r2, [pc, #304]	@ (80022d4 <HAL_GPIO_Init+0x2b8>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6193      	str	r3, [r2, #24]
 80021a8:	4b4a      	ldr	r3, [pc, #296]	@ (80022d4 <HAL_GPIO_Init+0x2b8>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021b4:	4a48      	ldr	r2, [pc, #288]	@ (80022d8 <HAL_GPIO_Init+0x2bc>)
 80021b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b8:	089b      	lsrs	r3, r3, #2
 80021ba:	3302      	adds	r3, #2
 80021bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	220f      	movs	r2, #15
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	4013      	ands	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a40      	ldr	r2, [pc, #256]	@ (80022dc <HAL_GPIO_Init+0x2c0>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d013      	beq.n	8002208 <HAL_GPIO_Init+0x1ec>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a3f      	ldr	r2, [pc, #252]	@ (80022e0 <HAL_GPIO_Init+0x2c4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d00d      	beq.n	8002204 <HAL_GPIO_Init+0x1e8>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a3e      	ldr	r2, [pc, #248]	@ (80022e4 <HAL_GPIO_Init+0x2c8>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d007      	beq.n	8002200 <HAL_GPIO_Init+0x1e4>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a3d      	ldr	r2, [pc, #244]	@ (80022e8 <HAL_GPIO_Init+0x2cc>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d101      	bne.n	80021fc <HAL_GPIO_Init+0x1e0>
 80021f8:	2303      	movs	r3, #3
 80021fa:	e006      	b.n	800220a <HAL_GPIO_Init+0x1ee>
 80021fc:	2304      	movs	r3, #4
 80021fe:	e004      	b.n	800220a <HAL_GPIO_Init+0x1ee>
 8002200:	2302      	movs	r3, #2
 8002202:	e002      	b.n	800220a <HAL_GPIO_Init+0x1ee>
 8002204:	2301      	movs	r3, #1
 8002206:	e000      	b.n	800220a <HAL_GPIO_Init+0x1ee>
 8002208:	2300      	movs	r3, #0
 800220a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800220c:	f002 0203 	and.w	r2, r2, #3
 8002210:	0092      	lsls	r2, r2, #2
 8002212:	4093      	lsls	r3, r2
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800221a:	492f      	ldr	r1, [pc, #188]	@ (80022d8 <HAL_GPIO_Init+0x2bc>)
 800221c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221e:	089b      	lsrs	r3, r3, #2
 8002220:	3302      	adds	r3, #2
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d006      	beq.n	8002242 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002234:	4b2d      	ldr	r3, [pc, #180]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	492c      	ldr	r1, [pc, #176]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	4313      	orrs	r3, r2
 800223e:	608b      	str	r3, [r1, #8]
 8002240:	e006      	b.n	8002250 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002242:	4b2a      	ldr	r3, [pc, #168]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	43db      	mvns	r3, r3
 800224a:	4928      	ldr	r1, [pc, #160]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 800224c:	4013      	ands	r3, r2
 800224e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d006      	beq.n	800226a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800225c:	4b23      	ldr	r3, [pc, #140]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	4922      	ldr	r1, [pc, #136]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	60cb      	str	r3, [r1, #12]
 8002268:	e006      	b.n	8002278 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800226a:	4b20      	ldr	r3, [pc, #128]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	43db      	mvns	r3, r3
 8002272:	491e      	ldr	r1, [pc, #120]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 8002274:	4013      	ands	r3, r2
 8002276:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d006      	beq.n	8002292 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002284:	4b19      	ldr	r3, [pc, #100]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	4918      	ldr	r1, [pc, #96]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	4313      	orrs	r3, r2
 800228e:	604b      	str	r3, [r1, #4]
 8002290:	e006      	b.n	80022a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002292:	4b16      	ldr	r3, [pc, #88]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	43db      	mvns	r3, r3
 800229a:	4914      	ldr	r1, [pc, #80]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 800229c:	4013      	ands	r3, r2
 800229e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d021      	beq.n	80022f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022ac:	4b0f      	ldr	r3, [pc, #60]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	490e      	ldr	r1, [pc, #56]	@ (80022ec <HAL_GPIO_Init+0x2d0>)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	600b      	str	r3, [r1, #0]
 80022b8:	e021      	b.n	80022fe <HAL_GPIO_Init+0x2e2>
 80022ba:	bf00      	nop
 80022bc:	10320000 	.word	0x10320000
 80022c0:	10310000 	.word	0x10310000
 80022c4:	10220000 	.word	0x10220000
 80022c8:	10210000 	.word	0x10210000
 80022cc:	10120000 	.word	0x10120000
 80022d0:	10110000 	.word	0x10110000
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40010000 	.word	0x40010000
 80022dc:	40010800 	.word	0x40010800
 80022e0:	40010c00 	.word	0x40010c00
 80022e4:	40011000 	.word	0x40011000
 80022e8:	40011400 	.word	0x40011400
 80022ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002320 <HAL_GPIO_Init+0x304>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	4909      	ldr	r1, [pc, #36]	@ (8002320 <HAL_GPIO_Init+0x304>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002300:	3301      	adds	r3, #1
 8002302:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230a:	fa22 f303 	lsr.w	r3, r2, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	f47f ae8e 	bne.w	8002030 <HAL_GPIO_Init+0x14>
  }
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	372c      	adds	r7, #44	@ 0x2c
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	40010400 	.word	0x40010400

08002324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	807b      	strh	r3, [r7, #2]
 8002330:	4613      	mov	r3, r2
 8002332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002334:	787b      	ldrb	r3, [r7, #1]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800233a:	887a      	ldrh	r2, [r7, #2]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002340:	e003      	b.n	800234a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002342:	887b      	ldrh	r3, [r7, #2]
 8002344:	041a      	lsls	r2, r3, #16
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	611a      	str	r2, [r3, #16]
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e12b      	b.n	80025be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d106      	bne.n	8002380 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7fe ff20 	bl	80011c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2224      	movs	r2, #36	@ 0x24
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0201 	bic.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023b8:	f001 fbca 	bl	8003b50 <HAL_RCC_GetPCLK1Freq>
 80023bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	4a81      	ldr	r2, [pc, #516]	@ (80025c8 <HAL_I2C_Init+0x274>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d807      	bhi.n	80023d8 <HAL_I2C_Init+0x84>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4a80      	ldr	r2, [pc, #512]	@ (80025cc <HAL_I2C_Init+0x278>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	bf94      	ite	ls
 80023d0:	2301      	movls	r3, #1
 80023d2:	2300      	movhi	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	e006      	b.n	80023e6 <HAL_I2C_Init+0x92>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4a7d      	ldr	r2, [pc, #500]	@ (80025d0 <HAL_I2C_Init+0x27c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	bf94      	ite	ls
 80023e0:	2301      	movls	r3, #1
 80023e2:	2300      	movhi	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e0e7      	b.n	80025be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	4a78      	ldr	r2, [pc, #480]	@ (80025d4 <HAL_I2C_Init+0x280>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	0c9b      	lsrs	r3, r3, #18
 80023f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	430a      	orrs	r2, r1
 800240c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	4a6a      	ldr	r2, [pc, #424]	@ (80025c8 <HAL_I2C_Init+0x274>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d802      	bhi.n	8002428 <HAL_I2C_Init+0xd4>
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	3301      	adds	r3, #1
 8002426:	e009      	b.n	800243c <HAL_I2C_Init+0xe8>
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800242e:	fb02 f303 	mul.w	r3, r2, r3
 8002432:	4a69      	ldr	r2, [pc, #420]	@ (80025d8 <HAL_I2C_Init+0x284>)
 8002434:	fba2 2303 	umull	r2, r3, r2, r3
 8002438:	099b      	lsrs	r3, r3, #6
 800243a:	3301      	adds	r3, #1
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6812      	ldr	r2, [r2, #0]
 8002440:	430b      	orrs	r3, r1
 8002442:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800244e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	495c      	ldr	r1, [pc, #368]	@ (80025c8 <HAL_I2C_Init+0x274>)
 8002458:	428b      	cmp	r3, r1
 800245a:	d819      	bhi.n	8002490 <HAL_I2C_Init+0x13c>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	1e59      	subs	r1, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	fbb1 f3f3 	udiv	r3, r1, r3
 800246a:	1c59      	adds	r1, r3, #1
 800246c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002470:	400b      	ands	r3, r1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00a      	beq.n	800248c <HAL_I2C_Init+0x138>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	1e59      	subs	r1, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	fbb1 f3f3 	udiv	r3, r1, r3
 8002484:	3301      	adds	r3, #1
 8002486:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800248a:	e051      	b.n	8002530 <HAL_I2C_Init+0x1dc>
 800248c:	2304      	movs	r3, #4
 800248e:	e04f      	b.n	8002530 <HAL_I2C_Init+0x1dc>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d111      	bne.n	80024bc <HAL_I2C_Init+0x168>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	1e58      	subs	r0, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6859      	ldr	r1, [r3, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	440b      	add	r3, r1
 80024a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024aa:	3301      	adds	r3, #1
 80024ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	bf0c      	ite	eq
 80024b4:	2301      	moveq	r3, #1
 80024b6:	2300      	movne	r3, #0
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	e012      	b.n	80024e2 <HAL_I2C_Init+0x18e>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	1e58      	subs	r0, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6859      	ldr	r1, [r3, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	0099      	lsls	r1, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80024d2:	3301      	adds	r3, #1
 80024d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d8:	2b00      	cmp	r3, #0
 80024da:	bf0c      	ite	eq
 80024dc:	2301      	moveq	r3, #1
 80024de:	2300      	movne	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_I2C_Init+0x196>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e022      	b.n	8002530 <HAL_I2C_Init+0x1dc>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10e      	bne.n	8002510 <HAL_I2C_Init+0x1bc>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	1e58      	subs	r0, r3, #1
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6859      	ldr	r1, [r3, #4]
 80024fa:	460b      	mov	r3, r1
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	440b      	add	r3, r1
 8002500:	fbb0 f3f3 	udiv	r3, r0, r3
 8002504:	3301      	adds	r3, #1
 8002506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800250a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800250e:	e00f      	b.n	8002530 <HAL_I2C_Init+0x1dc>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	1e58      	subs	r0, r3, #1
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6859      	ldr	r1, [r3, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	0099      	lsls	r1, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	fbb0 f3f3 	udiv	r3, r0, r3
 8002526:	3301      	adds	r3, #1
 8002528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800252c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	6809      	ldr	r1, [r1, #0]
 8002534:	4313      	orrs	r3, r2
 8002536:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69da      	ldr	r2, [r3, #28]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800255e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6911      	ldr	r1, [r2, #16]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68d2      	ldr	r2, [r2, #12]
 800256a:	4311      	orrs	r1, r2
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	430b      	orrs	r3, r1
 8002572:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695a      	ldr	r2, [r3, #20]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2220      	movs	r2, #32
 80025aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	000186a0 	.word	0x000186a0
 80025cc:	001e847f 	.word	0x001e847f
 80025d0:	003d08ff 	.word	0x003d08ff
 80025d4:	431bde83 	.word	0x431bde83
 80025d8:	10624dd3 	.word	0x10624dd3

080025dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af02      	add	r7, sp, #8
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	607a      	str	r2, [r7, #4]
 80025e6:	461a      	mov	r2, r3
 80025e8:	460b      	mov	r3, r1
 80025ea:	817b      	strh	r3, [r7, #10]
 80025ec:	4613      	mov	r3, r2
 80025ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025f0:	f7ff fc02 	bl	8001df8 <HAL_GetTick>
 80025f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b20      	cmp	r3, #32
 8002600:	f040 80e0 	bne.w	80027c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	2319      	movs	r3, #25
 800260a:	2201      	movs	r2, #1
 800260c:	4970      	ldr	r1, [pc, #448]	@ (80027d0 <HAL_I2C_Master_Transmit+0x1f4>)
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 fc9e 	bl	8002f50 <I2C_WaitOnFlagUntilTimeout>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800261a:	2302      	movs	r3, #2
 800261c:	e0d3      	b.n	80027c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002624:	2b01      	cmp	r3, #1
 8002626:	d101      	bne.n	800262c <HAL_I2C_Master_Transmit+0x50>
 8002628:	2302      	movs	r3, #2
 800262a:	e0cc      	b.n	80027c6 <HAL_I2C_Master_Transmit+0x1ea>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b01      	cmp	r3, #1
 8002640:	d007      	beq.n	8002652 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f042 0201 	orr.w	r2, r2, #1
 8002650:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002660:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2221      	movs	r2, #33	@ 0x21
 8002666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2210      	movs	r2, #16
 800266e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	893a      	ldrh	r2, [r7, #8]
 8002682:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4a50      	ldr	r2, [pc, #320]	@ (80027d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002692:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002694:	8979      	ldrh	r1, [r7, #10]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	6a3a      	ldr	r2, [r7, #32]
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 fb08 	bl	8002cb0 <I2C_MasterRequestWrite>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e08d      	b.n	80027c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026aa:	2300      	movs	r3, #0
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80026c0:	e066      	b.n	8002790 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	6a39      	ldr	r1, [r7, #32]
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 fd5c 	bl	8003184 <I2C_WaitOnTXEFlagUntilTimeout>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00d      	beq.n	80026ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d107      	bne.n	80026ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e06b      	b.n	80027c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f2:	781a      	ldrb	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002708:	b29b      	uxth	r3, r3
 800270a:	3b01      	subs	r3, #1
 800270c:	b29a      	uxth	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002716:	3b01      	subs	r3, #1
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b04      	cmp	r3, #4
 800272a:	d11b      	bne.n	8002764 <HAL_I2C_Master_Transmit+0x188>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002730:	2b00      	cmp	r3, #0
 8002732:	d017      	beq.n	8002764 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002738:	781a      	ldrb	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800274e:	b29b      	uxth	r3, r3
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	6a39      	ldr	r1, [r7, #32]
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 fd53 	bl	8003214 <I2C_WaitOnBTFFlagUntilTimeout>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00d      	beq.n	8002790 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002778:	2b04      	cmp	r3, #4
 800277a:	d107      	bne.n	800278c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800278a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e01a      	b.n	80027c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002794:	2b00      	cmp	r3, #0
 8002796:	d194      	bne.n	80026c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	e000      	b.n	80027c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80027c4:	2302      	movs	r3, #2
  }
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	00100002 	.word	0x00100002
 80027d4:	ffff0000 	.word	0xffff0000

080027d8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08c      	sub	sp, #48	@ 0x30
 80027dc:	af02      	add	r7, sp, #8
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	607a      	str	r2, [r7, #4]
 80027e2:	461a      	mov	r2, r3
 80027e4:	460b      	mov	r3, r1
 80027e6:	817b      	strh	r3, [r7, #10]
 80027e8:	4613      	mov	r3, r2
 80027ea:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027f0:	f7ff fb02 	bl	8001df8 <HAL_GetTick>
 80027f4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b20      	cmp	r3, #32
 8002800:	f040 824b 	bne.w	8002c9a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	2319      	movs	r3, #25
 800280a:	2201      	movs	r2, #1
 800280c:	497f      	ldr	r1, [pc, #508]	@ (8002a0c <HAL_I2C_Master_Receive+0x234>)
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 fb9e 	bl	8002f50 <I2C_WaitOnFlagUntilTimeout>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800281a:	2302      	movs	r3, #2
 800281c:	e23e      	b.n	8002c9c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <HAL_I2C_Master_Receive+0x54>
 8002828:	2302      	movs	r3, #2
 800282a:	e237      	b.n	8002c9c <HAL_I2C_Master_Receive+0x4c4>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b01      	cmp	r3, #1
 8002840:	d007      	beq.n	8002852 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f042 0201 	orr.w	r2, r2, #1
 8002850:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002860:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2222      	movs	r2, #34	@ 0x22
 8002866:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2210      	movs	r2, #16
 800286e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	893a      	ldrh	r2, [r7, #8]
 8002882:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002888:	b29a      	uxth	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	4a5f      	ldr	r2, [pc, #380]	@ (8002a10 <HAL_I2C_Master_Receive+0x238>)
 8002892:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002894:	8979      	ldrh	r1, [r7, #10]
 8002896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002898:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 fa8a 	bl	8002db4 <I2C_MasterRequestRead>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e1f8      	b.n	8002c9c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d113      	bne.n	80028da <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	61fb      	str	r3, [r7, #28]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	61fb      	str	r3, [r7, #28]
 80028c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	e1cc      	b.n	8002c74 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d11e      	bne.n	8002920 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80028f2:	b672      	cpsid	i
}
 80028f4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028f6:	2300      	movs	r3, #0
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	61bb      	str	r3, [r7, #24]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	61bb      	str	r3, [r7, #24]
 800290a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800291a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800291c:	b662      	cpsie	i
}
 800291e:	e035      	b.n	800298c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002924:	2b02      	cmp	r3, #2
 8002926:	d11e      	bne.n	8002966 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002936:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002938:	b672      	cpsid	i
}
 800293a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002960:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002962:	b662      	cpsie	i
}
 8002964:	e012      	b.n	800298c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002974:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800298c:	e172      	b.n	8002c74 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002992:	2b03      	cmp	r3, #3
 8002994:	f200 811f 	bhi.w	8002bd6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800299c:	2b01      	cmp	r3, #1
 800299e:	d123      	bne.n	80029e8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f000 fc7d 	bl	80032a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e173      	b.n	8002c9c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691a      	ldr	r2, [r3, #16]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029dc:	b29b      	uxth	r3, r3
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029e6:	e145      	b.n	8002c74 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d152      	bne.n	8002a96 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f6:	2200      	movs	r2, #0
 80029f8:	4906      	ldr	r1, [pc, #24]	@ (8002a14 <HAL_I2C_Master_Receive+0x23c>)
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 faa8 	bl	8002f50 <I2C_WaitOnFlagUntilTimeout>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d008      	beq.n	8002a18 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e148      	b.n	8002c9c <HAL_I2C_Master_Receive+0x4c4>
 8002a0a:	bf00      	nop
 8002a0c:	00100002 	.word	0x00100002
 8002a10:	ffff0000 	.word	0xffff0000
 8002a14:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002a18:	b672      	cpsid	i
}
 8002a1a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691a      	ldr	r2, [r3, #16]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	3b01      	subs	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a5e:	b662      	cpsie	i
}
 8002a60:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a94:	e0ee      	b.n	8002c74 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	4981      	ldr	r1, [pc, #516]	@ (8002ca4 <HAL_I2C_Master_Receive+0x4cc>)
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 fa55 	bl	8002f50 <I2C_WaitOnFlagUntilTimeout>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e0f5      	b.n	8002c9c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002abe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ac0:	b672      	cpsid	i
}
 8002ac2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691a      	ldr	r2, [r3, #16]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002af6:	4b6c      	ldr	r3, [pc, #432]	@ (8002ca8 <HAL_I2C_Master_Receive+0x4d0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	08db      	lsrs	r3, r3, #3
 8002afc:	4a6b      	ldr	r2, [pc, #428]	@ (8002cac <HAL_I2C_Master_Receive+0x4d4>)
 8002afe:	fba2 2303 	umull	r2, r3, r2, r3
 8002b02:	0a1a      	lsrs	r2, r3, #8
 8002b04:	4613      	mov	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	00da      	lsls	r2, r3, #3
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d118      	bne.n	8002b4e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b36:	f043 0220 	orr.w	r2, r3, #32
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002b3e:	b662      	cpsie	i
}
 8002b40:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e0a6      	b.n	8002c9c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d1d9      	bne.n	8002b10 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691a      	ldr	r2, [r3, #16]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7e:	1c5a      	adds	r2, r3, #1
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	3b01      	subs	r3, #1
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002b9e:	b662      	cpsie	i
}
 8002ba0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	691a      	ldr	r2, [r3, #16]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002bd4:	e04e      	b.n	8002c74 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bd8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 fb62 	bl	80032a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e058      	b.n	8002c9c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfc:	1c5a      	adds	r2, r3, #1
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c06:	3b01      	subs	r3, #1
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d124      	bne.n	8002c74 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d107      	bne.n	8002c42 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c40:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f47f ae88 	bne.w	800298e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2220      	movs	r2, #32
 8002c82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	e000      	b.n	8002c9c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002c9a:	2302      	movs	r3, #2
  }
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3728      	adds	r7, #40	@ 0x28
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	00010004 	.word	0x00010004
 8002ca8:	20000000 	.word	0x20000000
 8002cac:	14f8b589 	.word	0x14f8b589

08002cb0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af02      	add	r7, sp, #8
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	607a      	str	r2, [r7, #4]
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	d006      	beq.n	8002cda <I2C_MasterRequestWrite+0x2a>
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d003      	beq.n	8002cda <I2C_MasterRequestWrite+0x2a>
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cd8:	d108      	bne.n	8002cec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	e00b      	b.n	8002d04 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf0:	2b12      	cmp	r3, #18
 8002cf2:	d107      	bne.n	8002d04 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 f91d 	bl	8002f50 <I2C_WaitOnFlagUntilTimeout>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00d      	beq.n	8002d38 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d2a:	d103      	bne.n	8002d34 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e035      	b.n	8002da4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d40:	d108      	bne.n	8002d54 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d42:	897b      	ldrh	r3, [r7, #10]
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	461a      	mov	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d50:	611a      	str	r2, [r3, #16]
 8002d52:	e01b      	b.n	8002d8c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d54:	897b      	ldrh	r3, [r7, #10]
 8002d56:	11db      	asrs	r3, r3, #7
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	f003 0306 	and.w	r3, r3, #6
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	f063 030f 	orn	r3, r3, #15
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	490e      	ldr	r1, [pc, #56]	@ (8002dac <I2C_MasterRequestWrite+0xfc>)
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 f966 	bl	8003044 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e010      	b.n	8002da4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d82:	897b      	ldrh	r3, [r7, #10]
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	4907      	ldr	r1, [pc, #28]	@ (8002db0 <I2C_MasterRequestWrite+0x100>)
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f956 	bl	8003044 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	00010008 	.word	0x00010008
 8002db0:	00010002 	.word	0x00010002

08002db4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af02      	add	r7, sp, #8
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	603b      	str	r3, [r7, #0]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002dd8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d006      	beq.n	8002dee <I2C_MasterRequestRead+0x3a>
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d003      	beq.n	8002dee <I2C_MasterRequestRead+0x3a>
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002dec:	d108      	bne.n	8002e00 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	e00b      	b.n	8002e18 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e04:	2b11      	cmp	r3, #17
 8002e06:	d107      	bne.n	8002e18 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 f893 	bl	8002f50 <I2C_WaitOnFlagUntilTimeout>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00d      	beq.n	8002e4c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e3e:	d103      	bne.n	8002e48 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e46:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e079      	b.n	8002f40 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e54:	d108      	bne.n	8002e68 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e56:	897b      	ldrh	r3, [r7, #10]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	611a      	str	r2, [r3, #16]
 8002e66:	e05f      	b.n	8002f28 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e68:	897b      	ldrh	r3, [r7, #10]
 8002e6a:	11db      	asrs	r3, r3, #7
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	f003 0306 	and.w	r3, r3, #6
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	f063 030f 	orn	r3, r3, #15
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	4930      	ldr	r1, [pc, #192]	@ (8002f48 <I2C_MasterRequestRead+0x194>)
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f8dc 	bl	8003044 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e054      	b.n	8002f40 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e96:	897b      	ldrh	r3, [r7, #10]
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	4929      	ldr	r1, [pc, #164]	@ (8002f4c <I2C_MasterRequestRead+0x198>)
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 f8cc 	bl	8003044 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e044      	b.n	8002f40 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	613b      	str	r3, [r7, #16]
 8002eca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eda:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 f831 	bl	8002f50 <I2C_WaitOnFlagUntilTimeout>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00d      	beq.n	8002f10 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002efe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f02:	d103      	bne.n	8002f0c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f0a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e017      	b.n	8002f40 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002f10:	897b      	ldrh	r3, [r7, #10]
 8002f12:	11db      	asrs	r3, r3, #7
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	f003 0306 	and.w	r3, r3, #6
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	f063 030e 	orn	r3, r3, #14
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	4907      	ldr	r1, [pc, #28]	@ (8002f4c <I2C_MasterRequestRead+0x198>)
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 f888 	bl	8003044 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	00010008 	.word	0x00010008
 8002f4c:	00010002 	.word	0x00010002

08002f50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f60:	e048      	b.n	8002ff4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f68:	d044      	beq.n	8002ff4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f6a:	f7fe ff45 	bl	8001df8 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d302      	bcc.n	8002f80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d139      	bne.n	8002ff4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	0c1b      	lsrs	r3, r3, #16
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d10d      	bne.n	8002fa6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	43da      	mvns	r2, r3
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	4013      	ands	r3, r2
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	bf0c      	ite	eq
 8002f9c:	2301      	moveq	r3, #1
 8002f9e:	2300      	movne	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	e00c      	b.n	8002fc0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	43da      	mvns	r2, r3
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	bf0c      	ite	eq
 8002fb8:	2301      	moveq	r3, #1
 8002fba:	2300      	movne	r3, #0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	79fb      	ldrb	r3, [r7, #7]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d116      	bne.n	8002ff4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe0:	f043 0220 	orr.w	r2, r3, #32
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e023      	b.n	800303c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	0c1b      	lsrs	r3, r3, #16
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d10d      	bne.n	800301a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	43da      	mvns	r2, r3
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	4013      	ands	r3, r2
 800300a:	b29b      	uxth	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	bf0c      	ite	eq
 8003010:	2301      	moveq	r3, #1
 8003012:	2300      	movne	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	461a      	mov	r2, r3
 8003018:	e00c      	b.n	8003034 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	43da      	mvns	r2, r3
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	4013      	ands	r3, r2
 8003026:	b29b      	uxth	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	bf0c      	ite	eq
 800302c:	2301      	moveq	r3, #1
 800302e:	2300      	movne	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	461a      	mov	r2, r3
 8003034:	79fb      	ldrb	r3, [r7, #7]
 8003036:	429a      	cmp	r2, r3
 8003038:	d093      	beq.n	8002f62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
 8003050:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003052:	e071      	b.n	8003138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800305e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003062:	d123      	bne.n	80030ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003072:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800307c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003098:	f043 0204 	orr.w	r2, r3, #4
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e067      	b.n	800317c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b2:	d041      	beq.n	8003138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b4:	f7fe fea0 	bl	8001df8 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d302      	bcc.n	80030ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d136      	bne.n	8003138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	0c1b      	lsrs	r3, r3, #16
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d10c      	bne.n	80030ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	43da      	mvns	r2, r3
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	4013      	ands	r3, r2
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	bf14      	ite	ne
 80030e6:	2301      	movne	r3, #1
 80030e8:	2300      	moveq	r3, #0
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	e00b      	b.n	8003106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	43da      	mvns	r2, r3
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	4013      	ands	r3, r2
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bf14      	ite	ne
 8003100:	2301      	movne	r3, #1
 8003102:	2300      	moveq	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d016      	beq.n	8003138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003124:	f043 0220 	orr.w	r2, r3, #32
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e021      	b.n	800317c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	0c1b      	lsrs	r3, r3, #16
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b01      	cmp	r3, #1
 8003140:	d10c      	bne.n	800315c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	43da      	mvns	r2, r3
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	4013      	ands	r3, r2
 800314e:	b29b      	uxth	r3, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	bf14      	ite	ne
 8003154:	2301      	movne	r3, #1
 8003156:	2300      	moveq	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	e00b      	b.n	8003174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	43da      	mvns	r2, r3
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	4013      	ands	r3, r2
 8003168:	b29b      	uxth	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	bf14      	ite	ne
 800316e:	2301      	movne	r3, #1
 8003170:	2300      	moveq	r3, #0
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	f47f af6d 	bne.w	8003054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003190:	e034      	b.n	80031fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 f8e3 	bl	800335e <I2C_IsAcknowledgeFailed>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e034      	b.n	800320c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a8:	d028      	beq.n	80031fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031aa:	f7fe fe25 	bl	8001df8 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d302      	bcc.n	80031c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d11d      	bne.n	80031fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ca:	2b80      	cmp	r3, #128	@ 0x80
 80031cc:	d016      	beq.n	80031fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2220      	movs	r2, #32
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e8:	f043 0220 	orr.w	r2, r3, #32
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e007      	b.n	800320c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003206:	2b80      	cmp	r3, #128	@ 0x80
 8003208:	d1c3      	bne.n	8003192 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003220:	e034      	b.n	800328c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 f89b 	bl	800335e <I2C_IsAcknowledgeFailed>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e034      	b.n	800329c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003238:	d028      	beq.n	800328c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800323a:	f7fe fddd 	bl	8001df8 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	429a      	cmp	r2, r3
 8003248:	d302      	bcc.n	8003250 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d11d      	bne.n	800328c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b04      	cmp	r3, #4
 800325c:	d016      	beq.n	800328c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003278:	f043 0220 	orr.w	r2, r3, #32
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e007      	b.n	800329c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	f003 0304 	and.w	r3, r3, #4
 8003296:	2b04      	cmp	r3, #4
 8003298:	d1c3      	bne.n	8003222 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032b0:	e049      	b.n	8003346 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	f003 0310 	and.w	r3, r3, #16
 80032bc:	2b10      	cmp	r3, #16
 80032be:	d119      	bne.n	80032f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f06f 0210 	mvn.w	r2, #16
 80032c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e030      	b.n	8003356 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f4:	f7fe fd80 	bl	8001df8 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	429a      	cmp	r2, r3
 8003302:	d302      	bcc.n	800330a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d11d      	bne.n	8003346 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003314:	2b40      	cmp	r3, #64	@ 0x40
 8003316:	d016      	beq.n	8003346 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2220      	movs	r2, #32
 8003322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003332:	f043 0220 	orr.w	r2, r3, #32
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e007      	b.n	8003356 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003350:	2b40      	cmp	r3, #64	@ 0x40
 8003352:	d1ae      	bne.n	80032b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003370:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003374:	d11b      	bne.n	80033ae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800337e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2220      	movs	r2, #32
 800338a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339a:	f043 0204 	orr.w	r2, r3, #4
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bc80      	pop	{r7}
 80033b8:	4770      	bx	lr
	...

080033bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e272      	b.n	80038b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 8087 	beq.w	80034ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033dc:	4b92      	ldr	r3, [pc, #584]	@ (8003628 <HAL_RCC_OscConfig+0x26c>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f003 030c 	and.w	r3, r3, #12
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d00c      	beq.n	8003402 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033e8:	4b8f      	ldr	r3, [pc, #572]	@ (8003628 <HAL_RCC_OscConfig+0x26c>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 030c 	and.w	r3, r3, #12
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	d112      	bne.n	800341a <HAL_RCC_OscConfig+0x5e>
 80033f4:	4b8c      	ldr	r3, [pc, #560]	@ (8003628 <HAL_RCC_OscConfig+0x26c>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003400:	d10b      	bne.n	800341a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003402:	4b89      	ldr	r3, [pc, #548]	@ (8003628 <HAL_RCC_OscConfig+0x26c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d06c      	beq.n	80034e8 <HAL_RCC_OscConfig+0x12c>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d168      	bne.n	80034e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e24c      	b.n	80038b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003422:	d106      	bne.n	8003432 <HAL_RCC_OscConfig+0x76>
 8003424:	4b80      	ldr	r3, [pc, #512]	@ (8003628 <HAL_RCC_OscConfig+0x26c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a7f      	ldr	r2, [pc, #508]	@ (8003628 <HAL_RCC_OscConfig+0x26c>)
 800342a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800342e:	6013      	str	r3, [r2, #0]
 8003430:	e02e      	b.n	8003490 <HAL_RCC_OscConfig+0xd4>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10c      	bne.n	8003454 <HAL_RCC_OscConfig+0x98>
 800343a:	4b7b      	ldr	r3, [pc, #492]	@ (8003628 <HAL_RCC_OscConfig+0x26c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a7a      	ldr	r2, [pc, #488]	@ (8003628 <HAL_RCC_OscConfig+0x26c>)
 8003440:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	4b78      	ldr	r3, [pc, #480]	@ (8003628 <HAL_RCC_OscConfig+0x26c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a77      	ldr	r2, [pc, #476]	@ (8003628 <HAL_RCC_OscConfig+0x26c>)
 800344c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	e01d      	b.n	8003490 <HAL_RCC_OscConfig+0xd4>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800345c:	d10c      	bne.n	8003478 <HAL_RCC_OscConfig+0xbc>
 800345e:	4b72      	ldr	r3, [pc, #456]	@ (8003628 <HAL_RCC_OscConfig+0x26c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a71      	ldr	r2, [pc, #452]	@ (8003628 <HAL_RCC_OscConfig+0x26c>)
 8003464:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	4b6f      	ldr	r3, [pc, #444]	@ (8003628 <HAL_RCC_OscConfig+0x26c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a6e      	ldr	r2, [pc, #440]	@ (8003628 <HAL_RCC_OscConfig+0x26c>)
 8003470:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	e00b      	b.n	8003490 <HAL_RCC_OscConfig+0xd4>
 8003478:	4b6b      	ldr	r3, [pc, #428]	@ (8003628 <HAL_RCC_OscConfig+0x26c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a6a      	ldr	r2, [pc, #424]	@ (8003628 <HAL_RCC_OscConfig+0x26c>)
 800347e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003482:	6013      	str	r3, [r2, #0]
 8003484:	4b68      	ldr	r3, [pc, #416]	@ (8003628 <HAL_RCC_OscConfig+0x26c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a67      	ldr	r2, [pc, #412]	@ (8003628 <HAL_RCC_OscConfig+0x26c>)
 800348a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800348e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d013      	beq.n	80034c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003498:	f7fe fcae 	bl	8001df8 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a0:	f7fe fcaa 	bl	8001df8 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b64      	cmp	r3, #100	@ 0x64
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e200      	b.n	80038b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b2:	4b5d      	ldr	r3, [pc, #372]	@ (8003628 <HAL_RCC_OscConfig+0x26c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0f0      	beq.n	80034a0 <HAL_RCC_OscConfig+0xe4>
 80034be:	e014      	b.n	80034ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c0:	f7fe fc9a 	bl	8001df8 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c8:	f7fe fc96 	bl	8001df8 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b64      	cmp	r3, #100	@ 0x64
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e1ec      	b.n	80038b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034da:	4b53      	ldr	r3, [pc, #332]	@ (8003628 <HAL_RCC_OscConfig+0x26c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0x10c>
 80034e6:	e000      	b.n	80034ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d063      	beq.n	80035be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034f6:	4b4c      	ldr	r3, [pc, #304]	@ (8003628 <HAL_RCC_OscConfig+0x26c>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f003 030c 	and.w	r3, r3, #12
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00b      	beq.n	800351a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003502:	4b49      	ldr	r3, [pc, #292]	@ (8003628 <HAL_RCC_OscConfig+0x26c>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f003 030c 	and.w	r3, r3, #12
 800350a:	2b08      	cmp	r3, #8
 800350c:	d11c      	bne.n	8003548 <HAL_RCC_OscConfig+0x18c>
 800350e:	4b46      	ldr	r3, [pc, #280]	@ (8003628 <HAL_RCC_OscConfig+0x26c>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d116      	bne.n	8003548 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800351a:	4b43      	ldr	r3, [pc, #268]	@ (8003628 <HAL_RCC_OscConfig+0x26c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d005      	beq.n	8003532 <HAL_RCC_OscConfig+0x176>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d001      	beq.n	8003532 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e1c0      	b.n	80038b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003532:	4b3d      	ldr	r3, [pc, #244]	@ (8003628 <HAL_RCC_OscConfig+0x26c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	4939      	ldr	r1, [pc, #228]	@ (8003628 <HAL_RCC_OscConfig+0x26c>)
 8003542:	4313      	orrs	r3, r2
 8003544:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003546:	e03a      	b.n	80035be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d020      	beq.n	8003592 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003550:	4b36      	ldr	r3, [pc, #216]	@ (800362c <HAL_RCC_OscConfig+0x270>)
 8003552:	2201      	movs	r2, #1
 8003554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003556:	f7fe fc4f 	bl	8001df8 <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800355e:	f7fe fc4b 	bl	8001df8 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e1a1      	b.n	80038b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003570:	4b2d      	ldr	r3, [pc, #180]	@ (8003628 <HAL_RCC_OscConfig+0x26c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0f0      	beq.n	800355e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800357c:	4b2a      	ldr	r3, [pc, #168]	@ (8003628 <HAL_RCC_OscConfig+0x26c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	4927      	ldr	r1, [pc, #156]	@ (8003628 <HAL_RCC_OscConfig+0x26c>)
 800358c:	4313      	orrs	r3, r2
 800358e:	600b      	str	r3, [r1, #0]
 8003590:	e015      	b.n	80035be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003592:	4b26      	ldr	r3, [pc, #152]	@ (800362c <HAL_RCC_OscConfig+0x270>)
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003598:	f7fe fc2e 	bl	8001df8 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035a0:	f7fe fc2a 	bl	8001df8 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e180      	b.n	80038b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003628 <HAL_RCC_OscConfig+0x26c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d03a      	beq.n	8003640 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d019      	beq.n	8003606 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035d2:	4b17      	ldr	r3, [pc, #92]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 80035d4:	2201      	movs	r2, #1
 80035d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d8:	f7fe fc0e 	bl	8001df8 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e0:	f7fe fc0a 	bl	8001df8 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e160      	b.n	80038b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003628 <HAL_RCC_OscConfig+0x26c>)
 80035f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0f0      	beq.n	80035e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035fe:	2001      	movs	r0, #1
 8003600:	f000 face 	bl	8003ba0 <RCC_Delay>
 8003604:	e01c      	b.n	8003640 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003606:	4b0a      	ldr	r3, [pc, #40]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800360c:	f7fe fbf4 	bl	8001df8 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003612:	e00f      	b.n	8003634 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003614:	f7fe fbf0 	bl	8001df8 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d908      	bls.n	8003634 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e146      	b.n	80038b4 <HAL_RCC_OscConfig+0x4f8>
 8003626:	bf00      	nop
 8003628:	40021000 	.word	0x40021000
 800362c:	42420000 	.word	0x42420000
 8003630:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003634:	4b92      	ldr	r3, [pc, #584]	@ (8003880 <HAL_RCC_OscConfig+0x4c4>)
 8003636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1e9      	bne.n	8003614 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 80a6 	beq.w	800379a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800364e:	2300      	movs	r3, #0
 8003650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003652:	4b8b      	ldr	r3, [pc, #556]	@ (8003880 <HAL_RCC_OscConfig+0x4c4>)
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10d      	bne.n	800367a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800365e:	4b88      	ldr	r3, [pc, #544]	@ (8003880 <HAL_RCC_OscConfig+0x4c4>)
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	4a87      	ldr	r2, [pc, #540]	@ (8003880 <HAL_RCC_OscConfig+0x4c4>)
 8003664:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003668:	61d3      	str	r3, [r2, #28]
 800366a:	4b85      	ldr	r3, [pc, #532]	@ (8003880 <HAL_RCC_OscConfig+0x4c4>)
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003672:	60bb      	str	r3, [r7, #8]
 8003674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003676:	2301      	movs	r3, #1
 8003678:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367a:	4b82      	ldr	r3, [pc, #520]	@ (8003884 <HAL_RCC_OscConfig+0x4c8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003682:	2b00      	cmp	r3, #0
 8003684:	d118      	bne.n	80036b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003686:	4b7f      	ldr	r3, [pc, #508]	@ (8003884 <HAL_RCC_OscConfig+0x4c8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a7e      	ldr	r2, [pc, #504]	@ (8003884 <HAL_RCC_OscConfig+0x4c8>)
 800368c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003692:	f7fe fbb1 	bl	8001df8 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003698:	e008      	b.n	80036ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800369a:	f7fe fbad 	bl	8001df8 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b64      	cmp	r3, #100	@ 0x64
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e103      	b.n	80038b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ac:	4b75      	ldr	r3, [pc, #468]	@ (8003884 <HAL_RCC_OscConfig+0x4c8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0f0      	beq.n	800369a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d106      	bne.n	80036ce <HAL_RCC_OscConfig+0x312>
 80036c0:	4b6f      	ldr	r3, [pc, #444]	@ (8003880 <HAL_RCC_OscConfig+0x4c4>)
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	4a6e      	ldr	r2, [pc, #440]	@ (8003880 <HAL_RCC_OscConfig+0x4c4>)
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	6213      	str	r3, [r2, #32]
 80036cc:	e02d      	b.n	800372a <HAL_RCC_OscConfig+0x36e>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10c      	bne.n	80036f0 <HAL_RCC_OscConfig+0x334>
 80036d6:	4b6a      	ldr	r3, [pc, #424]	@ (8003880 <HAL_RCC_OscConfig+0x4c4>)
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	4a69      	ldr	r2, [pc, #420]	@ (8003880 <HAL_RCC_OscConfig+0x4c4>)
 80036dc:	f023 0301 	bic.w	r3, r3, #1
 80036e0:	6213      	str	r3, [r2, #32]
 80036e2:	4b67      	ldr	r3, [pc, #412]	@ (8003880 <HAL_RCC_OscConfig+0x4c4>)
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	4a66      	ldr	r2, [pc, #408]	@ (8003880 <HAL_RCC_OscConfig+0x4c4>)
 80036e8:	f023 0304 	bic.w	r3, r3, #4
 80036ec:	6213      	str	r3, [r2, #32]
 80036ee:	e01c      	b.n	800372a <HAL_RCC_OscConfig+0x36e>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	2b05      	cmp	r3, #5
 80036f6:	d10c      	bne.n	8003712 <HAL_RCC_OscConfig+0x356>
 80036f8:	4b61      	ldr	r3, [pc, #388]	@ (8003880 <HAL_RCC_OscConfig+0x4c4>)
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	4a60      	ldr	r2, [pc, #384]	@ (8003880 <HAL_RCC_OscConfig+0x4c4>)
 80036fe:	f043 0304 	orr.w	r3, r3, #4
 8003702:	6213      	str	r3, [r2, #32]
 8003704:	4b5e      	ldr	r3, [pc, #376]	@ (8003880 <HAL_RCC_OscConfig+0x4c4>)
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	4a5d      	ldr	r2, [pc, #372]	@ (8003880 <HAL_RCC_OscConfig+0x4c4>)
 800370a:	f043 0301 	orr.w	r3, r3, #1
 800370e:	6213      	str	r3, [r2, #32]
 8003710:	e00b      	b.n	800372a <HAL_RCC_OscConfig+0x36e>
 8003712:	4b5b      	ldr	r3, [pc, #364]	@ (8003880 <HAL_RCC_OscConfig+0x4c4>)
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	4a5a      	ldr	r2, [pc, #360]	@ (8003880 <HAL_RCC_OscConfig+0x4c4>)
 8003718:	f023 0301 	bic.w	r3, r3, #1
 800371c:	6213      	str	r3, [r2, #32]
 800371e:	4b58      	ldr	r3, [pc, #352]	@ (8003880 <HAL_RCC_OscConfig+0x4c4>)
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	4a57      	ldr	r2, [pc, #348]	@ (8003880 <HAL_RCC_OscConfig+0x4c4>)
 8003724:	f023 0304 	bic.w	r3, r3, #4
 8003728:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d015      	beq.n	800375e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003732:	f7fe fb61 	bl	8001df8 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003738:	e00a      	b.n	8003750 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800373a:	f7fe fb5d 	bl	8001df8 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003748:	4293      	cmp	r3, r2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e0b1      	b.n	80038b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003750:	4b4b      	ldr	r3, [pc, #300]	@ (8003880 <HAL_RCC_OscConfig+0x4c4>)
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0ee      	beq.n	800373a <HAL_RCC_OscConfig+0x37e>
 800375c:	e014      	b.n	8003788 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800375e:	f7fe fb4b 	bl	8001df8 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003764:	e00a      	b.n	800377c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003766:	f7fe fb47 	bl	8001df8 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003774:	4293      	cmp	r3, r2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e09b      	b.n	80038b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800377c:	4b40      	ldr	r3, [pc, #256]	@ (8003880 <HAL_RCC_OscConfig+0x4c4>)
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1ee      	bne.n	8003766 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003788:	7dfb      	ldrb	r3, [r7, #23]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d105      	bne.n	800379a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800378e:	4b3c      	ldr	r3, [pc, #240]	@ (8003880 <HAL_RCC_OscConfig+0x4c4>)
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	4a3b      	ldr	r2, [pc, #236]	@ (8003880 <HAL_RCC_OscConfig+0x4c4>)
 8003794:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003798:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 8087 	beq.w	80038b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037a4:	4b36      	ldr	r3, [pc, #216]	@ (8003880 <HAL_RCC_OscConfig+0x4c4>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f003 030c 	and.w	r3, r3, #12
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d061      	beq.n	8003874 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d146      	bne.n	8003846 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b8:	4b33      	ldr	r3, [pc, #204]	@ (8003888 <HAL_RCC_OscConfig+0x4cc>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037be:	f7fe fb1b 	bl	8001df8 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c6:	f7fe fb17 	bl	8001df8 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e06d      	b.n	80038b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037d8:	4b29      	ldr	r3, [pc, #164]	@ (8003880 <HAL_RCC_OscConfig+0x4c4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1f0      	bne.n	80037c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037ec:	d108      	bne.n	8003800 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037ee:	4b24      	ldr	r3, [pc, #144]	@ (8003880 <HAL_RCC_OscConfig+0x4c4>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	4921      	ldr	r1, [pc, #132]	@ (8003880 <HAL_RCC_OscConfig+0x4c4>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003800:	4b1f      	ldr	r3, [pc, #124]	@ (8003880 <HAL_RCC_OscConfig+0x4c4>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a19      	ldr	r1, [r3, #32]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003810:	430b      	orrs	r3, r1
 8003812:	491b      	ldr	r1, [pc, #108]	@ (8003880 <HAL_RCC_OscConfig+0x4c4>)
 8003814:	4313      	orrs	r3, r2
 8003816:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003818:	4b1b      	ldr	r3, [pc, #108]	@ (8003888 <HAL_RCC_OscConfig+0x4cc>)
 800381a:	2201      	movs	r2, #1
 800381c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381e:	f7fe faeb 	bl	8001df8 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003826:	f7fe fae7 	bl	8001df8 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e03d      	b.n	80038b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003838:	4b11      	ldr	r3, [pc, #68]	@ (8003880 <HAL_RCC_OscConfig+0x4c4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f0      	beq.n	8003826 <HAL_RCC_OscConfig+0x46a>
 8003844:	e035      	b.n	80038b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003846:	4b10      	ldr	r3, [pc, #64]	@ (8003888 <HAL_RCC_OscConfig+0x4cc>)
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384c:	f7fe fad4 	bl	8001df8 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003854:	f7fe fad0 	bl	8001df8 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e026      	b.n	80038b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003866:	4b06      	ldr	r3, [pc, #24]	@ (8003880 <HAL_RCC_OscConfig+0x4c4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1f0      	bne.n	8003854 <HAL_RCC_OscConfig+0x498>
 8003872:	e01e      	b.n	80038b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d107      	bne.n	800388c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e019      	b.n	80038b4 <HAL_RCC_OscConfig+0x4f8>
 8003880:	40021000 	.word	0x40021000
 8003884:	40007000 	.word	0x40007000
 8003888:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800388c:	4b0b      	ldr	r3, [pc, #44]	@ (80038bc <HAL_RCC_OscConfig+0x500>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	429a      	cmp	r2, r3
 800389e:	d106      	bne.n	80038ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d001      	beq.n	80038b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40021000 	.word	0x40021000

080038c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0d0      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038d4:	4b6a      	ldr	r3, [pc, #424]	@ (8003a80 <HAL_RCC_ClockConfig+0x1c0>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d910      	bls.n	8003904 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e2:	4b67      	ldr	r3, [pc, #412]	@ (8003a80 <HAL_RCC_ClockConfig+0x1c0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f023 0207 	bic.w	r2, r3, #7
 80038ea:	4965      	ldr	r1, [pc, #404]	@ (8003a80 <HAL_RCC_ClockConfig+0x1c0>)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f2:	4b63      	ldr	r3, [pc, #396]	@ (8003a80 <HAL_RCC_ClockConfig+0x1c0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d001      	beq.n	8003904 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e0b8      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d020      	beq.n	8003952 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d005      	beq.n	8003928 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800391c:	4b59      	ldr	r3, [pc, #356]	@ (8003a84 <HAL_RCC_ClockConfig+0x1c4>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	4a58      	ldr	r2, [pc, #352]	@ (8003a84 <HAL_RCC_ClockConfig+0x1c4>)
 8003922:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003926:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0308 	and.w	r3, r3, #8
 8003930:	2b00      	cmp	r3, #0
 8003932:	d005      	beq.n	8003940 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003934:	4b53      	ldr	r3, [pc, #332]	@ (8003a84 <HAL_RCC_ClockConfig+0x1c4>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	4a52      	ldr	r2, [pc, #328]	@ (8003a84 <HAL_RCC_ClockConfig+0x1c4>)
 800393a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800393e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003940:	4b50      	ldr	r3, [pc, #320]	@ (8003a84 <HAL_RCC_ClockConfig+0x1c4>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	494d      	ldr	r1, [pc, #308]	@ (8003a84 <HAL_RCC_ClockConfig+0x1c4>)
 800394e:	4313      	orrs	r3, r2
 8003950:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d040      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d107      	bne.n	8003976 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003966:	4b47      	ldr	r3, [pc, #284]	@ (8003a84 <HAL_RCC_ClockConfig+0x1c4>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d115      	bne.n	800399e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e07f      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2b02      	cmp	r3, #2
 800397c:	d107      	bne.n	800398e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800397e:	4b41      	ldr	r3, [pc, #260]	@ (8003a84 <HAL_RCC_ClockConfig+0x1c4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d109      	bne.n	800399e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e073      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800398e:	4b3d      	ldr	r3, [pc, #244]	@ (8003a84 <HAL_RCC_ClockConfig+0x1c4>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e06b      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800399e:	4b39      	ldr	r3, [pc, #228]	@ (8003a84 <HAL_RCC_ClockConfig+0x1c4>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f023 0203 	bic.w	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	4936      	ldr	r1, [pc, #216]	@ (8003a84 <HAL_RCC_ClockConfig+0x1c4>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039b0:	f7fe fa22 	bl	8001df8 <HAL_GetTick>
 80039b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b6:	e00a      	b.n	80039ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b8:	f7fe fa1e 	bl	8001df8 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e053      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ce:	4b2d      	ldr	r3, [pc, #180]	@ (8003a84 <HAL_RCC_ClockConfig+0x1c4>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f003 020c 	and.w	r2, r3, #12
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	429a      	cmp	r2, r3
 80039de:	d1eb      	bne.n	80039b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039e0:	4b27      	ldr	r3, [pc, #156]	@ (8003a80 <HAL_RCC_ClockConfig+0x1c0>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d210      	bcs.n	8003a10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ee:	4b24      	ldr	r3, [pc, #144]	@ (8003a80 <HAL_RCC_ClockConfig+0x1c0>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f023 0207 	bic.w	r2, r3, #7
 80039f6:	4922      	ldr	r1, [pc, #136]	@ (8003a80 <HAL_RCC_ClockConfig+0x1c0>)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fe:	4b20      	ldr	r3, [pc, #128]	@ (8003a80 <HAL_RCC_ClockConfig+0x1c0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d001      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e032      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d008      	beq.n	8003a2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a1c:	4b19      	ldr	r3, [pc, #100]	@ (8003a84 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	4916      	ldr	r1, [pc, #88]	@ (8003a84 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d009      	beq.n	8003a4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a3a:	4b12      	ldr	r3, [pc, #72]	@ (8003a84 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	490e      	ldr	r1, [pc, #56]	@ (8003a84 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a4e:	f000 f821 	bl	8003a94 <HAL_RCC_GetSysClockFreq>
 8003a52:	4602      	mov	r2, r0
 8003a54:	4b0b      	ldr	r3, [pc, #44]	@ (8003a84 <HAL_RCC_ClockConfig+0x1c4>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	091b      	lsrs	r3, r3, #4
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	490a      	ldr	r1, [pc, #40]	@ (8003a88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a60:	5ccb      	ldrb	r3, [r1, r3]
 8003a62:	fa22 f303 	lsr.w	r3, r2, r3
 8003a66:	4a09      	ldr	r2, [pc, #36]	@ (8003a8c <HAL_RCC_ClockConfig+0x1cc>)
 8003a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a6a:	4b09      	ldr	r3, [pc, #36]	@ (8003a90 <HAL_RCC_ClockConfig+0x1d0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fe f980 	bl	8001d74 <HAL_InitTick>

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40022000 	.word	0x40022000
 8003a84:	40021000 	.word	0x40021000
 8003a88:	08008bcc 	.word	0x08008bcc
 8003a8c:	20000000 	.word	0x20000000
 8003a90:	20000008 	.word	0x20000008

08003a94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60bb      	str	r3, [r7, #8]
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003aae:	4b1e      	ldr	r3, [pc, #120]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f003 030c 	and.w	r3, r3, #12
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	d002      	beq.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x30>
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d003      	beq.n	8003aca <HAL_RCC_GetSysClockFreq+0x36>
 8003ac2:	e027      	b.n	8003b14 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ac4:	4b19      	ldr	r3, [pc, #100]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x98>)
 8003ac6:	613b      	str	r3, [r7, #16]
      break;
 8003ac8:	e027      	b.n	8003b1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	0c9b      	lsrs	r3, r3, #18
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	4a17      	ldr	r2, [pc, #92]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ad4:	5cd3      	ldrb	r3, [r2, r3]
 8003ad6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d010      	beq.n	8003b04 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ae2:	4b11      	ldr	r3, [pc, #68]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	0c5b      	lsrs	r3, r3, #17
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	4a11      	ldr	r2, [pc, #68]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003aee:	5cd3      	ldrb	r3, [r2, r3]
 8003af0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a0d      	ldr	r2, [pc, #52]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x98>)
 8003af6:	fb03 f202 	mul.w	r2, r3, r2
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b00:	617b      	str	r3, [r7, #20]
 8003b02:	e004      	b.n	8003b0e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a0c      	ldr	r2, [pc, #48]	@ (8003b38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b08:	fb02 f303 	mul.w	r3, r2, r3
 8003b0c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	613b      	str	r3, [r7, #16]
      break;
 8003b12:	e002      	b.n	8003b1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b14:	4b05      	ldr	r3, [pc, #20]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x98>)
 8003b16:	613b      	str	r3, [r7, #16]
      break;
 8003b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b1a:	693b      	ldr	r3, [r7, #16]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	371c      	adds	r7, #28
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bc80      	pop	{r7}
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	007a1200 	.word	0x007a1200
 8003b30:	08008be4 	.word	0x08008be4
 8003b34:	08008bf4 	.word	0x08008bf4
 8003b38:	003d0900 	.word	0x003d0900

08003b3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b40:	4b02      	ldr	r3, [pc, #8]	@ (8003b4c <HAL_RCC_GetHCLKFreq+0x10>)
 8003b42:	681b      	ldr	r3, [r3, #0]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bc80      	pop	{r7}
 8003b4a:	4770      	bx	lr
 8003b4c:	20000000 	.word	0x20000000

08003b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b54:	f7ff fff2 	bl	8003b3c <HAL_RCC_GetHCLKFreq>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	4b05      	ldr	r3, [pc, #20]	@ (8003b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	0a1b      	lsrs	r3, r3, #8
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	4903      	ldr	r1, [pc, #12]	@ (8003b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b66:	5ccb      	ldrb	r3, [r1, r3]
 8003b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40021000 	.word	0x40021000
 8003b74:	08008bdc 	.word	0x08008bdc

08003b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b7c:	f7ff ffde 	bl	8003b3c <HAL_RCC_GetHCLKFreq>
 8003b80:	4602      	mov	r2, r0
 8003b82:	4b05      	ldr	r3, [pc, #20]	@ (8003b98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	0adb      	lsrs	r3, r3, #11
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	4903      	ldr	r1, [pc, #12]	@ (8003b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b8e:	5ccb      	ldrb	r3, [r1, r3]
 8003b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	08008bdc 	.word	0x08008bdc

08003ba0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8003bd4 <RCC_Delay+0x34>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a0a      	ldr	r2, [pc, #40]	@ (8003bd8 <RCC_Delay+0x38>)
 8003bae:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb2:	0a5b      	lsrs	r3, r3, #9
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	fb02 f303 	mul.w	r3, r2, r3
 8003bba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003bbc:	bf00      	nop
  }
  while (Delay --);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	1e5a      	subs	r2, r3, #1
 8003bc2:	60fa      	str	r2, [r7, #12]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1f9      	bne.n	8003bbc <RCC_Delay+0x1c>
}
 8003bc8:	bf00      	nop
 8003bca:	bf00      	nop
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bc80      	pop	{r7}
 8003bd2:	4770      	bx	lr
 8003bd4:	20000000 	.word	0x20000000
 8003bd8:	10624dd3 	.word	0x10624dd3

08003bdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e042      	b.n	8003c74 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fd fd26 	bl	8001654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2224      	movs	r2, #36	@ 0x24
 8003c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f971 	bl	8003f08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695a      	ldr	r2, [r3, #20]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b08a      	sub	sp, #40	@ 0x28
 8003c80:	af02      	add	r7, sp, #8
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	603b      	str	r3, [r7, #0]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b20      	cmp	r3, #32
 8003c9a:	d175      	bne.n	8003d88 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <HAL_UART_Transmit+0x2c>
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e06e      	b.n	8003d8a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2221      	movs	r2, #33	@ 0x21
 8003cb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cba:	f7fe f89d 	bl	8001df8 <HAL_GetTick>
 8003cbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	88fa      	ldrh	r2, [r7, #6]
 8003cc4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	88fa      	ldrh	r2, [r7, #6]
 8003cca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cd4:	d108      	bne.n	8003ce8 <HAL_UART_Transmit+0x6c>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d104      	bne.n	8003ce8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	61bb      	str	r3, [r7, #24]
 8003ce6:	e003      	b.n	8003cf0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cec:	2300      	movs	r3, #0
 8003cee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cf0:	e02e      	b.n	8003d50 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	2180      	movs	r1, #128	@ 0x80
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 f848 	bl	8003d92 <UART_WaitOnFlagUntilTimeout>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d005      	beq.n	8003d14 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e03a      	b.n	8003d8a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10b      	bne.n	8003d32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	881b      	ldrh	r3, [r3, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	3302      	adds	r3, #2
 8003d2e:	61bb      	str	r3, [r7, #24]
 8003d30:	e007      	b.n	8003d42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	781a      	ldrb	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1cb      	bne.n	8003cf2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2200      	movs	r2, #0
 8003d62:	2140      	movs	r1, #64	@ 0x40
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 f814 	bl	8003d92 <UART_WaitOnFlagUntilTimeout>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e006      	b.n	8003d8a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003d84:	2300      	movs	r3, #0
 8003d86:	e000      	b.n	8003d8a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d88:	2302      	movs	r3, #2
  }
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3720      	adds	r7, #32
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b086      	sub	sp, #24
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	60f8      	str	r0, [r7, #12]
 8003d9a:	60b9      	str	r1, [r7, #8]
 8003d9c:	603b      	str	r3, [r7, #0]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003da2:	e03b      	b.n	8003e1c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003daa:	d037      	beq.n	8003e1c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dac:	f7fe f824 	bl	8001df8 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	6a3a      	ldr	r2, [r7, #32]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d302      	bcc.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e03a      	b.n	8003e3c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d023      	beq.n	8003e1c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2b80      	cmp	r3, #128	@ 0x80
 8003dd8:	d020      	beq.n	8003e1c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b40      	cmp	r3, #64	@ 0x40
 8003dde:	d01d      	beq.n	8003e1c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d116      	bne.n	8003e1c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 f81d 	bl	8003e44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2208      	movs	r2, #8
 8003e0e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e00f      	b.n	8003e3c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	4013      	ands	r3, r2
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	bf0c      	ite	eq
 8003e2c:	2301      	moveq	r3, #1
 8003e2e:	2300      	movne	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	461a      	mov	r2, r3
 8003e34:	79fb      	ldrb	r3, [r7, #7]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d0b4      	beq.n	8003da4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b095      	sub	sp, #84	@ 0x54
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	330c      	adds	r3, #12
 8003e52:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e56:	e853 3f00 	ldrex	r3, [r3]
 8003e5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	330c      	adds	r3, #12
 8003e6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e6c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e74:	e841 2300 	strex	r3, r2, [r1]
 8003e78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1e5      	bne.n	8003e4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	3314      	adds	r3, #20
 8003e86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	e853 3f00 	ldrex	r3, [r3]
 8003e8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	f023 0301 	bic.w	r3, r3, #1
 8003e96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	3314      	adds	r3, #20
 8003e9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ea0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ea6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ea8:	e841 2300 	strex	r3, r2, [r1]
 8003eac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1e5      	bne.n	8003e80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d119      	bne.n	8003ef0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	330c      	adds	r3, #12
 8003ec2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	e853 3f00 	ldrex	r3, [r3]
 8003eca:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f023 0310 	bic.w	r3, r3, #16
 8003ed2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	330c      	adds	r3, #12
 8003eda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003edc:	61ba      	str	r2, [r7, #24]
 8003ede:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee0:	6979      	ldr	r1, [r7, #20]
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	e841 2300 	strex	r3, r2, [r1]
 8003ee8:	613b      	str	r3, [r7, #16]
   return(result);
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1e5      	bne.n	8003ebc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003efe:	bf00      	nop
 8003f00:	3754      	adds	r7, #84	@ 0x54
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr

08003f08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003f42:	f023 030c 	bic.w	r3, r3, #12
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6812      	ldr	r2, [r2, #0]
 8003f4a:	68b9      	ldr	r1, [r7, #8]
 8003f4c:	430b      	orrs	r3, r1
 8003f4e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699a      	ldr	r2, [r3, #24]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a2c      	ldr	r2, [pc, #176]	@ (800401c <UART_SetConfig+0x114>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d103      	bne.n	8003f78 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f70:	f7ff fe02 	bl	8003b78 <HAL_RCC_GetPCLK2Freq>
 8003f74:	60f8      	str	r0, [r7, #12]
 8003f76:	e002      	b.n	8003f7e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f78:	f7ff fdea 	bl	8003b50 <HAL_RCC_GetPCLK1Freq>
 8003f7c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	009a      	lsls	r2, r3, #2
 8003f88:	441a      	add	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f94:	4a22      	ldr	r2, [pc, #136]	@ (8004020 <UART_SetConfig+0x118>)
 8003f96:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9a:	095b      	lsrs	r3, r3, #5
 8003f9c:	0119      	lsls	r1, r3, #4
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	009a      	lsls	r2, r3, #2
 8003fa8:	441a      	add	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8004020 <UART_SetConfig+0x118>)
 8003fb6:	fba3 0302 	umull	r0, r3, r3, r2
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	2064      	movs	r0, #100	@ 0x64
 8003fbe:	fb00 f303 	mul.w	r3, r0, r3
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	3332      	adds	r3, #50	@ 0x32
 8003fc8:	4a15      	ldr	r2, [pc, #84]	@ (8004020 <UART_SetConfig+0x118>)
 8003fca:	fba2 2303 	umull	r2, r3, r2, r3
 8003fce:	095b      	lsrs	r3, r3, #5
 8003fd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fd4:	4419      	add	r1, r3
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	009a      	lsls	r2, r3, #2
 8003fe0:	441a      	add	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fec:	4b0c      	ldr	r3, [pc, #48]	@ (8004020 <UART_SetConfig+0x118>)
 8003fee:	fba3 0302 	umull	r0, r3, r3, r2
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	2064      	movs	r0, #100	@ 0x64
 8003ff6:	fb00 f303 	mul.w	r3, r0, r3
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	3332      	adds	r3, #50	@ 0x32
 8004000:	4a07      	ldr	r2, [pc, #28]	@ (8004020 <UART_SetConfig+0x118>)
 8004002:	fba2 2303 	umull	r2, r3, r2, r3
 8004006:	095b      	lsrs	r3, r3, #5
 8004008:	f003 020f 	and.w	r2, r3, #15
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	440a      	add	r2, r1
 8004012:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004014:	bf00      	nop
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40013800 	.word	0x40013800
 8004020:	51eb851f 	.word	0x51eb851f

08004024 <__cvt>:
 8004024:	2b00      	cmp	r3, #0
 8004026:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800402a:	461d      	mov	r5, r3
 800402c:	bfbb      	ittet	lt
 800402e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004032:	461d      	movlt	r5, r3
 8004034:	2300      	movge	r3, #0
 8004036:	232d      	movlt	r3, #45	@ 0x2d
 8004038:	b088      	sub	sp, #32
 800403a:	4614      	mov	r4, r2
 800403c:	bfb8      	it	lt
 800403e:	4614      	movlt	r4, r2
 8004040:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004042:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004044:	7013      	strb	r3, [r2, #0]
 8004046:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004048:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800404c:	f023 0820 	bic.w	r8, r3, #32
 8004050:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004054:	d005      	beq.n	8004062 <__cvt+0x3e>
 8004056:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800405a:	d100      	bne.n	800405e <__cvt+0x3a>
 800405c:	3601      	adds	r6, #1
 800405e:	2302      	movs	r3, #2
 8004060:	e000      	b.n	8004064 <__cvt+0x40>
 8004062:	2303      	movs	r3, #3
 8004064:	aa07      	add	r2, sp, #28
 8004066:	9204      	str	r2, [sp, #16]
 8004068:	aa06      	add	r2, sp, #24
 800406a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800406e:	e9cd 3600 	strd	r3, r6, [sp]
 8004072:	4622      	mov	r2, r4
 8004074:	462b      	mov	r3, r5
 8004076:	f001 f87b 	bl	8005170 <_dtoa_r>
 800407a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800407e:	4607      	mov	r7, r0
 8004080:	d119      	bne.n	80040b6 <__cvt+0x92>
 8004082:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004084:	07db      	lsls	r3, r3, #31
 8004086:	d50e      	bpl.n	80040a6 <__cvt+0x82>
 8004088:	eb00 0906 	add.w	r9, r0, r6
 800408c:	2200      	movs	r2, #0
 800408e:	2300      	movs	r3, #0
 8004090:	4620      	mov	r0, r4
 8004092:	4629      	mov	r1, r5
 8004094:	f7fc fc88 	bl	80009a8 <__aeabi_dcmpeq>
 8004098:	b108      	cbz	r0, 800409e <__cvt+0x7a>
 800409a:	f8cd 901c 	str.w	r9, [sp, #28]
 800409e:	2230      	movs	r2, #48	@ 0x30
 80040a0:	9b07      	ldr	r3, [sp, #28]
 80040a2:	454b      	cmp	r3, r9
 80040a4:	d31e      	bcc.n	80040e4 <__cvt+0xc0>
 80040a6:	4638      	mov	r0, r7
 80040a8:	9b07      	ldr	r3, [sp, #28]
 80040aa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80040ac:	1bdb      	subs	r3, r3, r7
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	b008      	add	sp, #32
 80040b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040b6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80040ba:	eb00 0906 	add.w	r9, r0, r6
 80040be:	d1e5      	bne.n	800408c <__cvt+0x68>
 80040c0:	7803      	ldrb	r3, [r0, #0]
 80040c2:	2b30      	cmp	r3, #48	@ 0x30
 80040c4:	d10a      	bne.n	80040dc <__cvt+0xb8>
 80040c6:	2200      	movs	r2, #0
 80040c8:	2300      	movs	r3, #0
 80040ca:	4620      	mov	r0, r4
 80040cc:	4629      	mov	r1, r5
 80040ce:	f7fc fc6b 	bl	80009a8 <__aeabi_dcmpeq>
 80040d2:	b918      	cbnz	r0, 80040dc <__cvt+0xb8>
 80040d4:	f1c6 0601 	rsb	r6, r6, #1
 80040d8:	f8ca 6000 	str.w	r6, [sl]
 80040dc:	f8da 3000 	ldr.w	r3, [sl]
 80040e0:	4499      	add	r9, r3
 80040e2:	e7d3      	b.n	800408c <__cvt+0x68>
 80040e4:	1c59      	adds	r1, r3, #1
 80040e6:	9107      	str	r1, [sp, #28]
 80040e8:	701a      	strb	r2, [r3, #0]
 80040ea:	e7d9      	b.n	80040a0 <__cvt+0x7c>

080040ec <__exponent>:
 80040ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040ee:	2900      	cmp	r1, #0
 80040f0:	bfb6      	itet	lt
 80040f2:	232d      	movlt	r3, #45	@ 0x2d
 80040f4:	232b      	movge	r3, #43	@ 0x2b
 80040f6:	4249      	neglt	r1, r1
 80040f8:	2909      	cmp	r1, #9
 80040fa:	7002      	strb	r2, [r0, #0]
 80040fc:	7043      	strb	r3, [r0, #1]
 80040fe:	dd29      	ble.n	8004154 <__exponent+0x68>
 8004100:	f10d 0307 	add.w	r3, sp, #7
 8004104:	461d      	mov	r5, r3
 8004106:	270a      	movs	r7, #10
 8004108:	fbb1 f6f7 	udiv	r6, r1, r7
 800410c:	461a      	mov	r2, r3
 800410e:	fb07 1416 	mls	r4, r7, r6, r1
 8004112:	3430      	adds	r4, #48	@ 0x30
 8004114:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004118:	460c      	mov	r4, r1
 800411a:	2c63      	cmp	r4, #99	@ 0x63
 800411c:	4631      	mov	r1, r6
 800411e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004122:	dcf1      	bgt.n	8004108 <__exponent+0x1c>
 8004124:	3130      	adds	r1, #48	@ 0x30
 8004126:	1e94      	subs	r4, r2, #2
 8004128:	f803 1c01 	strb.w	r1, [r3, #-1]
 800412c:	4623      	mov	r3, r4
 800412e:	1c41      	adds	r1, r0, #1
 8004130:	42ab      	cmp	r3, r5
 8004132:	d30a      	bcc.n	800414a <__exponent+0x5e>
 8004134:	f10d 0309 	add.w	r3, sp, #9
 8004138:	1a9b      	subs	r3, r3, r2
 800413a:	42ac      	cmp	r4, r5
 800413c:	bf88      	it	hi
 800413e:	2300      	movhi	r3, #0
 8004140:	3302      	adds	r3, #2
 8004142:	4403      	add	r3, r0
 8004144:	1a18      	subs	r0, r3, r0
 8004146:	b003      	add	sp, #12
 8004148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800414a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800414e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004152:	e7ed      	b.n	8004130 <__exponent+0x44>
 8004154:	2330      	movs	r3, #48	@ 0x30
 8004156:	3130      	adds	r1, #48	@ 0x30
 8004158:	7083      	strb	r3, [r0, #2]
 800415a:	70c1      	strb	r1, [r0, #3]
 800415c:	1d03      	adds	r3, r0, #4
 800415e:	e7f1      	b.n	8004144 <__exponent+0x58>

08004160 <_printf_float>:
 8004160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004164:	b091      	sub	sp, #68	@ 0x44
 8004166:	460c      	mov	r4, r1
 8004168:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800416c:	4616      	mov	r6, r2
 800416e:	461f      	mov	r7, r3
 8004170:	4605      	mov	r5, r0
 8004172:	f000 feeb 	bl	8004f4c <_localeconv_r>
 8004176:	6803      	ldr	r3, [r0, #0]
 8004178:	4618      	mov	r0, r3
 800417a:	9308      	str	r3, [sp, #32]
 800417c:	f7fb ffe8 	bl	8000150 <strlen>
 8004180:	2300      	movs	r3, #0
 8004182:	930e      	str	r3, [sp, #56]	@ 0x38
 8004184:	f8d8 3000 	ldr.w	r3, [r8]
 8004188:	9009      	str	r0, [sp, #36]	@ 0x24
 800418a:	3307      	adds	r3, #7
 800418c:	f023 0307 	bic.w	r3, r3, #7
 8004190:	f103 0208 	add.w	r2, r3, #8
 8004194:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004198:	f8d4 b000 	ldr.w	fp, [r4]
 800419c:	f8c8 2000 	str.w	r2, [r8]
 80041a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80041a4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80041a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80041aa:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80041ae:	f04f 32ff 	mov.w	r2, #4294967295
 80041b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80041b6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80041ba:	4b9c      	ldr	r3, [pc, #624]	@ (800442c <_printf_float+0x2cc>)
 80041bc:	f7fc fc26 	bl	8000a0c <__aeabi_dcmpun>
 80041c0:	bb70      	cbnz	r0, 8004220 <_printf_float+0xc0>
 80041c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80041c6:	f04f 32ff 	mov.w	r2, #4294967295
 80041ca:	4b98      	ldr	r3, [pc, #608]	@ (800442c <_printf_float+0x2cc>)
 80041cc:	f7fc fc00 	bl	80009d0 <__aeabi_dcmple>
 80041d0:	bb30      	cbnz	r0, 8004220 <_printf_float+0xc0>
 80041d2:	2200      	movs	r2, #0
 80041d4:	2300      	movs	r3, #0
 80041d6:	4640      	mov	r0, r8
 80041d8:	4649      	mov	r1, r9
 80041da:	f7fc fbef 	bl	80009bc <__aeabi_dcmplt>
 80041de:	b110      	cbz	r0, 80041e6 <_printf_float+0x86>
 80041e0:	232d      	movs	r3, #45	@ 0x2d
 80041e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041e6:	4a92      	ldr	r2, [pc, #584]	@ (8004430 <_printf_float+0x2d0>)
 80041e8:	4b92      	ldr	r3, [pc, #584]	@ (8004434 <_printf_float+0x2d4>)
 80041ea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80041ee:	bf8c      	ite	hi
 80041f0:	4690      	movhi	r8, r2
 80041f2:	4698      	movls	r8, r3
 80041f4:	2303      	movs	r3, #3
 80041f6:	f04f 0900 	mov.w	r9, #0
 80041fa:	6123      	str	r3, [r4, #16]
 80041fc:	f02b 0304 	bic.w	r3, fp, #4
 8004200:	6023      	str	r3, [r4, #0]
 8004202:	4633      	mov	r3, r6
 8004204:	4621      	mov	r1, r4
 8004206:	4628      	mov	r0, r5
 8004208:	9700      	str	r7, [sp, #0]
 800420a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800420c:	f000 f9d4 	bl	80045b8 <_printf_common>
 8004210:	3001      	adds	r0, #1
 8004212:	f040 8090 	bne.w	8004336 <_printf_float+0x1d6>
 8004216:	f04f 30ff 	mov.w	r0, #4294967295
 800421a:	b011      	add	sp, #68	@ 0x44
 800421c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004220:	4642      	mov	r2, r8
 8004222:	464b      	mov	r3, r9
 8004224:	4640      	mov	r0, r8
 8004226:	4649      	mov	r1, r9
 8004228:	f7fc fbf0 	bl	8000a0c <__aeabi_dcmpun>
 800422c:	b148      	cbz	r0, 8004242 <_printf_float+0xe2>
 800422e:	464b      	mov	r3, r9
 8004230:	2b00      	cmp	r3, #0
 8004232:	bfb8      	it	lt
 8004234:	232d      	movlt	r3, #45	@ 0x2d
 8004236:	4a80      	ldr	r2, [pc, #512]	@ (8004438 <_printf_float+0x2d8>)
 8004238:	bfb8      	it	lt
 800423a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800423e:	4b7f      	ldr	r3, [pc, #508]	@ (800443c <_printf_float+0x2dc>)
 8004240:	e7d3      	b.n	80041ea <_printf_float+0x8a>
 8004242:	6863      	ldr	r3, [r4, #4]
 8004244:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004248:	1c5a      	adds	r2, r3, #1
 800424a:	d13f      	bne.n	80042cc <_printf_float+0x16c>
 800424c:	2306      	movs	r3, #6
 800424e:	6063      	str	r3, [r4, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004256:	6023      	str	r3, [r4, #0]
 8004258:	9206      	str	r2, [sp, #24]
 800425a:	aa0e      	add	r2, sp, #56	@ 0x38
 800425c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004260:	aa0d      	add	r2, sp, #52	@ 0x34
 8004262:	9203      	str	r2, [sp, #12]
 8004264:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004268:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800426c:	6863      	ldr	r3, [r4, #4]
 800426e:	4642      	mov	r2, r8
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	4628      	mov	r0, r5
 8004274:	464b      	mov	r3, r9
 8004276:	910a      	str	r1, [sp, #40]	@ 0x28
 8004278:	f7ff fed4 	bl	8004024 <__cvt>
 800427c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800427e:	4680      	mov	r8, r0
 8004280:	2947      	cmp	r1, #71	@ 0x47
 8004282:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004284:	d128      	bne.n	80042d8 <_printf_float+0x178>
 8004286:	1cc8      	adds	r0, r1, #3
 8004288:	db02      	blt.n	8004290 <_printf_float+0x130>
 800428a:	6863      	ldr	r3, [r4, #4]
 800428c:	4299      	cmp	r1, r3
 800428e:	dd40      	ble.n	8004312 <_printf_float+0x1b2>
 8004290:	f1aa 0a02 	sub.w	sl, sl, #2
 8004294:	fa5f fa8a 	uxtb.w	sl, sl
 8004298:	4652      	mov	r2, sl
 800429a:	3901      	subs	r1, #1
 800429c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80042a0:	910d      	str	r1, [sp, #52]	@ 0x34
 80042a2:	f7ff ff23 	bl	80040ec <__exponent>
 80042a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80042a8:	4681      	mov	r9, r0
 80042aa:	1813      	adds	r3, r2, r0
 80042ac:	2a01      	cmp	r2, #1
 80042ae:	6123      	str	r3, [r4, #16]
 80042b0:	dc02      	bgt.n	80042b8 <_printf_float+0x158>
 80042b2:	6822      	ldr	r2, [r4, #0]
 80042b4:	07d2      	lsls	r2, r2, #31
 80042b6:	d501      	bpl.n	80042bc <_printf_float+0x15c>
 80042b8:	3301      	adds	r3, #1
 80042ba:	6123      	str	r3, [r4, #16]
 80042bc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d09e      	beq.n	8004202 <_printf_float+0xa2>
 80042c4:	232d      	movs	r3, #45	@ 0x2d
 80042c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042ca:	e79a      	b.n	8004202 <_printf_float+0xa2>
 80042cc:	2947      	cmp	r1, #71	@ 0x47
 80042ce:	d1bf      	bne.n	8004250 <_printf_float+0xf0>
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1bd      	bne.n	8004250 <_printf_float+0xf0>
 80042d4:	2301      	movs	r3, #1
 80042d6:	e7ba      	b.n	800424e <_printf_float+0xee>
 80042d8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80042dc:	d9dc      	bls.n	8004298 <_printf_float+0x138>
 80042de:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80042e2:	d118      	bne.n	8004316 <_printf_float+0x1b6>
 80042e4:	2900      	cmp	r1, #0
 80042e6:	6863      	ldr	r3, [r4, #4]
 80042e8:	dd0b      	ble.n	8004302 <_printf_float+0x1a2>
 80042ea:	6121      	str	r1, [r4, #16]
 80042ec:	b913      	cbnz	r3, 80042f4 <_printf_float+0x194>
 80042ee:	6822      	ldr	r2, [r4, #0]
 80042f0:	07d0      	lsls	r0, r2, #31
 80042f2:	d502      	bpl.n	80042fa <_printf_float+0x19a>
 80042f4:	3301      	adds	r3, #1
 80042f6:	440b      	add	r3, r1
 80042f8:	6123      	str	r3, [r4, #16]
 80042fa:	f04f 0900 	mov.w	r9, #0
 80042fe:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004300:	e7dc      	b.n	80042bc <_printf_float+0x15c>
 8004302:	b913      	cbnz	r3, 800430a <_printf_float+0x1aa>
 8004304:	6822      	ldr	r2, [r4, #0]
 8004306:	07d2      	lsls	r2, r2, #31
 8004308:	d501      	bpl.n	800430e <_printf_float+0x1ae>
 800430a:	3302      	adds	r3, #2
 800430c:	e7f4      	b.n	80042f8 <_printf_float+0x198>
 800430e:	2301      	movs	r3, #1
 8004310:	e7f2      	b.n	80042f8 <_printf_float+0x198>
 8004312:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004316:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004318:	4299      	cmp	r1, r3
 800431a:	db05      	blt.n	8004328 <_printf_float+0x1c8>
 800431c:	6823      	ldr	r3, [r4, #0]
 800431e:	6121      	str	r1, [r4, #16]
 8004320:	07d8      	lsls	r0, r3, #31
 8004322:	d5ea      	bpl.n	80042fa <_printf_float+0x19a>
 8004324:	1c4b      	adds	r3, r1, #1
 8004326:	e7e7      	b.n	80042f8 <_printf_float+0x198>
 8004328:	2900      	cmp	r1, #0
 800432a:	bfcc      	ite	gt
 800432c:	2201      	movgt	r2, #1
 800432e:	f1c1 0202 	rsble	r2, r1, #2
 8004332:	4413      	add	r3, r2
 8004334:	e7e0      	b.n	80042f8 <_printf_float+0x198>
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	055a      	lsls	r2, r3, #21
 800433a:	d407      	bmi.n	800434c <_printf_float+0x1ec>
 800433c:	6923      	ldr	r3, [r4, #16]
 800433e:	4642      	mov	r2, r8
 8004340:	4631      	mov	r1, r6
 8004342:	4628      	mov	r0, r5
 8004344:	47b8      	blx	r7
 8004346:	3001      	adds	r0, #1
 8004348:	d12b      	bne.n	80043a2 <_printf_float+0x242>
 800434a:	e764      	b.n	8004216 <_printf_float+0xb6>
 800434c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004350:	f240 80dc 	bls.w	800450c <_printf_float+0x3ac>
 8004354:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004358:	2200      	movs	r2, #0
 800435a:	2300      	movs	r3, #0
 800435c:	f7fc fb24 	bl	80009a8 <__aeabi_dcmpeq>
 8004360:	2800      	cmp	r0, #0
 8004362:	d033      	beq.n	80043cc <_printf_float+0x26c>
 8004364:	2301      	movs	r3, #1
 8004366:	4631      	mov	r1, r6
 8004368:	4628      	mov	r0, r5
 800436a:	4a35      	ldr	r2, [pc, #212]	@ (8004440 <_printf_float+0x2e0>)
 800436c:	47b8      	blx	r7
 800436e:	3001      	adds	r0, #1
 8004370:	f43f af51 	beq.w	8004216 <_printf_float+0xb6>
 8004374:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004378:	4543      	cmp	r3, r8
 800437a:	db02      	blt.n	8004382 <_printf_float+0x222>
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	07d8      	lsls	r0, r3, #31
 8004380:	d50f      	bpl.n	80043a2 <_printf_float+0x242>
 8004382:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004386:	4631      	mov	r1, r6
 8004388:	4628      	mov	r0, r5
 800438a:	47b8      	blx	r7
 800438c:	3001      	adds	r0, #1
 800438e:	f43f af42 	beq.w	8004216 <_printf_float+0xb6>
 8004392:	f04f 0900 	mov.w	r9, #0
 8004396:	f108 38ff 	add.w	r8, r8, #4294967295
 800439a:	f104 0a1a 	add.w	sl, r4, #26
 800439e:	45c8      	cmp	r8, r9
 80043a0:	dc09      	bgt.n	80043b6 <_printf_float+0x256>
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	079b      	lsls	r3, r3, #30
 80043a6:	f100 8102 	bmi.w	80045ae <_printf_float+0x44e>
 80043aa:	68e0      	ldr	r0, [r4, #12]
 80043ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80043ae:	4298      	cmp	r0, r3
 80043b0:	bfb8      	it	lt
 80043b2:	4618      	movlt	r0, r3
 80043b4:	e731      	b.n	800421a <_printf_float+0xba>
 80043b6:	2301      	movs	r3, #1
 80043b8:	4652      	mov	r2, sl
 80043ba:	4631      	mov	r1, r6
 80043bc:	4628      	mov	r0, r5
 80043be:	47b8      	blx	r7
 80043c0:	3001      	adds	r0, #1
 80043c2:	f43f af28 	beq.w	8004216 <_printf_float+0xb6>
 80043c6:	f109 0901 	add.w	r9, r9, #1
 80043ca:	e7e8      	b.n	800439e <_printf_float+0x23e>
 80043cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	dc38      	bgt.n	8004444 <_printf_float+0x2e4>
 80043d2:	2301      	movs	r3, #1
 80043d4:	4631      	mov	r1, r6
 80043d6:	4628      	mov	r0, r5
 80043d8:	4a19      	ldr	r2, [pc, #100]	@ (8004440 <_printf_float+0x2e0>)
 80043da:	47b8      	blx	r7
 80043dc:	3001      	adds	r0, #1
 80043de:	f43f af1a 	beq.w	8004216 <_printf_float+0xb6>
 80043e2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80043e6:	ea59 0303 	orrs.w	r3, r9, r3
 80043ea:	d102      	bne.n	80043f2 <_printf_float+0x292>
 80043ec:	6823      	ldr	r3, [r4, #0]
 80043ee:	07d9      	lsls	r1, r3, #31
 80043f0:	d5d7      	bpl.n	80043a2 <_printf_float+0x242>
 80043f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80043f6:	4631      	mov	r1, r6
 80043f8:	4628      	mov	r0, r5
 80043fa:	47b8      	blx	r7
 80043fc:	3001      	adds	r0, #1
 80043fe:	f43f af0a 	beq.w	8004216 <_printf_float+0xb6>
 8004402:	f04f 0a00 	mov.w	sl, #0
 8004406:	f104 0b1a 	add.w	fp, r4, #26
 800440a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800440c:	425b      	negs	r3, r3
 800440e:	4553      	cmp	r3, sl
 8004410:	dc01      	bgt.n	8004416 <_printf_float+0x2b6>
 8004412:	464b      	mov	r3, r9
 8004414:	e793      	b.n	800433e <_printf_float+0x1de>
 8004416:	2301      	movs	r3, #1
 8004418:	465a      	mov	r2, fp
 800441a:	4631      	mov	r1, r6
 800441c:	4628      	mov	r0, r5
 800441e:	47b8      	blx	r7
 8004420:	3001      	adds	r0, #1
 8004422:	f43f aef8 	beq.w	8004216 <_printf_float+0xb6>
 8004426:	f10a 0a01 	add.w	sl, sl, #1
 800442a:	e7ee      	b.n	800440a <_printf_float+0x2aa>
 800442c:	7fefffff 	.word	0x7fefffff
 8004430:	08008bfa 	.word	0x08008bfa
 8004434:	08008bf6 	.word	0x08008bf6
 8004438:	08008c02 	.word	0x08008c02
 800443c:	08008bfe 	.word	0x08008bfe
 8004440:	08008c06 	.word	0x08008c06
 8004444:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004446:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800444a:	4553      	cmp	r3, sl
 800444c:	bfa8      	it	ge
 800444e:	4653      	movge	r3, sl
 8004450:	2b00      	cmp	r3, #0
 8004452:	4699      	mov	r9, r3
 8004454:	dc36      	bgt.n	80044c4 <_printf_float+0x364>
 8004456:	f04f 0b00 	mov.w	fp, #0
 800445a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800445e:	f104 021a 	add.w	r2, r4, #26
 8004462:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004464:	930a      	str	r3, [sp, #40]	@ 0x28
 8004466:	eba3 0309 	sub.w	r3, r3, r9
 800446a:	455b      	cmp	r3, fp
 800446c:	dc31      	bgt.n	80044d2 <_printf_float+0x372>
 800446e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004470:	459a      	cmp	sl, r3
 8004472:	dc3a      	bgt.n	80044ea <_printf_float+0x38a>
 8004474:	6823      	ldr	r3, [r4, #0]
 8004476:	07da      	lsls	r2, r3, #31
 8004478:	d437      	bmi.n	80044ea <_printf_float+0x38a>
 800447a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800447c:	ebaa 0903 	sub.w	r9, sl, r3
 8004480:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004482:	ebaa 0303 	sub.w	r3, sl, r3
 8004486:	4599      	cmp	r9, r3
 8004488:	bfa8      	it	ge
 800448a:	4699      	movge	r9, r3
 800448c:	f1b9 0f00 	cmp.w	r9, #0
 8004490:	dc33      	bgt.n	80044fa <_printf_float+0x39a>
 8004492:	f04f 0800 	mov.w	r8, #0
 8004496:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800449a:	f104 0b1a 	add.w	fp, r4, #26
 800449e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80044a0:	ebaa 0303 	sub.w	r3, sl, r3
 80044a4:	eba3 0309 	sub.w	r3, r3, r9
 80044a8:	4543      	cmp	r3, r8
 80044aa:	f77f af7a 	ble.w	80043a2 <_printf_float+0x242>
 80044ae:	2301      	movs	r3, #1
 80044b0:	465a      	mov	r2, fp
 80044b2:	4631      	mov	r1, r6
 80044b4:	4628      	mov	r0, r5
 80044b6:	47b8      	blx	r7
 80044b8:	3001      	adds	r0, #1
 80044ba:	f43f aeac 	beq.w	8004216 <_printf_float+0xb6>
 80044be:	f108 0801 	add.w	r8, r8, #1
 80044c2:	e7ec      	b.n	800449e <_printf_float+0x33e>
 80044c4:	4642      	mov	r2, r8
 80044c6:	4631      	mov	r1, r6
 80044c8:	4628      	mov	r0, r5
 80044ca:	47b8      	blx	r7
 80044cc:	3001      	adds	r0, #1
 80044ce:	d1c2      	bne.n	8004456 <_printf_float+0x2f6>
 80044d0:	e6a1      	b.n	8004216 <_printf_float+0xb6>
 80044d2:	2301      	movs	r3, #1
 80044d4:	4631      	mov	r1, r6
 80044d6:	4628      	mov	r0, r5
 80044d8:	920a      	str	r2, [sp, #40]	@ 0x28
 80044da:	47b8      	blx	r7
 80044dc:	3001      	adds	r0, #1
 80044de:	f43f ae9a 	beq.w	8004216 <_printf_float+0xb6>
 80044e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80044e4:	f10b 0b01 	add.w	fp, fp, #1
 80044e8:	e7bb      	b.n	8004462 <_printf_float+0x302>
 80044ea:	4631      	mov	r1, r6
 80044ec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80044f0:	4628      	mov	r0, r5
 80044f2:	47b8      	blx	r7
 80044f4:	3001      	adds	r0, #1
 80044f6:	d1c0      	bne.n	800447a <_printf_float+0x31a>
 80044f8:	e68d      	b.n	8004216 <_printf_float+0xb6>
 80044fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80044fc:	464b      	mov	r3, r9
 80044fe:	4631      	mov	r1, r6
 8004500:	4628      	mov	r0, r5
 8004502:	4442      	add	r2, r8
 8004504:	47b8      	blx	r7
 8004506:	3001      	adds	r0, #1
 8004508:	d1c3      	bne.n	8004492 <_printf_float+0x332>
 800450a:	e684      	b.n	8004216 <_printf_float+0xb6>
 800450c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004510:	f1ba 0f01 	cmp.w	sl, #1
 8004514:	dc01      	bgt.n	800451a <_printf_float+0x3ba>
 8004516:	07db      	lsls	r3, r3, #31
 8004518:	d536      	bpl.n	8004588 <_printf_float+0x428>
 800451a:	2301      	movs	r3, #1
 800451c:	4642      	mov	r2, r8
 800451e:	4631      	mov	r1, r6
 8004520:	4628      	mov	r0, r5
 8004522:	47b8      	blx	r7
 8004524:	3001      	adds	r0, #1
 8004526:	f43f ae76 	beq.w	8004216 <_printf_float+0xb6>
 800452a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800452e:	4631      	mov	r1, r6
 8004530:	4628      	mov	r0, r5
 8004532:	47b8      	blx	r7
 8004534:	3001      	adds	r0, #1
 8004536:	f43f ae6e 	beq.w	8004216 <_printf_float+0xb6>
 800453a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800453e:	2200      	movs	r2, #0
 8004540:	2300      	movs	r3, #0
 8004542:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004546:	f7fc fa2f 	bl	80009a8 <__aeabi_dcmpeq>
 800454a:	b9c0      	cbnz	r0, 800457e <_printf_float+0x41e>
 800454c:	4653      	mov	r3, sl
 800454e:	f108 0201 	add.w	r2, r8, #1
 8004552:	4631      	mov	r1, r6
 8004554:	4628      	mov	r0, r5
 8004556:	47b8      	blx	r7
 8004558:	3001      	adds	r0, #1
 800455a:	d10c      	bne.n	8004576 <_printf_float+0x416>
 800455c:	e65b      	b.n	8004216 <_printf_float+0xb6>
 800455e:	2301      	movs	r3, #1
 8004560:	465a      	mov	r2, fp
 8004562:	4631      	mov	r1, r6
 8004564:	4628      	mov	r0, r5
 8004566:	47b8      	blx	r7
 8004568:	3001      	adds	r0, #1
 800456a:	f43f ae54 	beq.w	8004216 <_printf_float+0xb6>
 800456e:	f108 0801 	add.w	r8, r8, #1
 8004572:	45d0      	cmp	r8, sl
 8004574:	dbf3      	blt.n	800455e <_printf_float+0x3fe>
 8004576:	464b      	mov	r3, r9
 8004578:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800457c:	e6e0      	b.n	8004340 <_printf_float+0x1e0>
 800457e:	f04f 0800 	mov.w	r8, #0
 8004582:	f104 0b1a 	add.w	fp, r4, #26
 8004586:	e7f4      	b.n	8004572 <_printf_float+0x412>
 8004588:	2301      	movs	r3, #1
 800458a:	4642      	mov	r2, r8
 800458c:	e7e1      	b.n	8004552 <_printf_float+0x3f2>
 800458e:	2301      	movs	r3, #1
 8004590:	464a      	mov	r2, r9
 8004592:	4631      	mov	r1, r6
 8004594:	4628      	mov	r0, r5
 8004596:	47b8      	blx	r7
 8004598:	3001      	adds	r0, #1
 800459a:	f43f ae3c 	beq.w	8004216 <_printf_float+0xb6>
 800459e:	f108 0801 	add.w	r8, r8, #1
 80045a2:	68e3      	ldr	r3, [r4, #12]
 80045a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80045a6:	1a5b      	subs	r3, r3, r1
 80045a8:	4543      	cmp	r3, r8
 80045aa:	dcf0      	bgt.n	800458e <_printf_float+0x42e>
 80045ac:	e6fd      	b.n	80043aa <_printf_float+0x24a>
 80045ae:	f04f 0800 	mov.w	r8, #0
 80045b2:	f104 0919 	add.w	r9, r4, #25
 80045b6:	e7f4      	b.n	80045a2 <_printf_float+0x442>

080045b8 <_printf_common>:
 80045b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045bc:	4616      	mov	r6, r2
 80045be:	4698      	mov	r8, r3
 80045c0:	688a      	ldr	r2, [r1, #8]
 80045c2:	690b      	ldr	r3, [r1, #16]
 80045c4:	4607      	mov	r7, r0
 80045c6:	4293      	cmp	r3, r2
 80045c8:	bfb8      	it	lt
 80045ca:	4613      	movlt	r3, r2
 80045cc:	6033      	str	r3, [r6, #0]
 80045ce:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80045d2:	460c      	mov	r4, r1
 80045d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80045d8:	b10a      	cbz	r2, 80045de <_printf_common+0x26>
 80045da:	3301      	adds	r3, #1
 80045dc:	6033      	str	r3, [r6, #0]
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	0699      	lsls	r1, r3, #26
 80045e2:	bf42      	ittt	mi
 80045e4:	6833      	ldrmi	r3, [r6, #0]
 80045e6:	3302      	addmi	r3, #2
 80045e8:	6033      	strmi	r3, [r6, #0]
 80045ea:	6825      	ldr	r5, [r4, #0]
 80045ec:	f015 0506 	ands.w	r5, r5, #6
 80045f0:	d106      	bne.n	8004600 <_printf_common+0x48>
 80045f2:	f104 0a19 	add.w	sl, r4, #25
 80045f6:	68e3      	ldr	r3, [r4, #12]
 80045f8:	6832      	ldr	r2, [r6, #0]
 80045fa:	1a9b      	subs	r3, r3, r2
 80045fc:	42ab      	cmp	r3, r5
 80045fe:	dc2b      	bgt.n	8004658 <_printf_common+0xa0>
 8004600:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004604:	6822      	ldr	r2, [r4, #0]
 8004606:	3b00      	subs	r3, #0
 8004608:	bf18      	it	ne
 800460a:	2301      	movne	r3, #1
 800460c:	0692      	lsls	r2, r2, #26
 800460e:	d430      	bmi.n	8004672 <_printf_common+0xba>
 8004610:	4641      	mov	r1, r8
 8004612:	4638      	mov	r0, r7
 8004614:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004618:	47c8      	blx	r9
 800461a:	3001      	adds	r0, #1
 800461c:	d023      	beq.n	8004666 <_printf_common+0xae>
 800461e:	6823      	ldr	r3, [r4, #0]
 8004620:	6922      	ldr	r2, [r4, #16]
 8004622:	f003 0306 	and.w	r3, r3, #6
 8004626:	2b04      	cmp	r3, #4
 8004628:	bf14      	ite	ne
 800462a:	2500      	movne	r5, #0
 800462c:	6833      	ldreq	r3, [r6, #0]
 800462e:	f04f 0600 	mov.w	r6, #0
 8004632:	bf08      	it	eq
 8004634:	68e5      	ldreq	r5, [r4, #12]
 8004636:	f104 041a 	add.w	r4, r4, #26
 800463a:	bf08      	it	eq
 800463c:	1aed      	subeq	r5, r5, r3
 800463e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004642:	bf08      	it	eq
 8004644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004648:	4293      	cmp	r3, r2
 800464a:	bfc4      	itt	gt
 800464c:	1a9b      	subgt	r3, r3, r2
 800464e:	18ed      	addgt	r5, r5, r3
 8004650:	42b5      	cmp	r5, r6
 8004652:	d11a      	bne.n	800468a <_printf_common+0xd2>
 8004654:	2000      	movs	r0, #0
 8004656:	e008      	b.n	800466a <_printf_common+0xb2>
 8004658:	2301      	movs	r3, #1
 800465a:	4652      	mov	r2, sl
 800465c:	4641      	mov	r1, r8
 800465e:	4638      	mov	r0, r7
 8004660:	47c8      	blx	r9
 8004662:	3001      	adds	r0, #1
 8004664:	d103      	bne.n	800466e <_printf_common+0xb6>
 8004666:	f04f 30ff 	mov.w	r0, #4294967295
 800466a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800466e:	3501      	adds	r5, #1
 8004670:	e7c1      	b.n	80045f6 <_printf_common+0x3e>
 8004672:	2030      	movs	r0, #48	@ 0x30
 8004674:	18e1      	adds	r1, r4, r3
 8004676:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800467a:	1c5a      	adds	r2, r3, #1
 800467c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004680:	4422      	add	r2, r4
 8004682:	3302      	adds	r3, #2
 8004684:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004688:	e7c2      	b.n	8004610 <_printf_common+0x58>
 800468a:	2301      	movs	r3, #1
 800468c:	4622      	mov	r2, r4
 800468e:	4641      	mov	r1, r8
 8004690:	4638      	mov	r0, r7
 8004692:	47c8      	blx	r9
 8004694:	3001      	adds	r0, #1
 8004696:	d0e6      	beq.n	8004666 <_printf_common+0xae>
 8004698:	3601      	adds	r6, #1
 800469a:	e7d9      	b.n	8004650 <_printf_common+0x98>

0800469c <_printf_i>:
 800469c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046a0:	7e0f      	ldrb	r7, [r1, #24]
 80046a2:	4691      	mov	r9, r2
 80046a4:	2f78      	cmp	r7, #120	@ 0x78
 80046a6:	4680      	mov	r8, r0
 80046a8:	460c      	mov	r4, r1
 80046aa:	469a      	mov	sl, r3
 80046ac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80046b2:	d807      	bhi.n	80046c4 <_printf_i+0x28>
 80046b4:	2f62      	cmp	r7, #98	@ 0x62
 80046b6:	d80a      	bhi.n	80046ce <_printf_i+0x32>
 80046b8:	2f00      	cmp	r7, #0
 80046ba:	f000 80d1 	beq.w	8004860 <_printf_i+0x1c4>
 80046be:	2f58      	cmp	r7, #88	@ 0x58
 80046c0:	f000 80b8 	beq.w	8004834 <_printf_i+0x198>
 80046c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80046cc:	e03a      	b.n	8004744 <_printf_i+0xa8>
 80046ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80046d2:	2b15      	cmp	r3, #21
 80046d4:	d8f6      	bhi.n	80046c4 <_printf_i+0x28>
 80046d6:	a101      	add	r1, pc, #4	@ (adr r1, 80046dc <_printf_i+0x40>)
 80046d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046dc:	08004735 	.word	0x08004735
 80046e0:	08004749 	.word	0x08004749
 80046e4:	080046c5 	.word	0x080046c5
 80046e8:	080046c5 	.word	0x080046c5
 80046ec:	080046c5 	.word	0x080046c5
 80046f0:	080046c5 	.word	0x080046c5
 80046f4:	08004749 	.word	0x08004749
 80046f8:	080046c5 	.word	0x080046c5
 80046fc:	080046c5 	.word	0x080046c5
 8004700:	080046c5 	.word	0x080046c5
 8004704:	080046c5 	.word	0x080046c5
 8004708:	08004847 	.word	0x08004847
 800470c:	08004773 	.word	0x08004773
 8004710:	08004801 	.word	0x08004801
 8004714:	080046c5 	.word	0x080046c5
 8004718:	080046c5 	.word	0x080046c5
 800471c:	08004869 	.word	0x08004869
 8004720:	080046c5 	.word	0x080046c5
 8004724:	08004773 	.word	0x08004773
 8004728:	080046c5 	.word	0x080046c5
 800472c:	080046c5 	.word	0x080046c5
 8004730:	08004809 	.word	0x08004809
 8004734:	6833      	ldr	r3, [r6, #0]
 8004736:	1d1a      	adds	r2, r3, #4
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6032      	str	r2, [r6, #0]
 800473c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004740:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004744:	2301      	movs	r3, #1
 8004746:	e09c      	b.n	8004882 <_printf_i+0x1e6>
 8004748:	6833      	ldr	r3, [r6, #0]
 800474a:	6820      	ldr	r0, [r4, #0]
 800474c:	1d19      	adds	r1, r3, #4
 800474e:	6031      	str	r1, [r6, #0]
 8004750:	0606      	lsls	r6, r0, #24
 8004752:	d501      	bpl.n	8004758 <_printf_i+0xbc>
 8004754:	681d      	ldr	r5, [r3, #0]
 8004756:	e003      	b.n	8004760 <_printf_i+0xc4>
 8004758:	0645      	lsls	r5, r0, #25
 800475a:	d5fb      	bpl.n	8004754 <_printf_i+0xb8>
 800475c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004760:	2d00      	cmp	r5, #0
 8004762:	da03      	bge.n	800476c <_printf_i+0xd0>
 8004764:	232d      	movs	r3, #45	@ 0x2d
 8004766:	426d      	negs	r5, r5
 8004768:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800476c:	230a      	movs	r3, #10
 800476e:	4858      	ldr	r0, [pc, #352]	@ (80048d0 <_printf_i+0x234>)
 8004770:	e011      	b.n	8004796 <_printf_i+0xfa>
 8004772:	6821      	ldr	r1, [r4, #0]
 8004774:	6833      	ldr	r3, [r6, #0]
 8004776:	0608      	lsls	r0, r1, #24
 8004778:	f853 5b04 	ldr.w	r5, [r3], #4
 800477c:	d402      	bmi.n	8004784 <_printf_i+0xe8>
 800477e:	0649      	lsls	r1, r1, #25
 8004780:	bf48      	it	mi
 8004782:	b2ad      	uxthmi	r5, r5
 8004784:	2f6f      	cmp	r7, #111	@ 0x6f
 8004786:	6033      	str	r3, [r6, #0]
 8004788:	bf14      	ite	ne
 800478a:	230a      	movne	r3, #10
 800478c:	2308      	moveq	r3, #8
 800478e:	4850      	ldr	r0, [pc, #320]	@ (80048d0 <_printf_i+0x234>)
 8004790:	2100      	movs	r1, #0
 8004792:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004796:	6866      	ldr	r6, [r4, #4]
 8004798:	2e00      	cmp	r6, #0
 800479a:	60a6      	str	r6, [r4, #8]
 800479c:	db05      	blt.n	80047aa <_printf_i+0x10e>
 800479e:	6821      	ldr	r1, [r4, #0]
 80047a0:	432e      	orrs	r6, r5
 80047a2:	f021 0104 	bic.w	r1, r1, #4
 80047a6:	6021      	str	r1, [r4, #0]
 80047a8:	d04b      	beq.n	8004842 <_printf_i+0x1a6>
 80047aa:	4616      	mov	r6, r2
 80047ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80047b0:	fb03 5711 	mls	r7, r3, r1, r5
 80047b4:	5dc7      	ldrb	r7, [r0, r7]
 80047b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047ba:	462f      	mov	r7, r5
 80047bc:	42bb      	cmp	r3, r7
 80047be:	460d      	mov	r5, r1
 80047c0:	d9f4      	bls.n	80047ac <_printf_i+0x110>
 80047c2:	2b08      	cmp	r3, #8
 80047c4:	d10b      	bne.n	80047de <_printf_i+0x142>
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	07df      	lsls	r7, r3, #31
 80047ca:	d508      	bpl.n	80047de <_printf_i+0x142>
 80047cc:	6923      	ldr	r3, [r4, #16]
 80047ce:	6861      	ldr	r1, [r4, #4]
 80047d0:	4299      	cmp	r1, r3
 80047d2:	bfde      	ittt	le
 80047d4:	2330      	movle	r3, #48	@ 0x30
 80047d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047de:	1b92      	subs	r2, r2, r6
 80047e0:	6122      	str	r2, [r4, #16]
 80047e2:	464b      	mov	r3, r9
 80047e4:	4621      	mov	r1, r4
 80047e6:	4640      	mov	r0, r8
 80047e8:	f8cd a000 	str.w	sl, [sp]
 80047ec:	aa03      	add	r2, sp, #12
 80047ee:	f7ff fee3 	bl	80045b8 <_printf_common>
 80047f2:	3001      	adds	r0, #1
 80047f4:	d14a      	bne.n	800488c <_printf_i+0x1f0>
 80047f6:	f04f 30ff 	mov.w	r0, #4294967295
 80047fa:	b004      	add	sp, #16
 80047fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004800:	6823      	ldr	r3, [r4, #0]
 8004802:	f043 0320 	orr.w	r3, r3, #32
 8004806:	6023      	str	r3, [r4, #0]
 8004808:	2778      	movs	r7, #120	@ 0x78
 800480a:	4832      	ldr	r0, [pc, #200]	@ (80048d4 <_printf_i+0x238>)
 800480c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004810:	6823      	ldr	r3, [r4, #0]
 8004812:	6831      	ldr	r1, [r6, #0]
 8004814:	061f      	lsls	r7, r3, #24
 8004816:	f851 5b04 	ldr.w	r5, [r1], #4
 800481a:	d402      	bmi.n	8004822 <_printf_i+0x186>
 800481c:	065f      	lsls	r7, r3, #25
 800481e:	bf48      	it	mi
 8004820:	b2ad      	uxthmi	r5, r5
 8004822:	6031      	str	r1, [r6, #0]
 8004824:	07d9      	lsls	r1, r3, #31
 8004826:	bf44      	itt	mi
 8004828:	f043 0320 	orrmi.w	r3, r3, #32
 800482c:	6023      	strmi	r3, [r4, #0]
 800482e:	b11d      	cbz	r5, 8004838 <_printf_i+0x19c>
 8004830:	2310      	movs	r3, #16
 8004832:	e7ad      	b.n	8004790 <_printf_i+0xf4>
 8004834:	4826      	ldr	r0, [pc, #152]	@ (80048d0 <_printf_i+0x234>)
 8004836:	e7e9      	b.n	800480c <_printf_i+0x170>
 8004838:	6823      	ldr	r3, [r4, #0]
 800483a:	f023 0320 	bic.w	r3, r3, #32
 800483e:	6023      	str	r3, [r4, #0]
 8004840:	e7f6      	b.n	8004830 <_printf_i+0x194>
 8004842:	4616      	mov	r6, r2
 8004844:	e7bd      	b.n	80047c2 <_printf_i+0x126>
 8004846:	6833      	ldr	r3, [r6, #0]
 8004848:	6825      	ldr	r5, [r4, #0]
 800484a:	1d18      	adds	r0, r3, #4
 800484c:	6961      	ldr	r1, [r4, #20]
 800484e:	6030      	str	r0, [r6, #0]
 8004850:	062e      	lsls	r6, r5, #24
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	d501      	bpl.n	800485a <_printf_i+0x1be>
 8004856:	6019      	str	r1, [r3, #0]
 8004858:	e002      	b.n	8004860 <_printf_i+0x1c4>
 800485a:	0668      	lsls	r0, r5, #25
 800485c:	d5fb      	bpl.n	8004856 <_printf_i+0x1ba>
 800485e:	8019      	strh	r1, [r3, #0]
 8004860:	2300      	movs	r3, #0
 8004862:	4616      	mov	r6, r2
 8004864:	6123      	str	r3, [r4, #16]
 8004866:	e7bc      	b.n	80047e2 <_printf_i+0x146>
 8004868:	6833      	ldr	r3, [r6, #0]
 800486a:	2100      	movs	r1, #0
 800486c:	1d1a      	adds	r2, r3, #4
 800486e:	6032      	str	r2, [r6, #0]
 8004870:	681e      	ldr	r6, [r3, #0]
 8004872:	6862      	ldr	r2, [r4, #4]
 8004874:	4630      	mov	r0, r6
 8004876:	f000 fbe0 	bl	800503a <memchr>
 800487a:	b108      	cbz	r0, 8004880 <_printf_i+0x1e4>
 800487c:	1b80      	subs	r0, r0, r6
 800487e:	6060      	str	r0, [r4, #4]
 8004880:	6863      	ldr	r3, [r4, #4]
 8004882:	6123      	str	r3, [r4, #16]
 8004884:	2300      	movs	r3, #0
 8004886:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800488a:	e7aa      	b.n	80047e2 <_printf_i+0x146>
 800488c:	4632      	mov	r2, r6
 800488e:	4649      	mov	r1, r9
 8004890:	4640      	mov	r0, r8
 8004892:	6923      	ldr	r3, [r4, #16]
 8004894:	47d0      	blx	sl
 8004896:	3001      	adds	r0, #1
 8004898:	d0ad      	beq.n	80047f6 <_printf_i+0x15a>
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	079b      	lsls	r3, r3, #30
 800489e:	d413      	bmi.n	80048c8 <_printf_i+0x22c>
 80048a0:	68e0      	ldr	r0, [r4, #12]
 80048a2:	9b03      	ldr	r3, [sp, #12]
 80048a4:	4298      	cmp	r0, r3
 80048a6:	bfb8      	it	lt
 80048a8:	4618      	movlt	r0, r3
 80048aa:	e7a6      	b.n	80047fa <_printf_i+0x15e>
 80048ac:	2301      	movs	r3, #1
 80048ae:	4632      	mov	r2, r6
 80048b0:	4649      	mov	r1, r9
 80048b2:	4640      	mov	r0, r8
 80048b4:	47d0      	blx	sl
 80048b6:	3001      	adds	r0, #1
 80048b8:	d09d      	beq.n	80047f6 <_printf_i+0x15a>
 80048ba:	3501      	adds	r5, #1
 80048bc:	68e3      	ldr	r3, [r4, #12]
 80048be:	9903      	ldr	r1, [sp, #12]
 80048c0:	1a5b      	subs	r3, r3, r1
 80048c2:	42ab      	cmp	r3, r5
 80048c4:	dcf2      	bgt.n	80048ac <_printf_i+0x210>
 80048c6:	e7eb      	b.n	80048a0 <_printf_i+0x204>
 80048c8:	2500      	movs	r5, #0
 80048ca:	f104 0619 	add.w	r6, r4, #25
 80048ce:	e7f5      	b.n	80048bc <_printf_i+0x220>
 80048d0:	08008c08 	.word	0x08008c08
 80048d4:	08008c19 	.word	0x08008c19

080048d8 <_scanf_float>:
 80048d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048dc:	b087      	sub	sp, #28
 80048de:	9303      	str	r3, [sp, #12]
 80048e0:	688b      	ldr	r3, [r1, #8]
 80048e2:	4691      	mov	r9, r2
 80048e4:	1e5a      	subs	r2, r3, #1
 80048e6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80048ea:	bf82      	ittt	hi
 80048ec:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80048f0:	eb03 0b05 	addhi.w	fp, r3, r5
 80048f4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80048f8:	460a      	mov	r2, r1
 80048fa:	f04f 0500 	mov.w	r5, #0
 80048fe:	bf88      	it	hi
 8004900:	608b      	strhi	r3, [r1, #8]
 8004902:	680b      	ldr	r3, [r1, #0]
 8004904:	4680      	mov	r8, r0
 8004906:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800490a:	f842 3b1c 	str.w	r3, [r2], #28
 800490e:	460c      	mov	r4, r1
 8004910:	bf98      	it	ls
 8004912:	f04f 0b00 	movls.w	fp, #0
 8004916:	4616      	mov	r6, r2
 8004918:	46aa      	mov	sl, r5
 800491a:	462f      	mov	r7, r5
 800491c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004920:	9201      	str	r2, [sp, #4]
 8004922:	9502      	str	r5, [sp, #8]
 8004924:	68a2      	ldr	r2, [r4, #8]
 8004926:	b15a      	cbz	r2, 8004940 <_scanf_float+0x68>
 8004928:	f8d9 3000 	ldr.w	r3, [r9]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	2b4e      	cmp	r3, #78	@ 0x4e
 8004930:	d862      	bhi.n	80049f8 <_scanf_float+0x120>
 8004932:	2b40      	cmp	r3, #64	@ 0x40
 8004934:	d83a      	bhi.n	80049ac <_scanf_float+0xd4>
 8004936:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800493a:	b2c8      	uxtb	r0, r1
 800493c:	280e      	cmp	r0, #14
 800493e:	d938      	bls.n	80049b2 <_scanf_float+0xda>
 8004940:	b11f      	cbz	r7, 800494a <_scanf_float+0x72>
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004948:	6023      	str	r3, [r4, #0]
 800494a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800494e:	f1ba 0f01 	cmp.w	sl, #1
 8004952:	f200 8114 	bhi.w	8004b7e <_scanf_float+0x2a6>
 8004956:	9b01      	ldr	r3, [sp, #4]
 8004958:	429e      	cmp	r6, r3
 800495a:	f200 8105 	bhi.w	8004b68 <_scanf_float+0x290>
 800495e:	2001      	movs	r0, #1
 8004960:	b007      	add	sp, #28
 8004962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004966:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800496a:	2a0d      	cmp	r2, #13
 800496c:	d8e8      	bhi.n	8004940 <_scanf_float+0x68>
 800496e:	a101      	add	r1, pc, #4	@ (adr r1, 8004974 <_scanf_float+0x9c>)
 8004970:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004974:	08004abd 	.word	0x08004abd
 8004978:	08004941 	.word	0x08004941
 800497c:	08004941 	.word	0x08004941
 8004980:	08004941 	.word	0x08004941
 8004984:	08004b19 	.word	0x08004b19
 8004988:	08004af3 	.word	0x08004af3
 800498c:	08004941 	.word	0x08004941
 8004990:	08004941 	.word	0x08004941
 8004994:	08004acb 	.word	0x08004acb
 8004998:	08004941 	.word	0x08004941
 800499c:	08004941 	.word	0x08004941
 80049a0:	08004941 	.word	0x08004941
 80049a4:	08004941 	.word	0x08004941
 80049a8:	08004a87 	.word	0x08004a87
 80049ac:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80049b0:	e7db      	b.n	800496a <_scanf_float+0x92>
 80049b2:	290e      	cmp	r1, #14
 80049b4:	d8c4      	bhi.n	8004940 <_scanf_float+0x68>
 80049b6:	a001      	add	r0, pc, #4	@ (adr r0, 80049bc <_scanf_float+0xe4>)
 80049b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80049bc:	08004a77 	.word	0x08004a77
 80049c0:	08004941 	.word	0x08004941
 80049c4:	08004a77 	.word	0x08004a77
 80049c8:	08004b07 	.word	0x08004b07
 80049cc:	08004941 	.word	0x08004941
 80049d0:	08004a19 	.word	0x08004a19
 80049d4:	08004a5d 	.word	0x08004a5d
 80049d8:	08004a5d 	.word	0x08004a5d
 80049dc:	08004a5d 	.word	0x08004a5d
 80049e0:	08004a5d 	.word	0x08004a5d
 80049e4:	08004a5d 	.word	0x08004a5d
 80049e8:	08004a5d 	.word	0x08004a5d
 80049ec:	08004a5d 	.word	0x08004a5d
 80049f0:	08004a5d 	.word	0x08004a5d
 80049f4:	08004a5d 	.word	0x08004a5d
 80049f8:	2b6e      	cmp	r3, #110	@ 0x6e
 80049fa:	d809      	bhi.n	8004a10 <_scanf_float+0x138>
 80049fc:	2b60      	cmp	r3, #96	@ 0x60
 80049fe:	d8b2      	bhi.n	8004966 <_scanf_float+0x8e>
 8004a00:	2b54      	cmp	r3, #84	@ 0x54
 8004a02:	d07b      	beq.n	8004afc <_scanf_float+0x224>
 8004a04:	2b59      	cmp	r3, #89	@ 0x59
 8004a06:	d19b      	bne.n	8004940 <_scanf_float+0x68>
 8004a08:	2d07      	cmp	r5, #7
 8004a0a:	d199      	bne.n	8004940 <_scanf_float+0x68>
 8004a0c:	2508      	movs	r5, #8
 8004a0e:	e02f      	b.n	8004a70 <_scanf_float+0x198>
 8004a10:	2b74      	cmp	r3, #116	@ 0x74
 8004a12:	d073      	beq.n	8004afc <_scanf_float+0x224>
 8004a14:	2b79      	cmp	r3, #121	@ 0x79
 8004a16:	e7f6      	b.n	8004a06 <_scanf_float+0x12e>
 8004a18:	6821      	ldr	r1, [r4, #0]
 8004a1a:	05c8      	lsls	r0, r1, #23
 8004a1c:	d51e      	bpl.n	8004a5c <_scanf_float+0x184>
 8004a1e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004a22:	6021      	str	r1, [r4, #0]
 8004a24:	3701      	adds	r7, #1
 8004a26:	f1bb 0f00 	cmp.w	fp, #0
 8004a2a:	d003      	beq.n	8004a34 <_scanf_float+0x15c>
 8004a2c:	3201      	adds	r2, #1
 8004a2e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004a32:	60a2      	str	r2, [r4, #8]
 8004a34:	68a3      	ldr	r3, [r4, #8]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	60a3      	str	r3, [r4, #8]
 8004a3a:	6923      	ldr	r3, [r4, #16]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	6123      	str	r3, [r4, #16]
 8004a40:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004a44:	3b01      	subs	r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f8c9 3004 	str.w	r3, [r9, #4]
 8004a4c:	f340 8083 	ble.w	8004b56 <_scanf_float+0x27e>
 8004a50:	f8d9 3000 	ldr.w	r3, [r9]
 8004a54:	3301      	adds	r3, #1
 8004a56:	f8c9 3000 	str.w	r3, [r9]
 8004a5a:	e763      	b.n	8004924 <_scanf_float+0x4c>
 8004a5c:	eb1a 0105 	adds.w	r1, sl, r5
 8004a60:	f47f af6e 	bne.w	8004940 <_scanf_float+0x68>
 8004a64:	460d      	mov	r5, r1
 8004a66:	468a      	mov	sl, r1
 8004a68:	6822      	ldr	r2, [r4, #0]
 8004a6a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004a6e:	6022      	str	r2, [r4, #0]
 8004a70:	f806 3b01 	strb.w	r3, [r6], #1
 8004a74:	e7de      	b.n	8004a34 <_scanf_float+0x15c>
 8004a76:	6822      	ldr	r2, [r4, #0]
 8004a78:	0610      	lsls	r0, r2, #24
 8004a7a:	f57f af61 	bpl.w	8004940 <_scanf_float+0x68>
 8004a7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a82:	6022      	str	r2, [r4, #0]
 8004a84:	e7f4      	b.n	8004a70 <_scanf_float+0x198>
 8004a86:	f1ba 0f00 	cmp.w	sl, #0
 8004a8a:	d10c      	bne.n	8004aa6 <_scanf_float+0x1ce>
 8004a8c:	b977      	cbnz	r7, 8004aac <_scanf_float+0x1d4>
 8004a8e:	6822      	ldr	r2, [r4, #0]
 8004a90:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004a94:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004a98:	d108      	bne.n	8004aac <_scanf_float+0x1d4>
 8004a9a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004a9e:	f04f 0a01 	mov.w	sl, #1
 8004aa2:	6022      	str	r2, [r4, #0]
 8004aa4:	e7e4      	b.n	8004a70 <_scanf_float+0x198>
 8004aa6:	f1ba 0f02 	cmp.w	sl, #2
 8004aaa:	d051      	beq.n	8004b50 <_scanf_float+0x278>
 8004aac:	2d01      	cmp	r5, #1
 8004aae:	d002      	beq.n	8004ab6 <_scanf_float+0x1de>
 8004ab0:	2d04      	cmp	r5, #4
 8004ab2:	f47f af45 	bne.w	8004940 <_scanf_float+0x68>
 8004ab6:	3501      	adds	r5, #1
 8004ab8:	b2ed      	uxtb	r5, r5
 8004aba:	e7d9      	b.n	8004a70 <_scanf_float+0x198>
 8004abc:	f1ba 0f01 	cmp.w	sl, #1
 8004ac0:	f47f af3e 	bne.w	8004940 <_scanf_float+0x68>
 8004ac4:	f04f 0a02 	mov.w	sl, #2
 8004ac8:	e7d2      	b.n	8004a70 <_scanf_float+0x198>
 8004aca:	b975      	cbnz	r5, 8004aea <_scanf_float+0x212>
 8004acc:	2f00      	cmp	r7, #0
 8004ace:	f47f af38 	bne.w	8004942 <_scanf_float+0x6a>
 8004ad2:	6822      	ldr	r2, [r4, #0]
 8004ad4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004ad8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004adc:	f040 80ff 	bne.w	8004cde <_scanf_float+0x406>
 8004ae0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004ae4:	2501      	movs	r5, #1
 8004ae6:	6022      	str	r2, [r4, #0]
 8004ae8:	e7c2      	b.n	8004a70 <_scanf_float+0x198>
 8004aea:	2d03      	cmp	r5, #3
 8004aec:	d0e3      	beq.n	8004ab6 <_scanf_float+0x1de>
 8004aee:	2d05      	cmp	r5, #5
 8004af0:	e7df      	b.n	8004ab2 <_scanf_float+0x1da>
 8004af2:	2d02      	cmp	r5, #2
 8004af4:	f47f af24 	bne.w	8004940 <_scanf_float+0x68>
 8004af8:	2503      	movs	r5, #3
 8004afa:	e7b9      	b.n	8004a70 <_scanf_float+0x198>
 8004afc:	2d06      	cmp	r5, #6
 8004afe:	f47f af1f 	bne.w	8004940 <_scanf_float+0x68>
 8004b02:	2507      	movs	r5, #7
 8004b04:	e7b4      	b.n	8004a70 <_scanf_float+0x198>
 8004b06:	6822      	ldr	r2, [r4, #0]
 8004b08:	0591      	lsls	r1, r2, #22
 8004b0a:	f57f af19 	bpl.w	8004940 <_scanf_float+0x68>
 8004b0e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004b12:	6022      	str	r2, [r4, #0]
 8004b14:	9702      	str	r7, [sp, #8]
 8004b16:	e7ab      	b.n	8004a70 <_scanf_float+0x198>
 8004b18:	6822      	ldr	r2, [r4, #0]
 8004b1a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004b1e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004b22:	d005      	beq.n	8004b30 <_scanf_float+0x258>
 8004b24:	0550      	lsls	r0, r2, #21
 8004b26:	f57f af0b 	bpl.w	8004940 <_scanf_float+0x68>
 8004b2a:	2f00      	cmp	r7, #0
 8004b2c:	f000 80d7 	beq.w	8004cde <_scanf_float+0x406>
 8004b30:	0591      	lsls	r1, r2, #22
 8004b32:	bf58      	it	pl
 8004b34:	9902      	ldrpl	r1, [sp, #8]
 8004b36:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004b3a:	bf58      	it	pl
 8004b3c:	1a79      	subpl	r1, r7, r1
 8004b3e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004b42:	f04f 0700 	mov.w	r7, #0
 8004b46:	bf58      	it	pl
 8004b48:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004b4c:	6022      	str	r2, [r4, #0]
 8004b4e:	e78f      	b.n	8004a70 <_scanf_float+0x198>
 8004b50:	f04f 0a03 	mov.w	sl, #3
 8004b54:	e78c      	b.n	8004a70 <_scanf_float+0x198>
 8004b56:	4649      	mov	r1, r9
 8004b58:	4640      	mov	r0, r8
 8004b5a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004b5e:	4798      	blx	r3
 8004b60:	2800      	cmp	r0, #0
 8004b62:	f43f aedf 	beq.w	8004924 <_scanf_float+0x4c>
 8004b66:	e6eb      	b.n	8004940 <_scanf_float+0x68>
 8004b68:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004b6c:	464a      	mov	r2, r9
 8004b6e:	4640      	mov	r0, r8
 8004b70:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004b74:	4798      	blx	r3
 8004b76:	6923      	ldr	r3, [r4, #16]
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	6123      	str	r3, [r4, #16]
 8004b7c:	e6eb      	b.n	8004956 <_scanf_float+0x7e>
 8004b7e:	1e6b      	subs	r3, r5, #1
 8004b80:	2b06      	cmp	r3, #6
 8004b82:	d824      	bhi.n	8004bce <_scanf_float+0x2f6>
 8004b84:	2d02      	cmp	r5, #2
 8004b86:	d836      	bhi.n	8004bf6 <_scanf_float+0x31e>
 8004b88:	9b01      	ldr	r3, [sp, #4]
 8004b8a:	429e      	cmp	r6, r3
 8004b8c:	f67f aee7 	bls.w	800495e <_scanf_float+0x86>
 8004b90:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004b94:	464a      	mov	r2, r9
 8004b96:	4640      	mov	r0, r8
 8004b98:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004b9c:	4798      	blx	r3
 8004b9e:	6923      	ldr	r3, [r4, #16]
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	6123      	str	r3, [r4, #16]
 8004ba4:	e7f0      	b.n	8004b88 <_scanf_float+0x2b0>
 8004ba6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004baa:	464a      	mov	r2, r9
 8004bac:	4640      	mov	r0, r8
 8004bae:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004bb2:	4798      	blx	r3
 8004bb4:	6923      	ldr	r3, [r4, #16]
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	6123      	str	r3, [r4, #16]
 8004bba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004bbe:	fa5f fa8a 	uxtb.w	sl, sl
 8004bc2:	f1ba 0f02 	cmp.w	sl, #2
 8004bc6:	d1ee      	bne.n	8004ba6 <_scanf_float+0x2ce>
 8004bc8:	3d03      	subs	r5, #3
 8004bca:	b2ed      	uxtb	r5, r5
 8004bcc:	1b76      	subs	r6, r6, r5
 8004bce:	6823      	ldr	r3, [r4, #0]
 8004bd0:	05da      	lsls	r2, r3, #23
 8004bd2:	d530      	bpl.n	8004c36 <_scanf_float+0x35e>
 8004bd4:	055b      	lsls	r3, r3, #21
 8004bd6:	d511      	bpl.n	8004bfc <_scanf_float+0x324>
 8004bd8:	9b01      	ldr	r3, [sp, #4]
 8004bda:	429e      	cmp	r6, r3
 8004bdc:	f67f aebf 	bls.w	800495e <_scanf_float+0x86>
 8004be0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004be4:	464a      	mov	r2, r9
 8004be6:	4640      	mov	r0, r8
 8004be8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004bec:	4798      	blx	r3
 8004bee:	6923      	ldr	r3, [r4, #16]
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	6123      	str	r3, [r4, #16]
 8004bf4:	e7f0      	b.n	8004bd8 <_scanf_float+0x300>
 8004bf6:	46aa      	mov	sl, r5
 8004bf8:	46b3      	mov	fp, r6
 8004bfa:	e7de      	b.n	8004bba <_scanf_float+0x2e2>
 8004bfc:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004c00:	6923      	ldr	r3, [r4, #16]
 8004c02:	2965      	cmp	r1, #101	@ 0x65
 8004c04:	f103 33ff 	add.w	r3, r3, #4294967295
 8004c08:	f106 35ff 	add.w	r5, r6, #4294967295
 8004c0c:	6123      	str	r3, [r4, #16]
 8004c0e:	d00c      	beq.n	8004c2a <_scanf_float+0x352>
 8004c10:	2945      	cmp	r1, #69	@ 0x45
 8004c12:	d00a      	beq.n	8004c2a <_scanf_float+0x352>
 8004c14:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004c18:	464a      	mov	r2, r9
 8004c1a:	4640      	mov	r0, r8
 8004c1c:	4798      	blx	r3
 8004c1e:	6923      	ldr	r3, [r4, #16]
 8004c20:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004c24:	3b01      	subs	r3, #1
 8004c26:	1eb5      	subs	r5, r6, #2
 8004c28:	6123      	str	r3, [r4, #16]
 8004c2a:	464a      	mov	r2, r9
 8004c2c:	4640      	mov	r0, r8
 8004c2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004c32:	4798      	blx	r3
 8004c34:	462e      	mov	r6, r5
 8004c36:	6822      	ldr	r2, [r4, #0]
 8004c38:	f012 0210 	ands.w	r2, r2, #16
 8004c3c:	d001      	beq.n	8004c42 <_scanf_float+0x36a>
 8004c3e:	2000      	movs	r0, #0
 8004c40:	e68e      	b.n	8004960 <_scanf_float+0x88>
 8004c42:	7032      	strb	r2, [r6, #0]
 8004c44:	6823      	ldr	r3, [r4, #0]
 8004c46:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c4e:	d125      	bne.n	8004c9c <_scanf_float+0x3c4>
 8004c50:	9b02      	ldr	r3, [sp, #8]
 8004c52:	429f      	cmp	r7, r3
 8004c54:	d00a      	beq.n	8004c6c <_scanf_float+0x394>
 8004c56:	1bda      	subs	r2, r3, r7
 8004c58:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004c5c:	429e      	cmp	r6, r3
 8004c5e:	bf28      	it	cs
 8004c60:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004c64:	4630      	mov	r0, r6
 8004c66:	491f      	ldr	r1, [pc, #124]	@ (8004ce4 <_scanf_float+0x40c>)
 8004c68:	f000 f902 	bl	8004e70 <siprintf>
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	4640      	mov	r0, r8
 8004c70:	9901      	ldr	r1, [sp, #4]
 8004c72:	f002 fbe9 	bl	8007448 <_strtod_r>
 8004c76:	9b03      	ldr	r3, [sp, #12]
 8004c78:	6825      	ldr	r5, [r4, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f015 0f02 	tst.w	r5, #2
 8004c80:	4606      	mov	r6, r0
 8004c82:	460f      	mov	r7, r1
 8004c84:	f103 0204 	add.w	r2, r3, #4
 8004c88:	d015      	beq.n	8004cb6 <_scanf_float+0x3de>
 8004c8a:	9903      	ldr	r1, [sp, #12]
 8004c8c:	600a      	str	r2, [r1, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	e9c3 6700 	strd	r6, r7, [r3]
 8004c94:	68e3      	ldr	r3, [r4, #12]
 8004c96:	3301      	adds	r3, #1
 8004c98:	60e3      	str	r3, [r4, #12]
 8004c9a:	e7d0      	b.n	8004c3e <_scanf_float+0x366>
 8004c9c:	9b04      	ldr	r3, [sp, #16]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d0e4      	beq.n	8004c6c <_scanf_float+0x394>
 8004ca2:	9905      	ldr	r1, [sp, #20]
 8004ca4:	230a      	movs	r3, #10
 8004ca6:	4640      	mov	r0, r8
 8004ca8:	3101      	adds	r1, #1
 8004caa:	f002 fc4d 	bl	8007548 <_strtol_r>
 8004cae:	9b04      	ldr	r3, [sp, #16]
 8004cb0:	9e05      	ldr	r6, [sp, #20]
 8004cb2:	1ac2      	subs	r2, r0, r3
 8004cb4:	e7d0      	b.n	8004c58 <_scanf_float+0x380>
 8004cb6:	076d      	lsls	r5, r5, #29
 8004cb8:	d4e7      	bmi.n	8004c8a <_scanf_float+0x3b2>
 8004cba:	9d03      	ldr	r5, [sp, #12]
 8004cbc:	602a      	str	r2, [r5, #0]
 8004cbe:	681d      	ldr	r5, [r3, #0]
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	f7fb fea2 	bl	8000a0c <__aeabi_dcmpun>
 8004cc8:	b120      	cbz	r0, 8004cd4 <_scanf_float+0x3fc>
 8004cca:	4807      	ldr	r0, [pc, #28]	@ (8004ce8 <_scanf_float+0x410>)
 8004ccc:	f000 f9c4 	bl	8005058 <nanf>
 8004cd0:	6028      	str	r0, [r5, #0]
 8004cd2:	e7df      	b.n	8004c94 <_scanf_float+0x3bc>
 8004cd4:	4630      	mov	r0, r6
 8004cd6:	4639      	mov	r1, r7
 8004cd8:	f7fb fef6 	bl	8000ac8 <__aeabi_d2f>
 8004cdc:	e7f8      	b.n	8004cd0 <_scanf_float+0x3f8>
 8004cde:	2700      	movs	r7, #0
 8004ce0:	e633      	b.n	800494a <_scanf_float+0x72>
 8004ce2:	bf00      	nop
 8004ce4:	08008c2a 	.word	0x08008c2a
 8004ce8:	08008d6b 	.word	0x08008d6b

08004cec <std>:
 8004cec:	2300      	movs	r3, #0
 8004cee:	b510      	push	{r4, lr}
 8004cf0:	4604      	mov	r4, r0
 8004cf2:	e9c0 3300 	strd	r3, r3, [r0]
 8004cf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cfa:	6083      	str	r3, [r0, #8]
 8004cfc:	8181      	strh	r1, [r0, #12]
 8004cfe:	6643      	str	r3, [r0, #100]	@ 0x64
 8004d00:	81c2      	strh	r2, [r0, #14]
 8004d02:	6183      	str	r3, [r0, #24]
 8004d04:	4619      	mov	r1, r3
 8004d06:	2208      	movs	r2, #8
 8004d08:	305c      	adds	r0, #92	@ 0x5c
 8004d0a:	f000 f916 	bl	8004f3a <memset>
 8004d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004d44 <std+0x58>)
 8004d10:	6224      	str	r4, [r4, #32]
 8004d12:	6263      	str	r3, [r4, #36]	@ 0x24
 8004d14:	4b0c      	ldr	r3, [pc, #48]	@ (8004d48 <std+0x5c>)
 8004d16:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004d18:	4b0c      	ldr	r3, [pc, #48]	@ (8004d4c <std+0x60>)
 8004d1a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004d50 <std+0x64>)
 8004d1e:	6323      	str	r3, [r4, #48]	@ 0x30
 8004d20:	4b0c      	ldr	r3, [pc, #48]	@ (8004d54 <std+0x68>)
 8004d22:	429c      	cmp	r4, r3
 8004d24:	d006      	beq.n	8004d34 <std+0x48>
 8004d26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004d2a:	4294      	cmp	r4, r2
 8004d2c:	d002      	beq.n	8004d34 <std+0x48>
 8004d2e:	33d0      	adds	r3, #208	@ 0xd0
 8004d30:	429c      	cmp	r4, r3
 8004d32:	d105      	bne.n	8004d40 <std+0x54>
 8004d34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d3c:	f000 b97a 	b.w	8005034 <__retarget_lock_init_recursive>
 8004d40:	bd10      	pop	{r4, pc}
 8004d42:	bf00      	nop
 8004d44:	08004eb5 	.word	0x08004eb5
 8004d48:	08004ed7 	.word	0x08004ed7
 8004d4c:	08004f0f 	.word	0x08004f0f
 8004d50:	08004f33 	.word	0x08004f33
 8004d54:	200002e4 	.word	0x200002e4

08004d58 <stdio_exit_handler>:
 8004d58:	4a02      	ldr	r2, [pc, #8]	@ (8004d64 <stdio_exit_handler+0xc>)
 8004d5a:	4903      	ldr	r1, [pc, #12]	@ (8004d68 <stdio_exit_handler+0x10>)
 8004d5c:	4803      	ldr	r0, [pc, #12]	@ (8004d6c <stdio_exit_handler+0x14>)
 8004d5e:	f000 b869 	b.w	8004e34 <_fwalk_sglue>
 8004d62:	bf00      	nop
 8004d64:	20000010 	.word	0x20000010
 8004d68:	080078fd 	.word	0x080078fd
 8004d6c:	20000020 	.word	0x20000020

08004d70 <cleanup_stdio>:
 8004d70:	6841      	ldr	r1, [r0, #4]
 8004d72:	4b0c      	ldr	r3, [pc, #48]	@ (8004da4 <cleanup_stdio+0x34>)
 8004d74:	b510      	push	{r4, lr}
 8004d76:	4299      	cmp	r1, r3
 8004d78:	4604      	mov	r4, r0
 8004d7a:	d001      	beq.n	8004d80 <cleanup_stdio+0x10>
 8004d7c:	f002 fdbe 	bl	80078fc <_fflush_r>
 8004d80:	68a1      	ldr	r1, [r4, #8]
 8004d82:	4b09      	ldr	r3, [pc, #36]	@ (8004da8 <cleanup_stdio+0x38>)
 8004d84:	4299      	cmp	r1, r3
 8004d86:	d002      	beq.n	8004d8e <cleanup_stdio+0x1e>
 8004d88:	4620      	mov	r0, r4
 8004d8a:	f002 fdb7 	bl	80078fc <_fflush_r>
 8004d8e:	68e1      	ldr	r1, [r4, #12]
 8004d90:	4b06      	ldr	r3, [pc, #24]	@ (8004dac <cleanup_stdio+0x3c>)
 8004d92:	4299      	cmp	r1, r3
 8004d94:	d004      	beq.n	8004da0 <cleanup_stdio+0x30>
 8004d96:	4620      	mov	r0, r4
 8004d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d9c:	f002 bdae 	b.w	80078fc <_fflush_r>
 8004da0:	bd10      	pop	{r4, pc}
 8004da2:	bf00      	nop
 8004da4:	200002e4 	.word	0x200002e4
 8004da8:	2000034c 	.word	0x2000034c
 8004dac:	200003b4 	.word	0x200003b4

08004db0 <global_stdio_init.part.0>:
 8004db0:	b510      	push	{r4, lr}
 8004db2:	4b0b      	ldr	r3, [pc, #44]	@ (8004de0 <global_stdio_init.part.0+0x30>)
 8004db4:	4c0b      	ldr	r4, [pc, #44]	@ (8004de4 <global_stdio_init.part.0+0x34>)
 8004db6:	4a0c      	ldr	r2, [pc, #48]	@ (8004de8 <global_stdio_init.part.0+0x38>)
 8004db8:	4620      	mov	r0, r4
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	2104      	movs	r1, #4
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f7ff ff94 	bl	8004cec <std>
 8004dc4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004dc8:	2201      	movs	r2, #1
 8004dca:	2109      	movs	r1, #9
 8004dcc:	f7ff ff8e 	bl	8004cec <std>
 8004dd0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dda:	2112      	movs	r1, #18
 8004ddc:	f7ff bf86 	b.w	8004cec <std>
 8004de0:	2000041c 	.word	0x2000041c
 8004de4:	200002e4 	.word	0x200002e4
 8004de8:	08004d59 	.word	0x08004d59

08004dec <__sfp_lock_acquire>:
 8004dec:	4801      	ldr	r0, [pc, #4]	@ (8004df4 <__sfp_lock_acquire+0x8>)
 8004dee:	f000 b922 	b.w	8005036 <__retarget_lock_acquire_recursive>
 8004df2:	bf00      	nop
 8004df4:	20000425 	.word	0x20000425

08004df8 <__sfp_lock_release>:
 8004df8:	4801      	ldr	r0, [pc, #4]	@ (8004e00 <__sfp_lock_release+0x8>)
 8004dfa:	f000 b91d 	b.w	8005038 <__retarget_lock_release_recursive>
 8004dfe:	bf00      	nop
 8004e00:	20000425 	.word	0x20000425

08004e04 <__sinit>:
 8004e04:	b510      	push	{r4, lr}
 8004e06:	4604      	mov	r4, r0
 8004e08:	f7ff fff0 	bl	8004dec <__sfp_lock_acquire>
 8004e0c:	6a23      	ldr	r3, [r4, #32]
 8004e0e:	b11b      	cbz	r3, 8004e18 <__sinit+0x14>
 8004e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e14:	f7ff bff0 	b.w	8004df8 <__sfp_lock_release>
 8004e18:	4b04      	ldr	r3, [pc, #16]	@ (8004e2c <__sinit+0x28>)
 8004e1a:	6223      	str	r3, [r4, #32]
 8004e1c:	4b04      	ldr	r3, [pc, #16]	@ (8004e30 <__sinit+0x2c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1f5      	bne.n	8004e10 <__sinit+0xc>
 8004e24:	f7ff ffc4 	bl	8004db0 <global_stdio_init.part.0>
 8004e28:	e7f2      	b.n	8004e10 <__sinit+0xc>
 8004e2a:	bf00      	nop
 8004e2c:	08004d71 	.word	0x08004d71
 8004e30:	2000041c 	.word	0x2000041c

08004e34 <_fwalk_sglue>:
 8004e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e38:	4607      	mov	r7, r0
 8004e3a:	4688      	mov	r8, r1
 8004e3c:	4614      	mov	r4, r2
 8004e3e:	2600      	movs	r6, #0
 8004e40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e44:	f1b9 0901 	subs.w	r9, r9, #1
 8004e48:	d505      	bpl.n	8004e56 <_fwalk_sglue+0x22>
 8004e4a:	6824      	ldr	r4, [r4, #0]
 8004e4c:	2c00      	cmp	r4, #0
 8004e4e:	d1f7      	bne.n	8004e40 <_fwalk_sglue+0xc>
 8004e50:	4630      	mov	r0, r6
 8004e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e56:	89ab      	ldrh	r3, [r5, #12]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d907      	bls.n	8004e6c <_fwalk_sglue+0x38>
 8004e5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e60:	3301      	adds	r3, #1
 8004e62:	d003      	beq.n	8004e6c <_fwalk_sglue+0x38>
 8004e64:	4629      	mov	r1, r5
 8004e66:	4638      	mov	r0, r7
 8004e68:	47c0      	blx	r8
 8004e6a:	4306      	orrs	r6, r0
 8004e6c:	3568      	adds	r5, #104	@ 0x68
 8004e6e:	e7e9      	b.n	8004e44 <_fwalk_sglue+0x10>

08004e70 <siprintf>:
 8004e70:	b40e      	push	{r1, r2, r3}
 8004e72:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004e76:	b510      	push	{r4, lr}
 8004e78:	2400      	movs	r4, #0
 8004e7a:	b09d      	sub	sp, #116	@ 0x74
 8004e7c:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004e7e:	9002      	str	r0, [sp, #8]
 8004e80:	9006      	str	r0, [sp, #24]
 8004e82:	9107      	str	r1, [sp, #28]
 8004e84:	9104      	str	r1, [sp, #16]
 8004e86:	4809      	ldr	r0, [pc, #36]	@ (8004eac <siprintf+0x3c>)
 8004e88:	4909      	ldr	r1, [pc, #36]	@ (8004eb0 <siprintf+0x40>)
 8004e8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e8e:	9105      	str	r1, [sp, #20]
 8004e90:	6800      	ldr	r0, [r0, #0]
 8004e92:	a902      	add	r1, sp, #8
 8004e94:	9301      	str	r3, [sp, #4]
 8004e96:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004e98:	f002 fbb4 	bl	8007604 <_svfiprintf_r>
 8004e9c:	9b02      	ldr	r3, [sp, #8]
 8004e9e:	701c      	strb	r4, [r3, #0]
 8004ea0:	b01d      	add	sp, #116	@ 0x74
 8004ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ea6:	b003      	add	sp, #12
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	2000001c 	.word	0x2000001c
 8004eb0:	ffff0208 	.word	0xffff0208

08004eb4 <__sread>:
 8004eb4:	b510      	push	{r4, lr}
 8004eb6:	460c      	mov	r4, r1
 8004eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ebc:	f000 f86c 	bl	8004f98 <_read_r>
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	bfab      	itete	ge
 8004ec4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004ec6:	89a3      	ldrhlt	r3, [r4, #12]
 8004ec8:	181b      	addge	r3, r3, r0
 8004eca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004ece:	bfac      	ite	ge
 8004ed0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004ed2:	81a3      	strhlt	r3, [r4, #12]
 8004ed4:	bd10      	pop	{r4, pc}

08004ed6 <__swrite>:
 8004ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eda:	461f      	mov	r7, r3
 8004edc:	898b      	ldrh	r3, [r1, #12]
 8004ede:	4605      	mov	r5, r0
 8004ee0:	05db      	lsls	r3, r3, #23
 8004ee2:	460c      	mov	r4, r1
 8004ee4:	4616      	mov	r6, r2
 8004ee6:	d505      	bpl.n	8004ef4 <__swrite+0x1e>
 8004ee8:	2302      	movs	r3, #2
 8004eea:	2200      	movs	r2, #0
 8004eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ef0:	f000 f840 	bl	8004f74 <_lseek_r>
 8004ef4:	89a3      	ldrh	r3, [r4, #12]
 8004ef6:	4632      	mov	r2, r6
 8004ef8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004efc:	81a3      	strh	r3, [r4, #12]
 8004efe:	4628      	mov	r0, r5
 8004f00:	463b      	mov	r3, r7
 8004f02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f0a:	f000 b857 	b.w	8004fbc <_write_r>

08004f0e <__sseek>:
 8004f0e:	b510      	push	{r4, lr}
 8004f10:	460c      	mov	r4, r1
 8004f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f16:	f000 f82d 	bl	8004f74 <_lseek_r>
 8004f1a:	1c43      	adds	r3, r0, #1
 8004f1c:	89a3      	ldrh	r3, [r4, #12]
 8004f1e:	bf15      	itete	ne
 8004f20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004f22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004f26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004f2a:	81a3      	strheq	r3, [r4, #12]
 8004f2c:	bf18      	it	ne
 8004f2e:	81a3      	strhne	r3, [r4, #12]
 8004f30:	bd10      	pop	{r4, pc}

08004f32 <__sclose>:
 8004f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f36:	f000 b80d 	b.w	8004f54 <_close_r>

08004f3a <memset>:
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	4402      	add	r2, r0
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d100      	bne.n	8004f44 <memset+0xa>
 8004f42:	4770      	bx	lr
 8004f44:	f803 1b01 	strb.w	r1, [r3], #1
 8004f48:	e7f9      	b.n	8004f3e <memset+0x4>
	...

08004f4c <_localeconv_r>:
 8004f4c:	4800      	ldr	r0, [pc, #0]	@ (8004f50 <_localeconv_r+0x4>)
 8004f4e:	4770      	bx	lr
 8004f50:	2000015c 	.word	0x2000015c

08004f54 <_close_r>:
 8004f54:	b538      	push	{r3, r4, r5, lr}
 8004f56:	2300      	movs	r3, #0
 8004f58:	4d05      	ldr	r5, [pc, #20]	@ (8004f70 <_close_r+0x1c>)
 8004f5a:	4604      	mov	r4, r0
 8004f5c:	4608      	mov	r0, r1
 8004f5e:	602b      	str	r3, [r5, #0]
 8004f60:	f7fc fae1 	bl	8001526 <_close>
 8004f64:	1c43      	adds	r3, r0, #1
 8004f66:	d102      	bne.n	8004f6e <_close_r+0x1a>
 8004f68:	682b      	ldr	r3, [r5, #0]
 8004f6a:	b103      	cbz	r3, 8004f6e <_close_r+0x1a>
 8004f6c:	6023      	str	r3, [r4, #0]
 8004f6e:	bd38      	pop	{r3, r4, r5, pc}
 8004f70:	20000420 	.word	0x20000420

08004f74 <_lseek_r>:
 8004f74:	b538      	push	{r3, r4, r5, lr}
 8004f76:	4604      	mov	r4, r0
 8004f78:	4608      	mov	r0, r1
 8004f7a:	4611      	mov	r1, r2
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	4d05      	ldr	r5, [pc, #20]	@ (8004f94 <_lseek_r+0x20>)
 8004f80:	602a      	str	r2, [r5, #0]
 8004f82:	461a      	mov	r2, r3
 8004f84:	f7fc faf3 	bl	800156e <_lseek>
 8004f88:	1c43      	adds	r3, r0, #1
 8004f8a:	d102      	bne.n	8004f92 <_lseek_r+0x1e>
 8004f8c:	682b      	ldr	r3, [r5, #0]
 8004f8e:	b103      	cbz	r3, 8004f92 <_lseek_r+0x1e>
 8004f90:	6023      	str	r3, [r4, #0]
 8004f92:	bd38      	pop	{r3, r4, r5, pc}
 8004f94:	20000420 	.word	0x20000420

08004f98 <_read_r>:
 8004f98:	b538      	push	{r3, r4, r5, lr}
 8004f9a:	4604      	mov	r4, r0
 8004f9c:	4608      	mov	r0, r1
 8004f9e:	4611      	mov	r1, r2
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	4d05      	ldr	r5, [pc, #20]	@ (8004fb8 <_read_r+0x20>)
 8004fa4:	602a      	str	r2, [r5, #0]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	f7fc fa84 	bl	80014b4 <_read>
 8004fac:	1c43      	adds	r3, r0, #1
 8004fae:	d102      	bne.n	8004fb6 <_read_r+0x1e>
 8004fb0:	682b      	ldr	r3, [r5, #0]
 8004fb2:	b103      	cbz	r3, 8004fb6 <_read_r+0x1e>
 8004fb4:	6023      	str	r3, [r4, #0]
 8004fb6:	bd38      	pop	{r3, r4, r5, pc}
 8004fb8:	20000420 	.word	0x20000420

08004fbc <_write_r>:
 8004fbc:	b538      	push	{r3, r4, r5, lr}
 8004fbe:	4604      	mov	r4, r0
 8004fc0:	4608      	mov	r0, r1
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	4d05      	ldr	r5, [pc, #20]	@ (8004fdc <_write_r+0x20>)
 8004fc8:	602a      	str	r2, [r5, #0]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f7fc fa8f 	bl	80014ee <_write>
 8004fd0:	1c43      	adds	r3, r0, #1
 8004fd2:	d102      	bne.n	8004fda <_write_r+0x1e>
 8004fd4:	682b      	ldr	r3, [r5, #0]
 8004fd6:	b103      	cbz	r3, 8004fda <_write_r+0x1e>
 8004fd8:	6023      	str	r3, [r4, #0]
 8004fda:	bd38      	pop	{r3, r4, r5, pc}
 8004fdc:	20000420 	.word	0x20000420

08004fe0 <__errno>:
 8004fe0:	4b01      	ldr	r3, [pc, #4]	@ (8004fe8 <__errno+0x8>)
 8004fe2:	6818      	ldr	r0, [r3, #0]
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	2000001c 	.word	0x2000001c

08004fec <__libc_init_array>:
 8004fec:	b570      	push	{r4, r5, r6, lr}
 8004fee:	2600      	movs	r6, #0
 8004ff0:	4d0c      	ldr	r5, [pc, #48]	@ (8005024 <__libc_init_array+0x38>)
 8004ff2:	4c0d      	ldr	r4, [pc, #52]	@ (8005028 <__libc_init_array+0x3c>)
 8004ff4:	1b64      	subs	r4, r4, r5
 8004ff6:	10a4      	asrs	r4, r4, #2
 8004ff8:	42a6      	cmp	r6, r4
 8004ffa:	d109      	bne.n	8005010 <__libc_init_array+0x24>
 8004ffc:	f003 fdd4 	bl	8008ba8 <_init>
 8005000:	2600      	movs	r6, #0
 8005002:	4d0a      	ldr	r5, [pc, #40]	@ (800502c <__libc_init_array+0x40>)
 8005004:	4c0a      	ldr	r4, [pc, #40]	@ (8005030 <__libc_init_array+0x44>)
 8005006:	1b64      	subs	r4, r4, r5
 8005008:	10a4      	asrs	r4, r4, #2
 800500a:	42a6      	cmp	r6, r4
 800500c:	d105      	bne.n	800501a <__libc_init_array+0x2e>
 800500e:	bd70      	pop	{r4, r5, r6, pc}
 8005010:	f855 3b04 	ldr.w	r3, [r5], #4
 8005014:	4798      	blx	r3
 8005016:	3601      	adds	r6, #1
 8005018:	e7ee      	b.n	8004ff8 <__libc_init_array+0xc>
 800501a:	f855 3b04 	ldr.w	r3, [r5], #4
 800501e:	4798      	blx	r3
 8005020:	3601      	adds	r6, #1
 8005022:	e7f2      	b.n	800500a <__libc_init_array+0x1e>
 8005024:	08009098 	.word	0x08009098
 8005028:	08009098 	.word	0x08009098
 800502c:	08009098 	.word	0x08009098
 8005030:	0800909c 	.word	0x0800909c

08005034 <__retarget_lock_init_recursive>:
 8005034:	4770      	bx	lr

08005036 <__retarget_lock_acquire_recursive>:
 8005036:	4770      	bx	lr

08005038 <__retarget_lock_release_recursive>:
 8005038:	4770      	bx	lr

0800503a <memchr>:
 800503a:	4603      	mov	r3, r0
 800503c:	b510      	push	{r4, lr}
 800503e:	b2c9      	uxtb	r1, r1
 8005040:	4402      	add	r2, r0
 8005042:	4293      	cmp	r3, r2
 8005044:	4618      	mov	r0, r3
 8005046:	d101      	bne.n	800504c <memchr+0x12>
 8005048:	2000      	movs	r0, #0
 800504a:	e003      	b.n	8005054 <memchr+0x1a>
 800504c:	7804      	ldrb	r4, [r0, #0]
 800504e:	3301      	adds	r3, #1
 8005050:	428c      	cmp	r4, r1
 8005052:	d1f6      	bne.n	8005042 <memchr+0x8>
 8005054:	bd10      	pop	{r4, pc}
	...

08005058 <nanf>:
 8005058:	4800      	ldr	r0, [pc, #0]	@ (800505c <nanf+0x4>)
 800505a:	4770      	bx	lr
 800505c:	7fc00000 	.word	0x7fc00000

08005060 <quorem>:
 8005060:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005064:	6903      	ldr	r3, [r0, #16]
 8005066:	690c      	ldr	r4, [r1, #16]
 8005068:	4607      	mov	r7, r0
 800506a:	42a3      	cmp	r3, r4
 800506c:	db7e      	blt.n	800516c <quorem+0x10c>
 800506e:	3c01      	subs	r4, #1
 8005070:	00a3      	lsls	r3, r4, #2
 8005072:	f100 0514 	add.w	r5, r0, #20
 8005076:	f101 0814 	add.w	r8, r1, #20
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005080:	9301      	str	r3, [sp, #4]
 8005082:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005086:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800508a:	3301      	adds	r3, #1
 800508c:	429a      	cmp	r2, r3
 800508e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005092:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005096:	d32e      	bcc.n	80050f6 <quorem+0x96>
 8005098:	f04f 0a00 	mov.w	sl, #0
 800509c:	46c4      	mov	ip, r8
 800509e:	46ae      	mov	lr, r5
 80050a0:	46d3      	mov	fp, sl
 80050a2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80050a6:	b298      	uxth	r0, r3
 80050a8:	fb06 a000 	mla	r0, r6, r0, sl
 80050ac:	0c1b      	lsrs	r3, r3, #16
 80050ae:	0c02      	lsrs	r2, r0, #16
 80050b0:	fb06 2303 	mla	r3, r6, r3, r2
 80050b4:	f8de 2000 	ldr.w	r2, [lr]
 80050b8:	b280      	uxth	r0, r0
 80050ba:	b292      	uxth	r2, r2
 80050bc:	1a12      	subs	r2, r2, r0
 80050be:	445a      	add	r2, fp
 80050c0:	f8de 0000 	ldr.w	r0, [lr]
 80050c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80050ce:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80050d2:	b292      	uxth	r2, r2
 80050d4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80050d8:	45e1      	cmp	r9, ip
 80050da:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80050de:	f84e 2b04 	str.w	r2, [lr], #4
 80050e2:	d2de      	bcs.n	80050a2 <quorem+0x42>
 80050e4:	9b00      	ldr	r3, [sp, #0]
 80050e6:	58eb      	ldr	r3, [r5, r3]
 80050e8:	b92b      	cbnz	r3, 80050f6 <quorem+0x96>
 80050ea:	9b01      	ldr	r3, [sp, #4]
 80050ec:	3b04      	subs	r3, #4
 80050ee:	429d      	cmp	r5, r3
 80050f0:	461a      	mov	r2, r3
 80050f2:	d32f      	bcc.n	8005154 <quorem+0xf4>
 80050f4:	613c      	str	r4, [r7, #16]
 80050f6:	4638      	mov	r0, r7
 80050f8:	f001 f9c8 	bl	800648c <__mcmp>
 80050fc:	2800      	cmp	r0, #0
 80050fe:	db25      	blt.n	800514c <quorem+0xec>
 8005100:	4629      	mov	r1, r5
 8005102:	2000      	movs	r0, #0
 8005104:	f858 2b04 	ldr.w	r2, [r8], #4
 8005108:	f8d1 c000 	ldr.w	ip, [r1]
 800510c:	fa1f fe82 	uxth.w	lr, r2
 8005110:	fa1f f38c 	uxth.w	r3, ip
 8005114:	eba3 030e 	sub.w	r3, r3, lr
 8005118:	4403      	add	r3, r0
 800511a:	0c12      	lsrs	r2, r2, #16
 800511c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005120:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005124:	b29b      	uxth	r3, r3
 8005126:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800512a:	45c1      	cmp	r9, r8
 800512c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005130:	f841 3b04 	str.w	r3, [r1], #4
 8005134:	d2e6      	bcs.n	8005104 <quorem+0xa4>
 8005136:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800513a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800513e:	b922      	cbnz	r2, 800514a <quorem+0xea>
 8005140:	3b04      	subs	r3, #4
 8005142:	429d      	cmp	r5, r3
 8005144:	461a      	mov	r2, r3
 8005146:	d30b      	bcc.n	8005160 <quorem+0x100>
 8005148:	613c      	str	r4, [r7, #16]
 800514a:	3601      	adds	r6, #1
 800514c:	4630      	mov	r0, r6
 800514e:	b003      	add	sp, #12
 8005150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005154:	6812      	ldr	r2, [r2, #0]
 8005156:	3b04      	subs	r3, #4
 8005158:	2a00      	cmp	r2, #0
 800515a:	d1cb      	bne.n	80050f4 <quorem+0x94>
 800515c:	3c01      	subs	r4, #1
 800515e:	e7c6      	b.n	80050ee <quorem+0x8e>
 8005160:	6812      	ldr	r2, [r2, #0]
 8005162:	3b04      	subs	r3, #4
 8005164:	2a00      	cmp	r2, #0
 8005166:	d1ef      	bne.n	8005148 <quorem+0xe8>
 8005168:	3c01      	subs	r4, #1
 800516a:	e7ea      	b.n	8005142 <quorem+0xe2>
 800516c:	2000      	movs	r0, #0
 800516e:	e7ee      	b.n	800514e <quorem+0xee>

08005170 <_dtoa_r>:
 8005170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005174:	4614      	mov	r4, r2
 8005176:	461d      	mov	r5, r3
 8005178:	69c7      	ldr	r7, [r0, #28]
 800517a:	b097      	sub	sp, #92	@ 0x5c
 800517c:	4681      	mov	r9, r0
 800517e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005182:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005184:	b97f      	cbnz	r7, 80051a6 <_dtoa_r+0x36>
 8005186:	2010      	movs	r0, #16
 8005188:	f000 fe0e 	bl	8005da8 <malloc>
 800518c:	4602      	mov	r2, r0
 800518e:	f8c9 001c 	str.w	r0, [r9, #28]
 8005192:	b920      	cbnz	r0, 800519e <_dtoa_r+0x2e>
 8005194:	21ef      	movs	r1, #239	@ 0xef
 8005196:	4bac      	ldr	r3, [pc, #688]	@ (8005448 <_dtoa_r+0x2d8>)
 8005198:	48ac      	ldr	r0, [pc, #688]	@ (800544c <_dtoa_r+0x2dc>)
 800519a:	f002 fc27 	bl	80079ec <__assert_func>
 800519e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80051a2:	6007      	str	r7, [r0, #0]
 80051a4:	60c7      	str	r7, [r0, #12]
 80051a6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80051aa:	6819      	ldr	r1, [r3, #0]
 80051ac:	b159      	cbz	r1, 80051c6 <_dtoa_r+0x56>
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	2301      	movs	r3, #1
 80051b2:	4093      	lsls	r3, r2
 80051b4:	604a      	str	r2, [r1, #4]
 80051b6:	608b      	str	r3, [r1, #8]
 80051b8:	4648      	mov	r0, r9
 80051ba:	f000 feeb 	bl	8005f94 <_Bfree>
 80051be:	2200      	movs	r2, #0
 80051c0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	1e2b      	subs	r3, r5, #0
 80051c8:	bfaf      	iteee	ge
 80051ca:	2300      	movge	r3, #0
 80051cc:	2201      	movlt	r2, #1
 80051ce:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80051d2:	9307      	strlt	r3, [sp, #28]
 80051d4:	bfa8      	it	ge
 80051d6:	6033      	strge	r3, [r6, #0]
 80051d8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80051dc:	4b9c      	ldr	r3, [pc, #624]	@ (8005450 <_dtoa_r+0x2e0>)
 80051de:	bfb8      	it	lt
 80051e0:	6032      	strlt	r2, [r6, #0]
 80051e2:	ea33 0308 	bics.w	r3, r3, r8
 80051e6:	d112      	bne.n	800520e <_dtoa_r+0x9e>
 80051e8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80051ec:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80051ee:	6013      	str	r3, [r2, #0]
 80051f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80051f4:	4323      	orrs	r3, r4
 80051f6:	f000 855e 	beq.w	8005cb6 <_dtoa_r+0xb46>
 80051fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80051fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005454 <_dtoa_r+0x2e4>
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 8560 	beq.w	8005cc6 <_dtoa_r+0xb56>
 8005206:	f10a 0303 	add.w	r3, sl, #3
 800520a:	f000 bd5a 	b.w	8005cc2 <_dtoa_r+0xb52>
 800520e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005212:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005216:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800521a:	2200      	movs	r2, #0
 800521c:	2300      	movs	r3, #0
 800521e:	f7fb fbc3 	bl	80009a8 <__aeabi_dcmpeq>
 8005222:	4607      	mov	r7, r0
 8005224:	b158      	cbz	r0, 800523e <_dtoa_r+0xce>
 8005226:	2301      	movs	r3, #1
 8005228:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800522a:	6013      	str	r3, [r2, #0]
 800522c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800522e:	b113      	cbz	r3, 8005236 <_dtoa_r+0xc6>
 8005230:	4b89      	ldr	r3, [pc, #548]	@ (8005458 <_dtoa_r+0x2e8>)
 8005232:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005234:	6013      	str	r3, [r2, #0]
 8005236:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800545c <_dtoa_r+0x2ec>
 800523a:	f000 bd44 	b.w	8005cc6 <_dtoa_r+0xb56>
 800523e:	ab14      	add	r3, sp, #80	@ 0x50
 8005240:	9301      	str	r3, [sp, #4]
 8005242:	ab15      	add	r3, sp, #84	@ 0x54
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	4648      	mov	r0, r9
 8005248:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800524c:	f001 fa36 	bl	80066bc <__d2b>
 8005250:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005254:	9003      	str	r0, [sp, #12]
 8005256:	2e00      	cmp	r6, #0
 8005258:	d078      	beq.n	800534c <_dtoa_r+0x1dc>
 800525a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800525e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005260:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005264:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005268:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800526c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005270:	9712      	str	r7, [sp, #72]	@ 0x48
 8005272:	4619      	mov	r1, r3
 8005274:	2200      	movs	r2, #0
 8005276:	4b7a      	ldr	r3, [pc, #488]	@ (8005460 <_dtoa_r+0x2f0>)
 8005278:	f7fa ff76 	bl	8000168 <__aeabi_dsub>
 800527c:	a36c      	add	r3, pc, #432	@ (adr r3, 8005430 <_dtoa_r+0x2c0>)
 800527e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005282:	f7fb f929 	bl	80004d8 <__aeabi_dmul>
 8005286:	a36c      	add	r3, pc, #432	@ (adr r3, 8005438 <_dtoa_r+0x2c8>)
 8005288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528c:	f7fa ff6e 	bl	800016c <__adddf3>
 8005290:	4604      	mov	r4, r0
 8005292:	4630      	mov	r0, r6
 8005294:	460d      	mov	r5, r1
 8005296:	f7fb f8b5 	bl	8000404 <__aeabi_i2d>
 800529a:	a369      	add	r3, pc, #420	@ (adr r3, 8005440 <_dtoa_r+0x2d0>)
 800529c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a0:	f7fb f91a 	bl	80004d8 <__aeabi_dmul>
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	4620      	mov	r0, r4
 80052aa:	4629      	mov	r1, r5
 80052ac:	f7fa ff5e 	bl	800016c <__adddf3>
 80052b0:	4604      	mov	r4, r0
 80052b2:	460d      	mov	r5, r1
 80052b4:	f7fb fbc0 	bl	8000a38 <__aeabi_d2iz>
 80052b8:	2200      	movs	r2, #0
 80052ba:	4607      	mov	r7, r0
 80052bc:	2300      	movs	r3, #0
 80052be:	4620      	mov	r0, r4
 80052c0:	4629      	mov	r1, r5
 80052c2:	f7fb fb7b 	bl	80009bc <__aeabi_dcmplt>
 80052c6:	b140      	cbz	r0, 80052da <_dtoa_r+0x16a>
 80052c8:	4638      	mov	r0, r7
 80052ca:	f7fb f89b 	bl	8000404 <__aeabi_i2d>
 80052ce:	4622      	mov	r2, r4
 80052d0:	462b      	mov	r3, r5
 80052d2:	f7fb fb69 	bl	80009a8 <__aeabi_dcmpeq>
 80052d6:	b900      	cbnz	r0, 80052da <_dtoa_r+0x16a>
 80052d8:	3f01      	subs	r7, #1
 80052da:	2f16      	cmp	r7, #22
 80052dc:	d854      	bhi.n	8005388 <_dtoa_r+0x218>
 80052de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80052e2:	4b60      	ldr	r3, [pc, #384]	@ (8005464 <_dtoa_r+0x2f4>)
 80052e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80052e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ec:	f7fb fb66 	bl	80009bc <__aeabi_dcmplt>
 80052f0:	2800      	cmp	r0, #0
 80052f2:	d04b      	beq.n	800538c <_dtoa_r+0x21c>
 80052f4:	2300      	movs	r3, #0
 80052f6:	3f01      	subs	r7, #1
 80052f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80052fa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80052fc:	1b9b      	subs	r3, r3, r6
 80052fe:	1e5a      	subs	r2, r3, #1
 8005300:	bf49      	itett	mi
 8005302:	f1c3 0301 	rsbmi	r3, r3, #1
 8005306:	2300      	movpl	r3, #0
 8005308:	9304      	strmi	r3, [sp, #16]
 800530a:	2300      	movmi	r3, #0
 800530c:	9209      	str	r2, [sp, #36]	@ 0x24
 800530e:	bf54      	ite	pl
 8005310:	9304      	strpl	r3, [sp, #16]
 8005312:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005314:	2f00      	cmp	r7, #0
 8005316:	db3b      	blt.n	8005390 <_dtoa_r+0x220>
 8005318:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800531a:	970e      	str	r7, [sp, #56]	@ 0x38
 800531c:	443b      	add	r3, r7
 800531e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005320:	2300      	movs	r3, #0
 8005322:	930a      	str	r3, [sp, #40]	@ 0x28
 8005324:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005326:	2b09      	cmp	r3, #9
 8005328:	d865      	bhi.n	80053f6 <_dtoa_r+0x286>
 800532a:	2b05      	cmp	r3, #5
 800532c:	bfc4      	itt	gt
 800532e:	3b04      	subgt	r3, #4
 8005330:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005332:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005334:	bfc8      	it	gt
 8005336:	2400      	movgt	r4, #0
 8005338:	f1a3 0302 	sub.w	r3, r3, #2
 800533c:	bfd8      	it	le
 800533e:	2401      	movle	r4, #1
 8005340:	2b03      	cmp	r3, #3
 8005342:	d864      	bhi.n	800540e <_dtoa_r+0x29e>
 8005344:	e8df f003 	tbb	[pc, r3]
 8005348:	2c385553 	.word	0x2c385553
 800534c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005350:	441e      	add	r6, r3
 8005352:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005356:	2b20      	cmp	r3, #32
 8005358:	bfc1      	itttt	gt
 800535a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800535e:	fa08 f803 	lslgt.w	r8, r8, r3
 8005362:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005366:	fa24 f303 	lsrgt.w	r3, r4, r3
 800536a:	bfd6      	itet	le
 800536c:	f1c3 0320 	rsble	r3, r3, #32
 8005370:	ea48 0003 	orrgt.w	r0, r8, r3
 8005374:	fa04 f003 	lslle.w	r0, r4, r3
 8005378:	f7fb f834 	bl	80003e4 <__aeabi_ui2d>
 800537c:	2201      	movs	r2, #1
 800537e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005382:	3e01      	subs	r6, #1
 8005384:	9212      	str	r2, [sp, #72]	@ 0x48
 8005386:	e774      	b.n	8005272 <_dtoa_r+0x102>
 8005388:	2301      	movs	r3, #1
 800538a:	e7b5      	b.n	80052f8 <_dtoa_r+0x188>
 800538c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800538e:	e7b4      	b.n	80052fa <_dtoa_r+0x18a>
 8005390:	9b04      	ldr	r3, [sp, #16]
 8005392:	1bdb      	subs	r3, r3, r7
 8005394:	9304      	str	r3, [sp, #16]
 8005396:	427b      	negs	r3, r7
 8005398:	930a      	str	r3, [sp, #40]	@ 0x28
 800539a:	2300      	movs	r3, #0
 800539c:	930e      	str	r3, [sp, #56]	@ 0x38
 800539e:	e7c1      	b.n	8005324 <_dtoa_r+0x1b4>
 80053a0:	2301      	movs	r3, #1
 80053a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80053a6:	eb07 0b03 	add.w	fp, r7, r3
 80053aa:	f10b 0301 	add.w	r3, fp, #1
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	9308      	str	r3, [sp, #32]
 80053b2:	bfb8      	it	lt
 80053b4:	2301      	movlt	r3, #1
 80053b6:	e006      	b.n	80053c6 <_dtoa_r+0x256>
 80053b8:	2301      	movs	r3, #1
 80053ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80053be:	2b00      	cmp	r3, #0
 80053c0:	dd28      	ble.n	8005414 <_dtoa_r+0x2a4>
 80053c2:	469b      	mov	fp, r3
 80053c4:	9308      	str	r3, [sp, #32]
 80053c6:	2100      	movs	r1, #0
 80053c8:	2204      	movs	r2, #4
 80053ca:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80053ce:	f102 0514 	add.w	r5, r2, #20
 80053d2:	429d      	cmp	r5, r3
 80053d4:	d926      	bls.n	8005424 <_dtoa_r+0x2b4>
 80053d6:	6041      	str	r1, [r0, #4]
 80053d8:	4648      	mov	r0, r9
 80053da:	f000 fd9b 	bl	8005f14 <_Balloc>
 80053de:	4682      	mov	sl, r0
 80053e0:	2800      	cmp	r0, #0
 80053e2:	d143      	bne.n	800546c <_dtoa_r+0x2fc>
 80053e4:	4602      	mov	r2, r0
 80053e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80053ea:	4b1f      	ldr	r3, [pc, #124]	@ (8005468 <_dtoa_r+0x2f8>)
 80053ec:	e6d4      	b.n	8005198 <_dtoa_r+0x28>
 80053ee:	2300      	movs	r3, #0
 80053f0:	e7e3      	b.n	80053ba <_dtoa_r+0x24a>
 80053f2:	2300      	movs	r3, #0
 80053f4:	e7d5      	b.n	80053a2 <_dtoa_r+0x232>
 80053f6:	2401      	movs	r4, #1
 80053f8:	2300      	movs	r3, #0
 80053fa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80053fc:	9320      	str	r3, [sp, #128]	@ 0x80
 80053fe:	f04f 3bff 	mov.w	fp, #4294967295
 8005402:	2200      	movs	r2, #0
 8005404:	2312      	movs	r3, #18
 8005406:	f8cd b020 	str.w	fp, [sp, #32]
 800540a:	9221      	str	r2, [sp, #132]	@ 0x84
 800540c:	e7db      	b.n	80053c6 <_dtoa_r+0x256>
 800540e:	2301      	movs	r3, #1
 8005410:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005412:	e7f4      	b.n	80053fe <_dtoa_r+0x28e>
 8005414:	f04f 0b01 	mov.w	fp, #1
 8005418:	465b      	mov	r3, fp
 800541a:	f8cd b020 	str.w	fp, [sp, #32]
 800541e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8005422:	e7d0      	b.n	80053c6 <_dtoa_r+0x256>
 8005424:	3101      	adds	r1, #1
 8005426:	0052      	lsls	r2, r2, #1
 8005428:	e7d1      	b.n	80053ce <_dtoa_r+0x25e>
 800542a:	bf00      	nop
 800542c:	f3af 8000 	nop.w
 8005430:	636f4361 	.word	0x636f4361
 8005434:	3fd287a7 	.word	0x3fd287a7
 8005438:	8b60c8b3 	.word	0x8b60c8b3
 800543c:	3fc68a28 	.word	0x3fc68a28
 8005440:	509f79fb 	.word	0x509f79fb
 8005444:	3fd34413 	.word	0x3fd34413
 8005448:	08008c3c 	.word	0x08008c3c
 800544c:	08008c53 	.word	0x08008c53
 8005450:	7ff00000 	.word	0x7ff00000
 8005454:	08008c38 	.word	0x08008c38
 8005458:	08008c07 	.word	0x08008c07
 800545c:	08008c06 	.word	0x08008c06
 8005460:	3ff80000 	.word	0x3ff80000
 8005464:	08008e00 	.word	0x08008e00
 8005468:	08008cab 	.word	0x08008cab
 800546c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005470:	6018      	str	r0, [r3, #0]
 8005472:	9b08      	ldr	r3, [sp, #32]
 8005474:	2b0e      	cmp	r3, #14
 8005476:	f200 80a1 	bhi.w	80055bc <_dtoa_r+0x44c>
 800547a:	2c00      	cmp	r4, #0
 800547c:	f000 809e 	beq.w	80055bc <_dtoa_r+0x44c>
 8005480:	2f00      	cmp	r7, #0
 8005482:	dd33      	ble.n	80054ec <_dtoa_r+0x37c>
 8005484:	4b9c      	ldr	r3, [pc, #624]	@ (80056f8 <_dtoa_r+0x588>)
 8005486:	f007 020f 	and.w	r2, r7, #15
 800548a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800548e:	05f8      	lsls	r0, r7, #23
 8005490:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005494:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8005498:	ea4f 1427 	mov.w	r4, r7, asr #4
 800549c:	d516      	bpl.n	80054cc <_dtoa_r+0x35c>
 800549e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80054a2:	4b96      	ldr	r3, [pc, #600]	@ (80056fc <_dtoa_r+0x58c>)
 80054a4:	2603      	movs	r6, #3
 80054a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80054aa:	f7fb f93f 	bl	800072c <__aeabi_ddiv>
 80054ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80054b2:	f004 040f 	and.w	r4, r4, #15
 80054b6:	4d91      	ldr	r5, [pc, #580]	@ (80056fc <_dtoa_r+0x58c>)
 80054b8:	b954      	cbnz	r4, 80054d0 <_dtoa_r+0x360>
 80054ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80054be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054c2:	f7fb f933 	bl	800072c <__aeabi_ddiv>
 80054c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80054ca:	e028      	b.n	800551e <_dtoa_r+0x3ae>
 80054cc:	2602      	movs	r6, #2
 80054ce:	e7f2      	b.n	80054b6 <_dtoa_r+0x346>
 80054d0:	07e1      	lsls	r1, r4, #31
 80054d2:	d508      	bpl.n	80054e6 <_dtoa_r+0x376>
 80054d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80054d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80054dc:	f7fa fffc 	bl	80004d8 <__aeabi_dmul>
 80054e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80054e4:	3601      	adds	r6, #1
 80054e6:	1064      	asrs	r4, r4, #1
 80054e8:	3508      	adds	r5, #8
 80054ea:	e7e5      	b.n	80054b8 <_dtoa_r+0x348>
 80054ec:	f000 80af 	beq.w	800564e <_dtoa_r+0x4de>
 80054f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80054f4:	427c      	negs	r4, r7
 80054f6:	4b80      	ldr	r3, [pc, #512]	@ (80056f8 <_dtoa_r+0x588>)
 80054f8:	f004 020f 	and.w	r2, r4, #15
 80054fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005504:	f7fa ffe8 	bl	80004d8 <__aeabi_dmul>
 8005508:	2602      	movs	r6, #2
 800550a:	2300      	movs	r3, #0
 800550c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005510:	4d7a      	ldr	r5, [pc, #488]	@ (80056fc <_dtoa_r+0x58c>)
 8005512:	1124      	asrs	r4, r4, #4
 8005514:	2c00      	cmp	r4, #0
 8005516:	f040 808f 	bne.w	8005638 <_dtoa_r+0x4c8>
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1d3      	bne.n	80054c6 <_dtoa_r+0x356>
 800551e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005522:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005524:	2b00      	cmp	r3, #0
 8005526:	f000 8094 	beq.w	8005652 <_dtoa_r+0x4e2>
 800552a:	2200      	movs	r2, #0
 800552c:	4620      	mov	r0, r4
 800552e:	4629      	mov	r1, r5
 8005530:	4b73      	ldr	r3, [pc, #460]	@ (8005700 <_dtoa_r+0x590>)
 8005532:	f7fb fa43 	bl	80009bc <__aeabi_dcmplt>
 8005536:	2800      	cmp	r0, #0
 8005538:	f000 808b 	beq.w	8005652 <_dtoa_r+0x4e2>
 800553c:	9b08      	ldr	r3, [sp, #32]
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 8087 	beq.w	8005652 <_dtoa_r+0x4e2>
 8005544:	f1bb 0f00 	cmp.w	fp, #0
 8005548:	dd34      	ble.n	80055b4 <_dtoa_r+0x444>
 800554a:	4620      	mov	r0, r4
 800554c:	2200      	movs	r2, #0
 800554e:	4629      	mov	r1, r5
 8005550:	4b6c      	ldr	r3, [pc, #432]	@ (8005704 <_dtoa_r+0x594>)
 8005552:	f7fa ffc1 	bl	80004d8 <__aeabi_dmul>
 8005556:	465c      	mov	r4, fp
 8005558:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800555c:	f107 38ff 	add.w	r8, r7, #4294967295
 8005560:	3601      	adds	r6, #1
 8005562:	4630      	mov	r0, r6
 8005564:	f7fa ff4e 	bl	8000404 <__aeabi_i2d>
 8005568:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800556c:	f7fa ffb4 	bl	80004d8 <__aeabi_dmul>
 8005570:	2200      	movs	r2, #0
 8005572:	4b65      	ldr	r3, [pc, #404]	@ (8005708 <_dtoa_r+0x598>)
 8005574:	f7fa fdfa 	bl	800016c <__adddf3>
 8005578:	4605      	mov	r5, r0
 800557a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800557e:	2c00      	cmp	r4, #0
 8005580:	d16a      	bne.n	8005658 <_dtoa_r+0x4e8>
 8005582:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005586:	2200      	movs	r2, #0
 8005588:	4b60      	ldr	r3, [pc, #384]	@ (800570c <_dtoa_r+0x59c>)
 800558a:	f7fa fded 	bl	8000168 <__aeabi_dsub>
 800558e:	4602      	mov	r2, r0
 8005590:	460b      	mov	r3, r1
 8005592:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005596:	462a      	mov	r2, r5
 8005598:	4633      	mov	r3, r6
 800559a:	f7fb fa2d 	bl	80009f8 <__aeabi_dcmpgt>
 800559e:	2800      	cmp	r0, #0
 80055a0:	f040 8298 	bne.w	8005ad4 <_dtoa_r+0x964>
 80055a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055a8:	462a      	mov	r2, r5
 80055aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80055ae:	f7fb fa05 	bl	80009bc <__aeabi_dcmplt>
 80055b2:	bb38      	cbnz	r0, 8005604 <_dtoa_r+0x494>
 80055b4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80055b8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80055bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f2c0 8157 	blt.w	8005872 <_dtoa_r+0x702>
 80055c4:	2f0e      	cmp	r7, #14
 80055c6:	f300 8154 	bgt.w	8005872 <_dtoa_r+0x702>
 80055ca:	4b4b      	ldr	r3, [pc, #300]	@ (80056f8 <_dtoa_r+0x588>)
 80055cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80055d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80055d4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80055d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f280 80e5 	bge.w	80057aa <_dtoa_r+0x63a>
 80055e0:	9b08      	ldr	r3, [sp, #32]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f300 80e1 	bgt.w	80057aa <_dtoa_r+0x63a>
 80055e8:	d10c      	bne.n	8005604 <_dtoa_r+0x494>
 80055ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055ee:	2200      	movs	r2, #0
 80055f0:	4b46      	ldr	r3, [pc, #280]	@ (800570c <_dtoa_r+0x59c>)
 80055f2:	f7fa ff71 	bl	80004d8 <__aeabi_dmul>
 80055f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80055fa:	f7fb f9f3 	bl	80009e4 <__aeabi_dcmpge>
 80055fe:	2800      	cmp	r0, #0
 8005600:	f000 8266 	beq.w	8005ad0 <_dtoa_r+0x960>
 8005604:	2400      	movs	r4, #0
 8005606:	4625      	mov	r5, r4
 8005608:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800560a:	4656      	mov	r6, sl
 800560c:	ea6f 0803 	mvn.w	r8, r3
 8005610:	2700      	movs	r7, #0
 8005612:	4621      	mov	r1, r4
 8005614:	4648      	mov	r0, r9
 8005616:	f000 fcbd 	bl	8005f94 <_Bfree>
 800561a:	2d00      	cmp	r5, #0
 800561c:	f000 80bd 	beq.w	800579a <_dtoa_r+0x62a>
 8005620:	b12f      	cbz	r7, 800562e <_dtoa_r+0x4be>
 8005622:	42af      	cmp	r7, r5
 8005624:	d003      	beq.n	800562e <_dtoa_r+0x4be>
 8005626:	4639      	mov	r1, r7
 8005628:	4648      	mov	r0, r9
 800562a:	f000 fcb3 	bl	8005f94 <_Bfree>
 800562e:	4629      	mov	r1, r5
 8005630:	4648      	mov	r0, r9
 8005632:	f000 fcaf 	bl	8005f94 <_Bfree>
 8005636:	e0b0      	b.n	800579a <_dtoa_r+0x62a>
 8005638:	07e2      	lsls	r2, r4, #31
 800563a:	d505      	bpl.n	8005648 <_dtoa_r+0x4d8>
 800563c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005640:	f7fa ff4a 	bl	80004d8 <__aeabi_dmul>
 8005644:	2301      	movs	r3, #1
 8005646:	3601      	adds	r6, #1
 8005648:	1064      	asrs	r4, r4, #1
 800564a:	3508      	adds	r5, #8
 800564c:	e762      	b.n	8005514 <_dtoa_r+0x3a4>
 800564e:	2602      	movs	r6, #2
 8005650:	e765      	b.n	800551e <_dtoa_r+0x3ae>
 8005652:	46b8      	mov	r8, r7
 8005654:	9c08      	ldr	r4, [sp, #32]
 8005656:	e784      	b.n	8005562 <_dtoa_r+0x3f2>
 8005658:	4b27      	ldr	r3, [pc, #156]	@ (80056f8 <_dtoa_r+0x588>)
 800565a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800565c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005660:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005664:	4454      	add	r4, sl
 8005666:	2900      	cmp	r1, #0
 8005668:	d054      	beq.n	8005714 <_dtoa_r+0x5a4>
 800566a:	2000      	movs	r0, #0
 800566c:	4928      	ldr	r1, [pc, #160]	@ (8005710 <_dtoa_r+0x5a0>)
 800566e:	f7fb f85d 	bl	800072c <__aeabi_ddiv>
 8005672:	4633      	mov	r3, r6
 8005674:	462a      	mov	r2, r5
 8005676:	f7fa fd77 	bl	8000168 <__aeabi_dsub>
 800567a:	4656      	mov	r6, sl
 800567c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005680:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005684:	f7fb f9d8 	bl	8000a38 <__aeabi_d2iz>
 8005688:	4605      	mov	r5, r0
 800568a:	f7fa febb 	bl	8000404 <__aeabi_i2d>
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005696:	f7fa fd67 	bl	8000168 <__aeabi_dsub>
 800569a:	4602      	mov	r2, r0
 800569c:	460b      	mov	r3, r1
 800569e:	3530      	adds	r5, #48	@ 0x30
 80056a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80056a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80056a8:	f806 5b01 	strb.w	r5, [r6], #1
 80056ac:	f7fb f986 	bl	80009bc <__aeabi_dcmplt>
 80056b0:	2800      	cmp	r0, #0
 80056b2:	d172      	bne.n	800579a <_dtoa_r+0x62a>
 80056b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80056b8:	2000      	movs	r0, #0
 80056ba:	4911      	ldr	r1, [pc, #68]	@ (8005700 <_dtoa_r+0x590>)
 80056bc:	f7fa fd54 	bl	8000168 <__aeabi_dsub>
 80056c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80056c4:	f7fb f97a 	bl	80009bc <__aeabi_dcmplt>
 80056c8:	2800      	cmp	r0, #0
 80056ca:	f040 80b4 	bne.w	8005836 <_dtoa_r+0x6c6>
 80056ce:	42a6      	cmp	r6, r4
 80056d0:	f43f af70 	beq.w	80055b4 <_dtoa_r+0x444>
 80056d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80056d8:	2200      	movs	r2, #0
 80056da:	4b0a      	ldr	r3, [pc, #40]	@ (8005704 <_dtoa_r+0x594>)
 80056dc:	f7fa fefc 	bl	80004d8 <__aeabi_dmul>
 80056e0:	2200      	movs	r2, #0
 80056e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80056e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056ea:	4b06      	ldr	r3, [pc, #24]	@ (8005704 <_dtoa_r+0x594>)
 80056ec:	f7fa fef4 	bl	80004d8 <__aeabi_dmul>
 80056f0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80056f4:	e7c4      	b.n	8005680 <_dtoa_r+0x510>
 80056f6:	bf00      	nop
 80056f8:	08008e00 	.word	0x08008e00
 80056fc:	08008dd8 	.word	0x08008dd8
 8005700:	3ff00000 	.word	0x3ff00000
 8005704:	40240000 	.word	0x40240000
 8005708:	401c0000 	.word	0x401c0000
 800570c:	40140000 	.word	0x40140000
 8005710:	3fe00000 	.word	0x3fe00000
 8005714:	4631      	mov	r1, r6
 8005716:	4628      	mov	r0, r5
 8005718:	f7fa fede 	bl	80004d8 <__aeabi_dmul>
 800571c:	4656      	mov	r6, sl
 800571e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005722:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005724:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005728:	f7fb f986 	bl	8000a38 <__aeabi_d2iz>
 800572c:	4605      	mov	r5, r0
 800572e:	f7fa fe69 	bl	8000404 <__aeabi_i2d>
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800573a:	f7fa fd15 	bl	8000168 <__aeabi_dsub>
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	3530      	adds	r5, #48	@ 0x30
 8005744:	f806 5b01 	strb.w	r5, [r6], #1
 8005748:	42a6      	cmp	r6, r4
 800574a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	d124      	bne.n	800579e <_dtoa_r+0x62e>
 8005754:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005758:	4bae      	ldr	r3, [pc, #696]	@ (8005a14 <_dtoa_r+0x8a4>)
 800575a:	f7fa fd07 	bl	800016c <__adddf3>
 800575e:	4602      	mov	r2, r0
 8005760:	460b      	mov	r3, r1
 8005762:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005766:	f7fb f947 	bl	80009f8 <__aeabi_dcmpgt>
 800576a:	2800      	cmp	r0, #0
 800576c:	d163      	bne.n	8005836 <_dtoa_r+0x6c6>
 800576e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005772:	2000      	movs	r0, #0
 8005774:	49a7      	ldr	r1, [pc, #668]	@ (8005a14 <_dtoa_r+0x8a4>)
 8005776:	f7fa fcf7 	bl	8000168 <__aeabi_dsub>
 800577a:	4602      	mov	r2, r0
 800577c:	460b      	mov	r3, r1
 800577e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005782:	f7fb f91b 	bl	80009bc <__aeabi_dcmplt>
 8005786:	2800      	cmp	r0, #0
 8005788:	f43f af14 	beq.w	80055b4 <_dtoa_r+0x444>
 800578c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800578e:	1e73      	subs	r3, r6, #1
 8005790:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005792:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005796:	2b30      	cmp	r3, #48	@ 0x30
 8005798:	d0f8      	beq.n	800578c <_dtoa_r+0x61c>
 800579a:	4647      	mov	r7, r8
 800579c:	e03b      	b.n	8005816 <_dtoa_r+0x6a6>
 800579e:	4b9e      	ldr	r3, [pc, #632]	@ (8005a18 <_dtoa_r+0x8a8>)
 80057a0:	f7fa fe9a 	bl	80004d8 <__aeabi_dmul>
 80057a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80057a8:	e7bc      	b.n	8005724 <_dtoa_r+0x5b4>
 80057aa:	4656      	mov	r6, sl
 80057ac:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80057b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057b4:	4620      	mov	r0, r4
 80057b6:	4629      	mov	r1, r5
 80057b8:	f7fa ffb8 	bl	800072c <__aeabi_ddiv>
 80057bc:	f7fb f93c 	bl	8000a38 <__aeabi_d2iz>
 80057c0:	4680      	mov	r8, r0
 80057c2:	f7fa fe1f 	bl	8000404 <__aeabi_i2d>
 80057c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057ca:	f7fa fe85 	bl	80004d8 <__aeabi_dmul>
 80057ce:	4602      	mov	r2, r0
 80057d0:	460b      	mov	r3, r1
 80057d2:	4620      	mov	r0, r4
 80057d4:	4629      	mov	r1, r5
 80057d6:	f7fa fcc7 	bl	8000168 <__aeabi_dsub>
 80057da:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80057de:	9d08      	ldr	r5, [sp, #32]
 80057e0:	f806 4b01 	strb.w	r4, [r6], #1
 80057e4:	eba6 040a 	sub.w	r4, r6, sl
 80057e8:	42a5      	cmp	r5, r4
 80057ea:	4602      	mov	r2, r0
 80057ec:	460b      	mov	r3, r1
 80057ee:	d133      	bne.n	8005858 <_dtoa_r+0x6e8>
 80057f0:	f7fa fcbc 	bl	800016c <__adddf3>
 80057f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057f8:	4604      	mov	r4, r0
 80057fa:	460d      	mov	r5, r1
 80057fc:	f7fb f8fc 	bl	80009f8 <__aeabi_dcmpgt>
 8005800:	b9c0      	cbnz	r0, 8005834 <_dtoa_r+0x6c4>
 8005802:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005806:	4620      	mov	r0, r4
 8005808:	4629      	mov	r1, r5
 800580a:	f7fb f8cd 	bl	80009a8 <__aeabi_dcmpeq>
 800580e:	b110      	cbz	r0, 8005816 <_dtoa_r+0x6a6>
 8005810:	f018 0f01 	tst.w	r8, #1
 8005814:	d10e      	bne.n	8005834 <_dtoa_r+0x6c4>
 8005816:	4648      	mov	r0, r9
 8005818:	9903      	ldr	r1, [sp, #12]
 800581a:	f000 fbbb 	bl	8005f94 <_Bfree>
 800581e:	2300      	movs	r3, #0
 8005820:	7033      	strb	r3, [r6, #0]
 8005822:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005824:	3701      	adds	r7, #1
 8005826:	601f      	str	r7, [r3, #0]
 8005828:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800582a:	2b00      	cmp	r3, #0
 800582c:	f000 824b 	beq.w	8005cc6 <_dtoa_r+0xb56>
 8005830:	601e      	str	r6, [r3, #0]
 8005832:	e248      	b.n	8005cc6 <_dtoa_r+0xb56>
 8005834:	46b8      	mov	r8, r7
 8005836:	4633      	mov	r3, r6
 8005838:	461e      	mov	r6, r3
 800583a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800583e:	2a39      	cmp	r2, #57	@ 0x39
 8005840:	d106      	bne.n	8005850 <_dtoa_r+0x6e0>
 8005842:	459a      	cmp	sl, r3
 8005844:	d1f8      	bne.n	8005838 <_dtoa_r+0x6c8>
 8005846:	2230      	movs	r2, #48	@ 0x30
 8005848:	f108 0801 	add.w	r8, r8, #1
 800584c:	f88a 2000 	strb.w	r2, [sl]
 8005850:	781a      	ldrb	r2, [r3, #0]
 8005852:	3201      	adds	r2, #1
 8005854:	701a      	strb	r2, [r3, #0]
 8005856:	e7a0      	b.n	800579a <_dtoa_r+0x62a>
 8005858:	2200      	movs	r2, #0
 800585a:	4b6f      	ldr	r3, [pc, #444]	@ (8005a18 <_dtoa_r+0x8a8>)
 800585c:	f7fa fe3c 	bl	80004d8 <__aeabi_dmul>
 8005860:	2200      	movs	r2, #0
 8005862:	2300      	movs	r3, #0
 8005864:	4604      	mov	r4, r0
 8005866:	460d      	mov	r5, r1
 8005868:	f7fb f89e 	bl	80009a8 <__aeabi_dcmpeq>
 800586c:	2800      	cmp	r0, #0
 800586e:	d09f      	beq.n	80057b0 <_dtoa_r+0x640>
 8005870:	e7d1      	b.n	8005816 <_dtoa_r+0x6a6>
 8005872:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005874:	2a00      	cmp	r2, #0
 8005876:	f000 80ea 	beq.w	8005a4e <_dtoa_r+0x8de>
 800587a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800587c:	2a01      	cmp	r2, #1
 800587e:	f300 80cd 	bgt.w	8005a1c <_dtoa_r+0x8ac>
 8005882:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005884:	2a00      	cmp	r2, #0
 8005886:	f000 80c1 	beq.w	8005a0c <_dtoa_r+0x89c>
 800588a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800588e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005890:	9e04      	ldr	r6, [sp, #16]
 8005892:	9a04      	ldr	r2, [sp, #16]
 8005894:	2101      	movs	r1, #1
 8005896:	441a      	add	r2, r3
 8005898:	9204      	str	r2, [sp, #16]
 800589a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800589c:	4648      	mov	r0, r9
 800589e:	441a      	add	r2, r3
 80058a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80058a2:	f000 fc75 	bl	8006190 <__i2b>
 80058a6:	4605      	mov	r5, r0
 80058a8:	b166      	cbz	r6, 80058c4 <_dtoa_r+0x754>
 80058aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	dd09      	ble.n	80058c4 <_dtoa_r+0x754>
 80058b0:	42b3      	cmp	r3, r6
 80058b2:	bfa8      	it	ge
 80058b4:	4633      	movge	r3, r6
 80058b6:	9a04      	ldr	r2, [sp, #16]
 80058b8:	1af6      	subs	r6, r6, r3
 80058ba:	1ad2      	subs	r2, r2, r3
 80058bc:	9204      	str	r2, [sp, #16]
 80058be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80058c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058c6:	b30b      	cbz	r3, 800590c <_dtoa_r+0x79c>
 80058c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 80c6 	beq.w	8005a5c <_dtoa_r+0x8ec>
 80058d0:	2c00      	cmp	r4, #0
 80058d2:	f000 80c0 	beq.w	8005a56 <_dtoa_r+0x8e6>
 80058d6:	4629      	mov	r1, r5
 80058d8:	4622      	mov	r2, r4
 80058da:	4648      	mov	r0, r9
 80058dc:	f000 fd10 	bl	8006300 <__pow5mult>
 80058e0:	9a03      	ldr	r2, [sp, #12]
 80058e2:	4601      	mov	r1, r0
 80058e4:	4605      	mov	r5, r0
 80058e6:	4648      	mov	r0, r9
 80058e8:	f000 fc68 	bl	80061bc <__multiply>
 80058ec:	9903      	ldr	r1, [sp, #12]
 80058ee:	4680      	mov	r8, r0
 80058f0:	4648      	mov	r0, r9
 80058f2:	f000 fb4f 	bl	8005f94 <_Bfree>
 80058f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058f8:	1b1b      	subs	r3, r3, r4
 80058fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80058fc:	f000 80b1 	beq.w	8005a62 <_dtoa_r+0x8f2>
 8005900:	4641      	mov	r1, r8
 8005902:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005904:	4648      	mov	r0, r9
 8005906:	f000 fcfb 	bl	8006300 <__pow5mult>
 800590a:	9003      	str	r0, [sp, #12]
 800590c:	2101      	movs	r1, #1
 800590e:	4648      	mov	r0, r9
 8005910:	f000 fc3e 	bl	8006190 <__i2b>
 8005914:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005916:	4604      	mov	r4, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 81d8 	beq.w	8005cce <_dtoa_r+0xb5e>
 800591e:	461a      	mov	r2, r3
 8005920:	4601      	mov	r1, r0
 8005922:	4648      	mov	r0, r9
 8005924:	f000 fcec 	bl	8006300 <__pow5mult>
 8005928:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800592a:	4604      	mov	r4, r0
 800592c:	2b01      	cmp	r3, #1
 800592e:	f300 809f 	bgt.w	8005a70 <_dtoa_r+0x900>
 8005932:	9b06      	ldr	r3, [sp, #24]
 8005934:	2b00      	cmp	r3, #0
 8005936:	f040 8097 	bne.w	8005a68 <_dtoa_r+0x8f8>
 800593a:	9b07      	ldr	r3, [sp, #28]
 800593c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005940:	2b00      	cmp	r3, #0
 8005942:	f040 8093 	bne.w	8005a6c <_dtoa_r+0x8fc>
 8005946:	9b07      	ldr	r3, [sp, #28]
 8005948:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800594c:	0d1b      	lsrs	r3, r3, #20
 800594e:	051b      	lsls	r3, r3, #20
 8005950:	b133      	cbz	r3, 8005960 <_dtoa_r+0x7f0>
 8005952:	9b04      	ldr	r3, [sp, #16]
 8005954:	3301      	adds	r3, #1
 8005956:	9304      	str	r3, [sp, #16]
 8005958:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800595a:	3301      	adds	r3, #1
 800595c:	9309      	str	r3, [sp, #36]	@ 0x24
 800595e:	2301      	movs	r3, #1
 8005960:	930a      	str	r3, [sp, #40]	@ 0x28
 8005962:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 81b8 	beq.w	8005cda <_dtoa_r+0xb6a>
 800596a:	6923      	ldr	r3, [r4, #16]
 800596c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005970:	6918      	ldr	r0, [r3, #16]
 8005972:	f000 fbc1 	bl	80060f8 <__hi0bits>
 8005976:	f1c0 0020 	rsb	r0, r0, #32
 800597a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800597c:	4418      	add	r0, r3
 800597e:	f010 001f 	ands.w	r0, r0, #31
 8005982:	f000 8082 	beq.w	8005a8a <_dtoa_r+0x91a>
 8005986:	f1c0 0320 	rsb	r3, r0, #32
 800598a:	2b04      	cmp	r3, #4
 800598c:	dd73      	ble.n	8005a76 <_dtoa_r+0x906>
 800598e:	9b04      	ldr	r3, [sp, #16]
 8005990:	f1c0 001c 	rsb	r0, r0, #28
 8005994:	4403      	add	r3, r0
 8005996:	9304      	str	r3, [sp, #16]
 8005998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800599a:	4406      	add	r6, r0
 800599c:	4403      	add	r3, r0
 800599e:	9309      	str	r3, [sp, #36]	@ 0x24
 80059a0:	9b04      	ldr	r3, [sp, #16]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	dd05      	ble.n	80059b2 <_dtoa_r+0x842>
 80059a6:	461a      	mov	r2, r3
 80059a8:	4648      	mov	r0, r9
 80059aa:	9903      	ldr	r1, [sp, #12]
 80059ac:	f000 fd02 	bl	80063b4 <__lshift>
 80059b0:	9003      	str	r0, [sp, #12]
 80059b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	dd05      	ble.n	80059c4 <_dtoa_r+0x854>
 80059b8:	4621      	mov	r1, r4
 80059ba:	461a      	mov	r2, r3
 80059bc:	4648      	mov	r0, r9
 80059be:	f000 fcf9 	bl	80063b4 <__lshift>
 80059c2:	4604      	mov	r4, r0
 80059c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d061      	beq.n	8005a8e <_dtoa_r+0x91e>
 80059ca:	4621      	mov	r1, r4
 80059cc:	9803      	ldr	r0, [sp, #12]
 80059ce:	f000 fd5d 	bl	800648c <__mcmp>
 80059d2:	2800      	cmp	r0, #0
 80059d4:	da5b      	bge.n	8005a8e <_dtoa_r+0x91e>
 80059d6:	2300      	movs	r3, #0
 80059d8:	220a      	movs	r2, #10
 80059da:	4648      	mov	r0, r9
 80059dc:	9903      	ldr	r1, [sp, #12]
 80059de:	f000 fafb 	bl	8005fd8 <__multadd>
 80059e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80059e4:	f107 38ff 	add.w	r8, r7, #4294967295
 80059e8:	9003      	str	r0, [sp, #12]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f000 8177 	beq.w	8005cde <_dtoa_r+0xb6e>
 80059f0:	4629      	mov	r1, r5
 80059f2:	2300      	movs	r3, #0
 80059f4:	220a      	movs	r2, #10
 80059f6:	4648      	mov	r0, r9
 80059f8:	f000 faee 	bl	8005fd8 <__multadd>
 80059fc:	f1bb 0f00 	cmp.w	fp, #0
 8005a00:	4605      	mov	r5, r0
 8005a02:	dc6f      	bgt.n	8005ae4 <_dtoa_r+0x974>
 8005a04:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	dc49      	bgt.n	8005a9e <_dtoa_r+0x92e>
 8005a0a:	e06b      	b.n	8005ae4 <_dtoa_r+0x974>
 8005a0c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005a0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005a12:	e73c      	b.n	800588e <_dtoa_r+0x71e>
 8005a14:	3fe00000 	.word	0x3fe00000
 8005a18:	40240000 	.word	0x40240000
 8005a1c:	9b08      	ldr	r3, [sp, #32]
 8005a1e:	1e5c      	subs	r4, r3, #1
 8005a20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a22:	42a3      	cmp	r3, r4
 8005a24:	db09      	blt.n	8005a3a <_dtoa_r+0x8ca>
 8005a26:	1b1c      	subs	r4, r3, r4
 8005a28:	9b08      	ldr	r3, [sp, #32]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f6bf af30 	bge.w	8005890 <_dtoa_r+0x720>
 8005a30:	9b04      	ldr	r3, [sp, #16]
 8005a32:	9a08      	ldr	r2, [sp, #32]
 8005a34:	1a9e      	subs	r6, r3, r2
 8005a36:	2300      	movs	r3, #0
 8005a38:	e72b      	b.n	8005892 <_dtoa_r+0x722>
 8005a3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005a3e:	1ae3      	subs	r3, r4, r3
 8005a40:	441a      	add	r2, r3
 8005a42:	940a      	str	r4, [sp, #40]	@ 0x28
 8005a44:	9e04      	ldr	r6, [sp, #16]
 8005a46:	2400      	movs	r4, #0
 8005a48:	9b08      	ldr	r3, [sp, #32]
 8005a4a:	920e      	str	r2, [sp, #56]	@ 0x38
 8005a4c:	e721      	b.n	8005892 <_dtoa_r+0x722>
 8005a4e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005a50:	9e04      	ldr	r6, [sp, #16]
 8005a52:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005a54:	e728      	b.n	80058a8 <_dtoa_r+0x738>
 8005a56:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005a5a:	e751      	b.n	8005900 <_dtoa_r+0x790>
 8005a5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005a5e:	9903      	ldr	r1, [sp, #12]
 8005a60:	e750      	b.n	8005904 <_dtoa_r+0x794>
 8005a62:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a66:	e751      	b.n	800590c <_dtoa_r+0x79c>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	e779      	b.n	8005960 <_dtoa_r+0x7f0>
 8005a6c:	9b06      	ldr	r3, [sp, #24]
 8005a6e:	e777      	b.n	8005960 <_dtoa_r+0x7f0>
 8005a70:	2300      	movs	r3, #0
 8005a72:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a74:	e779      	b.n	800596a <_dtoa_r+0x7fa>
 8005a76:	d093      	beq.n	80059a0 <_dtoa_r+0x830>
 8005a78:	9a04      	ldr	r2, [sp, #16]
 8005a7a:	331c      	adds	r3, #28
 8005a7c:	441a      	add	r2, r3
 8005a7e:	9204      	str	r2, [sp, #16]
 8005a80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a82:	441e      	add	r6, r3
 8005a84:	441a      	add	r2, r3
 8005a86:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a88:	e78a      	b.n	80059a0 <_dtoa_r+0x830>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	e7f4      	b.n	8005a78 <_dtoa_r+0x908>
 8005a8e:	9b08      	ldr	r3, [sp, #32]
 8005a90:	46b8      	mov	r8, r7
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	dc20      	bgt.n	8005ad8 <_dtoa_r+0x968>
 8005a96:	469b      	mov	fp, r3
 8005a98:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	dd1e      	ble.n	8005adc <_dtoa_r+0x96c>
 8005a9e:	f1bb 0f00 	cmp.w	fp, #0
 8005aa2:	f47f adb1 	bne.w	8005608 <_dtoa_r+0x498>
 8005aa6:	4621      	mov	r1, r4
 8005aa8:	465b      	mov	r3, fp
 8005aaa:	2205      	movs	r2, #5
 8005aac:	4648      	mov	r0, r9
 8005aae:	f000 fa93 	bl	8005fd8 <__multadd>
 8005ab2:	4601      	mov	r1, r0
 8005ab4:	4604      	mov	r4, r0
 8005ab6:	9803      	ldr	r0, [sp, #12]
 8005ab8:	f000 fce8 	bl	800648c <__mcmp>
 8005abc:	2800      	cmp	r0, #0
 8005abe:	f77f ada3 	ble.w	8005608 <_dtoa_r+0x498>
 8005ac2:	4656      	mov	r6, sl
 8005ac4:	2331      	movs	r3, #49	@ 0x31
 8005ac6:	f108 0801 	add.w	r8, r8, #1
 8005aca:	f806 3b01 	strb.w	r3, [r6], #1
 8005ace:	e59f      	b.n	8005610 <_dtoa_r+0x4a0>
 8005ad0:	46b8      	mov	r8, r7
 8005ad2:	9c08      	ldr	r4, [sp, #32]
 8005ad4:	4625      	mov	r5, r4
 8005ad6:	e7f4      	b.n	8005ac2 <_dtoa_r+0x952>
 8005ad8:	f8dd b020 	ldr.w	fp, [sp, #32]
 8005adc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 8101 	beq.w	8005ce6 <_dtoa_r+0xb76>
 8005ae4:	2e00      	cmp	r6, #0
 8005ae6:	dd05      	ble.n	8005af4 <_dtoa_r+0x984>
 8005ae8:	4629      	mov	r1, r5
 8005aea:	4632      	mov	r2, r6
 8005aec:	4648      	mov	r0, r9
 8005aee:	f000 fc61 	bl	80063b4 <__lshift>
 8005af2:	4605      	mov	r5, r0
 8005af4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d05c      	beq.n	8005bb4 <_dtoa_r+0xa44>
 8005afa:	4648      	mov	r0, r9
 8005afc:	6869      	ldr	r1, [r5, #4]
 8005afe:	f000 fa09 	bl	8005f14 <_Balloc>
 8005b02:	4606      	mov	r6, r0
 8005b04:	b928      	cbnz	r0, 8005b12 <_dtoa_r+0x9a2>
 8005b06:	4602      	mov	r2, r0
 8005b08:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005b0c:	4b80      	ldr	r3, [pc, #512]	@ (8005d10 <_dtoa_r+0xba0>)
 8005b0e:	f7ff bb43 	b.w	8005198 <_dtoa_r+0x28>
 8005b12:	692a      	ldr	r2, [r5, #16]
 8005b14:	f105 010c 	add.w	r1, r5, #12
 8005b18:	3202      	adds	r2, #2
 8005b1a:	0092      	lsls	r2, r2, #2
 8005b1c:	300c      	adds	r0, #12
 8005b1e:	f001 ff51 	bl	80079c4 <memcpy>
 8005b22:	2201      	movs	r2, #1
 8005b24:	4631      	mov	r1, r6
 8005b26:	4648      	mov	r0, r9
 8005b28:	f000 fc44 	bl	80063b4 <__lshift>
 8005b2c:	462f      	mov	r7, r5
 8005b2e:	4605      	mov	r5, r0
 8005b30:	f10a 0301 	add.w	r3, sl, #1
 8005b34:	9304      	str	r3, [sp, #16]
 8005b36:	eb0a 030b 	add.w	r3, sl, fp
 8005b3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b3c:	9b06      	ldr	r3, [sp, #24]
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b44:	9b04      	ldr	r3, [sp, #16]
 8005b46:	4621      	mov	r1, r4
 8005b48:	9803      	ldr	r0, [sp, #12]
 8005b4a:	f103 3bff 	add.w	fp, r3, #4294967295
 8005b4e:	f7ff fa87 	bl	8005060 <quorem>
 8005b52:	4603      	mov	r3, r0
 8005b54:	4639      	mov	r1, r7
 8005b56:	3330      	adds	r3, #48	@ 0x30
 8005b58:	9006      	str	r0, [sp, #24]
 8005b5a:	9803      	ldr	r0, [sp, #12]
 8005b5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b5e:	f000 fc95 	bl	800648c <__mcmp>
 8005b62:	462a      	mov	r2, r5
 8005b64:	9008      	str	r0, [sp, #32]
 8005b66:	4621      	mov	r1, r4
 8005b68:	4648      	mov	r0, r9
 8005b6a:	f000 fcab 	bl	80064c4 <__mdiff>
 8005b6e:	68c2      	ldr	r2, [r0, #12]
 8005b70:	4606      	mov	r6, r0
 8005b72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b74:	bb02      	cbnz	r2, 8005bb8 <_dtoa_r+0xa48>
 8005b76:	4601      	mov	r1, r0
 8005b78:	9803      	ldr	r0, [sp, #12]
 8005b7a:	f000 fc87 	bl	800648c <__mcmp>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b82:	4631      	mov	r1, r6
 8005b84:	4648      	mov	r0, r9
 8005b86:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8005b8a:	f000 fa03 	bl	8005f94 <_Bfree>
 8005b8e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005b90:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005b92:	9e04      	ldr	r6, [sp, #16]
 8005b94:	ea42 0103 	orr.w	r1, r2, r3
 8005b98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b9a:	4319      	orrs	r1, r3
 8005b9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b9e:	d10d      	bne.n	8005bbc <_dtoa_r+0xa4c>
 8005ba0:	2b39      	cmp	r3, #57	@ 0x39
 8005ba2:	d027      	beq.n	8005bf4 <_dtoa_r+0xa84>
 8005ba4:	9a08      	ldr	r2, [sp, #32]
 8005ba6:	2a00      	cmp	r2, #0
 8005ba8:	dd01      	ble.n	8005bae <_dtoa_r+0xa3e>
 8005baa:	9b06      	ldr	r3, [sp, #24]
 8005bac:	3331      	adds	r3, #49	@ 0x31
 8005bae:	f88b 3000 	strb.w	r3, [fp]
 8005bb2:	e52e      	b.n	8005612 <_dtoa_r+0x4a2>
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	e7b9      	b.n	8005b2c <_dtoa_r+0x9bc>
 8005bb8:	2201      	movs	r2, #1
 8005bba:	e7e2      	b.n	8005b82 <_dtoa_r+0xa12>
 8005bbc:	9908      	ldr	r1, [sp, #32]
 8005bbe:	2900      	cmp	r1, #0
 8005bc0:	db04      	blt.n	8005bcc <_dtoa_r+0xa5c>
 8005bc2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8005bc4:	4301      	orrs	r1, r0
 8005bc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005bc8:	4301      	orrs	r1, r0
 8005bca:	d120      	bne.n	8005c0e <_dtoa_r+0xa9e>
 8005bcc:	2a00      	cmp	r2, #0
 8005bce:	ddee      	ble.n	8005bae <_dtoa_r+0xa3e>
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	9903      	ldr	r1, [sp, #12]
 8005bd4:	4648      	mov	r0, r9
 8005bd6:	9304      	str	r3, [sp, #16]
 8005bd8:	f000 fbec 	bl	80063b4 <__lshift>
 8005bdc:	4621      	mov	r1, r4
 8005bde:	9003      	str	r0, [sp, #12]
 8005be0:	f000 fc54 	bl	800648c <__mcmp>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	9b04      	ldr	r3, [sp, #16]
 8005be8:	dc02      	bgt.n	8005bf0 <_dtoa_r+0xa80>
 8005bea:	d1e0      	bne.n	8005bae <_dtoa_r+0xa3e>
 8005bec:	07da      	lsls	r2, r3, #31
 8005bee:	d5de      	bpl.n	8005bae <_dtoa_r+0xa3e>
 8005bf0:	2b39      	cmp	r3, #57	@ 0x39
 8005bf2:	d1da      	bne.n	8005baa <_dtoa_r+0xa3a>
 8005bf4:	2339      	movs	r3, #57	@ 0x39
 8005bf6:	f88b 3000 	strb.w	r3, [fp]
 8005bfa:	4633      	mov	r3, r6
 8005bfc:	461e      	mov	r6, r3
 8005bfe:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005c02:	3b01      	subs	r3, #1
 8005c04:	2a39      	cmp	r2, #57	@ 0x39
 8005c06:	d04e      	beq.n	8005ca6 <_dtoa_r+0xb36>
 8005c08:	3201      	adds	r2, #1
 8005c0a:	701a      	strb	r2, [r3, #0]
 8005c0c:	e501      	b.n	8005612 <_dtoa_r+0x4a2>
 8005c0e:	2a00      	cmp	r2, #0
 8005c10:	dd03      	ble.n	8005c1a <_dtoa_r+0xaaa>
 8005c12:	2b39      	cmp	r3, #57	@ 0x39
 8005c14:	d0ee      	beq.n	8005bf4 <_dtoa_r+0xa84>
 8005c16:	3301      	adds	r3, #1
 8005c18:	e7c9      	b.n	8005bae <_dtoa_r+0xa3e>
 8005c1a:	9a04      	ldr	r2, [sp, #16]
 8005c1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005c1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005c22:	428a      	cmp	r2, r1
 8005c24:	d028      	beq.n	8005c78 <_dtoa_r+0xb08>
 8005c26:	2300      	movs	r3, #0
 8005c28:	220a      	movs	r2, #10
 8005c2a:	9903      	ldr	r1, [sp, #12]
 8005c2c:	4648      	mov	r0, r9
 8005c2e:	f000 f9d3 	bl	8005fd8 <__multadd>
 8005c32:	42af      	cmp	r7, r5
 8005c34:	9003      	str	r0, [sp, #12]
 8005c36:	f04f 0300 	mov.w	r3, #0
 8005c3a:	f04f 020a 	mov.w	r2, #10
 8005c3e:	4639      	mov	r1, r7
 8005c40:	4648      	mov	r0, r9
 8005c42:	d107      	bne.n	8005c54 <_dtoa_r+0xae4>
 8005c44:	f000 f9c8 	bl	8005fd8 <__multadd>
 8005c48:	4607      	mov	r7, r0
 8005c4a:	4605      	mov	r5, r0
 8005c4c:	9b04      	ldr	r3, [sp, #16]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	9304      	str	r3, [sp, #16]
 8005c52:	e777      	b.n	8005b44 <_dtoa_r+0x9d4>
 8005c54:	f000 f9c0 	bl	8005fd8 <__multadd>
 8005c58:	4629      	mov	r1, r5
 8005c5a:	4607      	mov	r7, r0
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	220a      	movs	r2, #10
 8005c60:	4648      	mov	r0, r9
 8005c62:	f000 f9b9 	bl	8005fd8 <__multadd>
 8005c66:	4605      	mov	r5, r0
 8005c68:	e7f0      	b.n	8005c4c <_dtoa_r+0xadc>
 8005c6a:	f1bb 0f00 	cmp.w	fp, #0
 8005c6e:	bfcc      	ite	gt
 8005c70:	465e      	movgt	r6, fp
 8005c72:	2601      	movle	r6, #1
 8005c74:	2700      	movs	r7, #0
 8005c76:	4456      	add	r6, sl
 8005c78:	2201      	movs	r2, #1
 8005c7a:	9903      	ldr	r1, [sp, #12]
 8005c7c:	4648      	mov	r0, r9
 8005c7e:	9304      	str	r3, [sp, #16]
 8005c80:	f000 fb98 	bl	80063b4 <__lshift>
 8005c84:	4621      	mov	r1, r4
 8005c86:	9003      	str	r0, [sp, #12]
 8005c88:	f000 fc00 	bl	800648c <__mcmp>
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	dcb4      	bgt.n	8005bfa <_dtoa_r+0xa8a>
 8005c90:	d102      	bne.n	8005c98 <_dtoa_r+0xb28>
 8005c92:	9b04      	ldr	r3, [sp, #16]
 8005c94:	07db      	lsls	r3, r3, #31
 8005c96:	d4b0      	bmi.n	8005bfa <_dtoa_r+0xa8a>
 8005c98:	4633      	mov	r3, r6
 8005c9a:	461e      	mov	r6, r3
 8005c9c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ca0:	2a30      	cmp	r2, #48	@ 0x30
 8005ca2:	d0fa      	beq.n	8005c9a <_dtoa_r+0xb2a>
 8005ca4:	e4b5      	b.n	8005612 <_dtoa_r+0x4a2>
 8005ca6:	459a      	cmp	sl, r3
 8005ca8:	d1a8      	bne.n	8005bfc <_dtoa_r+0xa8c>
 8005caa:	2331      	movs	r3, #49	@ 0x31
 8005cac:	f108 0801 	add.w	r8, r8, #1
 8005cb0:	f88a 3000 	strb.w	r3, [sl]
 8005cb4:	e4ad      	b.n	8005612 <_dtoa_r+0x4a2>
 8005cb6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005cb8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005d14 <_dtoa_r+0xba4>
 8005cbc:	b11b      	cbz	r3, 8005cc6 <_dtoa_r+0xb56>
 8005cbe:	f10a 0308 	add.w	r3, sl, #8
 8005cc2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005cc4:	6013      	str	r3, [r2, #0]
 8005cc6:	4650      	mov	r0, sl
 8005cc8:	b017      	add	sp, #92	@ 0x5c
 8005cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	f77f ae2e 	ble.w	8005932 <_dtoa_r+0x7c2>
 8005cd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005cd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cda:	2001      	movs	r0, #1
 8005cdc:	e64d      	b.n	800597a <_dtoa_r+0x80a>
 8005cde:	f1bb 0f00 	cmp.w	fp, #0
 8005ce2:	f77f aed9 	ble.w	8005a98 <_dtoa_r+0x928>
 8005ce6:	4656      	mov	r6, sl
 8005ce8:	4621      	mov	r1, r4
 8005cea:	9803      	ldr	r0, [sp, #12]
 8005cec:	f7ff f9b8 	bl	8005060 <quorem>
 8005cf0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005cf4:	f806 3b01 	strb.w	r3, [r6], #1
 8005cf8:	eba6 020a 	sub.w	r2, r6, sl
 8005cfc:	4593      	cmp	fp, r2
 8005cfe:	ddb4      	ble.n	8005c6a <_dtoa_r+0xafa>
 8005d00:	2300      	movs	r3, #0
 8005d02:	220a      	movs	r2, #10
 8005d04:	4648      	mov	r0, r9
 8005d06:	9903      	ldr	r1, [sp, #12]
 8005d08:	f000 f966 	bl	8005fd8 <__multadd>
 8005d0c:	9003      	str	r0, [sp, #12]
 8005d0e:	e7eb      	b.n	8005ce8 <_dtoa_r+0xb78>
 8005d10:	08008cab 	.word	0x08008cab
 8005d14:	08008c2f 	.word	0x08008c2f

08005d18 <_free_r>:
 8005d18:	b538      	push	{r3, r4, r5, lr}
 8005d1a:	4605      	mov	r5, r0
 8005d1c:	2900      	cmp	r1, #0
 8005d1e:	d040      	beq.n	8005da2 <_free_r+0x8a>
 8005d20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d24:	1f0c      	subs	r4, r1, #4
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	bfb8      	it	lt
 8005d2a:	18e4      	addlt	r4, r4, r3
 8005d2c:	f000 f8e6 	bl	8005efc <__malloc_lock>
 8005d30:	4a1c      	ldr	r2, [pc, #112]	@ (8005da4 <_free_r+0x8c>)
 8005d32:	6813      	ldr	r3, [r2, #0]
 8005d34:	b933      	cbnz	r3, 8005d44 <_free_r+0x2c>
 8005d36:	6063      	str	r3, [r4, #4]
 8005d38:	6014      	str	r4, [r2, #0]
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d40:	f000 b8e2 	b.w	8005f08 <__malloc_unlock>
 8005d44:	42a3      	cmp	r3, r4
 8005d46:	d908      	bls.n	8005d5a <_free_r+0x42>
 8005d48:	6820      	ldr	r0, [r4, #0]
 8005d4a:	1821      	adds	r1, r4, r0
 8005d4c:	428b      	cmp	r3, r1
 8005d4e:	bf01      	itttt	eq
 8005d50:	6819      	ldreq	r1, [r3, #0]
 8005d52:	685b      	ldreq	r3, [r3, #4]
 8005d54:	1809      	addeq	r1, r1, r0
 8005d56:	6021      	streq	r1, [r4, #0]
 8005d58:	e7ed      	b.n	8005d36 <_free_r+0x1e>
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	b10b      	cbz	r3, 8005d64 <_free_r+0x4c>
 8005d60:	42a3      	cmp	r3, r4
 8005d62:	d9fa      	bls.n	8005d5a <_free_r+0x42>
 8005d64:	6811      	ldr	r1, [r2, #0]
 8005d66:	1850      	adds	r0, r2, r1
 8005d68:	42a0      	cmp	r0, r4
 8005d6a:	d10b      	bne.n	8005d84 <_free_r+0x6c>
 8005d6c:	6820      	ldr	r0, [r4, #0]
 8005d6e:	4401      	add	r1, r0
 8005d70:	1850      	adds	r0, r2, r1
 8005d72:	4283      	cmp	r3, r0
 8005d74:	6011      	str	r1, [r2, #0]
 8005d76:	d1e0      	bne.n	8005d3a <_free_r+0x22>
 8005d78:	6818      	ldr	r0, [r3, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	4408      	add	r0, r1
 8005d7e:	6010      	str	r0, [r2, #0]
 8005d80:	6053      	str	r3, [r2, #4]
 8005d82:	e7da      	b.n	8005d3a <_free_r+0x22>
 8005d84:	d902      	bls.n	8005d8c <_free_r+0x74>
 8005d86:	230c      	movs	r3, #12
 8005d88:	602b      	str	r3, [r5, #0]
 8005d8a:	e7d6      	b.n	8005d3a <_free_r+0x22>
 8005d8c:	6820      	ldr	r0, [r4, #0]
 8005d8e:	1821      	adds	r1, r4, r0
 8005d90:	428b      	cmp	r3, r1
 8005d92:	bf01      	itttt	eq
 8005d94:	6819      	ldreq	r1, [r3, #0]
 8005d96:	685b      	ldreq	r3, [r3, #4]
 8005d98:	1809      	addeq	r1, r1, r0
 8005d9a:	6021      	streq	r1, [r4, #0]
 8005d9c:	6063      	str	r3, [r4, #4]
 8005d9e:	6054      	str	r4, [r2, #4]
 8005da0:	e7cb      	b.n	8005d3a <_free_r+0x22>
 8005da2:	bd38      	pop	{r3, r4, r5, pc}
 8005da4:	2000042c 	.word	0x2000042c

08005da8 <malloc>:
 8005da8:	4b02      	ldr	r3, [pc, #8]	@ (8005db4 <malloc+0xc>)
 8005daa:	4601      	mov	r1, r0
 8005dac:	6818      	ldr	r0, [r3, #0]
 8005dae:	f000 b825 	b.w	8005dfc <_malloc_r>
 8005db2:	bf00      	nop
 8005db4:	2000001c 	.word	0x2000001c

08005db8 <sbrk_aligned>:
 8005db8:	b570      	push	{r4, r5, r6, lr}
 8005dba:	4e0f      	ldr	r6, [pc, #60]	@ (8005df8 <sbrk_aligned+0x40>)
 8005dbc:	460c      	mov	r4, r1
 8005dbe:	6831      	ldr	r1, [r6, #0]
 8005dc0:	4605      	mov	r5, r0
 8005dc2:	b911      	cbnz	r1, 8005dca <sbrk_aligned+0x12>
 8005dc4:	f001 fdee 	bl	80079a4 <_sbrk_r>
 8005dc8:	6030      	str	r0, [r6, #0]
 8005dca:	4621      	mov	r1, r4
 8005dcc:	4628      	mov	r0, r5
 8005dce:	f001 fde9 	bl	80079a4 <_sbrk_r>
 8005dd2:	1c43      	adds	r3, r0, #1
 8005dd4:	d103      	bne.n	8005dde <sbrk_aligned+0x26>
 8005dd6:	f04f 34ff 	mov.w	r4, #4294967295
 8005dda:	4620      	mov	r0, r4
 8005ddc:	bd70      	pop	{r4, r5, r6, pc}
 8005dde:	1cc4      	adds	r4, r0, #3
 8005de0:	f024 0403 	bic.w	r4, r4, #3
 8005de4:	42a0      	cmp	r0, r4
 8005de6:	d0f8      	beq.n	8005dda <sbrk_aligned+0x22>
 8005de8:	1a21      	subs	r1, r4, r0
 8005dea:	4628      	mov	r0, r5
 8005dec:	f001 fdda 	bl	80079a4 <_sbrk_r>
 8005df0:	3001      	adds	r0, #1
 8005df2:	d1f2      	bne.n	8005dda <sbrk_aligned+0x22>
 8005df4:	e7ef      	b.n	8005dd6 <sbrk_aligned+0x1e>
 8005df6:	bf00      	nop
 8005df8:	20000428 	.word	0x20000428

08005dfc <_malloc_r>:
 8005dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e00:	1ccd      	adds	r5, r1, #3
 8005e02:	f025 0503 	bic.w	r5, r5, #3
 8005e06:	3508      	adds	r5, #8
 8005e08:	2d0c      	cmp	r5, #12
 8005e0a:	bf38      	it	cc
 8005e0c:	250c      	movcc	r5, #12
 8005e0e:	2d00      	cmp	r5, #0
 8005e10:	4606      	mov	r6, r0
 8005e12:	db01      	blt.n	8005e18 <_malloc_r+0x1c>
 8005e14:	42a9      	cmp	r1, r5
 8005e16:	d904      	bls.n	8005e22 <_malloc_r+0x26>
 8005e18:	230c      	movs	r3, #12
 8005e1a:	6033      	str	r3, [r6, #0]
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ef8 <_malloc_r+0xfc>
 8005e26:	f000 f869 	bl	8005efc <__malloc_lock>
 8005e2a:	f8d8 3000 	ldr.w	r3, [r8]
 8005e2e:	461c      	mov	r4, r3
 8005e30:	bb44      	cbnz	r4, 8005e84 <_malloc_r+0x88>
 8005e32:	4629      	mov	r1, r5
 8005e34:	4630      	mov	r0, r6
 8005e36:	f7ff ffbf 	bl	8005db8 <sbrk_aligned>
 8005e3a:	1c43      	adds	r3, r0, #1
 8005e3c:	4604      	mov	r4, r0
 8005e3e:	d158      	bne.n	8005ef2 <_malloc_r+0xf6>
 8005e40:	f8d8 4000 	ldr.w	r4, [r8]
 8005e44:	4627      	mov	r7, r4
 8005e46:	2f00      	cmp	r7, #0
 8005e48:	d143      	bne.n	8005ed2 <_malloc_r+0xd6>
 8005e4a:	2c00      	cmp	r4, #0
 8005e4c:	d04b      	beq.n	8005ee6 <_malloc_r+0xea>
 8005e4e:	6823      	ldr	r3, [r4, #0]
 8005e50:	4639      	mov	r1, r7
 8005e52:	4630      	mov	r0, r6
 8005e54:	eb04 0903 	add.w	r9, r4, r3
 8005e58:	f001 fda4 	bl	80079a4 <_sbrk_r>
 8005e5c:	4581      	cmp	r9, r0
 8005e5e:	d142      	bne.n	8005ee6 <_malloc_r+0xea>
 8005e60:	6821      	ldr	r1, [r4, #0]
 8005e62:	4630      	mov	r0, r6
 8005e64:	1a6d      	subs	r5, r5, r1
 8005e66:	4629      	mov	r1, r5
 8005e68:	f7ff ffa6 	bl	8005db8 <sbrk_aligned>
 8005e6c:	3001      	adds	r0, #1
 8005e6e:	d03a      	beq.n	8005ee6 <_malloc_r+0xea>
 8005e70:	6823      	ldr	r3, [r4, #0]
 8005e72:	442b      	add	r3, r5
 8005e74:	6023      	str	r3, [r4, #0]
 8005e76:	f8d8 3000 	ldr.w	r3, [r8]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	bb62      	cbnz	r2, 8005ed8 <_malloc_r+0xdc>
 8005e7e:	f8c8 7000 	str.w	r7, [r8]
 8005e82:	e00f      	b.n	8005ea4 <_malloc_r+0xa8>
 8005e84:	6822      	ldr	r2, [r4, #0]
 8005e86:	1b52      	subs	r2, r2, r5
 8005e88:	d420      	bmi.n	8005ecc <_malloc_r+0xd0>
 8005e8a:	2a0b      	cmp	r2, #11
 8005e8c:	d917      	bls.n	8005ebe <_malloc_r+0xc2>
 8005e8e:	1961      	adds	r1, r4, r5
 8005e90:	42a3      	cmp	r3, r4
 8005e92:	6025      	str	r5, [r4, #0]
 8005e94:	bf18      	it	ne
 8005e96:	6059      	strne	r1, [r3, #4]
 8005e98:	6863      	ldr	r3, [r4, #4]
 8005e9a:	bf08      	it	eq
 8005e9c:	f8c8 1000 	streq.w	r1, [r8]
 8005ea0:	5162      	str	r2, [r4, r5]
 8005ea2:	604b      	str	r3, [r1, #4]
 8005ea4:	4630      	mov	r0, r6
 8005ea6:	f000 f82f 	bl	8005f08 <__malloc_unlock>
 8005eaa:	f104 000b 	add.w	r0, r4, #11
 8005eae:	1d23      	adds	r3, r4, #4
 8005eb0:	f020 0007 	bic.w	r0, r0, #7
 8005eb4:	1ac2      	subs	r2, r0, r3
 8005eb6:	bf1c      	itt	ne
 8005eb8:	1a1b      	subne	r3, r3, r0
 8005eba:	50a3      	strne	r3, [r4, r2]
 8005ebc:	e7af      	b.n	8005e1e <_malloc_r+0x22>
 8005ebe:	6862      	ldr	r2, [r4, #4]
 8005ec0:	42a3      	cmp	r3, r4
 8005ec2:	bf0c      	ite	eq
 8005ec4:	f8c8 2000 	streq.w	r2, [r8]
 8005ec8:	605a      	strne	r2, [r3, #4]
 8005eca:	e7eb      	b.n	8005ea4 <_malloc_r+0xa8>
 8005ecc:	4623      	mov	r3, r4
 8005ece:	6864      	ldr	r4, [r4, #4]
 8005ed0:	e7ae      	b.n	8005e30 <_malloc_r+0x34>
 8005ed2:	463c      	mov	r4, r7
 8005ed4:	687f      	ldr	r7, [r7, #4]
 8005ed6:	e7b6      	b.n	8005e46 <_malloc_r+0x4a>
 8005ed8:	461a      	mov	r2, r3
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	42a3      	cmp	r3, r4
 8005ede:	d1fb      	bne.n	8005ed8 <_malloc_r+0xdc>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	6053      	str	r3, [r2, #4]
 8005ee4:	e7de      	b.n	8005ea4 <_malloc_r+0xa8>
 8005ee6:	230c      	movs	r3, #12
 8005ee8:	4630      	mov	r0, r6
 8005eea:	6033      	str	r3, [r6, #0]
 8005eec:	f000 f80c 	bl	8005f08 <__malloc_unlock>
 8005ef0:	e794      	b.n	8005e1c <_malloc_r+0x20>
 8005ef2:	6005      	str	r5, [r0, #0]
 8005ef4:	e7d6      	b.n	8005ea4 <_malloc_r+0xa8>
 8005ef6:	bf00      	nop
 8005ef8:	2000042c 	.word	0x2000042c

08005efc <__malloc_lock>:
 8005efc:	4801      	ldr	r0, [pc, #4]	@ (8005f04 <__malloc_lock+0x8>)
 8005efe:	f7ff b89a 	b.w	8005036 <__retarget_lock_acquire_recursive>
 8005f02:	bf00      	nop
 8005f04:	20000424 	.word	0x20000424

08005f08 <__malloc_unlock>:
 8005f08:	4801      	ldr	r0, [pc, #4]	@ (8005f10 <__malloc_unlock+0x8>)
 8005f0a:	f7ff b895 	b.w	8005038 <__retarget_lock_release_recursive>
 8005f0e:	bf00      	nop
 8005f10:	20000424 	.word	0x20000424

08005f14 <_Balloc>:
 8005f14:	b570      	push	{r4, r5, r6, lr}
 8005f16:	69c6      	ldr	r6, [r0, #28]
 8005f18:	4604      	mov	r4, r0
 8005f1a:	460d      	mov	r5, r1
 8005f1c:	b976      	cbnz	r6, 8005f3c <_Balloc+0x28>
 8005f1e:	2010      	movs	r0, #16
 8005f20:	f7ff ff42 	bl	8005da8 <malloc>
 8005f24:	4602      	mov	r2, r0
 8005f26:	61e0      	str	r0, [r4, #28]
 8005f28:	b920      	cbnz	r0, 8005f34 <_Balloc+0x20>
 8005f2a:	216b      	movs	r1, #107	@ 0x6b
 8005f2c:	4b17      	ldr	r3, [pc, #92]	@ (8005f8c <_Balloc+0x78>)
 8005f2e:	4818      	ldr	r0, [pc, #96]	@ (8005f90 <_Balloc+0x7c>)
 8005f30:	f001 fd5c 	bl	80079ec <__assert_func>
 8005f34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f38:	6006      	str	r6, [r0, #0]
 8005f3a:	60c6      	str	r6, [r0, #12]
 8005f3c:	69e6      	ldr	r6, [r4, #28]
 8005f3e:	68f3      	ldr	r3, [r6, #12]
 8005f40:	b183      	cbz	r3, 8005f64 <_Balloc+0x50>
 8005f42:	69e3      	ldr	r3, [r4, #28]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f4a:	b9b8      	cbnz	r0, 8005f7c <_Balloc+0x68>
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	fa01 f605 	lsl.w	r6, r1, r5
 8005f52:	1d72      	adds	r2, r6, #5
 8005f54:	4620      	mov	r0, r4
 8005f56:	0092      	lsls	r2, r2, #2
 8005f58:	f001 fd66 	bl	8007a28 <_calloc_r>
 8005f5c:	b160      	cbz	r0, 8005f78 <_Balloc+0x64>
 8005f5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005f62:	e00e      	b.n	8005f82 <_Balloc+0x6e>
 8005f64:	2221      	movs	r2, #33	@ 0x21
 8005f66:	2104      	movs	r1, #4
 8005f68:	4620      	mov	r0, r4
 8005f6a:	f001 fd5d 	bl	8007a28 <_calloc_r>
 8005f6e:	69e3      	ldr	r3, [r4, #28]
 8005f70:	60f0      	str	r0, [r6, #12]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1e4      	bne.n	8005f42 <_Balloc+0x2e>
 8005f78:	2000      	movs	r0, #0
 8005f7a:	bd70      	pop	{r4, r5, r6, pc}
 8005f7c:	6802      	ldr	r2, [r0, #0]
 8005f7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005f82:	2300      	movs	r3, #0
 8005f84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f88:	e7f7      	b.n	8005f7a <_Balloc+0x66>
 8005f8a:	bf00      	nop
 8005f8c:	08008c3c 	.word	0x08008c3c
 8005f90:	08008cbc 	.word	0x08008cbc

08005f94 <_Bfree>:
 8005f94:	b570      	push	{r4, r5, r6, lr}
 8005f96:	69c6      	ldr	r6, [r0, #28]
 8005f98:	4605      	mov	r5, r0
 8005f9a:	460c      	mov	r4, r1
 8005f9c:	b976      	cbnz	r6, 8005fbc <_Bfree+0x28>
 8005f9e:	2010      	movs	r0, #16
 8005fa0:	f7ff ff02 	bl	8005da8 <malloc>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	61e8      	str	r0, [r5, #28]
 8005fa8:	b920      	cbnz	r0, 8005fb4 <_Bfree+0x20>
 8005faa:	218f      	movs	r1, #143	@ 0x8f
 8005fac:	4b08      	ldr	r3, [pc, #32]	@ (8005fd0 <_Bfree+0x3c>)
 8005fae:	4809      	ldr	r0, [pc, #36]	@ (8005fd4 <_Bfree+0x40>)
 8005fb0:	f001 fd1c 	bl	80079ec <__assert_func>
 8005fb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fb8:	6006      	str	r6, [r0, #0]
 8005fba:	60c6      	str	r6, [r0, #12]
 8005fbc:	b13c      	cbz	r4, 8005fce <_Bfree+0x3a>
 8005fbe:	69eb      	ldr	r3, [r5, #28]
 8005fc0:	6862      	ldr	r2, [r4, #4]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fc8:	6021      	str	r1, [r4, #0]
 8005fca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005fce:	bd70      	pop	{r4, r5, r6, pc}
 8005fd0:	08008c3c 	.word	0x08008c3c
 8005fd4:	08008cbc 	.word	0x08008cbc

08005fd8 <__multadd>:
 8005fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fdc:	4607      	mov	r7, r0
 8005fde:	460c      	mov	r4, r1
 8005fe0:	461e      	mov	r6, r3
 8005fe2:	2000      	movs	r0, #0
 8005fe4:	690d      	ldr	r5, [r1, #16]
 8005fe6:	f101 0c14 	add.w	ip, r1, #20
 8005fea:	f8dc 3000 	ldr.w	r3, [ip]
 8005fee:	3001      	adds	r0, #1
 8005ff0:	b299      	uxth	r1, r3
 8005ff2:	fb02 6101 	mla	r1, r2, r1, r6
 8005ff6:	0c1e      	lsrs	r6, r3, #16
 8005ff8:	0c0b      	lsrs	r3, r1, #16
 8005ffa:	fb02 3306 	mla	r3, r2, r6, r3
 8005ffe:	b289      	uxth	r1, r1
 8006000:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006004:	4285      	cmp	r5, r0
 8006006:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800600a:	f84c 1b04 	str.w	r1, [ip], #4
 800600e:	dcec      	bgt.n	8005fea <__multadd+0x12>
 8006010:	b30e      	cbz	r6, 8006056 <__multadd+0x7e>
 8006012:	68a3      	ldr	r3, [r4, #8]
 8006014:	42ab      	cmp	r3, r5
 8006016:	dc19      	bgt.n	800604c <__multadd+0x74>
 8006018:	6861      	ldr	r1, [r4, #4]
 800601a:	4638      	mov	r0, r7
 800601c:	3101      	adds	r1, #1
 800601e:	f7ff ff79 	bl	8005f14 <_Balloc>
 8006022:	4680      	mov	r8, r0
 8006024:	b928      	cbnz	r0, 8006032 <__multadd+0x5a>
 8006026:	4602      	mov	r2, r0
 8006028:	21ba      	movs	r1, #186	@ 0xba
 800602a:	4b0c      	ldr	r3, [pc, #48]	@ (800605c <__multadd+0x84>)
 800602c:	480c      	ldr	r0, [pc, #48]	@ (8006060 <__multadd+0x88>)
 800602e:	f001 fcdd 	bl	80079ec <__assert_func>
 8006032:	6922      	ldr	r2, [r4, #16]
 8006034:	f104 010c 	add.w	r1, r4, #12
 8006038:	3202      	adds	r2, #2
 800603a:	0092      	lsls	r2, r2, #2
 800603c:	300c      	adds	r0, #12
 800603e:	f001 fcc1 	bl	80079c4 <memcpy>
 8006042:	4621      	mov	r1, r4
 8006044:	4638      	mov	r0, r7
 8006046:	f7ff ffa5 	bl	8005f94 <_Bfree>
 800604a:	4644      	mov	r4, r8
 800604c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006050:	3501      	adds	r5, #1
 8006052:	615e      	str	r6, [r3, #20]
 8006054:	6125      	str	r5, [r4, #16]
 8006056:	4620      	mov	r0, r4
 8006058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800605c:	08008cab 	.word	0x08008cab
 8006060:	08008cbc 	.word	0x08008cbc

08006064 <__s2b>:
 8006064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006068:	4615      	mov	r5, r2
 800606a:	2209      	movs	r2, #9
 800606c:	461f      	mov	r7, r3
 800606e:	3308      	adds	r3, #8
 8006070:	460c      	mov	r4, r1
 8006072:	fb93 f3f2 	sdiv	r3, r3, r2
 8006076:	4606      	mov	r6, r0
 8006078:	2201      	movs	r2, #1
 800607a:	2100      	movs	r1, #0
 800607c:	429a      	cmp	r2, r3
 800607e:	db09      	blt.n	8006094 <__s2b+0x30>
 8006080:	4630      	mov	r0, r6
 8006082:	f7ff ff47 	bl	8005f14 <_Balloc>
 8006086:	b940      	cbnz	r0, 800609a <__s2b+0x36>
 8006088:	4602      	mov	r2, r0
 800608a:	21d3      	movs	r1, #211	@ 0xd3
 800608c:	4b18      	ldr	r3, [pc, #96]	@ (80060f0 <__s2b+0x8c>)
 800608e:	4819      	ldr	r0, [pc, #100]	@ (80060f4 <__s2b+0x90>)
 8006090:	f001 fcac 	bl	80079ec <__assert_func>
 8006094:	0052      	lsls	r2, r2, #1
 8006096:	3101      	adds	r1, #1
 8006098:	e7f0      	b.n	800607c <__s2b+0x18>
 800609a:	9b08      	ldr	r3, [sp, #32]
 800609c:	2d09      	cmp	r5, #9
 800609e:	6143      	str	r3, [r0, #20]
 80060a0:	f04f 0301 	mov.w	r3, #1
 80060a4:	6103      	str	r3, [r0, #16]
 80060a6:	dd16      	ble.n	80060d6 <__s2b+0x72>
 80060a8:	f104 0909 	add.w	r9, r4, #9
 80060ac:	46c8      	mov	r8, r9
 80060ae:	442c      	add	r4, r5
 80060b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80060b4:	4601      	mov	r1, r0
 80060b6:	220a      	movs	r2, #10
 80060b8:	4630      	mov	r0, r6
 80060ba:	3b30      	subs	r3, #48	@ 0x30
 80060bc:	f7ff ff8c 	bl	8005fd8 <__multadd>
 80060c0:	45a0      	cmp	r8, r4
 80060c2:	d1f5      	bne.n	80060b0 <__s2b+0x4c>
 80060c4:	f1a5 0408 	sub.w	r4, r5, #8
 80060c8:	444c      	add	r4, r9
 80060ca:	1b2d      	subs	r5, r5, r4
 80060cc:	1963      	adds	r3, r4, r5
 80060ce:	42bb      	cmp	r3, r7
 80060d0:	db04      	blt.n	80060dc <__s2b+0x78>
 80060d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060d6:	2509      	movs	r5, #9
 80060d8:	340a      	adds	r4, #10
 80060da:	e7f6      	b.n	80060ca <__s2b+0x66>
 80060dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80060e0:	4601      	mov	r1, r0
 80060e2:	220a      	movs	r2, #10
 80060e4:	4630      	mov	r0, r6
 80060e6:	3b30      	subs	r3, #48	@ 0x30
 80060e8:	f7ff ff76 	bl	8005fd8 <__multadd>
 80060ec:	e7ee      	b.n	80060cc <__s2b+0x68>
 80060ee:	bf00      	nop
 80060f0:	08008cab 	.word	0x08008cab
 80060f4:	08008cbc 	.word	0x08008cbc

080060f8 <__hi0bits>:
 80060f8:	4603      	mov	r3, r0
 80060fa:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80060fe:	bf3a      	itte	cc
 8006100:	0403      	lslcc	r3, r0, #16
 8006102:	2010      	movcc	r0, #16
 8006104:	2000      	movcs	r0, #0
 8006106:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800610a:	bf3c      	itt	cc
 800610c:	021b      	lslcc	r3, r3, #8
 800610e:	3008      	addcc	r0, #8
 8006110:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006114:	bf3c      	itt	cc
 8006116:	011b      	lslcc	r3, r3, #4
 8006118:	3004      	addcc	r0, #4
 800611a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800611e:	bf3c      	itt	cc
 8006120:	009b      	lslcc	r3, r3, #2
 8006122:	3002      	addcc	r0, #2
 8006124:	2b00      	cmp	r3, #0
 8006126:	db05      	blt.n	8006134 <__hi0bits+0x3c>
 8006128:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800612c:	f100 0001 	add.w	r0, r0, #1
 8006130:	bf08      	it	eq
 8006132:	2020      	moveq	r0, #32
 8006134:	4770      	bx	lr

08006136 <__lo0bits>:
 8006136:	6803      	ldr	r3, [r0, #0]
 8006138:	4602      	mov	r2, r0
 800613a:	f013 0007 	ands.w	r0, r3, #7
 800613e:	d00b      	beq.n	8006158 <__lo0bits+0x22>
 8006140:	07d9      	lsls	r1, r3, #31
 8006142:	d421      	bmi.n	8006188 <__lo0bits+0x52>
 8006144:	0798      	lsls	r0, r3, #30
 8006146:	bf49      	itett	mi
 8006148:	085b      	lsrmi	r3, r3, #1
 800614a:	089b      	lsrpl	r3, r3, #2
 800614c:	2001      	movmi	r0, #1
 800614e:	6013      	strmi	r3, [r2, #0]
 8006150:	bf5c      	itt	pl
 8006152:	2002      	movpl	r0, #2
 8006154:	6013      	strpl	r3, [r2, #0]
 8006156:	4770      	bx	lr
 8006158:	b299      	uxth	r1, r3
 800615a:	b909      	cbnz	r1, 8006160 <__lo0bits+0x2a>
 800615c:	2010      	movs	r0, #16
 800615e:	0c1b      	lsrs	r3, r3, #16
 8006160:	b2d9      	uxtb	r1, r3
 8006162:	b909      	cbnz	r1, 8006168 <__lo0bits+0x32>
 8006164:	3008      	adds	r0, #8
 8006166:	0a1b      	lsrs	r3, r3, #8
 8006168:	0719      	lsls	r1, r3, #28
 800616a:	bf04      	itt	eq
 800616c:	091b      	lsreq	r3, r3, #4
 800616e:	3004      	addeq	r0, #4
 8006170:	0799      	lsls	r1, r3, #30
 8006172:	bf04      	itt	eq
 8006174:	089b      	lsreq	r3, r3, #2
 8006176:	3002      	addeq	r0, #2
 8006178:	07d9      	lsls	r1, r3, #31
 800617a:	d403      	bmi.n	8006184 <__lo0bits+0x4e>
 800617c:	085b      	lsrs	r3, r3, #1
 800617e:	f100 0001 	add.w	r0, r0, #1
 8006182:	d003      	beq.n	800618c <__lo0bits+0x56>
 8006184:	6013      	str	r3, [r2, #0]
 8006186:	4770      	bx	lr
 8006188:	2000      	movs	r0, #0
 800618a:	4770      	bx	lr
 800618c:	2020      	movs	r0, #32
 800618e:	4770      	bx	lr

08006190 <__i2b>:
 8006190:	b510      	push	{r4, lr}
 8006192:	460c      	mov	r4, r1
 8006194:	2101      	movs	r1, #1
 8006196:	f7ff febd 	bl	8005f14 <_Balloc>
 800619a:	4602      	mov	r2, r0
 800619c:	b928      	cbnz	r0, 80061aa <__i2b+0x1a>
 800619e:	f240 1145 	movw	r1, #325	@ 0x145
 80061a2:	4b04      	ldr	r3, [pc, #16]	@ (80061b4 <__i2b+0x24>)
 80061a4:	4804      	ldr	r0, [pc, #16]	@ (80061b8 <__i2b+0x28>)
 80061a6:	f001 fc21 	bl	80079ec <__assert_func>
 80061aa:	2301      	movs	r3, #1
 80061ac:	6144      	str	r4, [r0, #20]
 80061ae:	6103      	str	r3, [r0, #16]
 80061b0:	bd10      	pop	{r4, pc}
 80061b2:	bf00      	nop
 80061b4:	08008cab 	.word	0x08008cab
 80061b8:	08008cbc 	.word	0x08008cbc

080061bc <__multiply>:
 80061bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c0:	4617      	mov	r7, r2
 80061c2:	690a      	ldr	r2, [r1, #16]
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	4689      	mov	r9, r1
 80061c8:	429a      	cmp	r2, r3
 80061ca:	bfa2      	ittt	ge
 80061cc:	463b      	movge	r3, r7
 80061ce:	460f      	movge	r7, r1
 80061d0:	4699      	movge	r9, r3
 80061d2:	693d      	ldr	r5, [r7, #16]
 80061d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	6879      	ldr	r1, [r7, #4]
 80061dc:	eb05 060a 	add.w	r6, r5, sl
 80061e0:	42b3      	cmp	r3, r6
 80061e2:	b085      	sub	sp, #20
 80061e4:	bfb8      	it	lt
 80061e6:	3101      	addlt	r1, #1
 80061e8:	f7ff fe94 	bl	8005f14 <_Balloc>
 80061ec:	b930      	cbnz	r0, 80061fc <__multiply+0x40>
 80061ee:	4602      	mov	r2, r0
 80061f0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80061f4:	4b40      	ldr	r3, [pc, #256]	@ (80062f8 <__multiply+0x13c>)
 80061f6:	4841      	ldr	r0, [pc, #260]	@ (80062fc <__multiply+0x140>)
 80061f8:	f001 fbf8 	bl	80079ec <__assert_func>
 80061fc:	f100 0414 	add.w	r4, r0, #20
 8006200:	4623      	mov	r3, r4
 8006202:	2200      	movs	r2, #0
 8006204:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006208:	4573      	cmp	r3, lr
 800620a:	d320      	bcc.n	800624e <__multiply+0x92>
 800620c:	f107 0814 	add.w	r8, r7, #20
 8006210:	f109 0114 	add.w	r1, r9, #20
 8006214:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006218:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800621c:	9302      	str	r3, [sp, #8]
 800621e:	1beb      	subs	r3, r5, r7
 8006220:	3b15      	subs	r3, #21
 8006222:	f023 0303 	bic.w	r3, r3, #3
 8006226:	3304      	adds	r3, #4
 8006228:	3715      	adds	r7, #21
 800622a:	42bd      	cmp	r5, r7
 800622c:	bf38      	it	cc
 800622e:	2304      	movcc	r3, #4
 8006230:	9301      	str	r3, [sp, #4]
 8006232:	9b02      	ldr	r3, [sp, #8]
 8006234:	9103      	str	r1, [sp, #12]
 8006236:	428b      	cmp	r3, r1
 8006238:	d80c      	bhi.n	8006254 <__multiply+0x98>
 800623a:	2e00      	cmp	r6, #0
 800623c:	dd03      	ble.n	8006246 <__multiply+0x8a>
 800623e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006242:	2b00      	cmp	r3, #0
 8006244:	d055      	beq.n	80062f2 <__multiply+0x136>
 8006246:	6106      	str	r6, [r0, #16]
 8006248:	b005      	add	sp, #20
 800624a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800624e:	f843 2b04 	str.w	r2, [r3], #4
 8006252:	e7d9      	b.n	8006208 <__multiply+0x4c>
 8006254:	f8b1 a000 	ldrh.w	sl, [r1]
 8006258:	f1ba 0f00 	cmp.w	sl, #0
 800625c:	d01f      	beq.n	800629e <__multiply+0xe2>
 800625e:	46c4      	mov	ip, r8
 8006260:	46a1      	mov	r9, r4
 8006262:	2700      	movs	r7, #0
 8006264:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006268:	f8d9 3000 	ldr.w	r3, [r9]
 800626c:	fa1f fb82 	uxth.w	fp, r2
 8006270:	b29b      	uxth	r3, r3
 8006272:	fb0a 330b 	mla	r3, sl, fp, r3
 8006276:	443b      	add	r3, r7
 8006278:	f8d9 7000 	ldr.w	r7, [r9]
 800627c:	0c12      	lsrs	r2, r2, #16
 800627e:	0c3f      	lsrs	r7, r7, #16
 8006280:	fb0a 7202 	mla	r2, sl, r2, r7
 8006284:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006288:	b29b      	uxth	r3, r3
 800628a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800628e:	4565      	cmp	r5, ip
 8006290:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006294:	f849 3b04 	str.w	r3, [r9], #4
 8006298:	d8e4      	bhi.n	8006264 <__multiply+0xa8>
 800629a:	9b01      	ldr	r3, [sp, #4]
 800629c:	50e7      	str	r7, [r4, r3]
 800629e:	9b03      	ldr	r3, [sp, #12]
 80062a0:	3104      	adds	r1, #4
 80062a2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80062a6:	f1b9 0f00 	cmp.w	r9, #0
 80062aa:	d020      	beq.n	80062ee <__multiply+0x132>
 80062ac:	4647      	mov	r7, r8
 80062ae:	46a4      	mov	ip, r4
 80062b0:	f04f 0a00 	mov.w	sl, #0
 80062b4:	6823      	ldr	r3, [r4, #0]
 80062b6:	f8b7 b000 	ldrh.w	fp, [r7]
 80062ba:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80062be:	b29b      	uxth	r3, r3
 80062c0:	fb09 220b 	mla	r2, r9, fp, r2
 80062c4:	4452      	add	r2, sl
 80062c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062ca:	f84c 3b04 	str.w	r3, [ip], #4
 80062ce:	f857 3b04 	ldr.w	r3, [r7], #4
 80062d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80062d6:	f8bc 3000 	ldrh.w	r3, [ip]
 80062da:	42bd      	cmp	r5, r7
 80062dc:	fb09 330a 	mla	r3, r9, sl, r3
 80062e0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80062e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80062e8:	d8e5      	bhi.n	80062b6 <__multiply+0xfa>
 80062ea:	9a01      	ldr	r2, [sp, #4]
 80062ec:	50a3      	str	r3, [r4, r2]
 80062ee:	3404      	adds	r4, #4
 80062f0:	e79f      	b.n	8006232 <__multiply+0x76>
 80062f2:	3e01      	subs	r6, #1
 80062f4:	e7a1      	b.n	800623a <__multiply+0x7e>
 80062f6:	bf00      	nop
 80062f8:	08008cab 	.word	0x08008cab
 80062fc:	08008cbc 	.word	0x08008cbc

08006300 <__pow5mult>:
 8006300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006304:	4615      	mov	r5, r2
 8006306:	f012 0203 	ands.w	r2, r2, #3
 800630a:	4607      	mov	r7, r0
 800630c:	460e      	mov	r6, r1
 800630e:	d007      	beq.n	8006320 <__pow5mult+0x20>
 8006310:	4c25      	ldr	r4, [pc, #148]	@ (80063a8 <__pow5mult+0xa8>)
 8006312:	3a01      	subs	r2, #1
 8006314:	2300      	movs	r3, #0
 8006316:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800631a:	f7ff fe5d 	bl	8005fd8 <__multadd>
 800631e:	4606      	mov	r6, r0
 8006320:	10ad      	asrs	r5, r5, #2
 8006322:	d03d      	beq.n	80063a0 <__pow5mult+0xa0>
 8006324:	69fc      	ldr	r4, [r7, #28]
 8006326:	b97c      	cbnz	r4, 8006348 <__pow5mult+0x48>
 8006328:	2010      	movs	r0, #16
 800632a:	f7ff fd3d 	bl	8005da8 <malloc>
 800632e:	4602      	mov	r2, r0
 8006330:	61f8      	str	r0, [r7, #28]
 8006332:	b928      	cbnz	r0, 8006340 <__pow5mult+0x40>
 8006334:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006338:	4b1c      	ldr	r3, [pc, #112]	@ (80063ac <__pow5mult+0xac>)
 800633a:	481d      	ldr	r0, [pc, #116]	@ (80063b0 <__pow5mult+0xb0>)
 800633c:	f001 fb56 	bl	80079ec <__assert_func>
 8006340:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006344:	6004      	str	r4, [r0, #0]
 8006346:	60c4      	str	r4, [r0, #12]
 8006348:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800634c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006350:	b94c      	cbnz	r4, 8006366 <__pow5mult+0x66>
 8006352:	f240 2171 	movw	r1, #625	@ 0x271
 8006356:	4638      	mov	r0, r7
 8006358:	f7ff ff1a 	bl	8006190 <__i2b>
 800635c:	2300      	movs	r3, #0
 800635e:	4604      	mov	r4, r0
 8006360:	f8c8 0008 	str.w	r0, [r8, #8]
 8006364:	6003      	str	r3, [r0, #0]
 8006366:	f04f 0900 	mov.w	r9, #0
 800636a:	07eb      	lsls	r3, r5, #31
 800636c:	d50a      	bpl.n	8006384 <__pow5mult+0x84>
 800636e:	4631      	mov	r1, r6
 8006370:	4622      	mov	r2, r4
 8006372:	4638      	mov	r0, r7
 8006374:	f7ff ff22 	bl	80061bc <__multiply>
 8006378:	4680      	mov	r8, r0
 800637a:	4631      	mov	r1, r6
 800637c:	4638      	mov	r0, r7
 800637e:	f7ff fe09 	bl	8005f94 <_Bfree>
 8006382:	4646      	mov	r6, r8
 8006384:	106d      	asrs	r5, r5, #1
 8006386:	d00b      	beq.n	80063a0 <__pow5mult+0xa0>
 8006388:	6820      	ldr	r0, [r4, #0]
 800638a:	b938      	cbnz	r0, 800639c <__pow5mult+0x9c>
 800638c:	4622      	mov	r2, r4
 800638e:	4621      	mov	r1, r4
 8006390:	4638      	mov	r0, r7
 8006392:	f7ff ff13 	bl	80061bc <__multiply>
 8006396:	6020      	str	r0, [r4, #0]
 8006398:	f8c0 9000 	str.w	r9, [r0]
 800639c:	4604      	mov	r4, r0
 800639e:	e7e4      	b.n	800636a <__pow5mult+0x6a>
 80063a0:	4630      	mov	r0, r6
 80063a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063a6:	bf00      	nop
 80063a8:	08008dcc 	.word	0x08008dcc
 80063ac:	08008c3c 	.word	0x08008c3c
 80063b0:	08008cbc 	.word	0x08008cbc

080063b4 <__lshift>:
 80063b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063b8:	460c      	mov	r4, r1
 80063ba:	4607      	mov	r7, r0
 80063bc:	4691      	mov	r9, r2
 80063be:	6923      	ldr	r3, [r4, #16]
 80063c0:	6849      	ldr	r1, [r1, #4]
 80063c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80063c6:	68a3      	ldr	r3, [r4, #8]
 80063c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80063cc:	f108 0601 	add.w	r6, r8, #1
 80063d0:	42b3      	cmp	r3, r6
 80063d2:	db0b      	blt.n	80063ec <__lshift+0x38>
 80063d4:	4638      	mov	r0, r7
 80063d6:	f7ff fd9d 	bl	8005f14 <_Balloc>
 80063da:	4605      	mov	r5, r0
 80063dc:	b948      	cbnz	r0, 80063f2 <__lshift+0x3e>
 80063de:	4602      	mov	r2, r0
 80063e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80063e4:	4b27      	ldr	r3, [pc, #156]	@ (8006484 <__lshift+0xd0>)
 80063e6:	4828      	ldr	r0, [pc, #160]	@ (8006488 <__lshift+0xd4>)
 80063e8:	f001 fb00 	bl	80079ec <__assert_func>
 80063ec:	3101      	adds	r1, #1
 80063ee:	005b      	lsls	r3, r3, #1
 80063f0:	e7ee      	b.n	80063d0 <__lshift+0x1c>
 80063f2:	2300      	movs	r3, #0
 80063f4:	f100 0114 	add.w	r1, r0, #20
 80063f8:	f100 0210 	add.w	r2, r0, #16
 80063fc:	4618      	mov	r0, r3
 80063fe:	4553      	cmp	r3, sl
 8006400:	db33      	blt.n	800646a <__lshift+0xb6>
 8006402:	6920      	ldr	r0, [r4, #16]
 8006404:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006408:	f104 0314 	add.w	r3, r4, #20
 800640c:	f019 091f 	ands.w	r9, r9, #31
 8006410:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006414:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006418:	d02b      	beq.n	8006472 <__lshift+0xbe>
 800641a:	468a      	mov	sl, r1
 800641c:	2200      	movs	r2, #0
 800641e:	f1c9 0e20 	rsb	lr, r9, #32
 8006422:	6818      	ldr	r0, [r3, #0]
 8006424:	fa00 f009 	lsl.w	r0, r0, r9
 8006428:	4310      	orrs	r0, r2
 800642a:	f84a 0b04 	str.w	r0, [sl], #4
 800642e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006432:	459c      	cmp	ip, r3
 8006434:	fa22 f20e 	lsr.w	r2, r2, lr
 8006438:	d8f3      	bhi.n	8006422 <__lshift+0x6e>
 800643a:	ebac 0304 	sub.w	r3, ip, r4
 800643e:	3b15      	subs	r3, #21
 8006440:	f023 0303 	bic.w	r3, r3, #3
 8006444:	3304      	adds	r3, #4
 8006446:	f104 0015 	add.w	r0, r4, #21
 800644a:	4560      	cmp	r0, ip
 800644c:	bf88      	it	hi
 800644e:	2304      	movhi	r3, #4
 8006450:	50ca      	str	r2, [r1, r3]
 8006452:	b10a      	cbz	r2, 8006458 <__lshift+0xa4>
 8006454:	f108 0602 	add.w	r6, r8, #2
 8006458:	3e01      	subs	r6, #1
 800645a:	4638      	mov	r0, r7
 800645c:	4621      	mov	r1, r4
 800645e:	612e      	str	r6, [r5, #16]
 8006460:	f7ff fd98 	bl	8005f94 <_Bfree>
 8006464:	4628      	mov	r0, r5
 8006466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800646a:	f842 0f04 	str.w	r0, [r2, #4]!
 800646e:	3301      	adds	r3, #1
 8006470:	e7c5      	b.n	80063fe <__lshift+0x4a>
 8006472:	3904      	subs	r1, #4
 8006474:	f853 2b04 	ldr.w	r2, [r3], #4
 8006478:	459c      	cmp	ip, r3
 800647a:	f841 2f04 	str.w	r2, [r1, #4]!
 800647e:	d8f9      	bhi.n	8006474 <__lshift+0xc0>
 8006480:	e7ea      	b.n	8006458 <__lshift+0xa4>
 8006482:	bf00      	nop
 8006484:	08008cab 	.word	0x08008cab
 8006488:	08008cbc 	.word	0x08008cbc

0800648c <__mcmp>:
 800648c:	4603      	mov	r3, r0
 800648e:	690a      	ldr	r2, [r1, #16]
 8006490:	6900      	ldr	r0, [r0, #16]
 8006492:	b530      	push	{r4, r5, lr}
 8006494:	1a80      	subs	r0, r0, r2
 8006496:	d10e      	bne.n	80064b6 <__mcmp+0x2a>
 8006498:	3314      	adds	r3, #20
 800649a:	3114      	adds	r1, #20
 800649c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80064a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80064a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80064a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80064ac:	4295      	cmp	r5, r2
 80064ae:	d003      	beq.n	80064b8 <__mcmp+0x2c>
 80064b0:	d205      	bcs.n	80064be <__mcmp+0x32>
 80064b2:	f04f 30ff 	mov.w	r0, #4294967295
 80064b6:	bd30      	pop	{r4, r5, pc}
 80064b8:	42a3      	cmp	r3, r4
 80064ba:	d3f3      	bcc.n	80064a4 <__mcmp+0x18>
 80064bc:	e7fb      	b.n	80064b6 <__mcmp+0x2a>
 80064be:	2001      	movs	r0, #1
 80064c0:	e7f9      	b.n	80064b6 <__mcmp+0x2a>
	...

080064c4 <__mdiff>:
 80064c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064c8:	4689      	mov	r9, r1
 80064ca:	4606      	mov	r6, r0
 80064cc:	4611      	mov	r1, r2
 80064ce:	4648      	mov	r0, r9
 80064d0:	4614      	mov	r4, r2
 80064d2:	f7ff ffdb 	bl	800648c <__mcmp>
 80064d6:	1e05      	subs	r5, r0, #0
 80064d8:	d112      	bne.n	8006500 <__mdiff+0x3c>
 80064da:	4629      	mov	r1, r5
 80064dc:	4630      	mov	r0, r6
 80064de:	f7ff fd19 	bl	8005f14 <_Balloc>
 80064e2:	4602      	mov	r2, r0
 80064e4:	b928      	cbnz	r0, 80064f2 <__mdiff+0x2e>
 80064e6:	f240 2137 	movw	r1, #567	@ 0x237
 80064ea:	4b3e      	ldr	r3, [pc, #248]	@ (80065e4 <__mdiff+0x120>)
 80064ec:	483e      	ldr	r0, [pc, #248]	@ (80065e8 <__mdiff+0x124>)
 80064ee:	f001 fa7d 	bl	80079ec <__assert_func>
 80064f2:	2301      	movs	r3, #1
 80064f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80064f8:	4610      	mov	r0, r2
 80064fa:	b003      	add	sp, #12
 80064fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006500:	bfbc      	itt	lt
 8006502:	464b      	movlt	r3, r9
 8006504:	46a1      	movlt	r9, r4
 8006506:	4630      	mov	r0, r6
 8006508:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800650c:	bfba      	itte	lt
 800650e:	461c      	movlt	r4, r3
 8006510:	2501      	movlt	r5, #1
 8006512:	2500      	movge	r5, #0
 8006514:	f7ff fcfe 	bl	8005f14 <_Balloc>
 8006518:	4602      	mov	r2, r0
 800651a:	b918      	cbnz	r0, 8006524 <__mdiff+0x60>
 800651c:	f240 2145 	movw	r1, #581	@ 0x245
 8006520:	4b30      	ldr	r3, [pc, #192]	@ (80065e4 <__mdiff+0x120>)
 8006522:	e7e3      	b.n	80064ec <__mdiff+0x28>
 8006524:	f100 0b14 	add.w	fp, r0, #20
 8006528:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800652c:	f109 0310 	add.w	r3, r9, #16
 8006530:	60c5      	str	r5, [r0, #12]
 8006532:	f04f 0c00 	mov.w	ip, #0
 8006536:	f109 0514 	add.w	r5, r9, #20
 800653a:	46d9      	mov	r9, fp
 800653c:	6926      	ldr	r6, [r4, #16]
 800653e:	f104 0e14 	add.w	lr, r4, #20
 8006542:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006546:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800654a:	9301      	str	r3, [sp, #4]
 800654c:	9b01      	ldr	r3, [sp, #4]
 800654e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006552:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006556:	b281      	uxth	r1, r0
 8006558:	9301      	str	r3, [sp, #4]
 800655a:	fa1f f38a 	uxth.w	r3, sl
 800655e:	1a5b      	subs	r3, r3, r1
 8006560:	0c00      	lsrs	r0, r0, #16
 8006562:	4463      	add	r3, ip
 8006564:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006568:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800656c:	b29b      	uxth	r3, r3
 800656e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006572:	4576      	cmp	r6, lr
 8006574:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006578:	f849 3b04 	str.w	r3, [r9], #4
 800657c:	d8e6      	bhi.n	800654c <__mdiff+0x88>
 800657e:	1b33      	subs	r3, r6, r4
 8006580:	3b15      	subs	r3, #21
 8006582:	f023 0303 	bic.w	r3, r3, #3
 8006586:	3415      	adds	r4, #21
 8006588:	3304      	adds	r3, #4
 800658a:	42a6      	cmp	r6, r4
 800658c:	bf38      	it	cc
 800658e:	2304      	movcc	r3, #4
 8006590:	441d      	add	r5, r3
 8006592:	445b      	add	r3, fp
 8006594:	461e      	mov	r6, r3
 8006596:	462c      	mov	r4, r5
 8006598:	4544      	cmp	r4, r8
 800659a:	d30e      	bcc.n	80065ba <__mdiff+0xf6>
 800659c:	f108 0103 	add.w	r1, r8, #3
 80065a0:	1b49      	subs	r1, r1, r5
 80065a2:	f021 0103 	bic.w	r1, r1, #3
 80065a6:	3d03      	subs	r5, #3
 80065a8:	45a8      	cmp	r8, r5
 80065aa:	bf38      	it	cc
 80065ac:	2100      	movcc	r1, #0
 80065ae:	440b      	add	r3, r1
 80065b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80065b4:	b199      	cbz	r1, 80065de <__mdiff+0x11a>
 80065b6:	6117      	str	r7, [r2, #16]
 80065b8:	e79e      	b.n	80064f8 <__mdiff+0x34>
 80065ba:	46e6      	mov	lr, ip
 80065bc:	f854 1b04 	ldr.w	r1, [r4], #4
 80065c0:	fa1f fc81 	uxth.w	ip, r1
 80065c4:	44f4      	add	ip, lr
 80065c6:	0c08      	lsrs	r0, r1, #16
 80065c8:	4471      	add	r1, lr
 80065ca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80065ce:	b289      	uxth	r1, r1
 80065d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80065d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80065d8:	f846 1b04 	str.w	r1, [r6], #4
 80065dc:	e7dc      	b.n	8006598 <__mdiff+0xd4>
 80065de:	3f01      	subs	r7, #1
 80065e0:	e7e6      	b.n	80065b0 <__mdiff+0xec>
 80065e2:	bf00      	nop
 80065e4:	08008cab 	.word	0x08008cab
 80065e8:	08008cbc 	.word	0x08008cbc

080065ec <__ulp>:
 80065ec:	4b0e      	ldr	r3, [pc, #56]	@ (8006628 <__ulp+0x3c>)
 80065ee:	400b      	ands	r3, r1
 80065f0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	dc08      	bgt.n	800660a <__ulp+0x1e>
 80065f8:	425b      	negs	r3, r3
 80065fa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80065fe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006602:	da04      	bge.n	800660e <__ulp+0x22>
 8006604:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006608:	4113      	asrs	r3, r2
 800660a:	2200      	movs	r2, #0
 800660c:	e008      	b.n	8006620 <__ulp+0x34>
 800660e:	f1a2 0314 	sub.w	r3, r2, #20
 8006612:	2b1e      	cmp	r3, #30
 8006614:	bfd6      	itet	le
 8006616:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800661a:	2201      	movgt	r2, #1
 800661c:	40da      	lsrle	r2, r3
 800661e:	2300      	movs	r3, #0
 8006620:	4619      	mov	r1, r3
 8006622:	4610      	mov	r0, r2
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	7ff00000 	.word	0x7ff00000

0800662c <__b2d>:
 800662c:	6902      	ldr	r2, [r0, #16]
 800662e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006630:	f100 0614 	add.w	r6, r0, #20
 8006634:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006638:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800663c:	4f1e      	ldr	r7, [pc, #120]	@ (80066b8 <__b2d+0x8c>)
 800663e:	4620      	mov	r0, r4
 8006640:	f7ff fd5a 	bl	80060f8 <__hi0bits>
 8006644:	4603      	mov	r3, r0
 8006646:	f1c0 0020 	rsb	r0, r0, #32
 800664a:	2b0a      	cmp	r3, #10
 800664c:	f1a2 0504 	sub.w	r5, r2, #4
 8006650:	6008      	str	r0, [r1, #0]
 8006652:	dc12      	bgt.n	800667a <__b2d+0x4e>
 8006654:	42ae      	cmp	r6, r5
 8006656:	bf2c      	ite	cs
 8006658:	2200      	movcs	r2, #0
 800665a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800665e:	f1c3 0c0b 	rsb	ip, r3, #11
 8006662:	3315      	adds	r3, #21
 8006664:	fa24 fe0c 	lsr.w	lr, r4, ip
 8006668:	fa04 f303 	lsl.w	r3, r4, r3
 800666c:	fa22 f20c 	lsr.w	r2, r2, ip
 8006670:	ea4e 0107 	orr.w	r1, lr, r7
 8006674:	431a      	orrs	r2, r3
 8006676:	4610      	mov	r0, r2
 8006678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800667a:	42ae      	cmp	r6, r5
 800667c:	bf36      	itet	cc
 800667e:	f1a2 0508 	subcc.w	r5, r2, #8
 8006682:	2200      	movcs	r2, #0
 8006684:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006688:	3b0b      	subs	r3, #11
 800668a:	d012      	beq.n	80066b2 <__b2d+0x86>
 800668c:	f1c3 0720 	rsb	r7, r3, #32
 8006690:	fa22 f107 	lsr.w	r1, r2, r7
 8006694:	409c      	lsls	r4, r3
 8006696:	430c      	orrs	r4, r1
 8006698:	42b5      	cmp	r5, r6
 800669a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800669e:	bf94      	ite	ls
 80066a0:	2400      	movls	r4, #0
 80066a2:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80066a6:	409a      	lsls	r2, r3
 80066a8:	40fc      	lsrs	r4, r7
 80066aa:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80066ae:	4322      	orrs	r2, r4
 80066b0:	e7e1      	b.n	8006676 <__b2d+0x4a>
 80066b2:	ea44 0107 	orr.w	r1, r4, r7
 80066b6:	e7de      	b.n	8006676 <__b2d+0x4a>
 80066b8:	3ff00000 	.word	0x3ff00000

080066bc <__d2b>:
 80066bc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80066c0:	2101      	movs	r1, #1
 80066c2:	4690      	mov	r8, r2
 80066c4:	4699      	mov	r9, r3
 80066c6:	9e08      	ldr	r6, [sp, #32]
 80066c8:	f7ff fc24 	bl	8005f14 <_Balloc>
 80066cc:	4604      	mov	r4, r0
 80066ce:	b930      	cbnz	r0, 80066de <__d2b+0x22>
 80066d0:	4602      	mov	r2, r0
 80066d2:	f240 310f 	movw	r1, #783	@ 0x30f
 80066d6:	4b23      	ldr	r3, [pc, #140]	@ (8006764 <__d2b+0xa8>)
 80066d8:	4823      	ldr	r0, [pc, #140]	@ (8006768 <__d2b+0xac>)
 80066da:	f001 f987 	bl	80079ec <__assert_func>
 80066de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80066e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80066e6:	b10d      	cbz	r5, 80066ec <__d2b+0x30>
 80066e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066ec:	9301      	str	r3, [sp, #4]
 80066ee:	f1b8 0300 	subs.w	r3, r8, #0
 80066f2:	d024      	beq.n	800673e <__d2b+0x82>
 80066f4:	4668      	mov	r0, sp
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	f7ff fd1d 	bl	8006136 <__lo0bits>
 80066fc:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006700:	b1d8      	cbz	r0, 800673a <__d2b+0x7e>
 8006702:	f1c0 0320 	rsb	r3, r0, #32
 8006706:	fa02 f303 	lsl.w	r3, r2, r3
 800670a:	430b      	orrs	r3, r1
 800670c:	40c2      	lsrs	r2, r0
 800670e:	6163      	str	r3, [r4, #20]
 8006710:	9201      	str	r2, [sp, #4]
 8006712:	9b01      	ldr	r3, [sp, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	bf0c      	ite	eq
 8006718:	2201      	moveq	r2, #1
 800671a:	2202      	movne	r2, #2
 800671c:	61a3      	str	r3, [r4, #24]
 800671e:	6122      	str	r2, [r4, #16]
 8006720:	b1ad      	cbz	r5, 800674e <__d2b+0x92>
 8006722:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006726:	4405      	add	r5, r0
 8006728:	6035      	str	r5, [r6, #0]
 800672a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800672e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006730:	6018      	str	r0, [r3, #0]
 8006732:	4620      	mov	r0, r4
 8006734:	b002      	add	sp, #8
 8006736:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800673a:	6161      	str	r1, [r4, #20]
 800673c:	e7e9      	b.n	8006712 <__d2b+0x56>
 800673e:	a801      	add	r0, sp, #4
 8006740:	f7ff fcf9 	bl	8006136 <__lo0bits>
 8006744:	9b01      	ldr	r3, [sp, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	6163      	str	r3, [r4, #20]
 800674a:	3020      	adds	r0, #32
 800674c:	e7e7      	b.n	800671e <__d2b+0x62>
 800674e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006752:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006756:	6030      	str	r0, [r6, #0]
 8006758:	6918      	ldr	r0, [r3, #16]
 800675a:	f7ff fccd 	bl	80060f8 <__hi0bits>
 800675e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006762:	e7e4      	b.n	800672e <__d2b+0x72>
 8006764:	08008cab 	.word	0x08008cab
 8006768:	08008cbc 	.word	0x08008cbc

0800676c <__ratio>:
 800676c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006770:	b085      	sub	sp, #20
 8006772:	e9cd 1000 	strd	r1, r0, [sp]
 8006776:	a902      	add	r1, sp, #8
 8006778:	f7ff ff58 	bl	800662c <__b2d>
 800677c:	468b      	mov	fp, r1
 800677e:	4606      	mov	r6, r0
 8006780:	460f      	mov	r7, r1
 8006782:	9800      	ldr	r0, [sp, #0]
 8006784:	a903      	add	r1, sp, #12
 8006786:	f7ff ff51 	bl	800662c <__b2d>
 800678a:	460d      	mov	r5, r1
 800678c:	9b01      	ldr	r3, [sp, #4]
 800678e:	4689      	mov	r9, r1
 8006790:	6919      	ldr	r1, [r3, #16]
 8006792:	9b00      	ldr	r3, [sp, #0]
 8006794:	4604      	mov	r4, r0
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	4630      	mov	r0, r6
 800679a:	1ac9      	subs	r1, r1, r3
 800679c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80067a0:	1a9b      	subs	r3, r3, r2
 80067a2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	bfcd      	iteet	gt
 80067aa:	463a      	movgt	r2, r7
 80067ac:	462a      	movle	r2, r5
 80067ae:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80067b2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80067b6:	bfd8      	it	le
 80067b8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80067bc:	464b      	mov	r3, r9
 80067be:	4622      	mov	r2, r4
 80067c0:	4659      	mov	r1, fp
 80067c2:	f7f9 ffb3 	bl	800072c <__aeabi_ddiv>
 80067c6:	b005      	add	sp, #20
 80067c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080067cc <__copybits>:
 80067cc:	3901      	subs	r1, #1
 80067ce:	b570      	push	{r4, r5, r6, lr}
 80067d0:	1149      	asrs	r1, r1, #5
 80067d2:	6914      	ldr	r4, [r2, #16]
 80067d4:	3101      	adds	r1, #1
 80067d6:	f102 0314 	add.w	r3, r2, #20
 80067da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80067de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80067e2:	1f05      	subs	r5, r0, #4
 80067e4:	42a3      	cmp	r3, r4
 80067e6:	d30c      	bcc.n	8006802 <__copybits+0x36>
 80067e8:	1aa3      	subs	r3, r4, r2
 80067ea:	3b11      	subs	r3, #17
 80067ec:	f023 0303 	bic.w	r3, r3, #3
 80067f0:	3211      	adds	r2, #17
 80067f2:	42a2      	cmp	r2, r4
 80067f4:	bf88      	it	hi
 80067f6:	2300      	movhi	r3, #0
 80067f8:	4418      	add	r0, r3
 80067fa:	2300      	movs	r3, #0
 80067fc:	4288      	cmp	r0, r1
 80067fe:	d305      	bcc.n	800680c <__copybits+0x40>
 8006800:	bd70      	pop	{r4, r5, r6, pc}
 8006802:	f853 6b04 	ldr.w	r6, [r3], #4
 8006806:	f845 6f04 	str.w	r6, [r5, #4]!
 800680a:	e7eb      	b.n	80067e4 <__copybits+0x18>
 800680c:	f840 3b04 	str.w	r3, [r0], #4
 8006810:	e7f4      	b.n	80067fc <__copybits+0x30>

08006812 <__any_on>:
 8006812:	f100 0214 	add.w	r2, r0, #20
 8006816:	6900      	ldr	r0, [r0, #16]
 8006818:	114b      	asrs	r3, r1, #5
 800681a:	4298      	cmp	r0, r3
 800681c:	b510      	push	{r4, lr}
 800681e:	db11      	blt.n	8006844 <__any_on+0x32>
 8006820:	dd0a      	ble.n	8006838 <__any_on+0x26>
 8006822:	f011 011f 	ands.w	r1, r1, #31
 8006826:	d007      	beq.n	8006838 <__any_on+0x26>
 8006828:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800682c:	fa24 f001 	lsr.w	r0, r4, r1
 8006830:	fa00 f101 	lsl.w	r1, r0, r1
 8006834:	428c      	cmp	r4, r1
 8006836:	d10b      	bne.n	8006850 <__any_on+0x3e>
 8006838:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800683c:	4293      	cmp	r3, r2
 800683e:	d803      	bhi.n	8006848 <__any_on+0x36>
 8006840:	2000      	movs	r0, #0
 8006842:	bd10      	pop	{r4, pc}
 8006844:	4603      	mov	r3, r0
 8006846:	e7f7      	b.n	8006838 <__any_on+0x26>
 8006848:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800684c:	2900      	cmp	r1, #0
 800684e:	d0f5      	beq.n	800683c <__any_on+0x2a>
 8006850:	2001      	movs	r0, #1
 8006852:	e7f6      	b.n	8006842 <__any_on+0x30>

08006854 <sulp>:
 8006854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006858:	460f      	mov	r7, r1
 800685a:	4690      	mov	r8, r2
 800685c:	f7ff fec6 	bl	80065ec <__ulp>
 8006860:	4604      	mov	r4, r0
 8006862:	460d      	mov	r5, r1
 8006864:	f1b8 0f00 	cmp.w	r8, #0
 8006868:	d011      	beq.n	800688e <sulp+0x3a>
 800686a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800686e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006872:	2b00      	cmp	r3, #0
 8006874:	dd0b      	ble.n	800688e <sulp+0x3a>
 8006876:	2400      	movs	r4, #0
 8006878:	051b      	lsls	r3, r3, #20
 800687a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800687e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006882:	4622      	mov	r2, r4
 8006884:	462b      	mov	r3, r5
 8006886:	f7f9 fe27 	bl	80004d8 <__aeabi_dmul>
 800688a:	4604      	mov	r4, r0
 800688c:	460d      	mov	r5, r1
 800688e:	4620      	mov	r0, r4
 8006890:	4629      	mov	r1, r5
 8006892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006898 <_strtod_l>:
 8006898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800689c:	b09f      	sub	sp, #124	@ 0x7c
 800689e:	9217      	str	r2, [sp, #92]	@ 0x5c
 80068a0:	2200      	movs	r2, #0
 80068a2:	460c      	mov	r4, r1
 80068a4:	921a      	str	r2, [sp, #104]	@ 0x68
 80068a6:	f04f 0a00 	mov.w	sl, #0
 80068aa:	f04f 0b00 	mov.w	fp, #0
 80068ae:	460a      	mov	r2, r1
 80068b0:	9005      	str	r0, [sp, #20]
 80068b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80068b4:	7811      	ldrb	r1, [r2, #0]
 80068b6:	292b      	cmp	r1, #43	@ 0x2b
 80068b8:	d048      	beq.n	800694c <_strtod_l+0xb4>
 80068ba:	d836      	bhi.n	800692a <_strtod_l+0x92>
 80068bc:	290d      	cmp	r1, #13
 80068be:	d830      	bhi.n	8006922 <_strtod_l+0x8a>
 80068c0:	2908      	cmp	r1, #8
 80068c2:	d830      	bhi.n	8006926 <_strtod_l+0x8e>
 80068c4:	2900      	cmp	r1, #0
 80068c6:	d039      	beq.n	800693c <_strtod_l+0xa4>
 80068c8:	2200      	movs	r2, #0
 80068ca:	920e      	str	r2, [sp, #56]	@ 0x38
 80068cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80068ce:	782a      	ldrb	r2, [r5, #0]
 80068d0:	2a30      	cmp	r2, #48	@ 0x30
 80068d2:	f040 80b0 	bne.w	8006a36 <_strtod_l+0x19e>
 80068d6:	786a      	ldrb	r2, [r5, #1]
 80068d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80068dc:	2a58      	cmp	r2, #88	@ 0x58
 80068de:	d16c      	bne.n	80069ba <_strtod_l+0x122>
 80068e0:	9302      	str	r3, [sp, #8]
 80068e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068e4:	4a8f      	ldr	r2, [pc, #572]	@ (8006b24 <_strtod_l+0x28c>)
 80068e6:	9301      	str	r3, [sp, #4]
 80068e8:	ab1a      	add	r3, sp, #104	@ 0x68
 80068ea:	9300      	str	r3, [sp, #0]
 80068ec:	9805      	ldr	r0, [sp, #20]
 80068ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 80068f0:	a919      	add	r1, sp, #100	@ 0x64
 80068f2:	f001 f915 	bl	8007b20 <__gethex>
 80068f6:	f010 060f 	ands.w	r6, r0, #15
 80068fa:	4604      	mov	r4, r0
 80068fc:	d005      	beq.n	800690a <_strtod_l+0x72>
 80068fe:	2e06      	cmp	r6, #6
 8006900:	d126      	bne.n	8006950 <_strtod_l+0xb8>
 8006902:	2300      	movs	r3, #0
 8006904:	3501      	adds	r5, #1
 8006906:	9519      	str	r5, [sp, #100]	@ 0x64
 8006908:	930e      	str	r3, [sp, #56]	@ 0x38
 800690a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800690c:	2b00      	cmp	r3, #0
 800690e:	f040 8582 	bne.w	8007416 <_strtod_l+0xb7e>
 8006912:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006914:	b1bb      	cbz	r3, 8006946 <_strtod_l+0xae>
 8006916:	4650      	mov	r0, sl
 8006918:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800691c:	b01f      	add	sp, #124	@ 0x7c
 800691e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006922:	2920      	cmp	r1, #32
 8006924:	d1d0      	bne.n	80068c8 <_strtod_l+0x30>
 8006926:	3201      	adds	r2, #1
 8006928:	e7c3      	b.n	80068b2 <_strtod_l+0x1a>
 800692a:	292d      	cmp	r1, #45	@ 0x2d
 800692c:	d1cc      	bne.n	80068c8 <_strtod_l+0x30>
 800692e:	2101      	movs	r1, #1
 8006930:	910e      	str	r1, [sp, #56]	@ 0x38
 8006932:	1c51      	adds	r1, r2, #1
 8006934:	9119      	str	r1, [sp, #100]	@ 0x64
 8006936:	7852      	ldrb	r2, [r2, #1]
 8006938:	2a00      	cmp	r2, #0
 800693a:	d1c7      	bne.n	80068cc <_strtod_l+0x34>
 800693c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800693e:	9419      	str	r4, [sp, #100]	@ 0x64
 8006940:	2b00      	cmp	r3, #0
 8006942:	f040 8566 	bne.w	8007412 <_strtod_l+0xb7a>
 8006946:	4650      	mov	r0, sl
 8006948:	4659      	mov	r1, fp
 800694a:	e7e7      	b.n	800691c <_strtod_l+0x84>
 800694c:	2100      	movs	r1, #0
 800694e:	e7ef      	b.n	8006930 <_strtod_l+0x98>
 8006950:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006952:	b13a      	cbz	r2, 8006964 <_strtod_l+0xcc>
 8006954:	2135      	movs	r1, #53	@ 0x35
 8006956:	a81c      	add	r0, sp, #112	@ 0x70
 8006958:	f7ff ff38 	bl	80067cc <__copybits>
 800695c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800695e:	9805      	ldr	r0, [sp, #20]
 8006960:	f7ff fb18 	bl	8005f94 <_Bfree>
 8006964:	3e01      	subs	r6, #1
 8006966:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006968:	2e04      	cmp	r6, #4
 800696a:	d806      	bhi.n	800697a <_strtod_l+0xe2>
 800696c:	e8df f006 	tbb	[pc, r6]
 8006970:	201d0314 	.word	0x201d0314
 8006974:	14          	.byte	0x14
 8006975:	00          	.byte	0x00
 8006976:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800697a:	05e1      	lsls	r1, r4, #23
 800697c:	bf48      	it	mi
 800697e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006982:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006986:	0d1b      	lsrs	r3, r3, #20
 8006988:	051b      	lsls	r3, r3, #20
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1bd      	bne.n	800690a <_strtod_l+0x72>
 800698e:	f7fe fb27 	bl	8004fe0 <__errno>
 8006992:	2322      	movs	r3, #34	@ 0x22
 8006994:	6003      	str	r3, [r0, #0]
 8006996:	e7b8      	b.n	800690a <_strtod_l+0x72>
 8006998:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800699c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80069a0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80069a4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80069a8:	e7e7      	b.n	800697a <_strtod_l+0xe2>
 80069aa:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006b28 <_strtod_l+0x290>
 80069ae:	e7e4      	b.n	800697a <_strtod_l+0xe2>
 80069b0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80069b4:	f04f 3aff 	mov.w	sl, #4294967295
 80069b8:	e7df      	b.n	800697a <_strtod_l+0xe2>
 80069ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069bc:	1c5a      	adds	r2, r3, #1
 80069be:	9219      	str	r2, [sp, #100]	@ 0x64
 80069c0:	785b      	ldrb	r3, [r3, #1]
 80069c2:	2b30      	cmp	r3, #48	@ 0x30
 80069c4:	d0f9      	beq.n	80069ba <_strtod_l+0x122>
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d09f      	beq.n	800690a <_strtod_l+0x72>
 80069ca:	2301      	movs	r3, #1
 80069cc:	2700      	movs	r7, #0
 80069ce:	220a      	movs	r2, #10
 80069d0:	46b9      	mov	r9, r7
 80069d2:	9308      	str	r3, [sp, #32]
 80069d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069d6:	970b      	str	r7, [sp, #44]	@ 0x2c
 80069d8:	930c      	str	r3, [sp, #48]	@ 0x30
 80069da:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80069dc:	7805      	ldrb	r5, [r0, #0]
 80069de:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80069e2:	b2d9      	uxtb	r1, r3
 80069e4:	2909      	cmp	r1, #9
 80069e6:	d928      	bls.n	8006a3a <_strtod_l+0x1a2>
 80069e8:	2201      	movs	r2, #1
 80069ea:	4950      	ldr	r1, [pc, #320]	@ (8006b2c <_strtod_l+0x294>)
 80069ec:	f000 ffc8 	bl	8007980 <strncmp>
 80069f0:	2800      	cmp	r0, #0
 80069f2:	d032      	beq.n	8006a5a <_strtod_l+0x1c2>
 80069f4:	2000      	movs	r0, #0
 80069f6:	462a      	mov	r2, r5
 80069f8:	4603      	mov	r3, r0
 80069fa:	464d      	mov	r5, r9
 80069fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80069fe:	2a65      	cmp	r2, #101	@ 0x65
 8006a00:	d001      	beq.n	8006a06 <_strtod_l+0x16e>
 8006a02:	2a45      	cmp	r2, #69	@ 0x45
 8006a04:	d114      	bne.n	8006a30 <_strtod_l+0x198>
 8006a06:	b91d      	cbnz	r5, 8006a10 <_strtod_l+0x178>
 8006a08:	9a08      	ldr	r2, [sp, #32]
 8006a0a:	4302      	orrs	r2, r0
 8006a0c:	d096      	beq.n	800693c <_strtod_l+0xa4>
 8006a0e:	2500      	movs	r5, #0
 8006a10:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006a12:	1c62      	adds	r2, r4, #1
 8006a14:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a16:	7862      	ldrb	r2, [r4, #1]
 8006a18:	2a2b      	cmp	r2, #43	@ 0x2b
 8006a1a:	d07a      	beq.n	8006b12 <_strtod_l+0x27a>
 8006a1c:	2a2d      	cmp	r2, #45	@ 0x2d
 8006a1e:	d07e      	beq.n	8006b1e <_strtod_l+0x286>
 8006a20:	f04f 0c00 	mov.w	ip, #0
 8006a24:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006a28:	2909      	cmp	r1, #9
 8006a2a:	f240 8085 	bls.w	8006b38 <_strtod_l+0x2a0>
 8006a2e:	9419      	str	r4, [sp, #100]	@ 0x64
 8006a30:	f04f 0800 	mov.w	r8, #0
 8006a34:	e0a5      	b.n	8006b82 <_strtod_l+0x2ea>
 8006a36:	2300      	movs	r3, #0
 8006a38:	e7c8      	b.n	80069cc <_strtod_l+0x134>
 8006a3a:	f1b9 0f08 	cmp.w	r9, #8
 8006a3e:	bfd8      	it	le
 8006a40:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8006a42:	f100 0001 	add.w	r0, r0, #1
 8006a46:	bfd6      	itet	le
 8006a48:	fb02 3301 	mlale	r3, r2, r1, r3
 8006a4c:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006a50:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8006a52:	f109 0901 	add.w	r9, r9, #1
 8006a56:	9019      	str	r0, [sp, #100]	@ 0x64
 8006a58:	e7bf      	b.n	80069da <_strtod_l+0x142>
 8006a5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a5c:	1c5a      	adds	r2, r3, #1
 8006a5e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a60:	785a      	ldrb	r2, [r3, #1]
 8006a62:	f1b9 0f00 	cmp.w	r9, #0
 8006a66:	d03b      	beq.n	8006ae0 <_strtod_l+0x248>
 8006a68:	464d      	mov	r5, r9
 8006a6a:	900a      	str	r0, [sp, #40]	@ 0x28
 8006a6c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006a70:	2b09      	cmp	r3, #9
 8006a72:	d912      	bls.n	8006a9a <_strtod_l+0x202>
 8006a74:	2301      	movs	r3, #1
 8006a76:	e7c2      	b.n	80069fe <_strtod_l+0x166>
 8006a78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a7a:	3001      	adds	r0, #1
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a80:	785a      	ldrb	r2, [r3, #1]
 8006a82:	2a30      	cmp	r2, #48	@ 0x30
 8006a84:	d0f8      	beq.n	8006a78 <_strtod_l+0x1e0>
 8006a86:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006a8a:	2b08      	cmp	r3, #8
 8006a8c:	f200 84c8 	bhi.w	8007420 <_strtod_l+0xb88>
 8006a90:	900a      	str	r0, [sp, #40]	@ 0x28
 8006a92:	2000      	movs	r0, #0
 8006a94:	4605      	mov	r5, r0
 8006a96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a98:	930c      	str	r3, [sp, #48]	@ 0x30
 8006a9a:	3a30      	subs	r2, #48	@ 0x30
 8006a9c:	f100 0301 	add.w	r3, r0, #1
 8006aa0:	d018      	beq.n	8006ad4 <_strtod_l+0x23c>
 8006aa2:	462e      	mov	r6, r5
 8006aa4:	f04f 0e0a 	mov.w	lr, #10
 8006aa8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006aaa:	4419      	add	r1, r3
 8006aac:	910a      	str	r1, [sp, #40]	@ 0x28
 8006aae:	1c71      	adds	r1, r6, #1
 8006ab0:	eba1 0c05 	sub.w	ip, r1, r5
 8006ab4:	4563      	cmp	r3, ip
 8006ab6:	dc15      	bgt.n	8006ae4 <_strtod_l+0x24c>
 8006ab8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006abc:	182b      	adds	r3, r5, r0
 8006abe:	2b08      	cmp	r3, #8
 8006ac0:	f105 0501 	add.w	r5, r5, #1
 8006ac4:	4405      	add	r5, r0
 8006ac6:	dc1a      	bgt.n	8006afe <_strtod_l+0x266>
 8006ac8:	230a      	movs	r3, #10
 8006aca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006acc:	fb03 2301 	mla	r3, r3, r1, r2
 8006ad0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	1c51      	adds	r1, r2, #1
 8006ada:	9119      	str	r1, [sp, #100]	@ 0x64
 8006adc:	7852      	ldrb	r2, [r2, #1]
 8006ade:	e7c5      	b.n	8006a6c <_strtod_l+0x1d4>
 8006ae0:	4648      	mov	r0, r9
 8006ae2:	e7ce      	b.n	8006a82 <_strtod_l+0x1ea>
 8006ae4:	2e08      	cmp	r6, #8
 8006ae6:	dc05      	bgt.n	8006af4 <_strtod_l+0x25c>
 8006ae8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006aea:	fb0e f606 	mul.w	r6, lr, r6
 8006aee:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006af0:	460e      	mov	r6, r1
 8006af2:	e7dc      	b.n	8006aae <_strtod_l+0x216>
 8006af4:	2910      	cmp	r1, #16
 8006af6:	bfd8      	it	le
 8006af8:	fb0e f707 	mulle.w	r7, lr, r7
 8006afc:	e7f8      	b.n	8006af0 <_strtod_l+0x258>
 8006afe:	2b0f      	cmp	r3, #15
 8006b00:	bfdc      	itt	le
 8006b02:	230a      	movle	r3, #10
 8006b04:	fb03 2707 	mlale	r7, r3, r7, r2
 8006b08:	e7e3      	b.n	8006ad2 <_strtod_l+0x23a>
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e77a      	b.n	8006a08 <_strtod_l+0x170>
 8006b12:	f04f 0c00 	mov.w	ip, #0
 8006b16:	1ca2      	adds	r2, r4, #2
 8006b18:	9219      	str	r2, [sp, #100]	@ 0x64
 8006b1a:	78a2      	ldrb	r2, [r4, #2]
 8006b1c:	e782      	b.n	8006a24 <_strtod_l+0x18c>
 8006b1e:	f04f 0c01 	mov.w	ip, #1
 8006b22:	e7f8      	b.n	8006b16 <_strtod_l+0x27e>
 8006b24:	08008edc 	.word	0x08008edc
 8006b28:	7ff00000 	.word	0x7ff00000
 8006b2c:	08008d15 	.word	0x08008d15
 8006b30:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006b32:	1c51      	adds	r1, r2, #1
 8006b34:	9119      	str	r1, [sp, #100]	@ 0x64
 8006b36:	7852      	ldrb	r2, [r2, #1]
 8006b38:	2a30      	cmp	r2, #48	@ 0x30
 8006b3a:	d0f9      	beq.n	8006b30 <_strtod_l+0x298>
 8006b3c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006b40:	2908      	cmp	r1, #8
 8006b42:	f63f af75 	bhi.w	8006a30 <_strtod_l+0x198>
 8006b46:	f04f 080a 	mov.w	r8, #10
 8006b4a:	3a30      	subs	r2, #48	@ 0x30
 8006b4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b4e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006b50:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006b52:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006b54:	1c56      	adds	r6, r2, #1
 8006b56:	9619      	str	r6, [sp, #100]	@ 0x64
 8006b58:	7852      	ldrb	r2, [r2, #1]
 8006b5a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006b5e:	f1be 0f09 	cmp.w	lr, #9
 8006b62:	d939      	bls.n	8006bd8 <_strtod_l+0x340>
 8006b64:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006b66:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006b6a:	1a76      	subs	r6, r6, r1
 8006b6c:	2e08      	cmp	r6, #8
 8006b6e:	dc03      	bgt.n	8006b78 <_strtod_l+0x2e0>
 8006b70:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006b72:	4588      	cmp	r8, r1
 8006b74:	bfa8      	it	ge
 8006b76:	4688      	movge	r8, r1
 8006b78:	f1bc 0f00 	cmp.w	ip, #0
 8006b7c:	d001      	beq.n	8006b82 <_strtod_l+0x2ea>
 8006b7e:	f1c8 0800 	rsb	r8, r8, #0
 8006b82:	2d00      	cmp	r5, #0
 8006b84:	d14e      	bne.n	8006c24 <_strtod_l+0x38c>
 8006b86:	9908      	ldr	r1, [sp, #32]
 8006b88:	4308      	orrs	r0, r1
 8006b8a:	f47f aebe 	bne.w	800690a <_strtod_l+0x72>
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f47f aed4 	bne.w	800693c <_strtod_l+0xa4>
 8006b94:	2a69      	cmp	r2, #105	@ 0x69
 8006b96:	d028      	beq.n	8006bea <_strtod_l+0x352>
 8006b98:	dc25      	bgt.n	8006be6 <_strtod_l+0x34e>
 8006b9a:	2a49      	cmp	r2, #73	@ 0x49
 8006b9c:	d025      	beq.n	8006bea <_strtod_l+0x352>
 8006b9e:	2a4e      	cmp	r2, #78	@ 0x4e
 8006ba0:	f47f aecc 	bne.w	800693c <_strtod_l+0xa4>
 8006ba4:	4999      	ldr	r1, [pc, #612]	@ (8006e0c <_strtod_l+0x574>)
 8006ba6:	a819      	add	r0, sp, #100	@ 0x64
 8006ba8:	f001 f9dc 	bl	8007f64 <__match>
 8006bac:	2800      	cmp	r0, #0
 8006bae:	f43f aec5 	beq.w	800693c <_strtod_l+0xa4>
 8006bb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	2b28      	cmp	r3, #40	@ 0x28
 8006bb8:	d12e      	bne.n	8006c18 <_strtod_l+0x380>
 8006bba:	4995      	ldr	r1, [pc, #596]	@ (8006e10 <_strtod_l+0x578>)
 8006bbc:	aa1c      	add	r2, sp, #112	@ 0x70
 8006bbe:	a819      	add	r0, sp, #100	@ 0x64
 8006bc0:	f001 f9e4 	bl	8007f8c <__hexnan>
 8006bc4:	2805      	cmp	r0, #5
 8006bc6:	d127      	bne.n	8006c18 <_strtod_l+0x380>
 8006bc8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006bca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006bce:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006bd2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006bd6:	e698      	b.n	800690a <_strtod_l+0x72>
 8006bd8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006bda:	fb08 2101 	mla	r1, r8, r1, r2
 8006bde:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006be2:	9209      	str	r2, [sp, #36]	@ 0x24
 8006be4:	e7b5      	b.n	8006b52 <_strtod_l+0x2ba>
 8006be6:	2a6e      	cmp	r2, #110	@ 0x6e
 8006be8:	e7da      	b.n	8006ba0 <_strtod_l+0x308>
 8006bea:	498a      	ldr	r1, [pc, #552]	@ (8006e14 <_strtod_l+0x57c>)
 8006bec:	a819      	add	r0, sp, #100	@ 0x64
 8006bee:	f001 f9b9 	bl	8007f64 <__match>
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	f43f aea2 	beq.w	800693c <_strtod_l+0xa4>
 8006bf8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006bfa:	4987      	ldr	r1, [pc, #540]	@ (8006e18 <_strtod_l+0x580>)
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	a819      	add	r0, sp, #100	@ 0x64
 8006c00:	9319      	str	r3, [sp, #100]	@ 0x64
 8006c02:	f001 f9af 	bl	8007f64 <__match>
 8006c06:	b910      	cbnz	r0, 8006c0e <_strtod_l+0x376>
 8006c08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	9319      	str	r3, [sp, #100]	@ 0x64
 8006c0e:	f04f 0a00 	mov.w	sl, #0
 8006c12:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8006e1c <_strtod_l+0x584>
 8006c16:	e678      	b.n	800690a <_strtod_l+0x72>
 8006c18:	4881      	ldr	r0, [pc, #516]	@ (8006e20 <_strtod_l+0x588>)
 8006c1a:	f000 fee1 	bl	80079e0 <nan>
 8006c1e:	4682      	mov	sl, r0
 8006c20:	468b      	mov	fp, r1
 8006c22:	e672      	b.n	800690a <_strtod_l+0x72>
 8006c24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c26:	f1b9 0f00 	cmp.w	r9, #0
 8006c2a:	bf08      	it	eq
 8006c2c:	46a9      	moveq	r9, r5
 8006c2e:	eba8 0303 	sub.w	r3, r8, r3
 8006c32:	2d10      	cmp	r5, #16
 8006c34:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006c36:	462c      	mov	r4, r5
 8006c38:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c3a:	bfa8      	it	ge
 8006c3c:	2410      	movge	r4, #16
 8006c3e:	f7f9 fbd1 	bl	80003e4 <__aeabi_ui2d>
 8006c42:	2d09      	cmp	r5, #9
 8006c44:	4682      	mov	sl, r0
 8006c46:	468b      	mov	fp, r1
 8006c48:	dc11      	bgt.n	8006c6e <_strtod_l+0x3d6>
 8006c4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f43f ae5c 	beq.w	800690a <_strtod_l+0x72>
 8006c52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c54:	dd76      	ble.n	8006d44 <_strtod_l+0x4ac>
 8006c56:	2b16      	cmp	r3, #22
 8006c58:	dc5d      	bgt.n	8006d16 <_strtod_l+0x47e>
 8006c5a:	4972      	ldr	r1, [pc, #456]	@ (8006e24 <_strtod_l+0x58c>)
 8006c5c:	4652      	mov	r2, sl
 8006c5e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006c62:	465b      	mov	r3, fp
 8006c64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c68:	f7f9 fc36 	bl	80004d8 <__aeabi_dmul>
 8006c6c:	e7d7      	b.n	8006c1e <_strtod_l+0x386>
 8006c6e:	4b6d      	ldr	r3, [pc, #436]	@ (8006e24 <_strtod_l+0x58c>)
 8006c70:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c74:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006c78:	f7f9 fc2e 	bl	80004d8 <__aeabi_dmul>
 8006c7c:	4682      	mov	sl, r0
 8006c7e:	4638      	mov	r0, r7
 8006c80:	468b      	mov	fp, r1
 8006c82:	f7f9 fbaf 	bl	80003e4 <__aeabi_ui2d>
 8006c86:	4602      	mov	r2, r0
 8006c88:	460b      	mov	r3, r1
 8006c8a:	4650      	mov	r0, sl
 8006c8c:	4659      	mov	r1, fp
 8006c8e:	f7f9 fa6d 	bl	800016c <__adddf3>
 8006c92:	2d0f      	cmp	r5, #15
 8006c94:	4682      	mov	sl, r0
 8006c96:	468b      	mov	fp, r1
 8006c98:	ddd7      	ble.n	8006c4a <_strtod_l+0x3b2>
 8006c9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c9c:	1b2c      	subs	r4, r5, r4
 8006c9e:	441c      	add	r4, r3
 8006ca0:	2c00      	cmp	r4, #0
 8006ca2:	f340 8093 	ble.w	8006dcc <_strtod_l+0x534>
 8006ca6:	f014 030f 	ands.w	r3, r4, #15
 8006caa:	d00a      	beq.n	8006cc2 <_strtod_l+0x42a>
 8006cac:	495d      	ldr	r1, [pc, #372]	@ (8006e24 <_strtod_l+0x58c>)
 8006cae:	4652      	mov	r2, sl
 8006cb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006cb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cb8:	465b      	mov	r3, fp
 8006cba:	f7f9 fc0d 	bl	80004d8 <__aeabi_dmul>
 8006cbe:	4682      	mov	sl, r0
 8006cc0:	468b      	mov	fp, r1
 8006cc2:	f034 040f 	bics.w	r4, r4, #15
 8006cc6:	d073      	beq.n	8006db0 <_strtod_l+0x518>
 8006cc8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006ccc:	dd49      	ble.n	8006d62 <_strtod_l+0x4ca>
 8006cce:	2400      	movs	r4, #0
 8006cd0:	46a0      	mov	r8, r4
 8006cd2:	46a1      	mov	r9, r4
 8006cd4:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006cd6:	2322      	movs	r3, #34	@ 0x22
 8006cd8:	f04f 0a00 	mov.w	sl, #0
 8006cdc:	9a05      	ldr	r2, [sp, #20]
 8006cde:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8006e1c <_strtod_l+0x584>
 8006ce2:	6013      	str	r3, [r2, #0]
 8006ce4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f43f ae0f 	beq.w	800690a <_strtod_l+0x72>
 8006cec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006cee:	9805      	ldr	r0, [sp, #20]
 8006cf0:	f7ff f950 	bl	8005f94 <_Bfree>
 8006cf4:	4649      	mov	r1, r9
 8006cf6:	9805      	ldr	r0, [sp, #20]
 8006cf8:	f7ff f94c 	bl	8005f94 <_Bfree>
 8006cfc:	4641      	mov	r1, r8
 8006cfe:	9805      	ldr	r0, [sp, #20]
 8006d00:	f7ff f948 	bl	8005f94 <_Bfree>
 8006d04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d06:	9805      	ldr	r0, [sp, #20]
 8006d08:	f7ff f944 	bl	8005f94 <_Bfree>
 8006d0c:	4621      	mov	r1, r4
 8006d0e:	9805      	ldr	r0, [sp, #20]
 8006d10:	f7ff f940 	bl	8005f94 <_Bfree>
 8006d14:	e5f9      	b.n	800690a <_strtod_l+0x72>
 8006d16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d18:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	dbbc      	blt.n	8006c9a <_strtod_l+0x402>
 8006d20:	4c40      	ldr	r4, [pc, #256]	@ (8006e24 <_strtod_l+0x58c>)
 8006d22:	f1c5 050f 	rsb	r5, r5, #15
 8006d26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006d2a:	4652      	mov	r2, sl
 8006d2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d30:	465b      	mov	r3, fp
 8006d32:	f7f9 fbd1 	bl	80004d8 <__aeabi_dmul>
 8006d36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d38:	1b5d      	subs	r5, r3, r5
 8006d3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006d3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006d42:	e791      	b.n	8006c68 <_strtod_l+0x3d0>
 8006d44:	3316      	adds	r3, #22
 8006d46:	dba8      	blt.n	8006c9a <_strtod_l+0x402>
 8006d48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d4a:	4650      	mov	r0, sl
 8006d4c:	eba3 0808 	sub.w	r8, r3, r8
 8006d50:	4b34      	ldr	r3, [pc, #208]	@ (8006e24 <_strtod_l+0x58c>)
 8006d52:	4659      	mov	r1, fp
 8006d54:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006d58:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006d5c:	f7f9 fce6 	bl	800072c <__aeabi_ddiv>
 8006d60:	e75d      	b.n	8006c1e <_strtod_l+0x386>
 8006d62:	2300      	movs	r3, #0
 8006d64:	4650      	mov	r0, sl
 8006d66:	4659      	mov	r1, fp
 8006d68:	461e      	mov	r6, r3
 8006d6a:	4f2f      	ldr	r7, [pc, #188]	@ (8006e28 <_strtod_l+0x590>)
 8006d6c:	1124      	asrs	r4, r4, #4
 8006d6e:	2c01      	cmp	r4, #1
 8006d70:	dc21      	bgt.n	8006db6 <_strtod_l+0x51e>
 8006d72:	b10b      	cbz	r3, 8006d78 <_strtod_l+0x4e0>
 8006d74:	4682      	mov	sl, r0
 8006d76:	468b      	mov	fp, r1
 8006d78:	492b      	ldr	r1, [pc, #172]	@ (8006e28 <_strtod_l+0x590>)
 8006d7a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006d7e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006d82:	4652      	mov	r2, sl
 8006d84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d88:	465b      	mov	r3, fp
 8006d8a:	f7f9 fba5 	bl	80004d8 <__aeabi_dmul>
 8006d8e:	4b23      	ldr	r3, [pc, #140]	@ (8006e1c <_strtod_l+0x584>)
 8006d90:	460a      	mov	r2, r1
 8006d92:	400b      	ands	r3, r1
 8006d94:	4925      	ldr	r1, [pc, #148]	@ (8006e2c <_strtod_l+0x594>)
 8006d96:	4682      	mov	sl, r0
 8006d98:	428b      	cmp	r3, r1
 8006d9a:	d898      	bhi.n	8006cce <_strtod_l+0x436>
 8006d9c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006da0:	428b      	cmp	r3, r1
 8006da2:	bf86      	itte	hi
 8006da4:	f04f 3aff 	movhi.w	sl, #4294967295
 8006da8:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8006e30 <_strtod_l+0x598>
 8006dac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006db0:	2300      	movs	r3, #0
 8006db2:	9308      	str	r3, [sp, #32]
 8006db4:	e076      	b.n	8006ea4 <_strtod_l+0x60c>
 8006db6:	07e2      	lsls	r2, r4, #31
 8006db8:	d504      	bpl.n	8006dc4 <_strtod_l+0x52c>
 8006dba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dbe:	f7f9 fb8b 	bl	80004d8 <__aeabi_dmul>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	3601      	adds	r6, #1
 8006dc6:	1064      	asrs	r4, r4, #1
 8006dc8:	3708      	adds	r7, #8
 8006dca:	e7d0      	b.n	8006d6e <_strtod_l+0x4d6>
 8006dcc:	d0f0      	beq.n	8006db0 <_strtod_l+0x518>
 8006dce:	4264      	negs	r4, r4
 8006dd0:	f014 020f 	ands.w	r2, r4, #15
 8006dd4:	d00a      	beq.n	8006dec <_strtod_l+0x554>
 8006dd6:	4b13      	ldr	r3, [pc, #76]	@ (8006e24 <_strtod_l+0x58c>)
 8006dd8:	4650      	mov	r0, sl
 8006dda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dde:	4659      	mov	r1, fp
 8006de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de4:	f7f9 fca2 	bl	800072c <__aeabi_ddiv>
 8006de8:	4682      	mov	sl, r0
 8006dea:	468b      	mov	fp, r1
 8006dec:	1124      	asrs	r4, r4, #4
 8006dee:	d0df      	beq.n	8006db0 <_strtod_l+0x518>
 8006df0:	2c1f      	cmp	r4, #31
 8006df2:	dd1f      	ble.n	8006e34 <_strtod_l+0x59c>
 8006df4:	2400      	movs	r4, #0
 8006df6:	46a0      	mov	r8, r4
 8006df8:	46a1      	mov	r9, r4
 8006dfa:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006dfc:	2322      	movs	r3, #34	@ 0x22
 8006dfe:	9a05      	ldr	r2, [sp, #20]
 8006e00:	f04f 0a00 	mov.w	sl, #0
 8006e04:	f04f 0b00 	mov.w	fp, #0
 8006e08:	6013      	str	r3, [r2, #0]
 8006e0a:	e76b      	b.n	8006ce4 <_strtod_l+0x44c>
 8006e0c:	08008c03 	.word	0x08008c03
 8006e10:	08008ec8 	.word	0x08008ec8
 8006e14:	08008bfb 	.word	0x08008bfb
 8006e18:	08008c32 	.word	0x08008c32
 8006e1c:	7ff00000 	.word	0x7ff00000
 8006e20:	08008d6b 	.word	0x08008d6b
 8006e24:	08008e00 	.word	0x08008e00
 8006e28:	08008dd8 	.word	0x08008dd8
 8006e2c:	7ca00000 	.word	0x7ca00000
 8006e30:	7fefffff 	.word	0x7fefffff
 8006e34:	f014 0310 	ands.w	r3, r4, #16
 8006e38:	bf18      	it	ne
 8006e3a:	236a      	movne	r3, #106	@ 0x6a
 8006e3c:	4650      	mov	r0, sl
 8006e3e:	9308      	str	r3, [sp, #32]
 8006e40:	4659      	mov	r1, fp
 8006e42:	2300      	movs	r3, #0
 8006e44:	4e77      	ldr	r6, [pc, #476]	@ (8007024 <_strtod_l+0x78c>)
 8006e46:	07e7      	lsls	r7, r4, #31
 8006e48:	d504      	bpl.n	8006e54 <_strtod_l+0x5bc>
 8006e4a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e4e:	f7f9 fb43 	bl	80004d8 <__aeabi_dmul>
 8006e52:	2301      	movs	r3, #1
 8006e54:	1064      	asrs	r4, r4, #1
 8006e56:	f106 0608 	add.w	r6, r6, #8
 8006e5a:	d1f4      	bne.n	8006e46 <_strtod_l+0x5ae>
 8006e5c:	b10b      	cbz	r3, 8006e62 <_strtod_l+0x5ca>
 8006e5e:	4682      	mov	sl, r0
 8006e60:	468b      	mov	fp, r1
 8006e62:	9b08      	ldr	r3, [sp, #32]
 8006e64:	b1b3      	cbz	r3, 8006e94 <_strtod_l+0x5fc>
 8006e66:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006e6a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	4659      	mov	r1, fp
 8006e72:	dd0f      	ble.n	8006e94 <_strtod_l+0x5fc>
 8006e74:	2b1f      	cmp	r3, #31
 8006e76:	dd58      	ble.n	8006f2a <_strtod_l+0x692>
 8006e78:	2b34      	cmp	r3, #52	@ 0x34
 8006e7a:	bfd8      	it	le
 8006e7c:	f04f 33ff 	movle.w	r3, #4294967295
 8006e80:	f04f 0a00 	mov.w	sl, #0
 8006e84:	bfcf      	iteee	gt
 8006e86:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006e8a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006e8e:	4093      	lslle	r3, r2
 8006e90:	ea03 0b01 	andle.w	fp, r3, r1
 8006e94:	2200      	movs	r2, #0
 8006e96:	2300      	movs	r3, #0
 8006e98:	4650      	mov	r0, sl
 8006e9a:	4659      	mov	r1, fp
 8006e9c:	f7f9 fd84 	bl	80009a8 <__aeabi_dcmpeq>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	d1a7      	bne.n	8006df4 <_strtod_l+0x55c>
 8006ea4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ea6:	464a      	mov	r2, r9
 8006ea8:	9300      	str	r3, [sp, #0]
 8006eaa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006eac:	462b      	mov	r3, r5
 8006eae:	9805      	ldr	r0, [sp, #20]
 8006eb0:	f7ff f8d8 	bl	8006064 <__s2b>
 8006eb4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	f43f af09 	beq.w	8006cce <_strtod_l+0x436>
 8006ebc:	2400      	movs	r4, #0
 8006ebe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ec0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ec2:	2a00      	cmp	r2, #0
 8006ec4:	eba3 0308 	sub.w	r3, r3, r8
 8006ec8:	bfa8      	it	ge
 8006eca:	2300      	movge	r3, #0
 8006ecc:	46a0      	mov	r8, r4
 8006ece:	9312      	str	r3, [sp, #72]	@ 0x48
 8006ed0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006ed4:	9316      	str	r3, [sp, #88]	@ 0x58
 8006ed6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ed8:	9805      	ldr	r0, [sp, #20]
 8006eda:	6859      	ldr	r1, [r3, #4]
 8006edc:	f7ff f81a 	bl	8005f14 <_Balloc>
 8006ee0:	4681      	mov	r9, r0
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	f43f aef7 	beq.w	8006cd6 <_strtod_l+0x43e>
 8006ee8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006eea:	300c      	adds	r0, #12
 8006eec:	691a      	ldr	r2, [r3, #16]
 8006eee:	f103 010c 	add.w	r1, r3, #12
 8006ef2:	3202      	adds	r2, #2
 8006ef4:	0092      	lsls	r2, r2, #2
 8006ef6:	f000 fd65 	bl	80079c4 <memcpy>
 8006efa:	ab1c      	add	r3, sp, #112	@ 0x70
 8006efc:	9301      	str	r3, [sp, #4]
 8006efe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	4652      	mov	r2, sl
 8006f04:	465b      	mov	r3, fp
 8006f06:	9805      	ldr	r0, [sp, #20]
 8006f08:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006f0c:	f7ff fbd6 	bl	80066bc <__d2b>
 8006f10:	901a      	str	r0, [sp, #104]	@ 0x68
 8006f12:	2800      	cmp	r0, #0
 8006f14:	f43f aedf 	beq.w	8006cd6 <_strtod_l+0x43e>
 8006f18:	2101      	movs	r1, #1
 8006f1a:	9805      	ldr	r0, [sp, #20]
 8006f1c:	f7ff f938 	bl	8006190 <__i2b>
 8006f20:	4680      	mov	r8, r0
 8006f22:	b948      	cbnz	r0, 8006f38 <_strtod_l+0x6a0>
 8006f24:	f04f 0800 	mov.w	r8, #0
 8006f28:	e6d5      	b.n	8006cd6 <_strtod_l+0x43e>
 8006f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f32:	ea03 0a0a 	and.w	sl, r3, sl
 8006f36:	e7ad      	b.n	8006e94 <_strtod_l+0x5fc>
 8006f38:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006f3a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006f3c:	2d00      	cmp	r5, #0
 8006f3e:	bfab      	itete	ge
 8006f40:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006f42:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006f44:	18ef      	addge	r7, r5, r3
 8006f46:	1b5e      	sublt	r6, r3, r5
 8006f48:	9b08      	ldr	r3, [sp, #32]
 8006f4a:	bfa8      	it	ge
 8006f4c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006f4e:	eba5 0503 	sub.w	r5, r5, r3
 8006f52:	4415      	add	r5, r2
 8006f54:	4b34      	ldr	r3, [pc, #208]	@ (8007028 <_strtod_l+0x790>)
 8006f56:	f105 35ff 	add.w	r5, r5, #4294967295
 8006f5a:	bfb8      	it	lt
 8006f5c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006f5e:	429d      	cmp	r5, r3
 8006f60:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006f64:	da50      	bge.n	8007008 <_strtod_l+0x770>
 8006f66:	1b5b      	subs	r3, r3, r5
 8006f68:	2b1f      	cmp	r3, #31
 8006f6a:	f04f 0101 	mov.w	r1, #1
 8006f6e:	eba2 0203 	sub.w	r2, r2, r3
 8006f72:	dc3d      	bgt.n	8006ff0 <_strtod_l+0x758>
 8006f74:	fa01 f303 	lsl.w	r3, r1, r3
 8006f78:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	9310      	str	r3, [sp, #64]	@ 0x40
 8006f7e:	18bd      	adds	r5, r7, r2
 8006f80:	9b08      	ldr	r3, [sp, #32]
 8006f82:	42af      	cmp	r7, r5
 8006f84:	4416      	add	r6, r2
 8006f86:	441e      	add	r6, r3
 8006f88:	463b      	mov	r3, r7
 8006f8a:	bfa8      	it	ge
 8006f8c:	462b      	movge	r3, r5
 8006f8e:	42b3      	cmp	r3, r6
 8006f90:	bfa8      	it	ge
 8006f92:	4633      	movge	r3, r6
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	bfc2      	ittt	gt
 8006f98:	1aed      	subgt	r5, r5, r3
 8006f9a:	1af6      	subgt	r6, r6, r3
 8006f9c:	1aff      	subgt	r7, r7, r3
 8006f9e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	dd16      	ble.n	8006fd2 <_strtod_l+0x73a>
 8006fa4:	4641      	mov	r1, r8
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	9805      	ldr	r0, [sp, #20]
 8006faa:	f7ff f9a9 	bl	8006300 <__pow5mult>
 8006fae:	4680      	mov	r8, r0
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	d0b7      	beq.n	8006f24 <_strtod_l+0x68c>
 8006fb4:	4601      	mov	r1, r0
 8006fb6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006fb8:	9805      	ldr	r0, [sp, #20]
 8006fba:	f7ff f8ff 	bl	80061bc <__multiply>
 8006fbe:	900a      	str	r0, [sp, #40]	@ 0x28
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	f43f ae88 	beq.w	8006cd6 <_strtod_l+0x43e>
 8006fc6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006fc8:	9805      	ldr	r0, [sp, #20]
 8006fca:	f7fe ffe3 	bl	8005f94 <_Bfree>
 8006fce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8006fd2:	2d00      	cmp	r5, #0
 8006fd4:	dc1d      	bgt.n	8007012 <_strtod_l+0x77a>
 8006fd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	dd27      	ble.n	800702c <_strtod_l+0x794>
 8006fdc:	4649      	mov	r1, r9
 8006fde:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006fe0:	9805      	ldr	r0, [sp, #20]
 8006fe2:	f7ff f98d 	bl	8006300 <__pow5mult>
 8006fe6:	4681      	mov	r9, r0
 8006fe8:	bb00      	cbnz	r0, 800702c <_strtod_l+0x794>
 8006fea:	f04f 0900 	mov.w	r9, #0
 8006fee:	e672      	b.n	8006cd6 <_strtod_l+0x43e>
 8006ff0:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006ff4:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006ff8:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006ffc:	35e2      	adds	r5, #226	@ 0xe2
 8006ffe:	fa01 f305 	lsl.w	r3, r1, r5
 8007002:	9310      	str	r3, [sp, #64]	@ 0x40
 8007004:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007006:	e7ba      	b.n	8006f7e <_strtod_l+0x6e6>
 8007008:	2300      	movs	r3, #0
 800700a:	9310      	str	r3, [sp, #64]	@ 0x40
 800700c:	2301      	movs	r3, #1
 800700e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007010:	e7b5      	b.n	8006f7e <_strtod_l+0x6e6>
 8007012:	462a      	mov	r2, r5
 8007014:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007016:	9805      	ldr	r0, [sp, #20]
 8007018:	f7ff f9cc 	bl	80063b4 <__lshift>
 800701c:	901a      	str	r0, [sp, #104]	@ 0x68
 800701e:	2800      	cmp	r0, #0
 8007020:	d1d9      	bne.n	8006fd6 <_strtod_l+0x73e>
 8007022:	e658      	b.n	8006cd6 <_strtod_l+0x43e>
 8007024:	08008ef0 	.word	0x08008ef0
 8007028:	fffffc02 	.word	0xfffffc02
 800702c:	2e00      	cmp	r6, #0
 800702e:	dd07      	ble.n	8007040 <_strtod_l+0x7a8>
 8007030:	4649      	mov	r1, r9
 8007032:	4632      	mov	r2, r6
 8007034:	9805      	ldr	r0, [sp, #20]
 8007036:	f7ff f9bd 	bl	80063b4 <__lshift>
 800703a:	4681      	mov	r9, r0
 800703c:	2800      	cmp	r0, #0
 800703e:	d0d4      	beq.n	8006fea <_strtod_l+0x752>
 8007040:	2f00      	cmp	r7, #0
 8007042:	dd08      	ble.n	8007056 <_strtod_l+0x7be>
 8007044:	4641      	mov	r1, r8
 8007046:	463a      	mov	r2, r7
 8007048:	9805      	ldr	r0, [sp, #20]
 800704a:	f7ff f9b3 	bl	80063b4 <__lshift>
 800704e:	4680      	mov	r8, r0
 8007050:	2800      	cmp	r0, #0
 8007052:	f43f ae40 	beq.w	8006cd6 <_strtod_l+0x43e>
 8007056:	464a      	mov	r2, r9
 8007058:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800705a:	9805      	ldr	r0, [sp, #20]
 800705c:	f7ff fa32 	bl	80064c4 <__mdiff>
 8007060:	4604      	mov	r4, r0
 8007062:	2800      	cmp	r0, #0
 8007064:	f43f ae37 	beq.w	8006cd6 <_strtod_l+0x43e>
 8007068:	68c3      	ldr	r3, [r0, #12]
 800706a:	4641      	mov	r1, r8
 800706c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800706e:	2300      	movs	r3, #0
 8007070:	60c3      	str	r3, [r0, #12]
 8007072:	f7ff fa0b 	bl	800648c <__mcmp>
 8007076:	2800      	cmp	r0, #0
 8007078:	da3d      	bge.n	80070f6 <_strtod_l+0x85e>
 800707a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800707c:	ea53 030a 	orrs.w	r3, r3, sl
 8007080:	d163      	bne.n	800714a <_strtod_l+0x8b2>
 8007082:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007086:	2b00      	cmp	r3, #0
 8007088:	d15f      	bne.n	800714a <_strtod_l+0x8b2>
 800708a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800708e:	0d1b      	lsrs	r3, r3, #20
 8007090:	051b      	lsls	r3, r3, #20
 8007092:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007096:	d958      	bls.n	800714a <_strtod_l+0x8b2>
 8007098:	6963      	ldr	r3, [r4, #20]
 800709a:	b913      	cbnz	r3, 80070a2 <_strtod_l+0x80a>
 800709c:	6923      	ldr	r3, [r4, #16]
 800709e:	2b01      	cmp	r3, #1
 80070a0:	dd53      	ble.n	800714a <_strtod_l+0x8b2>
 80070a2:	4621      	mov	r1, r4
 80070a4:	2201      	movs	r2, #1
 80070a6:	9805      	ldr	r0, [sp, #20]
 80070a8:	f7ff f984 	bl	80063b4 <__lshift>
 80070ac:	4641      	mov	r1, r8
 80070ae:	4604      	mov	r4, r0
 80070b0:	f7ff f9ec 	bl	800648c <__mcmp>
 80070b4:	2800      	cmp	r0, #0
 80070b6:	dd48      	ble.n	800714a <_strtod_l+0x8b2>
 80070b8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80070bc:	9a08      	ldr	r2, [sp, #32]
 80070be:	0d1b      	lsrs	r3, r3, #20
 80070c0:	051b      	lsls	r3, r3, #20
 80070c2:	2a00      	cmp	r2, #0
 80070c4:	d062      	beq.n	800718c <_strtod_l+0x8f4>
 80070c6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80070ca:	d85f      	bhi.n	800718c <_strtod_l+0x8f4>
 80070cc:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80070d0:	f67f ae94 	bls.w	8006dfc <_strtod_l+0x564>
 80070d4:	4650      	mov	r0, sl
 80070d6:	4659      	mov	r1, fp
 80070d8:	4ba3      	ldr	r3, [pc, #652]	@ (8007368 <_strtod_l+0xad0>)
 80070da:	2200      	movs	r2, #0
 80070dc:	f7f9 f9fc 	bl	80004d8 <__aeabi_dmul>
 80070e0:	4ba2      	ldr	r3, [pc, #648]	@ (800736c <_strtod_l+0xad4>)
 80070e2:	4682      	mov	sl, r0
 80070e4:	400b      	ands	r3, r1
 80070e6:	468b      	mov	fp, r1
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f47f adff 	bne.w	8006cec <_strtod_l+0x454>
 80070ee:	2322      	movs	r3, #34	@ 0x22
 80070f0:	9a05      	ldr	r2, [sp, #20]
 80070f2:	6013      	str	r3, [r2, #0]
 80070f4:	e5fa      	b.n	8006cec <_strtod_l+0x454>
 80070f6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80070fa:	d165      	bne.n	80071c8 <_strtod_l+0x930>
 80070fc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80070fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007102:	b35a      	cbz	r2, 800715c <_strtod_l+0x8c4>
 8007104:	4a9a      	ldr	r2, [pc, #616]	@ (8007370 <_strtod_l+0xad8>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d12b      	bne.n	8007162 <_strtod_l+0x8ca>
 800710a:	9b08      	ldr	r3, [sp, #32]
 800710c:	4651      	mov	r1, sl
 800710e:	b303      	cbz	r3, 8007152 <_strtod_l+0x8ba>
 8007110:	465a      	mov	r2, fp
 8007112:	4b96      	ldr	r3, [pc, #600]	@ (800736c <_strtod_l+0xad4>)
 8007114:	4013      	ands	r3, r2
 8007116:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800711a:	f04f 32ff 	mov.w	r2, #4294967295
 800711e:	d81b      	bhi.n	8007158 <_strtod_l+0x8c0>
 8007120:	0d1b      	lsrs	r3, r3, #20
 8007122:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007126:	fa02 f303 	lsl.w	r3, r2, r3
 800712a:	4299      	cmp	r1, r3
 800712c:	d119      	bne.n	8007162 <_strtod_l+0x8ca>
 800712e:	4b91      	ldr	r3, [pc, #580]	@ (8007374 <_strtod_l+0xadc>)
 8007130:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007132:	429a      	cmp	r2, r3
 8007134:	d102      	bne.n	800713c <_strtod_l+0x8a4>
 8007136:	3101      	adds	r1, #1
 8007138:	f43f adcd 	beq.w	8006cd6 <_strtod_l+0x43e>
 800713c:	f04f 0a00 	mov.w	sl, #0
 8007140:	4b8a      	ldr	r3, [pc, #552]	@ (800736c <_strtod_l+0xad4>)
 8007142:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007144:	401a      	ands	r2, r3
 8007146:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800714a:	9b08      	ldr	r3, [sp, #32]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1c1      	bne.n	80070d4 <_strtod_l+0x83c>
 8007150:	e5cc      	b.n	8006cec <_strtod_l+0x454>
 8007152:	f04f 33ff 	mov.w	r3, #4294967295
 8007156:	e7e8      	b.n	800712a <_strtod_l+0x892>
 8007158:	4613      	mov	r3, r2
 800715a:	e7e6      	b.n	800712a <_strtod_l+0x892>
 800715c:	ea53 030a 	orrs.w	r3, r3, sl
 8007160:	d0aa      	beq.n	80070b8 <_strtod_l+0x820>
 8007162:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007164:	b1db      	cbz	r3, 800719e <_strtod_l+0x906>
 8007166:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007168:	4213      	tst	r3, r2
 800716a:	d0ee      	beq.n	800714a <_strtod_l+0x8b2>
 800716c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800716e:	4650      	mov	r0, sl
 8007170:	4659      	mov	r1, fp
 8007172:	9a08      	ldr	r2, [sp, #32]
 8007174:	b1bb      	cbz	r3, 80071a6 <_strtod_l+0x90e>
 8007176:	f7ff fb6d 	bl	8006854 <sulp>
 800717a:	4602      	mov	r2, r0
 800717c:	460b      	mov	r3, r1
 800717e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007182:	f7f8 fff3 	bl	800016c <__adddf3>
 8007186:	4682      	mov	sl, r0
 8007188:	468b      	mov	fp, r1
 800718a:	e7de      	b.n	800714a <_strtod_l+0x8b2>
 800718c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007190:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007194:	f04f 3aff 	mov.w	sl, #4294967295
 8007198:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800719c:	e7d5      	b.n	800714a <_strtod_l+0x8b2>
 800719e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80071a0:	ea13 0f0a 	tst.w	r3, sl
 80071a4:	e7e1      	b.n	800716a <_strtod_l+0x8d2>
 80071a6:	f7ff fb55 	bl	8006854 <sulp>
 80071aa:	4602      	mov	r2, r0
 80071ac:	460b      	mov	r3, r1
 80071ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071b2:	f7f8 ffd9 	bl	8000168 <__aeabi_dsub>
 80071b6:	2200      	movs	r2, #0
 80071b8:	2300      	movs	r3, #0
 80071ba:	4682      	mov	sl, r0
 80071bc:	468b      	mov	fp, r1
 80071be:	f7f9 fbf3 	bl	80009a8 <__aeabi_dcmpeq>
 80071c2:	2800      	cmp	r0, #0
 80071c4:	d0c1      	beq.n	800714a <_strtod_l+0x8b2>
 80071c6:	e619      	b.n	8006dfc <_strtod_l+0x564>
 80071c8:	4641      	mov	r1, r8
 80071ca:	4620      	mov	r0, r4
 80071cc:	f7ff face 	bl	800676c <__ratio>
 80071d0:	2200      	movs	r2, #0
 80071d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80071d6:	4606      	mov	r6, r0
 80071d8:	460f      	mov	r7, r1
 80071da:	f7f9 fbf9 	bl	80009d0 <__aeabi_dcmple>
 80071de:	2800      	cmp	r0, #0
 80071e0:	d06d      	beq.n	80072be <_strtod_l+0xa26>
 80071e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d178      	bne.n	80072da <_strtod_l+0xa42>
 80071e8:	f1ba 0f00 	cmp.w	sl, #0
 80071ec:	d156      	bne.n	800729c <_strtod_l+0xa04>
 80071ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d158      	bne.n	80072aa <_strtod_l+0xa12>
 80071f8:	2200      	movs	r2, #0
 80071fa:	4630      	mov	r0, r6
 80071fc:	4639      	mov	r1, r7
 80071fe:	4b5e      	ldr	r3, [pc, #376]	@ (8007378 <_strtod_l+0xae0>)
 8007200:	f7f9 fbdc 	bl	80009bc <__aeabi_dcmplt>
 8007204:	2800      	cmp	r0, #0
 8007206:	d157      	bne.n	80072b8 <_strtod_l+0xa20>
 8007208:	4630      	mov	r0, r6
 800720a:	4639      	mov	r1, r7
 800720c:	2200      	movs	r2, #0
 800720e:	4b5b      	ldr	r3, [pc, #364]	@ (800737c <_strtod_l+0xae4>)
 8007210:	f7f9 f962 	bl	80004d8 <__aeabi_dmul>
 8007214:	4606      	mov	r6, r0
 8007216:	460f      	mov	r7, r1
 8007218:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800721c:	9606      	str	r6, [sp, #24]
 800721e:	9307      	str	r3, [sp, #28]
 8007220:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007224:	4d51      	ldr	r5, [pc, #324]	@ (800736c <_strtod_l+0xad4>)
 8007226:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800722a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800722c:	401d      	ands	r5, r3
 800722e:	4b54      	ldr	r3, [pc, #336]	@ (8007380 <_strtod_l+0xae8>)
 8007230:	429d      	cmp	r5, r3
 8007232:	f040 80ab 	bne.w	800738c <_strtod_l+0xaf4>
 8007236:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007238:	4650      	mov	r0, sl
 800723a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800723e:	4659      	mov	r1, fp
 8007240:	f7ff f9d4 	bl	80065ec <__ulp>
 8007244:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007248:	f7f9 f946 	bl	80004d8 <__aeabi_dmul>
 800724c:	4652      	mov	r2, sl
 800724e:	465b      	mov	r3, fp
 8007250:	f7f8 ff8c 	bl	800016c <__adddf3>
 8007254:	460b      	mov	r3, r1
 8007256:	4945      	ldr	r1, [pc, #276]	@ (800736c <_strtod_l+0xad4>)
 8007258:	4a4a      	ldr	r2, [pc, #296]	@ (8007384 <_strtod_l+0xaec>)
 800725a:	4019      	ands	r1, r3
 800725c:	4291      	cmp	r1, r2
 800725e:	4682      	mov	sl, r0
 8007260:	d942      	bls.n	80072e8 <_strtod_l+0xa50>
 8007262:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007264:	4b43      	ldr	r3, [pc, #268]	@ (8007374 <_strtod_l+0xadc>)
 8007266:	429a      	cmp	r2, r3
 8007268:	d103      	bne.n	8007272 <_strtod_l+0x9da>
 800726a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800726c:	3301      	adds	r3, #1
 800726e:	f43f ad32 	beq.w	8006cd6 <_strtod_l+0x43e>
 8007272:	f04f 3aff 	mov.w	sl, #4294967295
 8007276:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8007374 <_strtod_l+0xadc>
 800727a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800727c:	9805      	ldr	r0, [sp, #20]
 800727e:	f7fe fe89 	bl	8005f94 <_Bfree>
 8007282:	4649      	mov	r1, r9
 8007284:	9805      	ldr	r0, [sp, #20]
 8007286:	f7fe fe85 	bl	8005f94 <_Bfree>
 800728a:	4641      	mov	r1, r8
 800728c:	9805      	ldr	r0, [sp, #20]
 800728e:	f7fe fe81 	bl	8005f94 <_Bfree>
 8007292:	4621      	mov	r1, r4
 8007294:	9805      	ldr	r0, [sp, #20]
 8007296:	f7fe fe7d 	bl	8005f94 <_Bfree>
 800729a:	e61c      	b.n	8006ed6 <_strtod_l+0x63e>
 800729c:	f1ba 0f01 	cmp.w	sl, #1
 80072a0:	d103      	bne.n	80072aa <_strtod_l+0xa12>
 80072a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f43f ada9 	beq.w	8006dfc <_strtod_l+0x564>
 80072aa:	2200      	movs	r2, #0
 80072ac:	4b36      	ldr	r3, [pc, #216]	@ (8007388 <_strtod_l+0xaf0>)
 80072ae:	2600      	movs	r6, #0
 80072b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80072b4:	4f30      	ldr	r7, [pc, #192]	@ (8007378 <_strtod_l+0xae0>)
 80072b6:	e7b3      	b.n	8007220 <_strtod_l+0x988>
 80072b8:	2600      	movs	r6, #0
 80072ba:	4f30      	ldr	r7, [pc, #192]	@ (800737c <_strtod_l+0xae4>)
 80072bc:	e7ac      	b.n	8007218 <_strtod_l+0x980>
 80072be:	4630      	mov	r0, r6
 80072c0:	4639      	mov	r1, r7
 80072c2:	4b2e      	ldr	r3, [pc, #184]	@ (800737c <_strtod_l+0xae4>)
 80072c4:	2200      	movs	r2, #0
 80072c6:	f7f9 f907 	bl	80004d8 <__aeabi_dmul>
 80072ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072cc:	4606      	mov	r6, r0
 80072ce:	460f      	mov	r7, r1
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d0a1      	beq.n	8007218 <_strtod_l+0x980>
 80072d4:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80072d8:	e7a2      	b.n	8007220 <_strtod_l+0x988>
 80072da:	2200      	movs	r2, #0
 80072dc:	4b26      	ldr	r3, [pc, #152]	@ (8007378 <_strtod_l+0xae0>)
 80072de:	4616      	mov	r6, r2
 80072e0:	461f      	mov	r7, r3
 80072e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80072e6:	e79b      	b.n	8007220 <_strtod_l+0x988>
 80072e8:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80072ec:	9b08      	ldr	r3, [sp, #32]
 80072ee:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1c1      	bne.n	800727a <_strtod_l+0x9e2>
 80072f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80072fa:	0d1b      	lsrs	r3, r3, #20
 80072fc:	051b      	lsls	r3, r3, #20
 80072fe:	429d      	cmp	r5, r3
 8007300:	d1bb      	bne.n	800727a <_strtod_l+0x9e2>
 8007302:	4630      	mov	r0, r6
 8007304:	4639      	mov	r1, r7
 8007306:	f7f9 fe8d 	bl	8001024 <__aeabi_d2lz>
 800730a:	f7f9 f8b7 	bl	800047c <__aeabi_l2d>
 800730e:	4602      	mov	r2, r0
 8007310:	460b      	mov	r3, r1
 8007312:	4630      	mov	r0, r6
 8007314:	4639      	mov	r1, r7
 8007316:	f7f8 ff27 	bl	8000168 <__aeabi_dsub>
 800731a:	460b      	mov	r3, r1
 800731c:	4602      	mov	r2, r0
 800731e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007322:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007326:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007328:	ea46 060a 	orr.w	r6, r6, sl
 800732c:	431e      	orrs	r6, r3
 800732e:	d06a      	beq.n	8007406 <_strtod_l+0xb6e>
 8007330:	a309      	add	r3, pc, #36	@ (adr r3, 8007358 <_strtod_l+0xac0>)
 8007332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007336:	f7f9 fb41 	bl	80009bc <__aeabi_dcmplt>
 800733a:	2800      	cmp	r0, #0
 800733c:	f47f acd6 	bne.w	8006cec <_strtod_l+0x454>
 8007340:	a307      	add	r3, pc, #28	@ (adr r3, 8007360 <_strtod_l+0xac8>)
 8007342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007346:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800734a:	f7f9 fb55 	bl	80009f8 <__aeabi_dcmpgt>
 800734e:	2800      	cmp	r0, #0
 8007350:	d093      	beq.n	800727a <_strtod_l+0x9e2>
 8007352:	e4cb      	b.n	8006cec <_strtod_l+0x454>
 8007354:	f3af 8000 	nop.w
 8007358:	94a03595 	.word	0x94a03595
 800735c:	3fdfffff 	.word	0x3fdfffff
 8007360:	35afe535 	.word	0x35afe535
 8007364:	3fe00000 	.word	0x3fe00000
 8007368:	39500000 	.word	0x39500000
 800736c:	7ff00000 	.word	0x7ff00000
 8007370:	000fffff 	.word	0x000fffff
 8007374:	7fefffff 	.word	0x7fefffff
 8007378:	3ff00000 	.word	0x3ff00000
 800737c:	3fe00000 	.word	0x3fe00000
 8007380:	7fe00000 	.word	0x7fe00000
 8007384:	7c9fffff 	.word	0x7c9fffff
 8007388:	bff00000 	.word	0xbff00000
 800738c:	9b08      	ldr	r3, [sp, #32]
 800738e:	b323      	cbz	r3, 80073da <_strtod_l+0xb42>
 8007390:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007394:	d821      	bhi.n	80073da <_strtod_l+0xb42>
 8007396:	a328      	add	r3, pc, #160	@ (adr r3, 8007438 <_strtod_l+0xba0>)
 8007398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739c:	4630      	mov	r0, r6
 800739e:	4639      	mov	r1, r7
 80073a0:	f7f9 fb16 	bl	80009d0 <__aeabi_dcmple>
 80073a4:	b1a0      	cbz	r0, 80073d0 <_strtod_l+0xb38>
 80073a6:	4639      	mov	r1, r7
 80073a8:	4630      	mov	r0, r6
 80073aa:	f7f9 fb6d 	bl	8000a88 <__aeabi_d2uiz>
 80073ae:	2801      	cmp	r0, #1
 80073b0:	bf38      	it	cc
 80073b2:	2001      	movcc	r0, #1
 80073b4:	f7f9 f816 	bl	80003e4 <__aeabi_ui2d>
 80073b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073ba:	4606      	mov	r6, r0
 80073bc:	460f      	mov	r7, r1
 80073be:	b9fb      	cbnz	r3, 8007400 <_strtod_l+0xb68>
 80073c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80073c4:	9014      	str	r0, [sp, #80]	@ 0x50
 80073c6:	9315      	str	r3, [sp, #84]	@ 0x54
 80073c8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80073cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80073d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80073d2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80073d6:	1b5b      	subs	r3, r3, r5
 80073d8:	9311      	str	r3, [sp, #68]	@ 0x44
 80073da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073de:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80073e2:	f7ff f903 	bl	80065ec <__ulp>
 80073e6:	4602      	mov	r2, r0
 80073e8:	460b      	mov	r3, r1
 80073ea:	4650      	mov	r0, sl
 80073ec:	4659      	mov	r1, fp
 80073ee:	f7f9 f873 	bl	80004d8 <__aeabi_dmul>
 80073f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80073f6:	f7f8 feb9 	bl	800016c <__adddf3>
 80073fa:	4682      	mov	sl, r0
 80073fc:	468b      	mov	fp, r1
 80073fe:	e775      	b.n	80072ec <_strtod_l+0xa54>
 8007400:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007404:	e7e0      	b.n	80073c8 <_strtod_l+0xb30>
 8007406:	a30e      	add	r3, pc, #56	@ (adr r3, 8007440 <_strtod_l+0xba8>)
 8007408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740c:	f7f9 fad6 	bl	80009bc <__aeabi_dcmplt>
 8007410:	e79d      	b.n	800734e <_strtod_l+0xab6>
 8007412:	2300      	movs	r3, #0
 8007414:	930e      	str	r3, [sp, #56]	@ 0x38
 8007416:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007418:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800741a:	6013      	str	r3, [r2, #0]
 800741c:	f7ff ba79 	b.w	8006912 <_strtod_l+0x7a>
 8007420:	2a65      	cmp	r2, #101	@ 0x65
 8007422:	f43f ab72 	beq.w	8006b0a <_strtod_l+0x272>
 8007426:	2a45      	cmp	r2, #69	@ 0x45
 8007428:	f43f ab6f 	beq.w	8006b0a <_strtod_l+0x272>
 800742c:	2301      	movs	r3, #1
 800742e:	f7ff bbaa 	b.w	8006b86 <_strtod_l+0x2ee>
 8007432:	bf00      	nop
 8007434:	f3af 8000 	nop.w
 8007438:	ffc00000 	.word	0xffc00000
 800743c:	41dfffff 	.word	0x41dfffff
 8007440:	94a03595 	.word	0x94a03595
 8007444:	3fcfffff 	.word	0x3fcfffff

08007448 <_strtod_r>:
 8007448:	4b01      	ldr	r3, [pc, #4]	@ (8007450 <_strtod_r+0x8>)
 800744a:	f7ff ba25 	b.w	8006898 <_strtod_l>
 800744e:	bf00      	nop
 8007450:	2000006c 	.word	0x2000006c

08007454 <_strtol_l.isra.0>:
 8007454:	2b24      	cmp	r3, #36	@ 0x24
 8007456:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800745a:	4686      	mov	lr, r0
 800745c:	4690      	mov	r8, r2
 800745e:	d801      	bhi.n	8007464 <_strtol_l.isra.0+0x10>
 8007460:	2b01      	cmp	r3, #1
 8007462:	d106      	bne.n	8007472 <_strtol_l.isra.0+0x1e>
 8007464:	f7fd fdbc 	bl	8004fe0 <__errno>
 8007468:	2316      	movs	r3, #22
 800746a:	6003      	str	r3, [r0, #0]
 800746c:	2000      	movs	r0, #0
 800746e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007472:	460d      	mov	r5, r1
 8007474:	4833      	ldr	r0, [pc, #204]	@ (8007544 <_strtol_l.isra.0+0xf0>)
 8007476:	462a      	mov	r2, r5
 8007478:	f815 4b01 	ldrb.w	r4, [r5], #1
 800747c:	5d06      	ldrb	r6, [r0, r4]
 800747e:	f016 0608 	ands.w	r6, r6, #8
 8007482:	d1f8      	bne.n	8007476 <_strtol_l.isra.0+0x22>
 8007484:	2c2d      	cmp	r4, #45	@ 0x2d
 8007486:	d110      	bne.n	80074aa <_strtol_l.isra.0+0x56>
 8007488:	2601      	movs	r6, #1
 800748a:	782c      	ldrb	r4, [r5, #0]
 800748c:	1c95      	adds	r5, r2, #2
 800748e:	f033 0210 	bics.w	r2, r3, #16
 8007492:	d115      	bne.n	80074c0 <_strtol_l.isra.0+0x6c>
 8007494:	2c30      	cmp	r4, #48	@ 0x30
 8007496:	d10d      	bne.n	80074b4 <_strtol_l.isra.0+0x60>
 8007498:	782a      	ldrb	r2, [r5, #0]
 800749a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800749e:	2a58      	cmp	r2, #88	@ 0x58
 80074a0:	d108      	bne.n	80074b4 <_strtol_l.isra.0+0x60>
 80074a2:	786c      	ldrb	r4, [r5, #1]
 80074a4:	3502      	adds	r5, #2
 80074a6:	2310      	movs	r3, #16
 80074a8:	e00a      	b.n	80074c0 <_strtol_l.isra.0+0x6c>
 80074aa:	2c2b      	cmp	r4, #43	@ 0x2b
 80074ac:	bf04      	itt	eq
 80074ae:	782c      	ldrbeq	r4, [r5, #0]
 80074b0:	1c95      	addeq	r5, r2, #2
 80074b2:	e7ec      	b.n	800748e <_strtol_l.isra.0+0x3a>
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d1f6      	bne.n	80074a6 <_strtol_l.isra.0+0x52>
 80074b8:	2c30      	cmp	r4, #48	@ 0x30
 80074ba:	bf14      	ite	ne
 80074bc:	230a      	movne	r3, #10
 80074be:	2308      	moveq	r3, #8
 80074c0:	2200      	movs	r2, #0
 80074c2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80074c6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80074ca:	fbbc f9f3 	udiv	r9, ip, r3
 80074ce:	4610      	mov	r0, r2
 80074d0:	fb03 ca19 	mls	sl, r3, r9, ip
 80074d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80074d8:	2f09      	cmp	r7, #9
 80074da:	d80f      	bhi.n	80074fc <_strtol_l.isra.0+0xa8>
 80074dc:	463c      	mov	r4, r7
 80074de:	42a3      	cmp	r3, r4
 80074e0:	dd1b      	ble.n	800751a <_strtol_l.isra.0+0xc6>
 80074e2:	1c57      	adds	r7, r2, #1
 80074e4:	d007      	beq.n	80074f6 <_strtol_l.isra.0+0xa2>
 80074e6:	4581      	cmp	r9, r0
 80074e8:	d314      	bcc.n	8007514 <_strtol_l.isra.0+0xc0>
 80074ea:	d101      	bne.n	80074f0 <_strtol_l.isra.0+0x9c>
 80074ec:	45a2      	cmp	sl, r4
 80074ee:	db11      	blt.n	8007514 <_strtol_l.isra.0+0xc0>
 80074f0:	2201      	movs	r2, #1
 80074f2:	fb00 4003 	mla	r0, r0, r3, r4
 80074f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074fa:	e7eb      	b.n	80074d4 <_strtol_l.isra.0+0x80>
 80074fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007500:	2f19      	cmp	r7, #25
 8007502:	d801      	bhi.n	8007508 <_strtol_l.isra.0+0xb4>
 8007504:	3c37      	subs	r4, #55	@ 0x37
 8007506:	e7ea      	b.n	80074de <_strtol_l.isra.0+0x8a>
 8007508:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800750c:	2f19      	cmp	r7, #25
 800750e:	d804      	bhi.n	800751a <_strtol_l.isra.0+0xc6>
 8007510:	3c57      	subs	r4, #87	@ 0x57
 8007512:	e7e4      	b.n	80074de <_strtol_l.isra.0+0x8a>
 8007514:	f04f 32ff 	mov.w	r2, #4294967295
 8007518:	e7ed      	b.n	80074f6 <_strtol_l.isra.0+0xa2>
 800751a:	1c53      	adds	r3, r2, #1
 800751c:	d108      	bne.n	8007530 <_strtol_l.isra.0+0xdc>
 800751e:	2322      	movs	r3, #34	@ 0x22
 8007520:	4660      	mov	r0, ip
 8007522:	f8ce 3000 	str.w	r3, [lr]
 8007526:	f1b8 0f00 	cmp.w	r8, #0
 800752a:	d0a0      	beq.n	800746e <_strtol_l.isra.0+0x1a>
 800752c:	1e69      	subs	r1, r5, #1
 800752e:	e006      	b.n	800753e <_strtol_l.isra.0+0xea>
 8007530:	b106      	cbz	r6, 8007534 <_strtol_l.isra.0+0xe0>
 8007532:	4240      	negs	r0, r0
 8007534:	f1b8 0f00 	cmp.w	r8, #0
 8007538:	d099      	beq.n	800746e <_strtol_l.isra.0+0x1a>
 800753a:	2a00      	cmp	r2, #0
 800753c:	d1f6      	bne.n	800752c <_strtol_l.isra.0+0xd8>
 800753e:	f8c8 1000 	str.w	r1, [r8]
 8007542:	e794      	b.n	800746e <_strtol_l.isra.0+0x1a>
 8007544:	08008f19 	.word	0x08008f19

08007548 <_strtol_r>:
 8007548:	f7ff bf84 	b.w	8007454 <_strtol_l.isra.0>

0800754c <__ssputs_r>:
 800754c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007550:	461f      	mov	r7, r3
 8007552:	688e      	ldr	r6, [r1, #8]
 8007554:	4682      	mov	sl, r0
 8007556:	42be      	cmp	r6, r7
 8007558:	460c      	mov	r4, r1
 800755a:	4690      	mov	r8, r2
 800755c:	680b      	ldr	r3, [r1, #0]
 800755e:	d82d      	bhi.n	80075bc <__ssputs_r+0x70>
 8007560:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007564:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007568:	d026      	beq.n	80075b8 <__ssputs_r+0x6c>
 800756a:	6965      	ldr	r5, [r4, #20]
 800756c:	6909      	ldr	r1, [r1, #16]
 800756e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007572:	eba3 0901 	sub.w	r9, r3, r1
 8007576:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800757a:	1c7b      	adds	r3, r7, #1
 800757c:	444b      	add	r3, r9
 800757e:	106d      	asrs	r5, r5, #1
 8007580:	429d      	cmp	r5, r3
 8007582:	bf38      	it	cc
 8007584:	461d      	movcc	r5, r3
 8007586:	0553      	lsls	r3, r2, #21
 8007588:	d527      	bpl.n	80075da <__ssputs_r+0x8e>
 800758a:	4629      	mov	r1, r5
 800758c:	f7fe fc36 	bl	8005dfc <_malloc_r>
 8007590:	4606      	mov	r6, r0
 8007592:	b360      	cbz	r0, 80075ee <__ssputs_r+0xa2>
 8007594:	464a      	mov	r2, r9
 8007596:	6921      	ldr	r1, [r4, #16]
 8007598:	f000 fa14 	bl	80079c4 <memcpy>
 800759c:	89a3      	ldrh	r3, [r4, #12]
 800759e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80075a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075a6:	81a3      	strh	r3, [r4, #12]
 80075a8:	6126      	str	r6, [r4, #16]
 80075aa:	444e      	add	r6, r9
 80075ac:	6026      	str	r6, [r4, #0]
 80075ae:	463e      	mov	r6, r7
 80075b0:	6165      	str	r5, [r4, #20]
 80075b2:	eba5 0509 	sub.w	r5, r5, r9
 80075b6:	60a5      	str	r5, [r4, #8]
 80075b8:	42be      	cmp	r6, r7
 80075ba:	d900      	bls.n	80075be <__ssputs_r+0x72>
 80075bc:	463e      	mov	r6, r7
 80075be:	4632      	mov	r2, r6
 80075c0:	4641      	mov	r1, r8
 80075c2:	6820      	ldr	r0, [r4, #0]
 80075c4:	f000 f9c2 	bl	800794c <memmove>
 80075c8:	2000      	movs	r0, #0
 80075ca:	68a3      	ldr	r3, [r4, #8]
 80075cc:	1b9b      	subs	r3, r3, r6
 80075ce:	60a3      	str	r3, [r4, #8]
 80075d0:	6823      	ldr	r3, [r4, #0]
 80075d2:	4433      	add	r3, r6
 80075d4:	6023      	str	r3, [r4, #0]
 80075d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075da:	462a      	mov	r2, r5
 80075dc:	f000 fd83 	bl	80080e6 <_realloc_r>
 80075e0:	4606      	mov	r6, r0
 80075e2:	2800      	cmp	r0, #0
 80075e4:	d1e0      	bne.n	80075a8 <__ssputs_r+0x5c>
 80075e6:	4650      	mov	r0, sl
 80075e8:	6921      	ldr	r1, [r4, #16]
 80075ea:	f7fe fb95 	bl	8005d18 <_free_r>
 80075ee:	230c      	movs	r3, #12
 80075f0:	f8ca 3000 	str.w	r3, [sl]
 80075f4:	89a3      	ldrh	r3, [r4, #12]
 80075f6:	f04f 30ff 	mov.w	r0, #4294967295
 80075fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075fe:	81a3      	strh	r3, [r4, #12]
 8007600:	e7e9      	b.n	80075d6 <__ssputs_r+0x8a>
	...

08007604 <_svfiprintf_r>:
 8007604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007608:	4698      	mov	r8, r3
 800760a:	898b      	ldrh	r3, [r1, #12]
 800760c:	4607      	mov	r7, r0
 800760e:	061b      	lsls	r3, r3, #24
 8007610:	460d      	mov	r5, r1
 8007612:	4614      	mov	r4, r2
 8007614:	b09d      	sub	sp, #116	@ 0x74
 8007616:	d510      	bpl.n	800763a <_svfiprintf_r+0x36>
 8007618:	690b      	ldr	r3, [r1, #16]
 800761a:	b973      	cbnz	r3, 800763a <_svfiprintf_r+0x36>
 800761c:	2140      	movs	r1, #64	@ 0x40
 800761e:	f7fe fbed 	bl	8005dfc <_malloc_r>
 8007622:	6028      	str	r0, [r5, #0]
 8007624:	6128      	str	r0, [r5, #16]
 8007626:	b930      	cbnz	r0, 8007636 <_svfiprintf_r+0x32>
 8007628:	230c      	movs	r3, #12
 800762a:	603b      	str	r3, [r7, #0]
 800762c:	f04f 30ff 	mov.w	r0, #4294967295
 8007630:	b01d      	add	sp, #116	@ 0x74
 8007632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007636:	2340      	movs	r3, #64	@ 0x40
 8007638:	616b      	str	r3, [r5, #20]
 800763a:	2300      	movs	r3, #0
 800763c:	9309      	str	r3, [sp, #36]	@ 0x24
 800763e:	2320      	movs	r3, #32
 8007640:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007644:	2330      	movs	r3, #48	@ 0x30
 8007646:	f04f 0901 	mov.w	r9, #1
 800764a:	f8cd 800c 	str.w	r8, [sp, #12]
 800764e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80077e8 <_svfiprintf_r+0x1e4>
 8007652:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007656:	4623      	mov	r3, r4
 8007658:	469a      	mov	sl, r3
 800765a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800765e:	b10a      	cbz	r2, 8007664 <_svfiprintf_r+0x60>
 8007660:	2a25      	cmp	r2, #37	@ 0x25
 8007662:	d1f9      	bne.n	8007658 <_svfiprintf_r+0x54>
 8007664:	ebba 0b04 	subs.w	fp, sl, r4
 8007668:	d00b      	beq.n	8007682 <_svfiprintf_r+0x7e>
 800766a:	465b      	mov	r3, fp
 800766c:	4622      	mov	r2, r4
 800766e:	4629      	mov	r1, r5
 8007670:	4638      	mov	r0, r7
 8007672:	f7ff ff6b 	bl	800754c <__ssputs_r>
 8007676:	3001      	adds	r0, #1
 8007678:	f000 80a7 	beq.w	80077ca <_svfiprintf_r+0x1c6>
 800767c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800767e:	445a      	add	r2, fp
 8007680:	9209      	str	r2, [sp, #36]	@ 0x24
 8007682:	f89a 3000 	ldrb.w	r3, [sl]
 8007686:	2b00      	cmp	r3, #0
 8007688:	f000 809f 	beq.w	80077ca <_svfiprintf_r+0x1c6>
 800768c:	2300      	movs	r3, #0
 800768e:	f04f 32ff 	mov.w	r2, #4294967295
 8007692:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007696:	f10a 0a01 	add.w	sl, sl, #1
 800769a:	9304      	str	r3, [sp, #16]
 800769c:	9307      	str	r3, [sp, #28]
 800769e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80076a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80076a4:	4654      	mov	r4, sl
 80076a6:	2205      	movs	r2, #5
 80076a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076ac:	484e      	ldr	r0, [pc, #312]	@ (80077e8 <_svfiprintf_r+0x1e4>)
 80076ae:	f7fd fcc4 	bl	800503a <memchr>
 80076b2:	9a04      	ldr	r2, [sp, #16]
 80076b4:	b9d8      	cbnz	r0, 80076ee <_svfiprintf_r+0xea>
 80076b6:	06d0      	lsls	r0, r2, #27
 80076b8:	bf44      	itt	mi
 80076ba:	2320      	movmi	r3, #32
 80076bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076c0:	0711      	lsls	r1, r2, #28
 80076c2:	bf44      	itt	mi
 80076c4:	232b      	movmi	r3, #43	@ 0x2b
 80076c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076ca:	f89a 3000 	ldrb.w	r3, [sl]
 80076ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80076d0:	d015      	beq.n	80076fe <_svfiprintf_r+0xfa>
 80076d2:	4654      	mov	r4, sl
 80076d4:	2000      	movs	r0, #0
 80076d6:	f04f 0c0a 	mov.w	ip, #10
 80076da:	9a07      	ldr	r2, [sp, #28]
 80076dc:	4621      	mov	r1, r4
 80076de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076e2:	3b30      	subs	r3, #48	@ 0x30
 80076e4:	2b09      	cmp	r3, #9
 80076e6:	d94b      	bls.n	8007780 <_svfiprintf_r+0x17c>
 80076e8:	b1b0      	cbz	r0, 8007718 <_svfiprintf_r+0x114>
 80076ea:	9207      	str	r2, [sp, #28]
 80076ec:	e014      	b.n	8007718 <_svfiprintf_r+0x114>
 80076ee:	eba0 0308 	sub.w	r3, r0, r8
 80076f2:	fa09 f303 	lsl.w	r3, r9, r3
 80076f6:	4313      	orrs	r3, r2
 80076f8:	46a2      	mov	sl, r4
 80076fa:	9304      	str	r3, [sp, #16]
 80076fc:	e7d2      	b.n	80076a4 <_svfiprintf_r+0xa0>
 80076fe:	9b03      	ldr	r3, [sp, #12]
 8007700:	1d19      	adds	r1, r3, #4
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	9103      	str	r1, [sp, #12]
 8007706:	2b00      	cmp	r3, #0
 8007708:	bfbb      	ittet	lt
 800770a:	425b      	neglt	r3, r3
 800770c:	f042 0202 	orrlt.w	r2, r2, #2
 8007710:	9307      	strge	r3, [sp, #28]
 8007712:	9307      	strlt	r3, [sp, #28]
 8007714:	bfb8      	it	lt
 8007716:	9204      	strlt	r2, [sp, #16]
 8007718:	7823      	ldrb	r3, [r4, #0]
 800771a:	2b2e      	cmp	r3, #46	@ 0x2e
 800771c:	d10a      	bne.n	8007734 <_svfiprintf_r+0x130>
 800771e:	7863      	ldrb	r3, [r4, #1]
 8007720:	2b2a      	cmp	r3, #42	@ 0x2a
 8007722:	d132      	bne.n	800778a <_svfiprintf_r+0x186>
 8007724:	9b03      	ldr	r3, [sp, #12]
 8007726:	3402      	adds	r4, #2
 8007728:	1d1a      	adds	r2, r3, #4
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	9203      	str	r2, [sp, #12]
 800772e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007732:	9305      	str	r3, [sp, #20]
 8007734:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80077ec <_svfiprintf_r+0x1e8>
 8007738:	2203      	movs	r2, #3
 800773a:	4650      	mov	r0, sl
 800773c:	7821      	ldrb	r1, [r4, #0]
 800773e:	f7fd fc7c 	bl	800503a <memchr>
 8007742:	b138      	cbz	r0, 8007754 <_svfiprintf_r+0x150>
 8007744:	2240      	movs	r2, #64	@ 0x40
 8007746:	9b04      	ldr	r3, [sp, #16]
 8007748:	eba0 000a 	sub.w	r0, r0, sl
 800774c:	4082      	lsls	r2, r0
 800774e:	4313      	orrs	r3, r2
 8007750:	3401      	adds	r4, #1
 8007752:	9304      	str	r3, [sp, #16]
 8007754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007758:	2206      	movs	r2, #6
 800775a:	4825      	ldr	r0, [pc, #148]	@ (80077f0 <_svfiprintf_r+0x1ec>)
 800775c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007760:	f7fd fc6b 	bl	800503a <memchr>
 8007764:	2800      	cmp	r0, #0
 8007766:	d036      	beq.n	80077d6 <_svfiprintf_r+0x1d2>
 8007768:	4b22      	ldr	r3, [pc, #136]	@ (80077f4 <_svfiprintf_r+0x1f0>)
 800776a:	bb1b      	cbnz	r3, 80077b4 <_svfiprintf_r+0x1b0>
 800776c:	9b03      	ldr	r3, [sp, #12]
 800776e:	3307      	adds	r3, #7
 8007770:	f023 0307 	bic.w	r3, r3, #7
 8007774:	3308      	adds	r3, #8
 8007776:	9303      	str	r3, [sp, #12]
 8007778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800777a:	4433      	add	r3, r6
 800777c:	9309      	str	r3, [sp, #36]	@ 0x24
 800777e:	e76a      	b.n	8007656 <_svfiprintf_r+0x52>
 8007780:	460c      	mov	r4, r1
 8007782:	2001      	movs	r0, #1
 8007784:	fb0c 3202 	mla	r2, ip, r2, r3
 8007788:	e7a8      	b.n	80076dc <_svfiprintf_r+0xd8>
 800778a:	2300      	movs	r3, #0
 800778c:	f04f 0c0a 	mov.w	ip, #10
 8007790:	4619      	mov	r1, r3
 8007792:	3401      	adds	r4, #1
 8007794:	9305      	str	r3, [sp, #20]
 8007796:	4620      	mov	r0, r4
 8007798:	f810 2b01 	ldrb.w	r2, [r0], #1
 800779c:	3a30      	subs	r2, #48	@ 0x30
 800779e:	2a09      	cmp	r2, #9
 80077a0:	d903      	bls.n	80077aa <_svfiprintf_r+0x1a6>
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d0c6      	beq.n	8007734 <_svfiprintf_r+0x130>
 80077a6:	9105      	str	r1, [sp, #20]
 80077a8:	e7c4      	b.n	8007734 <_svfiprintf_r+0x130>
 80077aa:	4604      	mov	r4, r0
 80077ac:	2301      	movs	r3, #1
 80077ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80077b2:	e7f0      	b.n	8007796 <_svfiprintf_r+0x192>
 80077b4:	ab03      	add	r3, sp, #12
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	462a      	mov	r2, r5
 80077ba:	4638      	mov	r0, r7
 80077bc:	4b0e      	ldr	r3, [pc, #56]	@ (80077f8 <_svfiprintf_r+0x1f4>)
 80077be:	a904      	add	r1, sp, #16
 80077c0:	f7fc fcce 	bl	8004160 <_printf_float>
 80077c4:	1c42      	adds	r2, r0, #1
 80077c6:	4606      	mov	r6, r0
 80077c8:	d1d6      	bne.n	8007778 <_svfiprintf_r+0x174>
 80077ca:	89ab      	ldrh	r3, [r5, #12]
 80077cc:	065b      	lsls	r3, r3, #25
 80077ce:	f53f af2d 	bmi.w	800762c <_svfiprintf_r+0x28>
 80077d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80077d4:	e72c      	b.n	8007630 <_svfiprintf_r+0x2c>
 80077d6:	ab03      	add	r3, sp, #12
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	462a      	mov	r2, r5
 80077dc:	4638      	mov	r0, r7
 80077de:	4b06      	ldr	r3, [pc, #24]	@ (80077f8 <_svfiprintf_r+0x1f4>)
 80077e0:	a904      	add	r1, sp, #16
 80077e2:	f7fc ff5b 	bl	800469c <_printf_i>
 80077e6:	e7ed      	b.n	80077c4 <_svfiprintf_r+0x1c0>
 80077e8:	08008d17 	.word	0x08008d17
 80077ec:	08008d1d 	.word	0x08008d1d
 80077f0:	08008d21 	.word	0x08008d21
 80077f4:	08004161 	.word	0x08004161
 80077f8:	0800754d 	.word	0x0800754d

080077fc <__sflush_r>:
 80077fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007802:	0716      	lsls	r6, r2, #28
 8007804:	4605      	mov	r5, r0
 8007806:	460c      	mov	r4, r1
 8007808:	d454      	bmi.n	80078b4 <__sflush_r+0xb8>
 800780a:	684b      	ldr	r3, [r1, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	dc02      	bgt.n	8007816 <__sflush_r+0x1a>
 8007810:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007812:	2b00      	cmp	r3, #0
 8007814:	dd48      	ble.n	80078a8 <__sflush_r+0xac>
 8007816:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007818:	2e00      	cmp	r6, #0
 800781a:	d045      	beq.n	80078a8 <__sflush_r+0xac>
 800781c:	2300      	movs	r3, #0
 800781e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007822:	682f      	ldr	r7, [r5, #0]
 8007824:	6a21      	ldr	r1, [r4, #32]
 8007826:	602b      	str	r3, [r5, #0]
 8007828:	d030      	beq.n	800788c <__sflush_r+0x90>
 800782a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800782c:	89a3      	ldrh	r3, [r4, #12]
 800782e:	0759      	lsls	r1, r3, #29
 8007830:	d505      	bpl.n	800783e <__sflush_r+0x42>
 8007832:	6863      	ldr	r3, [r4, #4]
 8007834:	1ad2      	subs	r2, r2, r3
 8007836:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007838:	b10b      	cbz	r3, 800783e <__sflush_r+0x42>
 800783a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800783c:	1ad2      	subs	r2, r2, r3
 800783e:	2300      	movs	r3, #0
 8007840:	4628      	mov	r0, r5
 8007842:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007844:	6a21      	ldr	r1, [r4, #32]
 8007846:	47b0      	blx	r6
 8007848:	1c43      	adds	r3, r0, #1
 800784a:	89a3      	ldrh	r3, [r4, #12]
 800784c:	d106      	bne.n	800785c <__sflush_r+0x60>
 800784e:	6829      	ldr	r1, [r5, #0]
 8007850:	291d      	cmp	r1, #29
 8007852:	d82b      	bhi.n	80078ac <__sflush_r+0xb0>
 8007854:	4a28      	ldr	r2, [pc, #160]	@ (80078f8 <__sflush_r+0xfc>)
 8007856:	40ca      	lsrs	r2, r1
 8007858:	07d6      	lsls	r6, r2, #31
 800785a:	d527      	bpl.n	80078ac <__sflush_r+0xb0>
 800785c:	2200      	movs	r2, #0
 800785e:	6062      	str	r2, [r4, #4]
 8007860:	6922      	ldr	r2, [r4, #16]
 8007862:	04d9      	lsls	r1, r3, #19
 8007864:	6022      	str	r2, [r4, #0]
 8007866:	d504      	bpl.n	8007872 <__sflush_r+0x76>
 8007868:	1c42      	adds	r2, r0, #1
 800786a:	d101      	bne.n	8007870 <__sflush_r+0x74>
 800786c:	682b      	ldr	r3, [r5, #0]
 800786e:	b903      	cbnz	r3, 8007872 <__sflush_r+0x76>
 8007870:	6560      	str	r0, [r4, #84]	@ 0x54
 8007872:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007874:	602f      	str	r7, [r5, #0]
 8007876:	b1b9      	cbz	r1, 80078a8 <__sflush_r+0xac>
 8007878:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800787c:	4299      	cmp	r1, r3
 800787e:	d002      	beq.n	8007886 <__sflush_r+0x8a>
 8007880:	4628      	mov	r0, r5
 8007882:	f7fe fa49 	bl	8005d18 <_free_r>
 8007886:	2300      	movs	r3, #0
 8007888:	6363      	str	r3, [r4, #52]	@ 0x34
 800788a:	e00d      	b.n	80078a8 <__sflush_r+0xac>
 800788c:	2301      	movs	r3, #1
 800788e:	4628      	mov	r0, r5
 8007890:	47b0      	blx	r6
 8007892:	4602      	mov	r2, r0
 8007894:	1c50      	adds	r0, r2, #1
 8007896:	d1c9      	bne.n	800782c <__sflush_r+0x30>
 8007898:	682b      	ldr	r3, [r5, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d0c6      	beq.n	800782c <__sflush_r+0x30>
 800789e:	2b1d      	cmp	r3, #29
 80078a0:	d001      	beq.n	80078a6 <__sflush_r+0xaa>
 80078a2:	2b16      	cmp	r3, #22
 80078a4:	d11d      	bne.n	80078e2 <__sflush_r+0xe6>
 80078a6:	602f      	str	r7, [r5, #0]
 80078a8:	2000      	movs	r0, #0
 80078aa:	e021      	b.n	80078f0 <__sflush_r+0xf4>
 80078ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078b0:	b21b      	sxth	r3, r3
 80078b2:	e01a      	b.n	80078ea <__sflush_r+0xee>
 80078b4:	690f      	ldr	r7, [r1, #16]
 80078b6:	2f00      	cmp	r7, #0
 80078b8:	d0f6      	beq.n	80078a8 <__sflush_r+0xac>
 80078ba:	0793      	lsls	r3, r2, #30
 80078bc:	bf18      	it	ne
 80078be:	2300      	movne	r3, #0
 80078c0:	680e      	ldr	r6, [r1, #0]
 80078c2:	bf08      	it	eq
 80078c4:	694b      	ldreq	r3, [r1, #20]
 80078c6:	1bf6      	subs	r6, r6, r7
 80078c8:	600f      	str	r7, [r1, #0]
 80078ca:	608b      	str	r3, [r1, #8]
 80078cc:	2e00      	cmp	r6, #0
 80078ce:	ddeb      	ble.n	80078a8 <__sflush_r+0xac>
 80078d0:	4633      	mov	r3, r6
 80078d2:	463a      	mov	r2, r7
 80078d4:	4628      	mov	r0, r5
 80078d6:	6a21      	ldr	r1, [r4, #32]
 80078d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80078dc:	47e0      	blx	ip
 80078de:	2800      	cmp	r0, #0
 80078e0:	dc07      	bgt.n	80078f2 <__sflush_r+0xf6>
 80078e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078ea:	f04f 30ff 	mov.w	r0, #4294967295
 80078ee:	81a3      	strh	r3, [r4, #12]
 80078f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078f2:	4407      	add	r7, r0
 80078f4:	1a36      	subs	r6, r6, r0
 80078f6:	e7e9      	b.n	80078cc <__sflush_r+0xd0>
 80078f8:	20400001 	.word	0x20400001

080078fc <_fflush_r>:
 80078fc:	b538      	push	{r3, r4, r5, lr}
 80078fe:	690b      	ldr	r3, [r1, #16]
 8007900:	4605      	mov	r5, r0
 8007902:	460c      	mov	r4, r1
 8007904:	b913      	cbnz	r3, 800790c <_fflush_r+0x10>
 8007906:	2500      	movs	r5, #0
 8007908:	4628      	mov	r0, r5
 800790a:	bd38      	pop	{r3, r4, r5, pc}
 800790c:	b118      	cbz	r0, 8007916 <_fflush_r+0x1a>
 800790e:	6a03      	ldr	r3, [r0, #32]
 8007910:	b90b      	cbnz	r3, 8007916 <_fflush_r+0x1a>
 8007912:	f7fd fa77 	bl	8004e04 <__sinit>
 8007916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d0f3      	beq.n	8007906 <_fflush_r+0xa>
 800791e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007920:	07d0      	lsls	r0, r2, #31
 8007922:	d404      	bmi.n	800792e <_fflush_r+0x32>
 8007924:	0599      	lsls	r1, r3, #22
 8007926:	d402      	bmi.n	800792e <_fflush_r+0x32>
 8007928:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800792a:	f7fd fb84 	bl	8005036 <__retarget_lock_acquire_recursive>
 800792e:	4628      	mov	r0, r5
 8007930:	4621      	mov	r1, r4
 8007932:	f7ff ff63 	bl	80077fc <__sflush_r>
 8007936:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007938:	4605      	mov	r5, r0
 800793a:	07da      	lsls	r2, r3, #31
 800793c:	d4e4      	bmi.n	8007908 <_fflush_r+0xc>
 800793e:	89a3      	ldrh	r3, [r4, #12]
 8007940:	059b      	lsls	r3, r3, #22
 8007942:	d4e1      	bmi.n	8007908 <_fflush_r+0xc>
 8007944:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007946:	f7fd fb77 	bl	8005038 <__retarget_lock_release_recursive>
 800794a:	e7dd      	b.n	8007908 <_fflush_r+0xc>

0800794c <memmove>:
 800794c:	4288      	cmp	r0, r1
 800794e:	b510      	push	{r4, lr}
 8007950:	eb01 0402 	add.w	r4, r1, r2
 8007954:	d902      	bls.n	800795c <memmove+0x10>
 8007956:	4284      	cmp	r4, r0
 8007958:	4623      	mov	r3, r4
 800795a:	d807      	bhi.n	800796c <memmove+0x20>
 800795c:	1e43      	subs	r3, r0, #1
 800795e:	42a1      	cmp	r1, r4
 8007960:	d008      	beq.n	8007974 <memmove+0x28>
 8007962:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007966:	f803 2f01 	strb.w	r2, [r3, #1]!
 800796a:	e7f8      	b.n	800795e <memmove+0x12>
 800796c:	4601      	mov	r1, r0
 800796e:	4402      	add	r2, r0
 8007970:	428a      	cmp	r2, r1
 8007972:	d100      	bne.n	8007976 <memmove+0x2a>
 8007974:	bd10      	pop	{r4, pc}
 8007976:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800797a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800797e:	e7f7      	b.n	8007970 <memmove+0x24>

08007980 <strncmp>:
 8007980:	b510      	push	{r4, lr}
 8007982:	b16a      	cbz	r2, 80079a0 <strncmp+0x20>
 8007984:	3901      	subs	r1, #1
 8007986:	1884      	adds	r4, r0, r2
 8007988:	f810 2b01 	ldrb.w	r2, [r0], #1
 800798c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007990:	429a      	cmp	r2, r3
 8007992:	d103      	bne.n	800799c <strncmp+0x1c>
 8007994:	42a0      	cmp	r0, r4
 8007996:	d001      	beq.n	800799c <strncmp+0x1c>
 8007998:	2a00      	cmp	r2, #0
 800799a:	d1f5      	bne.n	8007988 <strncmp+0x8>
 800799c:	1ad0      	subs	r0, r2, r3
 800799e:	bd10      	pop	{r4, pc}
 80079a0:	4610      	mov	r0, r2
 80079a2:	e7fc      	b.n	800799e <strncmp+0x1e>

080079a4 <_sbrk_r>:
 80079a4:	b538      	push	{r3, r4, r5, lr}
 80079a6:	2300      	movs	r3, #0
 80079a8:	4d05      	ldr	r5, [pc, #20]	@ (80079c0 <_sbrk_r+0x1c>)
 80079aa:	4604      	mov	r4, r0
 80079ac:	4608      	mov	r0, r1
 80079ae:	602b      	str	r3, [r5, #0]
 80079b0:	f7f9 fdea 	bl	8001588 <_sbrk>
 80079b4:	1c43      	adds	r3, r0, #1
 80079b6:	d102      	bne.n	80079be <_sbrk_r+0x1a>
 80079b8:	682b      	ldr	r3, [r5, #0]
 80079ba:	b103      	cbz	r3, 80079be <_sbrk_r+0x1a>
 80079bc:	6023      	str	r3, [r4, #0]
 80079be:	bd38      	pop	{r3, r4, r5, pc}
 80079c0:	20000420 	.word	0x20000420

080079c4 <memcpy>:
 80079c4:	440a      	add	r2, r1
 80079c6:	4291      	cmp	r1, r2
 80079c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80079cc:	d100      	bne.n	80079d0 <memcpy+0xc>
 80079ce:	4770      	bx	lr
 80079d0:	b510      	push	{r4, lr}
 80079d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079d6:	4291      	cmp	r1, r2
 80079d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079dc:	d1f9      	bne.n	80079d2 <memcpy+0xe>
 80079de:	bd10      	pop	{r4, pc}

080079e0 <nan>:
 80079e0:	2000      	movs	r0, #0
 80079e2:	4901      	ldr	r1, [pc, #4]	@ (80079e8 <nan+0x8>)
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	7ff80000 	.word	0x7ff80000

080079ec <__assert_func>:
 80079ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079ee:	4614      	mov	r4, r2
 80079f0:	461a      	mov	r2, r3
 80079f2:	4b09      	ldr	r3, [pc, #36]	@ (8007a18 <__assert_func+0x2c>)
 80079f4:	4605      	mov	r5, r0
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68d8      	ldr	r0, [r3, #12]
 80079fa:	b14c      	cbz	r4, 8007a10 <__assert_func+0x24>
 80079fc:	4b07      	ldr	r3, [pc, #28]	@ (8007a1c <__assert_func+0x30>)
 80079fe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a02:	9100      	str	r1, [sp, #0]
 8007a04:	462b      	mov	r3, r5
 8007a06:	4906      	ldr	r1, [pc, #24]	@ (8007a20 <__assert_func+0x34>)
 8007a08:	f000 fba8 	bl	800815c <fiprintf>
 8007a0c:	f000 fbb8 	bl	8008180 <abort>
 8007a10:	4b04      	ldr	r3, [pc, #16]	@ (8007a24 <__assert_func+0x38>)
 8007a12:	461c      	mov	r4, r3
 8007a14:	e7f3      	b.n	80079fe <__assert_func+0x12>
 8007a16:	bf00      	nop
 8007a18:	2000001c 	.word	0x2000001c
 8007a1c:	08008d30 	.word	0x08008d30
 8007a20:	08008d3d 	.word	0x08008d3d
 8007a24:	08008d6b 	.word	0x08008d6b

08007a28 <_calloc_r>:
 8007a28:	b570      	push	{r4, r5, r6, lr}
 8007a2a:	fba1 5402 	umull	r5, r4, r1, r2
 8007a2e:	b934      	cbnz	r4, 8007a3e <_calloc_r+0x16>
 8007a30:	4629      	mov	r1, r5
 8007a32:	f7fe f9e3 	bl	8005dfc <_malloc_r>
 8007a36:	4606      	mov	r6, r0
 8007a38:	b928      	cbnz	r0, 8007a46 <_calloc_r+0x1e>
 8007a3a:	4630      	mov	r0, r6
 8007a3c:	bd70      	pop	{r4, r5, r6, pc}
 8007a3e:	220c      	movs	r2, #12
 8007a40:	2600      	movs	r6, #0
 8007a42:	6002      	str	r2, [r0, #0]
 8007a44:	e7f9      	b.n	8007a3a <_calloc_r+0x12>
 8007a46:	462a      	mov	r2, r5
 8007a48:	4621      	mov	r1, r4
 8007a4a:	f7fd fa76 	bl	8004f3a <memset>
 8007a4e:	e7f4      	b.n	8007a3a <_calloc_r+0x12>

08007a50 <rshift>:
 8007a50:	6903      	ldr	r3, [r0, #16]
 8007a52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a56:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007a5a:	f100 0414 	add.w	r4, r0, #20
 8007a5e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007a62:	dd46      	ble.n	8007af2 <rshift+0xa2>
 8007a64:	f011 011f 	ands.w	r1, r1, #31
 8007a68:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007a6c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007a70:	d10c      	bne.n	8007a8c <rshift+0x3c>
 8007a72:	4629      	mov	r1, r5
 8007a74:	f100 0710 	add.w	r7, r0, #16
 8007a78:	42b1      	cmp	r1, r6
 8007a7a:	d335      	bcc.n	8007ae8 <rshift+0x98>
 8007a7c:	1a9b      	subs	r3, r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	1eea      	subs	r2, r5, #3
 8007a82:	4296      	cmp	r6, r2
 8007a84:	bf38      	it	cc
 8007a86:	2300      	movcc	r3, #0
 8007a88:	4423      	add	r3, r4
 8007a8a:	e015      	b.n	8007ab8 <rshift+0x68>
 8007a8c:	46a1      	mov	r9, r4
 8007a8e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007a92:	f1c1 0820 	rsb	r8, r1, #32
 8007a96:	40cf      	lsrs	r7, r1
 8007a98:	f105 0e04 	add.w	lr, r5, #4
 8007a9c:	4576      	cmp	r6, lr
 8007a9e:	46f4      	mov	ip, lr
 8007aa0:	d816      	bhi.n	8007ad0 <rshift+0x80>
 8007aa2:	1a9a      	subs	r2, r3, r2
 8007aa4:	0092      	lsls	r2, r2, #2
 8007aa6:	3a04      	subs	r2, #4
 8007aa8:	3501      	adds	r5, #1
 8007aaa:	42ae      	cmp	r6, r5
 8007aac:	bf38      	it	cc
 8007aae:	2200      	movcc	r2, #0
 8007ab0:	18a3      	adds	r3, r4, r2
 8007ab2:	50a7      	str	r7, [r4, r2]
 8007ab4:	b107      	cbz	r7, 8007ab8 <rshift+0x68>
 8007ab6:	3304      	adds	r3, #4
 8007ab8:	42a3      	cmp	r3, r4
 8007aba:	eba3 0204 	sub.w	r2, r3, r4
 8007abe:	bf08      	it	eq
 8007ac0:	2300      	moveq	r3, #0
 8007ac2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007ac6:	6102      	str	r2, [r0, #16]
 8007ac8:	bf08      	it	eq
 8007aca:	6143      	streq	r3, [r0, #20]
 8007acc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ad0:	f8dc c000 	ldr.w	ip, [ip]
 8007ad4:	fa0c fc08 	lsl.w	ip, ip, r8
 8007ad8:	ea4c 0707 	orr.w	r7, ip, r7
 8007adc:	f849 7b04 	str.w	r7, [r9], #4
 8007ae0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007ae4:	40cf      	lsrs	r7, r1
 8007ae6:	e7d9      	b.n	8007a9c <rshift+0x4c>
 8007ae8:	f851 cb04 	ldr.w	ip, [r1], #4
 8007aec:	f847 cf04 	str.w	ip, [r7, #4]!
 8007af0:	e7c2      	b.n	8007a78 <rshift+0x28>
 8007af2:	4623      	mov	r3, r4
 8007af4:	e7e0      	b.n	8007ab8 <rshift+0x68>

08007af6 <__hexdig_fun>:
 8007af6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007afa:	2b09      	cmp	r3, #9
 8007afc:	d802      	bhi.n	8007b04 <__hexdig_fun+0xe>
 8007afe:	3820      	subs	r0, #32
 8007b00:	b2c0      	uxtb	r0, r0
 8007b02:	4770      	bx	lr
 8007b04:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007b08:	2b05      	cmp	r3, #5
 8007b0a:	d801      	bhi.n	8007b10 <__hexdig_fun+0x1a>
 8007b0c:	3847      	subs	r0, #71	@ 0x47
 8007b0e:	e7f7      	b.n	8007b00 <__hexdig_fun+0xa>
 8007b10:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007b14:	2b05      	cmp	r3, #5
 8007b16:	d801      	bhi.n	8007b1c <__hexdig_fun+0x26>
 8007b18:	3827      	subs	r0, #39	@ 0x27
 8007b1a:	e7f1      	b.n	8007b00 <__hexdig_fun+0xa>
 8007b1c:	2000      	movs	r0, #0
 8007b1e:	4770      	bx	lr

08007b20 <__gethex>:
 8007b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b24:	468a      	mov	sl, r1
 8007b26:	4690      	mov	r8, r2
 8007b28:	b085      	sub	sp, #20
 8007b2a:	9302      	str	r3, [sp, #8]
 8007b2c:	680b      	ldr	r3, [r1, #0]
 8007b2e:	9001      	str	r0, [sp, #4]
 8007b30:	1c9c      	adds	r4, r3, #2
 8007b32:	46a1      	mov	r9, r4
 8007b34:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007b38:	2830      	cmp	r0, #48	@ 0x30
 8007b3a:	d0fa      	beq.n	8007b32 <__gethex+0x12>
 8007b3c:	eba9 0303 	sub.w	r3, r9, r3
 8007b40:	f1a3 0b02 	sub.w	fp, r3, #2
 8007b44:	f7ff ffd7 	bl	8007af6 <__hexdig_fun>
 8007b48:	4605      	mov	r5, r0
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	d168      	bne.n	8007c20 <__gethex+0x100>
 8007b4e:	2201      	movs	r2, #1
 8007b50:	4648      	mov	r0, r9
 8007b52:	499f      	ldr	r1, [pc, #636]	@ (8007dd0 <__gethex+0x2b0>)
 8007b54:	f7ff ff14 	bl	8007980 <strncmp>
 8007b58:	4607      	mov	r7, r0
 8007b5a:	2800      	cmp	r0, #0
 8007b5c:	d167      	bne.n	8007c2e <__gethex+0x10e>
 8007b5e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007b62:	4626      	mov	r6, r4
 8007b64:	f7ff ffc7 	bl	8007af6 <__hexdig_fun>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	d062      	beq.n	8007c32 <__gethex+0x112>
 8007b6c:	4623      	mov	r3, r4
 8007b6e:	7818      	ldrb	r0, [r3, #0]
 8007b70:	4699      	mov	r9, r3
 8007b72:	2830      	cmp	r0, #48	@ 0x30
 8007b74:	f103 0301 	add.w	r3, r3, #1
 8007b78:	d0f9      	beq.n	8007b6e <__gethex+0x4e>
 8007b7a:	f7ff ffbc 	bl	8007af6 <__hexdig_fun>
 8007b7e:	fab0 f580 	clz	r5, r0
 8007b82:	f04f 0b01 	mov.w	fp, #1
 8007b86:	096d      	lsrs	r5, r5, #5
 8007b88:	464a      	mov	r2, r9
 8007b8a:	4616      	mov	r6, r2
 8007b8c:	7830      	ldrb	r0, [r6, #0]
 8007b8e:	3201      	adds	r2, #1
 8007b90:	f7ff ffb1 	bl	8007af6 <__hexdig_fun>
 8007b94:	2800      	cmp	r0, #0
 8007b96:	d1f8      	bne.n	8007b8a <__gethex+0x6a>
 8007b98:	2201      	movs	r2, #1
 8007b9a:	4630      	mov	r0, r6
 8007b9c:	498c      	ldr	r1, [pc, #560]	@ (8007dd0 <__gethex+0x2b0>)
 8007b9e:	f7ff feef 	bl	8007980 <strncmp>
 8007ba2:	2800      	cmp	r0, #0
 8007ba4:	d13f      	bne.n	8007c26 <__gethex+0x106>
 8007ba6:	b944      	cbnz	r4, 8007bba <__gethex+0x9a>
 8007ba8:	1c74      	adds	r4, r6, #1
 8007baa:	4622      	mov	r2, r4
 8007bac:	4616      	mov	r6, r2
 8007bae:	7830      	ldrb	r0, [r6, #0]
 8007bb0:	3201      	adds	r2, #1
 8007bb2:	f7ff ffa0 	bl	8007af6 <__hexdig_fun>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	d1f8      	bne.n	8007bac <__gethex+0x8c>
 8007bba:	1ba4      	subs	r4, r4, r6
 8007bbc:	00a7      	lsls	r7, r4, #2
 8007bbe:	7833      	ldrb	r3, [r6, #0]
 8007bc0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007bc4:	2b50      	cmp	r3, #80	@ 0x50
 8007bc6:	d13e      	bne.n	8007c46 <__gethex+0x126>
 8007bc8:	7873      	ldrb	r3, [r6, #1]
 8007bca:	2b2b      	cmp	r3, #43	@ 0x2b
 8007bcc:	d033      	beq.n	8007c36 <__gethex+0x116>
 8007bce:	2b2d      	cmp	r3, #45	@ 0x2d
 8007bd0:	d034      	beq.n	8007c3c <__gethex+0x11c>
 8007bd2:	2400      	movs	r4, #0
 8007bd4:	1c71      	adds	r1, r6, #1
 8007bd6:	7808      	ldrb	r0, [r1, #0]
 8007bd8:	f7ff ff8d 	bl	8007af6 <__hexdig_fun>
 8007bdc:	1e43      	subs	r3, r0, #1
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	2b18      	cmp	r3, #24
 8007be2:	d830      	bhi.n	8007c46 <__gethex+0x126>
 8007be4:	f1a0 0210 	sub.w	r2, r0, #16
 8007be8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007bec:	f7ff ff83 	bl	8007af6 <__hexdig_fun>
 8007bf0:	f100 3cff 	add.w	ip, r0, #4294967295
 8007bf4:	fa5f fc8c 	uxtb.w	ip, ip
 8007bf8:	f1bc 0f18 	cmp.w	ip, #24
 8007bfc:	f04f 030a 	mov.w	r3, #10
 8007c00:	d91e      	bls.n	8007c40 <__gethex+0x120>
 8007c02:	b104      	cbz	r4, 8007c06 <__gethex+0xe6>
 8007c04:	4252      	negs	r2, r2
 8007c06:	4417      	add	r7, r2
 8007c08:	f8ca 1000 	str.w	r1, [sl]
 8007c0c:	b1ed      	cbz	r5, 8007c4a <__gethex+0x12a>
 8007c0e:	f1bb 0f00 	cmp.w	fp, #0
 8007c12:	bf0c      	ite	eq
 8007c14:	2506      	moveq	r5, #6
 8007c16:	2500      	movne	r5, #0
 8007c18:	4628      	mov	r0, r5
 8007c1a:	b005      	add	sp, #20
 8007c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c20:	2500      	movs	r5, #0
 8007c22:	462c      	mov	r4, r5
 8007c24:	e7b0      	b.n	8007b88 <__gethex+0x68>
 8007c26:	2c00      	cmp	r4, #0
 8007c28:	d1c7      	bne.n	8007bba <__gethex+0x9a>
 8007c2a:	4627      	mov	r7, r4
 8007c2c:	e7c7      	b.n	8007bbe <__gethex+0x9e>
 8007c2e:	464e      	mov	r6, r9
 8007c30:	462f      	mov	r7, r5
 8007c32:	2501      	movs	r5, #1
 8007c34:	e7c3      	b.n	8007bbe <__gethex+0x9e>
 8007c36:	2400      	movs	r4, #0
 8007c38:	1cb1      	adds	r1, r6, #2
 8007c3a:	e7cc      	b.n	8007bd6 <__gethex+0xb6>
 8007c3c:	2401      	movs	r4, #1
 8007c3e:	e7fb      	b.n	8007c38 <__gethex+0x118>
 8007c40:	fb03 0002 	mla	r0, r3, r2, r0
 8007c44:	e7ce      	b.n	8007be4 <__gethex+0xc4>
 8007c46:	4631      	mov	r1, r6
 8007c48:	e7de      	b.n	8007c08 <__gethex+0xe8>
 8007c4a:	4629      	mov	r1, r5
 8007c4c:	eba6 0309 	sub.w	r3, r6, r9
 8007c50:	3b01      	subs	r3, #1
 8007c52:	2b07      	cmp	r3, #7
 8007c54:	dc0a      	bgt.n	8007c6c <__gethex+0x14c>
 8007c56:	9801      	ldr	r0, [sp, #4]
 8007c58:	f7fe f95c 	bl	8005f14 <_Balloc>
 8007c5c:	4604      	mov	r4, r0
 8007c5e:	b940      	cbnz	r0, 8007c72 <__gethex+0x152>
 8007c60:	4602      	mov	r2, r0
 8007c62:	21e4      	movs	r1, #228	@ 0xe4
 8007c64:	4b5b      	ldr	r3, [pc, #364]	@ (8007dd4 <__gethex+0x2b4>)
 8007c66:	485c      	ldr	r0, [pc, #368]	@ (8007dd8 <__gethex+0x2b8>)
 8007c68:	f7ff fec0 	bl	80079ec <__assert_func>
 8007c6c:	3101      	adds	r1, #1
 8007c6e:	105b      	asrs	r3, r3, #1
 8007c70:	e7ef      	b.n	8007c52 <__gethex+0x132>
 8007c72:	2300      	movs	r3, #0
 8007c74:	f100 0a14 	add.w	sl, r0, #20
 8007c78:	4655      	mov	r5, sl
 8007c7a:	469b      	mov	fp, r3
 8007c7c:	45b1      	cmp	r9, r6
 8007c7e:	d337      	bcc.n	8007cf0 <__gethex+0x1d0>
 8007c80:	f845 bb04 	str.w	fp, [r5], #4
 8007c84:	eba5 050a 	sub.w	r5, r5, sl
 8007c88:	10ad      	asrs	r5, r5, #2
 8007c8a:	6125      	str	r5, [r4, #16]
 8007c8c:	4658      	mov	r0, fp
 8007c8e:	f7fe fa33 	bl	80060f8 <__hi0bits>
 8007c92:	016d      	lsls	r5, r5, #5
 8007c94:	f8d8 6000 	ldr.w	r6, [r8]
 8007c98:	1a2d      	subs	r5, r5, r0
 8007c9a:	42b5      	cmp	r5, r6
 8007c9c:	dd54      	ble.n	8007d48 <__gethex+0x228>
 8007c9e:	1bad      	subs	r5, r5, r6
 8007ca0:	4629      	mov	r1, r5
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f7fe fdb5 	bl	8006812 <__any_on>
 8007ca8:	4681      	mov	r9, r0
 8007caa:	b178      	cbz	r0, 8007ccc <__gethex+0x1ac>
 8007cac:	f04f 0901 	mov.w	r9, #1
 8007cb0:	1e6b      	subs	r3, r5, #1
 8007cb2:	1159      	asrs	r1, r3, #5
 8007cb4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007cb8:	f003 021f 	and.w	r2, r3, #31
 8007cbc:	fa09 f202 	lsl.w	r2, r9, r2
 8007cc0:	420a      	tst	r2, r1
 8007cc2:	d003      	beq.n	8007ccc <__gethex+0x1ac>
 8007cc4:	454b      	cmp	r3, r9
 8007cc6:	dc36      	bgt.n	8007d36 <__gethex+0x216>
 8007cc8:	f04f 0902 	mov.w	r9, #2
 8007ccc:	4629      	mov	r1, r5
 8007cce:	4620      	mov	r0, r4
 8007cd0:	f7ff febe 	bl	8007a50 <rshift>
 8007cd4:	442f      	add	r7, r5
 8007cd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007cda:	42bb      	cmp	r3, r7
 8007cdc:	da42      	bge.n	8007d64 <__gethex+0x244>
 8007cde:	4621      	mov	r1, r4
 8007ce0:	9801      	ldr	r0, [sp, #4]
 8007ce2:	f7fe f957 	bl	8005f94 <_Bfree>
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007cea:	25a3      	movs	r5, #163	@ 0xa3
 8007cec:	6013      	str	r3, [r2, #0]
 8007cee:	e793      	b.n	8007c18 <__gethex+0xf8>
 8007cf0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007cf4:	2a2e      	cmp	r2, #46	@ 0x2e
 8007cf6:	d012      	beq.n	8007d1e <__gethex+0x1fe>
 8007cf8:	2b20      	cmp	r3, #32
 8007cfa:	d104      	bne.n	8007d06 <__gethex+0x1e6>
 8007cfc:	f845 bb04 	str.w	fp, [r5], #4
 8007d00:	f04f 0b00 	mov.w	fp, #0
 8007d04:	465b      	mov	r3, fp
 8007d06:	7830      	ldrb	r0, [r6, #0]
 8007d08:	9303      	str	r3, [sp, #12]
 8007d0a:	f7ff fef4 	bl	8007af6 <__hexdig_fun>
 8007d0e:	9b03      	ldr	r3, [sp, #12]
 8007d10:	f000 000f 	and.w	r0, r0, #15
 8007d14:	4098      	lsls	r0, r3
 8007d16:	ea4b 0b00 	orr.w	fp, fp, r0
 8007d1a:	3304      	adds	r3, #4
 8007d1c:	e7ae      	b.n	8007c7c <__gethex+0x15c>
 8007d1e:	45b1      	cmp	r9, r6
 8007d20:	d8ea      	bhi.n	8007cf8 <__gethex+0x1d8>
 8007d22:	2201      	movs	r2, #1
 8007d24:	4630      	mov	r0, r6
 8007d26:	492a      	ldr	r1, [pc, #168]	@ (8007dd0 <__gethex+0x2b0>)
 8007d28:	9303      	str	r3, [sp, #12]
 8007d2a:	f7ff fe29 	bl	8007980 <strncmp>
 8007d2e:	9b03      	ldr	r3, [sp, #12]
 8007d30:	2800      	cmp	r0, #0
 8007d32:	d1e1      	bne.n	8007cf8 <__gethex+0x1d8>
 8007d34:	e7a2      	b.n	8007c7c <__gethex+0x15c>
 8007d36:	4620      	mov	r0, r4
 8007d38:	1ea9      	subs	r1, r5, #2
 8007d3a:	f7fe fd6a 	bl	8006812 <__any_on>
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	d0c2      	beq.n	8007cc8 <__gethex+0x1a8>
 8007d42:	f04f 0903 	mov.w	r9, #3
 8007d46:	e7c1      	b.n	8007ccc <__gethex+0x1ac>
 8007d48:	da09      	bge.n	8007d5e <__gethex+0x23e>
 8007d4a:	1b75      	subs	r5, r6, r5
 8007d4c:	4621      	mov	r1, r4
 8007d4e:	462a      	mov	r2, r5
 8007d50:	9801      	ldr	r0, [sp, #4]
 8007d52:	f7fe fb2f 	bl	80063b4 <__lshift>
 8007d56:	4604      	mov	r4, r0
 8007d58:	1b7f      	subs	r7, r7, r5
 8007d5a:	f100 0a14 	add.w	sl, r0, #20
 8007d5e:	f04f 0900 	mov.w	r9, #0
 8007d62:	e7b8      	b.n	8007cd6 <__gethex+0x1b6>
 8007d64:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007d68:	42bd      	cmp	r5, r7
 8007d6a:	dd6f      	ble.n	8007e4c <__gethex+0x32c>
 8007d6c:	1bed      	subs	r5, r5, r7
 8007d6e:	42ae      	cmp	r6, r5
 8007d70:	dc34      	bgt.n	8007ddc <__gethex+0x2bc>
 8007d72:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d022      	beq.n	8007dc0 <__gethex+0x2a0>
 8007d7a:	2b03      	cmp	r3, #3
 8007d7c:	d024      	beq.n	8007dc8 <__gethex+0x2a8>
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d115      	bne.n	8007dae <__gethex+0x28e>
 8007d82:	42ae      	cmp	r6, r5
 8007d84:	d113      	bne.n	8007dae <__gethex+0x28e>
 8007d86:	2e01      	cmp	r6, #1
 8007d88:	d10b      	bne.n	8007da2 <__gethex+0x282>
 8007d8a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007d8e:	9a02      	ldr	r2, [sp, #8]
 8007d90:	2562      	movs	r5, #98	@ 0x62
 8007d92:	6013      	str	r3, [r2, #0]
 8007d94:	2301      	movs	r3, #1
 8007d96:	6123      	str	r3, [r4, #16]
 8007d98:	f8ca 3000 	str.w	r3, [sl]
 8007d9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d9e:	601c      	str	r4, [r3, #0]
 8007da0:	e73a      	b.n	8007c18 <__gethex+0xf8>
 8007da2:	4620      	mov	r0, r4
 8007da4:	1e71      	subs	r1, r6, #1
 8007da6:	f7fe fd34 	bl	8006812 <__any_on>
 8007daa:	2800      	cmp	r0, #0
 8007dac:	d1ed      	bne.n	8007d8a <__gethex+0x26a>
 8007dae:	4621      	mov	r1, r4
 8007db0:	9801      	ldr	r0, [sp, #4]
 8007db2:	f7fe f8ef 	bl	8005f94 <_Bfree>
 8007db6:	2300      	movs	r3, #0
 8007db8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007dba:	2550      	movs	r5, #80	@ 0x50
 8007dbc:	6013      	str	r3, [r2, #0]
 8007dbe:	e72b      	b.n	8007c18 <__gethex+0xf8>
 8007dc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1f3      	bne.n	8007dae <__gethex+0x28e>
 8007dc6:	e7e0      	b.n	8007d8a <__gethex+0x26a>
 8007dc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1dd      	bne.n	8007d8a <__gethex+0x26a>
 8007dce:	e7ee      	b.n	8007dae <__gethex+0x28e>
 8007dd0:	08008d15 	.word	0x08008d15
 8007dd4:	08008cab 	.word	0x08008cab
 8007dd8:	08008d6c 	.word	0x08008d6c
 8007ddc:	1e6f      	subs	r7, r5, #1
 8007dde:	f1b9 0f00 	cmp.w	r9, #0
 8007de2:	d130      	bne.n	8007e46 <__gethex+0x326>
 8007de4:	b127      	cbz	r7, 8007df0 <__gethex+0x2d0>
 8007de6:	4639      	mov	r1, r7
 8007de8:	4620      	mov	r0, r4
 8007dea:	f7fe fd12 	bl	8006812 <__any_on>
 8007dee:	4681      	mov	r9, r0
 8007df0:	2301      	movs	r3, #1
 8007df2:	4629      	mov	r1, r5
 8007df4:	1b76      	subs	r6, r6, r5
 8007df6:	2502      	movs	r5, #2
 8007df8:	117a      	asrs	r2, r7, #5
 8007dfa:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007dfe:	f007 071f 	and.w	r7, r7, #31
 8007e02:	40bb      	lsls	r3, r7
 8007e04:	4213      	tst	r3, r2
 8007e06:	4620      	mov	r0, r4
 8007e08:	bf18      	it	ne
 8007e0a:	f049 0902 	orrne.w	r9, r9, #2
 8007e0e:	f7ff fe1f 	bl	8007a50 <rshift>
 8007e12:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007e16:	f1b9 0f00 	cmp.w	r9, #0
 8007e1a:	d047      	beq.n	8007eac <__gethex+0x38c>
 8007e1c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d015      	beq.n	8007e50 <__gethex+0x330>
 8007e24:	2b03      	cmp	r3, #3
 8007e26:	d017      	beq.n	8007e58 <__gethex+0x338>
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d109      	bne.n	8007e40 <__gethex+0x320>
 8007e2c:	f019 0f02 	tst.w	r9, #2
 8007e30:	d006      	beq.n	8007e40 <__gethex+0x320>
 8007e32:	f8da 3000 	ldr.w	r3, [sl]
 8007e36:	ea49 0903 	orr.w	r9, r9, r3
 8007e3a:	f019 0f01 	tst.w	r9, #1
 8007e3e:	d10e      	bne.n	8007e5e <__gethex+0x33e>
 8007e40:	f045 0510 	orr.w	r5, r5, #16
 8007e44:	e032      	b.n	8007eac <__gethex+0x38c>
 8007e46:	f04f 0901 	mov.w	r9, #1
 8007e4a:	e7d1      	b.n	8007df0 <__gethex+0x2d0>
 8007e4c:	2501      	movs	r5, #1
 8007e4e:	e7e2      	b.n	8007e16 <__gethex+0x2f6>
 8007e50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e52:	f1c3 0301 	rsb	r3, r3, #1
 8007e56:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007e58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d0f0      	beq.n	8007e40 <__gethex+0x320>
 8007e5e:	f04f 0c00 	mov.w	ip, #0
 8007e62:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007e66:	f104 0314 	add.w	r3, r4, #20
 8007e6a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007e6e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007e72:	4618      	mov	r0, r3
 8007e74:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e78:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007e7c:	d01b      	beq.n	8007eb6 <__gethex+0x396>
 8007e7e:	3201      	adds	r2, #1
 8007e80:	6002      	str	r2, [r0, #0]
 8007e82:	2d02      	cmp	r5, #2
 8007e84:	f104 0314 	add.w	r3, r4, #20
 8007e88:	d13c      	bne.n	8007f04 <__gethex+0x3e4>
 8007e8a:	f8d8 2000 	ldr.w	r2, [r8]
 8007e8e:	3a01      	subs	r2, #1
 8007e90:	42b2      	cmp	r2, r6
 8007e92:	d109      	bne.n	8007ea8 <__gethex+0x388>
 8007e94:	2201      	movs	r2, #1
 8007e96:	1171      	asrs	r1, r6, #5
 8007e98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007e9c:	f006 061f 	and.w	r6, r6, #31
 8007ea0:	fa02 f606 	lsl.w	r6, r2, r6
 8007ea4:	421e      	tst	r6, r3
 8007ea6:	d13a      	bne.n	8007f1e <__gethex+0x3fe>
 8007ea8:	f045 0520 	orr.w	r5, r5, #32
 8007eac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007eae:	601c      	str	r4, [r3, #0]
 8007eb0:	9b02      	ldr	r3, [sp, #8]
 8007eb2:	601f      	str	r7, [r3, #0]
 8007eb4:	e6b0      	b.n	8007c18 <__gethex+0xf8>
 8007eb6:	4299      	cmp	r1, r3
 8007eb8:	f843 cc04 	str.w	ip, [r3, #-4]
 8007ebc:	d8d9      	bhi.n	8007e72 <__gethex+0x352>
 8007ebe:	68a3      	ldr	r3, [r4, #8]
 8007ec0:	459b      	cmp	fp, r3
 8007ec2:	db17      	blt.n	8007ef4 <__gethex+0x3d4>
 8007ec4:	6861      	ldr	r1, [r4, #4]
 8007ec6:	9801      	ldr	r0, [sp, #4]
 8007ec8:	3101      	adds	r1, #1
 8007eca:	f7fe f823 	bl	8005f14 <_Balloc>
 8007ece:	4681      	mov	r9, r0
 8007ed0:	b918      	cbnz	r0, 8007eda <__gethex+0x3ba>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	2184      	movs	r1, #132	@ 0x84
 8007ed6:	4b19      	ldr	r3, [pc, #100]	@ (8007f3c <__gethex+0x41c>)
 8007ed8:	e6c5      	b.n	8007c66 <__gethex+0x146>
 8007eda:	6922      	ldr	r2, [r4, #16]
 8007edc:	f104 010c 	add.w	r1, r4, #12
 8007ee0:	3202      	adds	r2, #2
 8007ee2:	0092      	lsls	r2, r2, #2
 8007ee4:	300c      	adds	r0, #12
 8007ee6:	f7ff fd6d 	bl	80079c4 <memcpy>
 8007eea:	4621      	mov	r1, r4
 8007eec:	9801      	ldr	r0, [sp, #4]
 8007eee:	f7fe f851 	bl	8005f94 <_Bfree>
 8007ef2:	464c      	mov	r4, r9
 8007ef4:	6923      	ldr	r3, [r4, #16]
 8007ef6:	1c5a      	adds	r2, r3, #1
 8007ef8:	6122      	str	r2, [r4, #16]
 8007efa:	2201      	movs	r2, #1
 8007efc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f00:	615a      	str	r2, [r3, #20]
 8007f02:	e7be      	b.n	8007e82 <__gethex+0x362>
 8007f04:	6922      	ldr	r2, [r4, #16]
 8007f06:	455a      	cmp	r2, fp
 8007f08:	dd0b      	ble.n	8007f22 <__gethex+0x402>
 8007f0a:	2101      	movs	r1, #1
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	f7ff fd9f 	bl	8007a50 <rshift>
 8007f12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007f16:	3701      	adds	r7, #1
 8007f18:	42bb      	cmp	r3, r7
 8007f1a:	f6ff aee0 	blt.w	8007cde <__gethex+0x1be>
 8007f1e:	2501      	movs	r5, #1
 8007f20:	e7c2      	b.n	8007ea8 <__gethex+0x388>
 8007f22:	f016 061f 	ands.w	r6, r6, #31
 8007f26:	d0fa      	beq.n	8007f1e <__gethex+0x3fe>
 8007f28:	4453      	add	r3, sl
 8007f2a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007f2e:	f7fe f8e3 	bl	80060f8 <__hi0bits>
 8007f32:	f1c6 0620 	rsb	r6, r6, #32
 8007f36:	42b0      	cmp	r0, r6
 8007f38:	dbe7      	blt.n	8007f0a <__gethex+0x3ea>
 8007f3a:	e7f0      	b.n	8007f1e <__gethex+0x3fe>
 8007f3c:	08008cab 	.word	0x08008cab

08007f40 <L_shift>:
 8007f40:	f1c2 0208 	rsb	r2, r2, #8
 8007f44:	0092      	lsls	r2, r2, #2
 8007f46:	b570      	push	{r4, r5, r6, lr}
 8007f48:	f1c2 0620 	rsb	r6, r2, #32
 8007f4c:	6843      	ldr	r3, [r0, #4]
 8007f4e:	6804      	ldr	r4, [r0, #0]
 8007f50:	fa03 f506 	lsl.w	r5, r3, r6
 8007f54:	432c      	orrs	r4, r5
 8007f56:	40d3      	lsrs	r3, r2
 8007f58:	6004      	str	r4, [r0, #0]
 8007f5a:	f840 3f04 	str.w	r3, [r0, #4]!
 8007f5e:	4288      	cmp	r0, r1
 8007f60:	d3f4      	bcc.n	8007f4c <L_shift+0xc>
 8007f62:	bd70      	pop	{r4, r5, r6, pc}

08007f64 <__match>:
 8007f64:	b530      	push	{r4, r5, lr}
 8007f66:	6803      	ldr	r3, [r0, #0]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f6e:	b914      	cbnz	r4, 8007f76 <__match+0x12>
 8007f70:	6003      	str	r3, [r0, #0]
 8007f72:	2001      	movs	r0, #1
 8007f74:	bd30      	pop	{r4, r5, pc}
 8007f76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f7a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007f7e:	2d19      	cmp	r5, #25
 8007f80:	bf98      	it	ls
 8007f82:	3220      	addls	r2, #32
 8007f84:	42a2      	cmp	r2, r4
 8007f86:	d0f0      	beq.n	8007f6a <__match+0x6>
 8007f88:	2000      	movs	r0, #0
 8007f8a:	e7f3      	b.n	8007f74 <__match+0x10>

08007f8c <__hexnan>:
 8007f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f90:	2500      	movs	r5, #0
 8007f92:	680b      	ldr	r3, [r1, #0]
 8007f94:	4682      	mov	sl, r0
 8007f96:	115e      	asrs	r6, r3, #5
 8007f98:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007f9c:	f013 031f 	ands.w	r3, r3, #31
 8007fa0:	bf18      	it	ne
 8007fa2:	3604      	addne	r6, #4
 8007fa4:	1f37      	subs	r7, r6, #4
 8007fa6:	4690      	mov	r8, r2
 8007fa8:	46b9      	mov	r9, r7
 8007faa:	463c      	mov	r4, r7
 8007fac:	46ab      	mov	fp, r5
 8007fae:	b087      	sub	sp, #28
 8007fb0:	6801      	ldr	r1, [r0, #0]
 8007fb2:	9301      	str	r3, [sp, #4]
 8007fb4:	f846 5c04 	str.w	r5, [r6, #-4]
 8007fb8:	9502      	str	r5, [sp, #8]
 8007fba:	784a      	ldrb	r2, [r1, #1]
 8007fbc:	1c4b      	adds	r3, r1, #1
 8007fbe:	9303      	str	r3, [sp, #12]
 8007fc0:	b342      	cbz	r2, 8008014 <__hexnan+0x88>
 8007fc2:	4610      	mov	r0, r2
 8007fc4:	9105      	str	r1, [sp, #20]
 8007fc6:	9204      	str	r2, [sp, #16]
 8007fc8:	f7ff fd95 	bl	8007af6 <__hexdig_fun>
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	d151      	bne.n	8008074 <__hexnan+0xe8>
 8007fd0:	9a04      	ldr	r2, [sp, #16]
 8007fd2:	9905      	ldr	r1, [sp, #20]
 8007fd4:	2a20      	cmp	r2, #32
 8007fd6:	d818      	bhi.n	800800a <__hexnan+0x7e>
 8007fd8:	9b02      	ldr	r3, [sp, #8]
 8007fda:	459b      	cmp	fp, r3
 8007fdc:	dd13      	ble.n	8008006 <__hexnan+0x7a>
 8007fde:	454c      	cmp	r4, r9
 8007fe0:	d206      	bcs.n	8007ff0 <__hexnan+0x64>
 8007fe2:	2d07      	cmp	r5, #7
 8007fe4:	dc04      	bgt.n	8007ff0 <__hexnan+0x64>
 8007fe6:	462a      	mov	r2, r5
 8007fe8:	4649      	mov	r1, r9
 8007fea:	4620      	mov	r0, r4
 8007fec:	f7ff ffa8 	bl	8007f40 <L_shift>
 8007ff0:	4544      	cmp	r4, r8
 8007ff2:	d952      	bls.n	800809a <__hexnan+0x10e>
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	f1a4 0904 	sub.w	r9, r4, #4
 8007ffa:	f844 3c04 	str.w	r3, [r4, #-4]
 8007ffe:	461d      	mov	r5, r3
 8008000:	464c      	mov	r4, r9
 8008002:	f8cd b008 	str.w	fp, [sp, #8]
 8008006:	9903      	ldr	r1, [sp, #12]
 8008008:	e7d7      	b.n	8007fba <__hexnan+0x2e>
 800800a:	2a29      	cmp	r2, #41	@ 0x29
 800800c:	d157      	bne.n	80080be <__hexnan+0x132>
 800800e:	3102      	adds	r1, #2
 8008010:	f8ca 1000 	str.w	r1, [sl]
 8008014:	f1bb 0f00 	cmp.w	fp, #0
 8008018:	d051      	beq.n	80080be <__hexnan+0x132>
 800801a:	454c      	cmp	r4, r9
 800801c:	d206      	bcs.n	800802c <__hexnan+0xa0>
 800801e:	2d07      	cmp	r5, #7
 8008020:	dc04      	bgt.n	800802c <__hexnan+0xa0>
 8008022:	462a      	mov	r2, r5
 8008024:	4649      	mov	r1, r9
 8008026:	4620      	mov	r0, r4
 8008028:	f7ff ff8a 	bl	8007f40 <L_shift>
 800802c:	4544      	cmp	r4, r8
 800802e:	d936      	bls.n	800809e <__hexnan+0x112>
 8008030:	4623      	mov	r3, r4
 8008032:	f1a8 0204 	sub.w	r2, r8, #4
 8008036:	f853 1b04 	ldr.w	r1, [r3], #4
 800803a:	429f      	cmp	r7, r3
 800803c:	f842 1f04 	str.w	r1, [r2, #4]!
 8008040:	d2f9      	bcs.n	8008036 <__hexnan+0xaa>
 8008042:	1b3b      	subs	r3, r7, r4
 8008044:	f023 0303 	bic.w	r3, r3, #3
 8008048:	3304      	adds	r3, #4
 800804a:	3401      	adds	r4, #1
 800804c:	3e03      	subs	r6, #3
 800804e:	42b4      	cmp	r4, r6
 8008050:	bf88      	it	hi
 8008052:	2304      	movhi	r3, #4
 8008054:	2200      	movs	r2, #0
 8008056:	4443      	add	r3, r8
 8008058:	f843 2b04 	str.w	r2, [r3], #4
 800805c:	429f      	cmp	r7, r3
 800805e:	d2fb      	bcs.n	8008058 <__hexnan+0xcc>
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	b91b      	cbnz	r3, 800806c <__hexnan+0xe0>
 8008064:	4547      	cmp	r7, r8
 8008066:	d128      	bne.n	80080ba <__hexnan+0x12e>
 8008068:	2301      	movs	r3, #1
 800806a:	603b      	str	r3, [r7, #0]
 800806c:	2005      	movs	r0, #5
 800806e:	b007      	add	sp, #28
 8008070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008074:	3501      	adds	r5, #1
 8008076:	2d08      	cmp	r5, #8
 8008078:	f10b 0b01 	add.w	fp, fp, #1
 800807c:	dd06      	ble.n	800808c <__hexnan+0x100>
 800807e:	4544      	cmp	r4, r8
 8008080:	d9c1      	bls.n	8008006 <__hexnan+0x7a>
 8008082:	2300      	movs	r3, #0
 8008084:	2501      	movs	r5, #1
 8008086:	f844 3c04 	str.w	r3, [r4, #-4]
 800808a:	3c04      	subs	r4, #4
 800808c:	6822      	ldr	r2, [r4, #0]
 800808e:	f000 000f 	and.w	r0, r0, #15
 8008092:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008096:	6020      	str	r0, [r4, #0]
 8008098:	e7b5      	b.n	8008006 <__hexnan+0x7a>
 800809a:	2508      	movs	r5, #8
 800809c:	e7b3      	b.n	8008006 <__hexnan+0x7a>
 800809e:	9b01      	ldr	r3, [sp, #4]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d0dd      	beq.n	8008060 <__hexnan+0xd4>
 80080a4:	f04f 32ff 	mov.w	r2, #4294967295
 80080a8:	f1c3 0320 	rsb	r3, r3, #32
 80080ac:	40da      	lsrs	r2, r3
 80080ae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80080b2:	4013      	ands	r3, r2
 80080b4:	f846 3c04 	str.w	r3, [r6, #-4]
 80080b8:	e7d2      	b.n	8008060 <__hexnan+0xd4>
 80080ba:	3f04      	subs	r7, #4
 80080bc:	e7d0      	b.n	8008060 <__hexnan+0xd4>
 80080be:	2004      	movs	r0, #4
 80080c0:	e7d5      	b.n	800806e <__hexnan+0xe2>

080080c2 <__ascii_mbtowc>:
 80080c2:	b082      	sub	sp, #8
 80080c4:	b901      	cbnz	r1, 80080c8 <__ascii_mbtowc+0x6>
 80080c6:	a901      	add	r1, sp, #4
 80080c8:	b142      	cbz	r2, 80080dc <__ascii_mbtowc+0x1a>
 80080ca:	b14b      	cbz	r3, 80080e0 <__ascii_mbtowc+0x1e>
 80080cc:	7813      	ldrb	r3, [r2, #0]
 80080ce:	600b      	str	r3, [r1, #0]
 80080d0:	7812      	ldrb	r2, [r2, #0]
 80080d2:	1e10      	subs	r0, r2, #0
 80080d4:	bf18      	it	ne
 80080d6:	2001      	movne	r0, #1
 80080d8:	b002      	add	sp, #8
 80080da:	4770      	bx	lr
 80080dc:	4610      	mov	r0, r2
 80080de:	e7fb      	b.n	80080d8 <__ascii_mbtowc+0x16>
 80080e0:	f06f 0001 	mvn.w	r0, #1
 80080e4:	e7f8      	b.n	80080d8 <__ascii_mbtowc+0x16>

080080e6 <_realloc_r>:
 80080e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080ea:	4607      	mov	r7, r0
 80080ec:	4614      	mov	r4, r2
 80080ee:	460d      	mov	r5, r1
 80080f0:	b921      	cbnz	r1, 80080fc <_realloc_r+0x16>
 80080f2:	4611      	mov	r1, r2
 80080f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080f8:	f7fd be80 	b.w	8005dfc <_malloc_r>
 80080fc:	b92a      	cbnz	r2, 800810a <_realloc_r+0x24>
 80080fe:	f7fd fe0b 	bl	8005d18 <_free_r>
 8008102:	4625      	mov	r5, r4
 8008104:	4628      	mov	r0, r5
 8008106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800810a:	f000 f840 	bl	800818e <_malloc_usable_size_r>
 800810e:	4284      	cmp	r4, r0
 8008110:	4606      	mov	r6, r0
 8008112:	d802      	bhi.n	800811a <_realloc_r+0x34>
 8008114:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008118:	d8f4      	bhi.n	8008104 <_realloc_r+0x1e>
 800811a:	4621      	mov	r1, r4
 800811c:	4638      	mov	r0, r7
 800811e:	f7fd fe6d 	bl	8005dfc <_malloc_r>
 8008122:	4680      	mov	r8, r0
 8008124:	b908      	cbnz	r0, 800812a <_realloc_r+0x44>
 8008126:	4645      	mov	r5, r8
 8008128:	e7ec      	b.n	8008104 <_realloc_r+0x1e>
 800812a:	42b4      	cmp	r4, r6
 800812c:	4622      	mov	r2, r4
 800812e:	4629      	mov	r1, r5
 8008130:	bf28      	it	cs
 8008132:	4632      	movcs	r2, r6
 8008134:	f7ff fc46 	bl	80079c4 <memcpy>
 8008138:	4629      	mov	r1, r5
 800813a:	4638      	mov	r0, r7
 800813c:	f7fd fdec 	bl	8005d18 <_free_r>
 8008140:	e7f1      	b.n	8008126 <_realloc_r+0x40>

08008142 <__ascii_wctomb>:
 8008142:	4603      	mov	r3, r0
 8008144:	4608      	mov	r0, r1
 8008146:	b141      	cbz	r1, 800815a <__ascii_wctomb+0x18>
 8008148:	2aff      	cmp	r2, #255	@ 0xff
 800814a:	d904      	bls.n	8008156 <__ascii_wctomb+0x14>
 800814c:	228a      	movs	r2, #138	@ 0x8a
 800814e:	f04f 30ff 	mov.w	r0, #4294967295
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	4770      	bx	lr
 8008156:	2001      	movs	r0, #1
 8008158:	700a      	strb	r2, [r1, #0]
 800815a:	4770      	bx	lr

0800815c <fiprintf>:
 800815c:	b40e      	push	{r1, r2, r3}
 800815e:	b503      	push	{r0, r1, lr}
 8008160:	4601      	mov	r1, r0
 8008162:	ab03      	add	r3, sp, #12
 8008164:	4805      	ldr	r0, [pc, #20]	@ (800817c <fiprintf+0x20>)
 8008166:	f853 2b04 	ldr.w	r2, [r3], #4
 800816a:	6800      	ldr	r0, [r0, #0]
 800816c:	9301      	str	r3, [sp, #4]
 800816e:	f000 f83d 	bl	80081ec <_vfiprintf_r>
 8008172:	b002      	add	sp, #8
 8008174:	f85d eb04 	ldr.w	lr, [sp], #4
 8008178:	b003      	add	sp, #12
 800817a:	4770      	bx	lr
 800817c:	2000001c 	.word	0x2000001c

08008180 <abort>:
 8008180:	2006      	movs	r0, #6
 8008182:	b508      	push	{r3, lr}
 8008184:	f000 fa06 	bl	8008594 <raise>
 8008188:	2001      	movs	r0, #1
 800818a:	f7f9 f988 	bl	800149e <_exit>

0800818e <_malloc_usable_size_r>:
 800818e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008192:	1f18      	subs	r0, r3, #4
 8008194:	2b00      	cmp	r3, #0
 8008196:	bfbc      	itt	lt
 8008198:	580b      	ldrlt	r3, [r1, r0]
 800819a:	18c0      	addlt	r0, r0, r3
 800819c:	4770      	bx	lr

0800819e <__sfputc_r>:
 800819e:	6893      	ldr	r3, [r2, #8]
 80081a0:	b410      	push	{r4}
 80081a2:	3b01      	subs	r3, #1
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	6093      	str	r3, [r2, #8]
 80081a8:	da07      	bge.n	80081ba <__sfputc_r+0x1c>
 80081aa:	6994      	ldr	r4, [r2, #24]
 80081ac:	42a3      	cmp	r3, r4
 80081ae:	db01      	blt.n	80081b4 <__sfputc_r+0x16>
 80081b0:	290a      	cmp	r1, #10
 80081b2:	d102      	bne.n	80081ba <__sfputc_r+0x1c>
 80081b4:	bc10      	pop	{r4}
 80081b6:	f000 b931 	b.w	800841c <__swbuf_r>
 80081ba:	6813      	ldr	r3, [r2, #0]
 80081bc:	1c58      	adds	r0, r3, #1
 80081be:	6010      	str	r0, [r2, #0]
 80081c0:	7019      	strb	r1, [r3, #0]
 80081c2:	4608      	mov	r0, r1
 80081c4:	bc10      	pop	{r4}
 80081c6:	4770      	bx	lr

080081c8 <__sfputs_r>:
 80081c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ca:	4606      	mov	r6, r0
 80081cc:	460f      	mov	r7, r1
 80081ce:	4614      	mov	r4, r2
 80081d0:	18d5      	adds	r5, r2, r3
 80081d2:	42ac      	cmp	r4, r5
 80081d4:	d101      	bne.n	80081da <__sfputs_r+0x12>
 80081d6:	2000      	movs	r0, #0
 80081d8:	e007      	b.n	80081ea <__sfputs_r+0x22>
 80081da:	463a      	mov	r2, r7
 80081dc:	4630      	mov	r0, r6
 80081de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081e2:	f7ff ffdc 	bl	800819e <__sfputc_r>
 80081e6:	1c43      	adds	r3, r0, #1
 80081e8:	d1f3      	bne.n	80081d2 <__sfputs_r+0xa>
 80081ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080081ec <_vfiprintf_r>:
 80081ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f0:	460d      	mov	r5, r1
 80081f2:	4614      	mov	r4, r2
 80081f4:	4698      	mov	r8, r3
 80081f6:	4606      	mov	r6, r0
 80081f8:	b09d      	sub	sp, #116	@ 0x74
 80081fa:	b118      	cbz	r0, 8008204 <_vfiprintf_r+0x18>
 80081fc:	6a03      	ldr	r3, [r0, #32]
 80081fe:	b90b      	cbnz	r3, 8008204 <_vfiprintf_r+0x18>
 8008200:	f7fc fe00 	bl	8004e04 <__sinit>
 8008204:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008206:	07d9      	lsls	r1, r3, #31
 8008208:	d405      	bmi.n	8008216 <_vfiprintf_r+0x2a>
 800820a:	89ab      	ldrh	r3, [r5, #12]
 800820c:	059a      	lsls	r2, r3, #22
 800820e:	d402      	bmi.n	8008216 <_vfiprintf_r+0x2a>
 8008210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008212:	f7fc ff10 	bl	8005036 <__retarget_lock_acquire_recursive>
 8008216:	89ab      	ldrh	r3, [r5, #12]
 8008218:	071b      	lsls	r3, r3, #28
 800821a:	d501      	bpl.n	8008220 <_vfiprintf_r+0x34>
 800821c:	692b      	ldr	r3, [r5, #16]
 800821e:	b99b      	cbnz	r3, 8008248 <_vfiprintf_r+0x5c>
 8008220:	4629      	mov	r1, r5
 8008222:	4630      	mov	r0, r6
 8008224:	f000 f938 	bl	8008498 <__swsetup_r>
 8008228:	b170      	cbz	r0, 8008248 <_vfiprintf_r+0x5c>
 800822a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800822c:	07dc      	lsls	r4, r3, #31
 800822e:	d504      	bpl.n	800823a <_vfiprintf_r+0x4e>
 8008230:	f04f 30ff 	mov.w	r0, #4294967295
 8008234:	b01d      	add	sp, #116	@ 0x74
 8008236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800823a:	89ab      	ldrh	r3, [r5, #12]
 800823c:	0598      	lsls	r0, r3, #22
 800823e:	d4f7      	bmi.n	8008230 <_vfiprintf_r+0x44>
 8008240:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008242:	f7fc fef9 	bl	8005038 <__retarget_lock_release_recursive>
 8008246:	e7f3      	b.n	8008230 <_vfiprintf_r+0x44>
 8008248:	2300      	movs	r3, #0
 800824a:	9309      	str	r3, [sp, #36]	@ 0x24
 800824c:	2320      	movs	r3, #32
 800824e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008252:	2330      	movs	r3, #48	@ 0x30
 8008254:	f04f 0901 	mov.w	r9, #1
 8008258:	f8cd 800c 	str.w	r8, [sp, #12]
 800825c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008408 <_vfiprintf_r+0x21c>
 8008260:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008264:	4623      	mov	r3, r4
 8008266:	469a      	mov	sl, r3
 8008268:	f813 2b01 	ldrb.w	r2, [r3], #1
 800826c:	b10a      	cbz	r2, 8008272 <_vfiprintf_r+0x86>
 800826e:	2a25      	cmp	r2, #37	@ 0x25
 8008270:	d1f9      	bne.n	8008266 <_vfiprintf_r+0x7a>
 8008272:	ebba 0b04 	subs.w	fp, sl, r4
 8008276:	d00b      	beq.n	8008290 <_vfiprintf_r+0xa4>
 8008278:	465b      	mov	r3, fp
 800827a:	4622      	mov	r2, r4
 800827c:	4629      	mov	r1, r5
 800827e:	4630      	mov	r0, r6
 8008280:	f7ff ffa2 	bl	80081c8 <__sfputs_r>
 8008284:	3001      	adds	r0, #1
 8008286:	f000 80a7 	beq.w	80083d8 <_vfiprintf_r+0x1ec>
 800828a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800828c:	445a      	add	r2, fp
 800828e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008290:	f89a 3000 	ldrb.w	r3, [sl]
 8008294:	2b00      	cmp	r3, #0
 8008296:	f000 809f 	beq.w	80083d8 <_vfiprintf_r+0x1ec>
 800829a:	2300      	movs	r3, #0
 800829c:	f04f 32ff 	mov.w	r2, #4294967295
 80082a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082a4:	f10a 0a01 	add.w	sl, sl, #1
 80082a8:	9304      	str	r3, [sp, #16]
 80082aa:	9307      	str	r3, [sp, #28]
 80082ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80082b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80082b2:	4654      	mov	r4, sl
 80082b4:	2205      	movs	r2, #5
 80082b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ba:	4853      	ldr	r0, [pc, #332]	@ (8008408 <_vfiprintf_r+0x21c>)
 80082bc:	f7fc febd 	bl	800503a <memchr>
 80082c0:	9a04      	ldr	r2, [sp, #16]
 80082c2:	b9d8      	cbnz	r0, 80082fc <_vfiprintf_r+0x110>
 80082c4:	06d1      	lsls	r1, r2, #27
 80082c6:	bf44      	itt	mi
 80082c8:	2320      	movmi	r3, #32
 80082ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082ce:	0713      	lsls	r3, r2, #28
 80082d0:	bf44      	itt	mi
 80082d2:	232b      	movmi	r3, #43	@ 0x2b
 80082d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082d8:	f89a 3000 	ldrb.w	r3, [sl]
 80082dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80082de:	d015      	beq.n	800830c <_vfiprintf_r+0x120>
 80082e0:	4654      	mov	r4, sl
 80082e2:	2000      	movs	r0, #0
 80082e4:	f04f 0c0a 	mov.w	ip, #10
 80082e8:	9a07      	ldr	r2, [sp, #28]
 80082ea:	4621      	mov	r1, r4
 80082ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082f0:	3b30      	subs	r3, #48	@ 0x30
 80082f2:	2b09      	cmp	r3, #9
 80082f4:	d94b      	bls.n	800838e <_vfiprintf_r+0x1a2>
 80082f6:	b1b0      	cbz	r0, 8008326 <_vfiprintf_r+0x13a>
 80082f8:	9207      	str	r2, [sp, #28]
 80082fa:	e014      	b.n	8008326 <_vfiprintf_r+0x13a>
 80082fc:	eba0 0308 	sub.w	r3, r0, r8
 8008300:	fa09 f303 	lsl.w	r3, r9, r3
 8008304:	4313      	orrs	r3, r2
 8008306:	46a2      	mov	sl, r4
 8008308:	9304      	str	r3, [sp, #16]
 800830a:	e7d2      	b.n	80082b2 <_vfiprintf_r+0xc6>
 800830c:	9b03      	ldr	r3, [sp, #12]
 800830e:	1d19      	adds	r1, r3, #4
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	9103      	str	r1, [sp, #12]
 8008314:	2b00      	cmp	r3, #0
 8008316:	bfbb      	ittet	lt
 8008318:	425b      	neglt	r3, r3
 800831a:	f042 0202 	orrlt.w	r2, r2, #2
 800831e:	9307      	strge	r3, [sp, #28]
 8008320:	9307      	strlt	r3, [sp, #28]
 8008322:	bfb8      	it	lt
 8008324:	9204      	strlt	r2, [sp, #16]
 8008326:	7823      	ldrb	r3, [r4, #0]
 8008328:	2b2e      	cmp	r3, #46	@ 0x2e
 800832a:	d10a      	bne.n	8008342 <_vfiprintf_r+0x156>
 800832c:	7863      	ldrb	r3, [r4, #1]
 800832e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008330:	d132      	bne.n	8008398 <_vfiprintf_r+0x1ac>
 8008332:	9b03      	ldr	r3, [sp, #12]
 8008334:	3402      	adds	r4, #2
 8008336:	1d1a      	adds	r2, r3, #4
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	9203      	str	r2, [sp, #12]
 800833c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008340:	9305      	str	r3, [sp, #20]
 8008342:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800840c <_vfiprintf_r+0x220>
 8008346:	2203      	movs	r2, #3
 8008348:	4650      	mov	r0, sl
 800834a:	7821      	ldrb	r1, [r4, #0]
 800834c:	f7fc fe75 	bl	800503a <memchr>
 8008350:	b138      	cbz	r0, 8008362 <_vfiprintf_r+0x176>
 8008352:	2240      	movs	r2, #64	@ 0x40
 8008354:	9b04      	ldr	r3, [sp, #16]
 8008356:	eba0 000a 	sub.w	r0, r0, sl
 800835a:	4082      	lsls	r2, r0
 800835c:	4313      	orrs	r3, r2
 800835e:	3401      	adds	r4, #1
 8008360:	9304      	str	r3, [sp, #16]
 8008362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008366:	2206      	movs	r2, #6
 8008368:	4829      	ldr	r0, [pc, #164]	@ (8008410 <_vfiprintf_r+0x224>)
 800836a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800836e:	f7fc fe64 	bl	800503a <memchr>
 8008372:	2800      	cmp	r0, #0
 8008374:	d03f      	beq.n	80083f6 <_vfiprintf_r+0x20a>
 8008376:	4b27      	ldr	r3, [pc, #156]	@ (8008414 <_vfiprintf_r+0x228>)
 8008378:	bb1b      	cbnz	r3, 80083c2 <_vfiprintf_r+0x1d6>
 800837a:	9b03      	ldr	r3, [sp, #12]
 800837c:	3307      	adds	r3, #7
 800837e:	f023 0307 	bic.w	r3, r3, #7
 8008382:	3308      	adds	r3, #8
 8008384:	9303      	str	r3, [sp, #12]
 8008386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008388:	443b      	add	r3, r7
 800838a:	9309      	str	r3, [sp, #36]	@ 0x24
 800838c:	e76a      	b.n	8008264 <_vfiprintf_r+0x78>
 800838e:	460c      	mov	r4, r1
 8008390:	2001      	movs	r0, #1
 8008392:	fb0c 3202 	mla	r2, ip, r2, r3
 8008396:	e7a8      	b.n	80082ea <_vfiprintf_r+0xfe>
 8008398:	2300      	movs	r3, #0
 800839a:	f04f 0c0a 	mov.w	ip, #10
 800839e:	4619      	mov	r1, r3
 80083a0:	3401      	adds	r4, #1
 80083a2:	9305      	str	r3, [sp, #20]
 80083a4:	4620      	mov	r0, r4
 80083a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083aa:	3a30      	subs	r2, #48	@ 0x30
 80083ac:	2a09      	cmp	r2, #9
 80083ae:	d903      	bls.n	80083b8 <_vfiprintf_r+0x1cc>
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d0c6      	beq.n	8008342 <_vfiprintf_r+0x156>
 80083b4:	9105      	str	r1, [sp, #20]
 80083b6:	e7c4      	b.n	8008342 <_vfiprintf_r+0x156>
 80083b8:	4604      	mov	r4, r0
 80083ba:	2301      	movs	r3, #1
 80083bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80083c0:	e7f0      	b.n	80083a4 <_vfiprintf_r+0x1b8>
 80083c2:	ab03      	add	r3, sp, #12
 80083c4:	9300      	str	r3, [sp, #0]
 80083c6:	462a      	mov	r2, r5
 80083c8:	4630      	mov	r0, r6
 80083ca:	4b13      	ldr	r3, [pc, #76]	@ (8008418 <_vfiprintf_r+0x22c>)
 80083cc:	a904      	add	r1, sp, #16
 80083ce:	f7fb fec7 	bl	8004160 <_printf_float>
 80083d2:	4607      	mov	r7, r0
 80083d4:	1c78      	adds	r0, r7, #1
 80083d6:	d1d6      	bne.n	8008386 <_vfiprintf_r+0x19a>
 80083d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083da:	07d9      	lsls	r1, r3, #31
 80083dc:	d405      	bmi.n	80083ea <_vfiprintf_r+0x1fe>
 80083de:	89ab      	ldrh	r3, [r5, #12]
 80083e0:	059a      	lsls	r2, r3, #22
 80083e2:	d402      	bmi.n	80083ea <_vfiprintf_r+0x1fe>
 80083e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083e6:	f7fc fe27 	bl	8005038 <__retarget_lock_release_recursive>
 80083ea:	89ab      	ldrh	r3, [r5, #12]
 80083ec:	065b      	lsls	r3, r3, #25
 80083ee:	f53f af1f 	bmi.w	8008230 <_vfiprintf_r+0x44>
 80083f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083f4:	e71e      	b.n	8008234 <_vfiprintf_r+0x48>
 80083f6:	ab03      	add	r3, sp, #12
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	462a      	mov	r2, r5
 80083fc:	4630      	mov	r0, r6
 80083fe:	4b06      	ldr	r3, [pc, #24]	@ (8008418 <_vfiprintf_r+0x22c>)
 8008400:	a904      	add	r1, sp, #16
 8008402:	f7fc f94b 	bl	800469c <_printf_i>
 8008406:	e7e4      	b.n	80083d2 <_vfiprintf_r+0x1e6>
 8008408:	08008d17 	.word	0x08008d17
 800840c:	08008d1d 	.word	0x08008d1d
 8008410:	08008d21 	.word	0x08008d21
 8008414:	08004161 	.word	0x08004161
 8008418:	080081c9 	.word	0x080081c9

0800841c <__swbuf_r>:
 800841c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841e:	460e      	mov	r6, r1
 8008420:	4614      	mov	r4, r2
 8008422:	4605      	mov	r5, r0
 8008424:	b118      	cbz	r0, 800842e <__swbuf_r+0x12>
 8008426:	6a03      	ldr	r3, [r0, #32]
 8008428:	b90b      	cbnz	r3, 800842e <__swbuf_r+0x12>
 800842a:	f7fc fceb 	bl	8004e04 <__sinit>
 800842e:	69a3      	ldr	r3, [r4, #24]
 8008430:	60a3      	str	r3, [r4, #8]
 8008432:	89a3      	ldrh	r3, [r4, #12]
 8008434:	071a      	lsls	r2, r3, #28
 8008436:	d501      	bpl.n	800843c <__swbuf_r+0x20>
 8008438:	6923      	ldr	r3, [r4, #16]
 800843a:	b943      	cbnz	r3, 800844e <__swbuf_r+0x32>
 800843c:	4621      	mov	r1, r4
 800843e:	4628      	mov	r0, r5
 8008440:	f000 f82a 	bl	8008498 <__swsetup_r>
 8008444:	b118      	cbz	r0, 800844e <__swbuf_r+0x32>
 8008446:	f04f 37ff 	mov.w	r7, #4294967295
 800844a:	4638      	mov	r0, r7
 800844c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800844e:	6823      	ldr	r3, [r4, #0]
 8008450:	6922      	ldr	r2, [r4, #16]
 8008452:	b2f6      	uxtb	r6, r6
 8008454:	1a98      	subs	r0, r3, r2
 8008456:	6963      	ldr	r3, [r4, #20]
 8008458:	4637      	mov	r7, r6
 800845a:	4283      	cmp	r3, r0
 800845c:	dc05      	bgt.n	800846a <__swbuf_r+0x4e>
 800845e:	4621      	mov	r1, r4
 8008460:	4628      	mov	r0, r5
 8008462:	f7ff fa4b 	bl	80078fc <_fflush_r>
 8008466:	2800      	cmp	r0, #0
 8008468:	d1ed      	bne.n	8008446 <__swbuf_r+0x2a>
 800846a:	68a3      	ldr	r3, [r4, #8]
 800846c:	3b01      	subs	r3, #1
 800846e:	60a3      	str	r3, [r4, #8]
 8008470:	6823      	ldr	r3, [r4, #0]
 8008472:	1c5a      	adds	r2, r3, #1
 8008474:	6022      	str	r2, [r4, #0]
 8008476:	701e      	strb	r6, [r3, #0]
 8008478:	6962      	ldr	r2, [r4, #20]
 800847a:	1c43      	adds	r3, r0, #1
 800847c:	429a      	cmp	r2, r3
 800847e:	d004      	beq.n	800848a <__swbuf_r+0x6e>
 8008480:	89a3      	ldrh	r3, [r4, #12]
 8008482:	07db      	lsls	r3, r3, #31
 8008484:	d5e1      	bpl.n	800844a <__swbuf_r+0x2e>
 8008486:	2e0a      	cmp	r6, #10
 8008488:	d1df      	bne.n	800844a <__swbuf_r+0x2e>
 800848a:	4621      	mov	r1, r4
 800848c:	4628      	mov	r0, r5
 800848e:	f7ff fa35 	bl	80078fc <_fflush_r>
 8008492:	2800      	cmp	r0, #0
 8008494:	d0d9      	beq.n	800844a <__swbuf_r+0x2e>
 8008496:	e7d6      	b.n	8008446 <__swbuf_r+0x2a>

08008498 <__swsetup_r>:
 8008498:	b538      	push	{r3, r4, r5, lr}
 800849a:	4b29      	ldr	r3, [pc, #164]	@ (8008540 <__swsetup_r+0xa8>)
 800849c:	4605      	mov	r5, r0
 800849e:	6818      	ldr	r0, [r3, #0]
 80084a0:	460c      	mov	r4, r1
 80084a2:	b118      	cbz	r0, 80084ac <__swsetup_r+0x14>
 80084a4:	6a03      	ldr	r3, [r0, #32]
 80084a6:	b90b      	cbnz	r3, 80084ac <__swsetup_r+0x14>
 80084a8:	f7fc fcac 	bl	8004e04 <__sinit>
 80084ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084b0:	0719      	lsls	r1, r3, #28
 80084b2:	d422      	bmi.n	80084fa <__swsetup_r+0x62>
 80084b4:	06da      	lsls	r2, r3, #27
 80084b6:	d407      	bmi.n	80084c8 <__swsetup_r+0x30>
 80084b8:	2209      	movs	r2, #9
 80084ba:	602a      	str	r2, [r5, #0]
 80084bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084c0:	f04f 30ff 	mov.w	r0, #4294967295
 80084c4:	81a3      	strh	r3, [r4, #12]
 80084c6:	e033      	b.n	8008530 <__swsetup_r+0x98>
 80084c8:	0758      	lsls	r0, r3, #29
 80084ca:	d512      	bpl.n	80084f2 <__swsetup_r+0x5a>
 80084cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084ce:	b141      	cbz	r1, 80084e2 <__swsetup_r+0x4a>
 80084d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084d4:	4299      	cmp	r1, r3
 80084d6:	d002      	beq.n	80084de <__swsetup_r+0x46>
 80084d8:	4628      	mov	r0, r5
 80084da:	f7fd fc1d 	bl	8005d18 <_free_r>
 80084de:	2300      	movs	r3, #0
 80084e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80084e2:	89a3      	ldrh	r3, [r4, #12]
 80084e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80084e8:	81a3      	strh	r3, [r4, #12]
 80084ea:	2300      	movs	r3, #0
 80084ec:	6063      	str	r3, [r4, #4]
 80084ee:	6923      	ldr	r3, [r4, #16]
 80084f0:	6023      	str	r3, [r4, #0]
 80084f2:	89a3      	ldrh	r3, [r4, #12]
 80084f4:	f043 0308 	orr.w	r3, r3, #8
 80084f8:	81a3      	strh	r3, [r4, #12]
 80084fa:	6923      	ldr	r3, [r4, #16]
 80084fc:	b94b      	cbnz	r3, 8008512 <__swsetup_r+0x7a>
 80084fe:	89a3      	ldrh	r3, [r4, #12]
 8008500:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008504:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008508:	d003      	beq.n	8008512 <__swsetup_r+0x7a>
 800850a:	4621      	mov	r1, r4
 800850c:	4628      	mov	r0, r5
 800850e:	f000 f882 	bl	8008616 <__smakebuf_r>
 8008512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008516:	f013 0201 	ands.w	r2, r3, #1
 800851a:	d00a      	beq.n	8008532 <__swsetup_r+0x9a>
 800851c:	2200      	movs	r2, #0
 800851e:	60a2      	str	r2, [r4, #8]
 8008520:	6962      	ldr	r2, [r4, #20]
 8008522:	4252      	negs	r2, r2
 8008524:	61a2      	str	r2, [r4, #24]
 8008526:	6922      	ldr	r2, [r4, #16]
 8008528:	b942      	cbnz	r2, 800853c <__swsetup_r+0xa4>
 800852a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800852e:	d1c5      	bne.n	80084bc <__swsetup_r+0x24>
 8008530:	bd38      	pop	{r3, r4, r5, pc}
 8008532:	0799      	lsls	r1, r3, #30
 8008534:	bf58      	it	pl
 8008536:	6962      	ldrpl	r2, [r4, #20]
 8008538:	60a2      	str	r2, [r4, #8]
 800853a:	e7f4      	b.n	8008526 <__swsetup_r+0x8e>
 800853c:	2000      	movs	r0, #0
 800853e:	e7f7      	b.n	8008530 <__swsetup_r+0x98>
 8008540:	2000001c 	.word	0x2000001c

08008544 <_raise_r>:
 8008544:	291f      	cmp	r1, #31
 8008546:	b538      	push	{r3, r4, r5, lr}
 8008548:	4605      	mov	r5, r0
 800854a:	460c      	mov	r4, r1
 800854c:	d904      	bls.n	8008558 <_raise_r+0x14>
 800854e:	2316      	movs	r3, #22
 8008550:	6003      	str	r3, [r0, #0]
 8008552:	f04f 30ff 	mov.w	r0, #4294967295
 8008556:	bd38      	pop	{r3, r4, r5, pc}
 8008558:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800855a:	b112      	cbz	r2, 8008562 <_raise_r+0x1e>
 800855c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008560:	b94b      	cbnz	r3, 8008576 <_raise_r+0x32>
 8008562:	4628      	mov	r0, r5
 8008564:	f000 f830 	bl	80085c8 <_getpid_r>
 8008568:	4622      	mov	r2, r4
 800856a:	4601      	mov	r1, r0
 800856c:	4628      	mov	r0, r5
 800856e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008572:	f000 b817 	b.w	80085a4 <_kill_r>
 8008576:	2b01      	cmp	r3, #1
 8008578:	d00a      	beq.n	8008590 <_raise_r+0x4c>
 800857a:	1c59      	adds	r1, r3, #1
 800857c:	d103      	bne.n	8008586 <_raise_r+0x42>
 800857e:	2316      	movs	r3, #22
 8008580:	6003      	str	r3, [r0, #0]
 8008582:	2001      	movs	r0, #1
 8008584:	e7e7      	b.n	8008556 <_raise_r+0x12>
 8008586:	2100      	movs	r1, #0
 8008588:	4620      	mov	r0, r4
 800858a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800858e:	4798      	blx	r3
 8008590:	2000      	movs	r0, #0
 8008592:	e7e0      	b.n	8008556 <_raise_r+0x12>

08008594 <raise>:
 8008594:	4b02      	ldr	r3, [pc, #8]	@ (80085a0 <raise+0xc>)
 8008596:	4601      	mov	r1, r0
 8008598:	6818      	ldr	r0, [r3, #0]
 800859a:	f7ff bfd3 	b.w	8008544 <_raise_r>
 800859e:	bf00      	nop
 80085a0:	2000001c 	.word	0x2000001c

080085a4 <_kill_r>:
 80085a4:	b538      	push	{r3, r4, r5, lr}
 80085a6:	2300      	movs	r3, #0
 80085a8:	4d06      	ldr	r5, [pc, #24]	@ (80085c4 <_kill_r+0x20>)
 80085aa:	4604      	mov	r4, r0
 80085ac:	4608      	mov	r0, r1
 80085ae:	4611      	mov	r1, r2
 80085b0:	602b      	str	r3, [r5, #0]
 80085b2:	f7f8 ff64 	bl	800147e <_kill>
 80085b6:	1c43      	adds	r3, r0, #1
 80085b8:	d102      	bne.n	80085c0 <_kill_r+0x1c>
 80085ba:	682b      	ldr	r3, [r5, #0]
 80085bc:	b103      	cbz	r3, 80085c0 <_kill_r+0x1c>
 80085be:	6023      	str	r3, [r4, #0]
 80085c0:	bd38      	pop	{r3, r4, r5, pc}
 80085c2:	bf00      	nop
 80085c4:	20000420 	.word	0x20000420

080085c8 <_getpid_r>:
 80085c8:	f7f8 bf52 	b.w	8001470 <_getpid>

080085cc <__swhatbuf_r>:
 80085cc:	b570      	push	{r4, r5, r6, lr}
 80085ce:	460c      	mov	r4, r1
 80085d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085d4:	4615      	mov	r5, r2
 80085d6:	2900      	cmp	r1, #0
 80085d8:	461e      	mov	r6, r3
 80085da:	b096      	sub	sp, #88	@ 0x58
 80085dc:	da0c      	bge.n	80085f8 <__swhatbuf_r+0x2c>
 80085de:	89a3      	ldrh	r3, [r4, #12]
 80085e0:	2100      	movs	r1, #0
 80085e2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80085e6:	bf14      	ite	ne
 80085e8:	2340      	movne	r3, #64	@ 0x40
 80085ea:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80085ee:	2000      	movs	r0, #0
 80085f0:	6031      	str	r1, [r6, #0]
 80085f2:	602b      	str	r3, [r5, #0]
 80085f4:	b016      	add	sp, #88	@ 0x58
 80085f6:	bd70      	pop	{r4, r5, r6, pc}
 80085f8:	466a      	mov	r2, sp
 80085fa:	f000 f849 	bl	8008690 <_fstat_r>
 80085fe:	2800      	cmp	r0, #0
 8008600:	dbed      	blt.n	80085de <__swhatbuf_r+0x12>
 8008602:	9901      	ldr	r1, [sp, #4]
 8008604:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008608:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800860c:	4259      	negs	r1, r3
 800860e:	4159      	adcs	r1, r3
 8008610:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008614:	e7eb      	b.n	80085ee <__swhatbuf_r+0x22>

08008616 <__smakebuf_r>:
 8008616:	898b      	ldrh	r3, [r1, #12]
 8008618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800861a:	079d      	lsls	r5, r3, #30
 800861c:	4606      	mov	r6, r0
 800861e:	460c      	mov	r4, r1
 8008620:	d507      	bpl.n	8008632 <__smakebuf_r+0x1c>
 8008622:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008626:	6023      	str	r3, [r4, #0]
 8008628:	6123      	str	r3, [r4, #16]
 800862a:	2301      	movs	r3, #1
 800862c:	6163      	str	r3, [r4, #20]
 800862e:	b003      	add	sp, #12
 8008630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008632:	466a      	mov	r2, sp
 8008634:	ab01      	add	r3, sp, #4
 8008636:	f7ff ffc9 	bl	80085cc <__swhatbuf_r>
 800863a:	9f00      	ldr	r7, [sp, #0]
 800863c:	4605      	mov	r5, r0
 800863e:	4639      	mov	r1, r7
 8008640:	4630      	mov	r0, r6
 8008642:	f7fd fbdb 	bl	8005dfc <_malloc_r>
 8008646:	b948      	cbnz	r0, 800865c <__smakebuf_r+0x46>
 8008648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800864c:	059a      	lsls	r2, r3, #22
 800864e:	d4ee      	bmi.n	800862e <__smakebuf_r+0x18>
 8008650:	f023 0303 	bic.w	r3, r3, #3
 8008654:	f043 0302 	orr.w	r3, r3, #2
 8008658:	81a3      	strh	r3, [r4, #12]
 800865a:	e7e2      	b.n	8008622 <__smakebuf_r+0xc>
 800865c:	89a3      	ldrh	r3, [r4, #12]
 800865e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008666:	81a3      	strh	r3, [r4, #12]
 8008668:	9b01      	ldr	r3, [sp, #4]
 800866a:	6020      	str	r0, [r4, #0]
 800866c:	b15b      	cbz	r3, 8008686 <__smakebuf_r+0x70>
 800866e:	4630      	mov	r0, r6
 8008670:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008674:	f000 f81e 	bl	80086b4 <_isatty_r>
 8008678:	b128      	cbz	r0, 8008686 <__smakebuf_r+0x70>
 800867a:	89a3      	ldrh	r3, [r4, #12]
 800867c:	f023 0303 	bic.w	r3, r3, #3
 8008680:	f043 0301 	orr.w	r3, r3, #1
 8008684:	81a3      	strh	r3, [r4, #12]
 8008686:	89a3      	ldrh	r3, [r4, #12]
 8008688:	431d      	orrs	r5, r3
 800868a:	81a5      	strh	r5, [r4, #12]
 800868c:	e7cf      	b.n	800862e <__smakebuf_r+0x18>
	...

08008690 <_fstat_r>:
 8008690:	b538      	push	{r3, r4, r5, lr}
 8008692:	2300      	movs	r3, #0
 8008694:	4d06      	ldr	r5, [pc, #24]	@ (80086b0 <_fstat_r+0x20>)
 8008696:	4604      	mov	r4, r0
 8008698:	4608      	mov	r0, r1
 800869a:	4611      	mov	r1, r2
 800869c:	602b      	str	r3, [r5, #0]
 800869e:	f7f8 ff4d 	bl	800153c <_fstat>
 80086a2:	1c43      	adds	r3, r0, #1
 80086a4:	d102      	bne.n	80086ac <_fstat_r+0x1c>
 80086a6:	682b      	ldr	r3, [r5, #0]
 80086a8:	b103      	cbz	r3, 80086ac <_fstat_r+0x1c>
 80086aa:	6023      	str	r3, [r4, #0]
 80086ac:	bd38      	pop	{r3, r4, r5, pc}
 80086ae:	bf00      	nop
 80086b0:	20000420 	.word	0x20000420

080086b4 <_isatty_r>:
 80086b4:	b538      	push	{r3, r4, r5, lr}
 80086b6:	2300      	movs	r3, #0
 80086b8:	4d05      	ldr	r5, [pc, #20]	@ (80086d0 <_isatty_r+0x1c>)
 80086ba:	4604      	mov	r4, r0
 80086bc:	4608      	mov	r0, r1
 80086be:	602b      	str	r3, [r5, #0]
 80086c0:	f7f8 ff4b 	bl	800155a <_isatty>
 80086c4:	1c43      	adds	r3, r0, #1
 80086c6:	d102      	bne.n	80086ce <_isatty_r+0x1a>
 80086c8:	682b      	ldr	r3, [r5, #0]
 80086ca:	b103      	cbz	r3, 80086ce <_isatty_r+0x1a>
 80086cc:	6023      	str	r3, [r4, #0]
 80086ce:	bd38      	pop	{r3, r4, r5, pc}
 80086d0:	20000420 	.word	0x20000420

080086d4 <atan2>:
 80086d4:	f000 b804 	b.w	80086e0 <__ieee754_atan2>

080086d8 <fabs>:
 80086d8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80086dc:	4619      	mov	r1, r3
 80086de:	4770      	bx	lr

080086e0 <__ieee754_atan2>:
 80086e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e4:	4617      	mov	r7, r2
 80086e6:	4690      	mov	r8, r2
 80086e8:	4699      	mov	r9, r3
 80086ea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80086ee:	427b      	negs	r3, r7
 80086f0:	f8df a184 	ldr.w	sl, [pc, #388]	@ 8008878 <__ieee754_atan2+0x198>
 80086f4:	433b      	orrs	r3, r7
 80086f6:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80086fa:	4553      	cmp	r3, sl
 80086fc:	4604      	mov	r4, r0
 80086fe:	460d      	mov	r5, r1
 8008700:	d809      	bhi.n	8008716 <__ieee754_atan2+0x36>
 8008702:	4246      	negs	r6, r0
 8008704:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008708:	4306      	orrs	r6, r0
 800870a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800870e:	4556      	cmp	r6, sl
 8008710:	468e      	mov	lr, r1
 8008712:	4683      	mov	fp, r0
 8008714:	d908      	bls.n	8008728 <__ieee754_atan2+0x48>
 8008716:	4642      	mov	r2, r8
 8008718:	464b      	mov	r3, r9
 800871a:	4620      	mov	r0, r4
 800871c:	4629      	mov	r1, r5
 800871e:	f7f7 fd25 	bl	800016c <__adddf3>
 8008722:	4604      	mov	r4, r0
 8008724:	460d      	mov	r5, r1
 8008726:	e016      	b.n	8008756 <__ieee754_atan2+0x76>
 8008728:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 800872c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8008730:	433e      	orrs	r6, r7
 8008732:	d103      	bne.n	800873c <__ieee754_atan2+0x5c>
 8008734:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008738:	f000 b8a6 	b.w	8008888 <atan>
 800873c:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8008740:	f006 0602 	and.w	r6, r6, #2
 8008744:	ea53 0b0b 	orrs.w	fp, r3, fp
 8008748:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800874c:	d107      	bne.n	800875e <__ieee754_atan2+0x7e>
 800874e:	2e02      	cmp	r6, #2
 8008750:	d064      	beq.n	800881c <__ieee754_atan2+0x13c>
 8008752:	2e03      	cmp	r6, #3
 8008754:	d066      	beq.n	8008824 <__ieee754_atan2+0x144>
 8008756:	4620      	mov	r0, r4
 8008758:	4629      	mov	r1, r5
 800875a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800875e:	4317      	orrs	r7, r2
 8008760:	d106      	bne.n	8008770 <__ieee754_atan2+0x90>
 8008762:	f1be 0f00 	cmp.w	lr, #0
 8008766:	db68      	blt.n	800883a <__ieee754_atan2+0x15a>
 8008768:	a537      	add	r5, pc, #220	@ (adr r5, 8008848 <__ieee754_atan2+0x168>)
 800876a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800876e:	e7f2      	b.n	8008756 <__ieee754_atan2+0x76>
 8008770:	4552      	cmp	r2, sl
 8008772:	d10f      	bne.n	8008794 <__ieee754_atan2+0xb4>
 8008774:	4293      	cmp	r3, r2
 8008776:	f106 36ff 	add.w	r6, r6, #4294967295
 800877a:	d107      	bne.n	800878c <__ieee754_atan2+0xac>
 800877c:	2e02      	cmp	r6, #2
 800877e:	d855      	bhi.n	800882c <__ieee754_atan2+0x14c>
 8008780:	4b3e      	ldr	r3, [pc, #248]	@ (800887c <__ieee754_atan2+0x19c>)
 8008782:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008786:	e9d3 4500 	ldrd	r4, r5, [r3]
 800878a:	e7e4      	b.n	8008756 <__ieee754_atan2+0x76>
 800878c:	2e02      	cmp	r6, #2
 800878e:	d851      	bhi.n	8008834 <__ieee754_atan2+0x154>
 8008790:	4b3b      	ldr	r3, [pc, #236]	@ (8008880 <__ieee754_atan2+0x1a0>)
 8008792:	e7f6      	b.n	8008782 <__ieee754_atan2+0xa2>
 8008794:	4553      	cmp	r3, sl
 8008796:	d0e4      	beq.n	8008762 <__ieee754_atan2+0x82>
 8008798:	1a9b      	subs	r3, r3, r2
 800879a:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800879e:	ea4f 5223 	mov.w	r2, r3, asr #20
 80087a2:	da21      	bge.n	80087e8 <__ieee754_atan2+0x108>
 80087a4:	f1b9 0f00 	cmp.w	r9, #0
 80087a8:	da01      	bge.n	80087ae <__ieee754_atan2+0xce>
 80087aa:	323c      	adds	r2, #60	@ 0x3c
 80087ac:	db20      	blt.n	80087f0 <__ieee754_atan2+0x110>
 80087ae:	4642      	mov	r2, r8
 80087b0:	464b      	mov	r3, r9
 80087b2:	4620      	mov	r0, r4
 80087b4:	4629      	mov	r1, r5
 80087b6:	f7f7 ffb9 	bl	800072c <__aeabi_ddiv>
 80087ba:	f7ff ff8d 	bl	80086d8 <fabs>
 80087be:	f000 f863 	bl	8008888 <atan>
 80087c2:	4604      	mov	r4, r0
 80087c4:	460d      	mov	r5, r1
 80087c6:	2e01      	cmp	r6, #1
 80087c8:	d015      	beq.n	80087f6 <__ieee754_atan2+0x116>
 80087ca:	2e02      	cmp	r6, #2
 80087cc:	d017      	beq.n	80087fe <__ieee754_atan2+0x11e>
 80087ce:	2e00      	cmp	r6, #0
 80087d0:	d0c1      	beq.n	8008756 <__ieee754_atan2+0x76>
 80087d2:	a31f      	add	r3, pc, #124	@ (adr r3, 8008850 <__ieee754_atan2+0x170>)
 80087d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d8:	4620      	mov	r0, r4
 80087da:	4629      	mov	r1, r5
 80087dc:	f7f7 fcc4 	bl	8000168 <__aeabi_dsub>
 80087e0:	a31d      	add	r3, pc, #116	@ (adr r3, 8008858 <__ieee754_atan2+0x178>)
 80087e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e6:	e016      	b.n	8008816 <__ieee754_atan2+0x136>
 80087e8:	a517      	add	r5, pc, #92	@ (adr r5, 8008848 <__ieee754_atan2+0x168>)
 80087ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 80087ee:	e7ea      	b.n	80087c6 <__ieee754_atan2+0xe6>
 80087f0:	2400      	movs	r4, #0
 80087f2:	2500      	movs	r5, #0
 80087f4:	e7e7      	b.n	80087c6 <__ieee754_atan2+0xe6>
 80087f6:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 80087fa:	461d      	mov	r5, r3
 80087fc:	e7ab      	b.n	8008756 <__ieee754_atan2+0x76>
 80087fe:	a314      	add	r3, pc, #80	@ (adr r3, 8008850 <__ieee754_atan2+0x170>)
 8008800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008804:	4620      	mov	r0, r4
 8008806:	4629      	mov	r1, r5
 8008808:	f7f7 fcae 	bl	8000168 <__aeabi_dsub>
 800880c:	4602      	mov	r2, r0
 800880e:	460b      	mov	r3, r1
 8008810:	a111      	add	r1, pc, #68	@ (adr r1, 8008858 <__ieee754_atan2+0x178>)
 8008812:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008816:	f7f7 fca7 	bl	8000168 <__aeabi_dsub>
 800881a:	e782      	b.n	8008722 <__ieee754_atan2+0x42>
 800881c:	a50e      	add	r5, pc, #56	@ (adr r5, 8008858 <__ieee754_atan2+0x178>)
 800881e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008822:	e798      	b.n	8008756 <__ieee754_atan2+0x76>
 8008824:	a50e      	add	r5, pc, #56	@ (adr r5, 8008860 <__ieee754_atan2+0x180>)
 8008826:	e9d5 4500 	ldrd	r4, r5, [r5]
 800882a:	e794      	b.n	8008756 <__ieee754_atan2+0x76>
 800882c:	a50e      	add	r5, pc, #56	@ (adr r5, 8008868 <__ieee754_atan2+0x188>)
 800882e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008832:	e790      	b.n	8008756 <__ieee754_atan2+0x76>
 8008834:	2400      	movs	r4, #0
 8008836:	2500      	movs	r5, #0
 8008838:	e78d      	b.n	8008756 <__ieee754_atan2+0x76>
 800883a:	a50d      	add	r5, pc, #52	@ (adr r5, 8008870 <__ieee754_atan2+0x190>)
 800883c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008840:	e789      	b.n	8008756 <__ieee754_atan2+0x76>
 8008842:	bf00      	nop
 8008844:	f3af 8000 	nop.w
 8008848:	54442d18 	.word	0x54442d18
 800884c:	3ff921fb 	.word	0x3ff921fb
 8008850:	33145c07 	.word	0x33145c07
 8008854:	3ca1a626 	.word	0x3ca1a626
 8008858:	54442d18 	.word	0x54442d18
 800885c:	400921fb 	.word	0x400921fb
 8008860:	54442d18 	.word	0x54442d18
 8008864:	c00921fb 	.word	0xc00921fb
 8008868:	54442d18 	.word	0x54442d18
 800886c:	3fe921fb 	.word	0x3fe921fb
 8008870:	54442d18 	.word	0x54442d18
 8008874:	bff921fb 	.word	0xbff921fb
 8008878:	7ff00000 	.word	0x7ff00000
 800887c:	08009038 	.word	0x08009038
 8008880:	08009020 	.word	0x08009020
 8008884:	00000000 	.word	0x00000000

08008888 <atan>:
 8008888:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800888c:	4bbc      	ldr	r3, [pc, #752]	@ (8008b80 <atan+0x2f8>)
 800888e:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8008892:	429e      	cmp	r6, r3
 8008894:	4604      	mov	r4, r0
 8008896:	460d      	mov	r5, r1
 8008898:	468b      	mov	fp, r1
 800889a:	d918      	bls.n	80088ce <atan+0x46>
 800889c:	4bb9      	ldr	r3, [pc, #740]	@ (8008b84 <atan+0x2fc>)
 800889e:	429e      	cmp	r6, r3
 80088a0:	d801      	bhi.n	80088a6 <atan+0x1e>
 80088a2:	d109      	bne.n	80088b8 <atan+0x30>
 80088a4:	b140      	cbz	r0, 80088b8 <atan+0x30>
 80088a6:	4622      	mov	r2, r4
 80088a8:	462b      	mov	r3, r5
 80088aa:	4620      	mov	r0, r4
 80088ac:	4629      	mov	r1, r5
 80088ae:	f7f7 fc5d 	bl	800016c <__adddf3>
 80088b2:	4604      	mov	r4, r0
 80088b4:	460d      	mov	r5, r1
 80088b6:	e006      	b.n	80088c6 <atan+0x3e>
 80088b8:	f1bb 0f00 	cmp.w	fp, #0
 80088bc:	f340 8123 	ble.w	8008b06 <atan+0x27e>
 80088c0:	a593      	add	r5, pc, #588	@ (adr r5, 8008b10 <atan+0x288>)
 80088c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80088c6:	4620      	mov	r0, r4
 80088c8:	4629      	mov	r1, r5
 80088ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ce:	4bae      	ldr	r3, [pc, #696]	@ (8008b88 <atan+0x300>)
 80088d0:	429e      	cmp	r6, r3
 80088d2:	d811      	bhi.n	80088f8 <atan+0x70>
 80088d4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80088d8:	429e      	cmp	r6, r3
 80088da:	d80a      	bhi.n	80088f2 <atan+0x6a>
 80088dc:	a38e      	add	r3, pc, #568	@ (adr r3, 8008b18 <atan+0x290>)
 80088de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e2:	f7f7 fc43 	bl	800016c <__adddf3>
 80088e6:	2200      	movs	r2, #0
 80088e8:	4ba8      	ldr	r3, [pc, #672]	@ (8008b8c <atan+0x304>)
 80088ea:	f7f8 f885 	bl	80009f8 <__aeabi_dcmpgt>
 80088ee:	2800      	cmp	r0, #0
 80088f0:	d1e9      	bne.n	80088c6 <atan+0x3e>
 80088f2:	f04f 3aff 	mov.w	sl, #4294967295
 80088f6:	e027      	b.n	8008948 <atan+0xc0>
 80088f8:	f7ff feee 	bl	80086d8 <fabs>
 80088fc:	4ba4      	ldr	r3, [pc, #656]	@ (8008b90 <atan+0x308>)
 80088fe:	4604      	mov	r4, r0
 8008900:	429e      	cmp	r6, r3
 8008902:	460d      	mov	r5, r1
 8008904:	f200 80b8 	bhi.w	8008a78 <atan+0x1f0>
 8008908:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800890c:	429e      	cmp	r6, r3
 800890e:	f200 809c 	bhi.w	8008a4a <atan+0x1c2>
 8008912:	4602      	mov	r2, r0
 8008914:	460b      	mov	r3, r1
 8008916:	f7f7 fc29 	bl	800016c <__adddf3>
 800891a:	2200      	movs	r2, #0
 800891c:	4b9b      	ldr	r3, [pc, #620]	@ (8008b8c <atan+0x304>)
 800891e:	f7f7 fc23 	bl	8000168 <__aeabi_dsub>
 8008922:	2200      	movs	r2, #0
 8008924:	4606      	mov	r6, r0
 8008926:	460f      	mov	r7, r1
 8008928:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800892c:	4620      	mov	r0, r4
 800892e:	4629      	mov	r1, r5
 8008930:	f7f7 fc1c 	bl	800016c <__adddf3>
 8008934:	4602      	mov	r2, r0
 8008936:	460b      	mov	r3, r1
 8008938:	4630      	mov	r0, r6
 800893a:	4639      	mov	r1, r7
 800893c:	f7f7 fef6 	bl	800072c <__aeabi_ddiv>
 8008940:	f04f 0a00 	mov.w	sl, #0
 8008944:	4604      	mov	r4, r0
 8008946:	460d      	mov	r5, r1
 8008948:	4622      	mov	r2, r4
 800894a:	462b      	mov	r3, r5
 800894c:	4620      	mov	r0, r4
 800894e:	4629      	mov	r1, r5
 8008950:	f7f7 fdc2 	bl	80004d8 <__aeabi_dmul>
 8008954:	4602      	mov	r2, r0
 8008956:	460b      	mov	r3, r1
 8008958:	4680      	mov	r8, r0
 800895a:	4689      	mov	r9, r1
 800895c:	f7f7 fdbc 	bl	80004d8 <__aeabi_dmul>
 8008960:	a36f      	add	r3, pc, #444	@ (adr r3, 8008b20 <atan+0x298>)
 8008962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008966:	4606      	mov	r6, r0
 8008968:	460f      	mov	r7, r1
 800896a:	f7f7 fdb5 	bl	80004d8 <__aeabi_dmul>
 800896e:	a36e      	add	r3, pc, #440	@ (adr r3, 8008b28 <atan+0x2a0>)
 8008970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008974:	f7f7 fbfa 	bl	800016c <__adddf3>
 8008978:	4632      	mov	r2, r6
 800897a:	463b      	mov	r3, r7
 800897c:	f7f7 fdac 	bl	80004d8 <__aeabi_dmul>
 8008980:	a36b      	add	r3, pc, #428	@ (adr r3, 8008b30 <atan+0x2a8>)
 8008982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008986:	f7f7 fbf1 	bl	800016c <__adddf3>
 800898a:	4632      	mov	r2, r6
 800898c:	463b      	mov	r3, r7
 800898e:	f7f7 fda3 	bl	80004d8 <__aeabi_dmul>
 8008992:	a369      	add	r3, pc, #420	@ (adr r3, 8008b38 <atan+0x2b0>)
 8008994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008998:	f7f7 fbe8 	bl	800016c <__adddf3>
 800899c:	4632      	mov	r2, r6
 800899e:	463b      	mov	r3, r7
 80089a0:	f7f7 fd9a 	bl	80004d8 <__aeabi_dmul>
 80089a4:	a366      	add	r3, pc, #408	@ (adr r3, 8008b40 <atan+0x2b8>)
 80089a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089aa:	f7f7 fbdf 	bl	800016c <__adddf3>
 80089ae:	4632      	mov	r2, r6
 80089b0:	463b      	mov	r3, r7
 80089b2:	f7f7 fd91 	bl	80004d8 <__aeabi_dmul>
 80089b6:	a364      	add	r3, pc, #400	@ (adr r3, 8008b48 <atan+0x2c0>)
 80089b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089bc:	f7f7 fbd6 	bl	800016c <__adddf3>
 80089c0:	4642      	mov	r2, r8
 80089c2:	464b      	mov	r3, r9
 80089c4:	f7f7 fd88 	bl	80004d8 <__aeabi_dmul>
 80089c8:	a361      	add	r3, pc, #388	@ (adr r3, 8008b50 <atan+0x2c8>)
 80089ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ce:	4680      	mov	r8, r0
 80089d0:	4689      	mov	r9, r1
 80089d2:	4630      	mov	r0, r6
 80089d4:	4639      	mov	r1, r7
 80089d6:	f7f7 fd7f 	bl	80004d8 <__aeabi_dmul>
 80089da:	a35f      	add	r3, pc, #380	@ (adr r3, 8008b58 <atan+0x2d0>)
 80089dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e0:	f7f7 fbc2 	bl	8000168 <__aeabi_dsub>
 80089e4:	4632      	mov	r2, r6
 80089e6:	463b      	mov	r3, r7
 80089e8:	f7f7 fd76 	bl	80004d8 <__aeabi_dmul>
 80089ec:	a35c      	add	r3, pc, #368	@ (adr r3, 8008b60 <atan+0x2d8>)
 80089ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f2:	f7f7 fbb9 	bl	8000168 <__aeabi_dsub>
 80089f6:	4632      	mov	r2, r6
 80089f8:	463b      	mov	r3, r7
 80089fa:	f7f7 fd6d 	bl	80004d8 <__aeabi_dmul>
 80089fe:	a35a      	add	r3, pc, #360	@ (adr r3, 8008b68 <atan+0x2e0>)
 8008a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a04:	f7f7 fbb0 	bl	8000168 <__aeabi_dsub>
 8008a08:	4632      	mov	r2, r6
 8008a0a:	463b      	mov	r3, r7
 8008a0c:	f7f7 fd64 	bl	80004d8 <__aeabi_dmul>
 8008a10:	a357      	add	r3, pc, #348	@ (adr r3, 8008b70 <atan+0x2e8>)
 8008a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a16:	f7f7 fba7 	bl	8000168 <__aeabi_dsub>
 8008a1a:	4632      	mov	r2, r6
 8008a1c:	463b      	mov	r3, r7
 8008a1e:	f7f7 fd5b 	bl	80004d8 <__aeabi_dmul>
 8008a22:	4602      	mov	r2, r0
 8008a24:	460b      	mov	r3, r1
 8008a26:	4640      	mov	r0, r8
 8008a28:	4649      	mov	r1, r9
 8008a2a:	f7f7 fb9f 	bl	800016c <__adddf3>
 8008a2e:	4622      	mov	r2, r4
 8008a30:	462b      	mov	r3, r5
 8008a32:	f7f7 fd51 	bl	80004d8 <__aeabi_dmul>
 8008a36:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	d144      	bne.n	8008aca <atan+0x242>
 8008a40:	4620      	mov	r0, r4
 8008a42:	4629      	mov	r1, r5
 8008a44:	f7f7 fb90 	bl	8000168 <__aeabi_dsub>
 8008a48:	e733      	b.n	80088b2 <atan+0x2a>
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	4b4f      	ldr	r3, [pc, #316]	@ (8008b8c <atan+0x304>)
 8008a4e:	f7f7 fb8b 	bl	8000168 <__aeabi_dsub>
 8008a52:	2200      	movs	r2, #0
 8008a54:	4606      	mov	r6, r0
 8008a56:	460f      	mov	r7, r1
 8008a58:	4620      	mov	r0, r4
 8008a5a:	4629      	mov	r1, r5
 8008a5c:	4b4b      	ldr	r3, [pc, #300]	@ (8008b8c <atan+0x304>)
 8008a5e:	f7f7 fb85 	bl	800016c <__adddf3>
 8008a62:	4602      	mov	r2, r0
 8008a64:	460b      	mov	r3, r1
 8008a66:	4630      	mov	r0, r6
 8008a68:	4639      	mov	r1, r7
 8008a6a:	f7f7 fe5f 	bl	800072c <__aeabi_ddiv>
 8008a6e:	f04f 0a01 	mov.w	sl, #1
 8008a72:	4604      	mov	r4, r0
 8008a74:	460d      	mov	r5, r1
 8008a76:	e767      	b.n	8008948 <atan+0xc0>
 8008a78:	4b46      	ldr	r3, [pc, #280]	@ (8008b94 <atan+0x30c>)
 8008a7a:	429e      	cmp	r6, r3
 8008a7c:	d21a      	bcs.n	8008ab4 <atan+0x22c>
 8008a7e:	2200      	movs	r2, #0
 8008a80:	4b45      	ldr	r3, [pc, #276]	@ (8008b98 <atan+0x310>)
 8008a82:	f7f7 fb71 	bl	8000168 <__aeabi_dsub>
 8008a86:	2200      	movs	r2, #0
 8008a88:	4606      	mov	r6, r0
 8008a8a:	460f      	mov	r7, r1
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	4629      	mov	r1, r5
 8008a90:	4b41      	ldr	r3, [pc, #260]	@ (8008b98 <atan+0x310>)
 8008a92:	f7f7 fd21 	bl	80004d8 <__aeabi_dmul>
 8008a96:	2200      	movs	r2, #0
 8008a98:	4b3c      	ldr	r3, [pc, #240]	@ (8008b8c <atan+0x304>)
 8008a9a:	f7f7 fb67 	bl	800016c <__adddf3>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	4639      	mov	r1, r7
 8008aa6:	f7f7 fe41 	bl	800072c <__aeabi_ddiv>
 8008aaa:	f04f 0a02 	mov.w	sl, #2
 8008aae:	4604      	mov	r4, r0
 8008ab0:	460d      	mov	r5, r1
 8008ab2:	e749      	b.n	8008948 <atan+0xc0>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	2000      	movs	r0, #0
 8008aba:	4938      	ldr	r1, [pc, #224]	@ (8008b9c <atan+0x314>)
 8008abc:	f7f7 fe36 	bl	800072c <__aeabi_ddiv>
 8008ac0:	f04f 0a03 	mov.w	sl, #3
 8008ac4:	4604      	mov	r4, r0
 8008ac6:	460d      	mov	r5, r1
 8008ac8:	e73e      	b.n	8008948 <atan+0xc0>
 8008aca:	4b35      	ldr	r3, [pc, #212]	@ (8008ba0 <atan+0x318>)
 8008acc:	4e35      	ldr	r6, [pc, #212]	@ (8008ba4 <atan+0x31c>)
 8008ace:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad6:	f7f7 fb47 	bl	8000168 <__aeabi_dsub>
 8008ada:	4622      	mov	r2, r4
 8008adc:	462b      	mov	r3, r5
 8008ade:	f7f7 fb43 	bl	8000168 <__aeabi_dsub>
 8008ae2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	460b      	mov	r3, r1
 8008aea:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008aee:	f7f7 fb3b 	bl	8000168 <__aeabi_dsub>
 8008af2:	f1bb 0f00 	cmp.w	fp, #0
 8008af6:	4604      	mov	r4, r0
 8008af8:	460d      	mov	r5, r1
 8008afa:	f6bf aee4 	bge.w	80088c6 <atan+0x3e>
 8008afe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008b02:	461d      	mov	r5, r3
 8008b04:	e6df      	b.n	80088c6 <atan+0x3e>
 8008b06:	a51c      	add	r5, pc, #112	@ (adr r5, 8008b78 <atan+0x2f0>)
 8008b08:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008b0c:	e6db      	b.n	80088c6 <atan+0x3e>
 8008b0e:	bf00      	nop
 8008b10:	54442d18 	.word	0x54442d18
 8008b14:	3ff921fb 	.word	0x3ff921fb
 8008b18:	8800759c 	.word	0x8800759c
 8008b1c:	7e37e43c 	.word	0x7e37e43c
 8008b20:	e322da11 	.word	0xe322da11
 8008b24:	3f90ad3a 	.word	0x3f90ad3a
 8008b28:	24760deb 	.word	0x24760deb
 8008b2c:	3fa97b4b 	.word	0x3fa97b4b
 8008b30:	a0d03d51 	.word	0xa0d03d51
 8008b34:	3fb10d66 	.word	0x3fb10d66
 8008b38:	c54c206e 	.word	0xc54c206e
 8008b3c:	3fb745cd 	.word	0x3fb745cd
 8008b40:	920083ff 	.word	0x920083ff
 8008b44:	3fc24924 	.word	0x3fc24924
 8008b48:	5555550d 	.word	0x5555550d
 8008b4c:	3fd55555 	.word	0x3fd55555
 8008b50:	2c6a6c2f 	.word	0x2c6a6c2f
 8008b54:	bfa2b444 	.word	0xbfa2b444
 8008b58:	52defd9a 	.word	0x52defd9a
 8008b5c:	3fadde2d 	.word	0x3fadde2d
 8008b60:	af749a6d 	.word	0xaf749a6d
 8008b64:	3fb3b0f2 	.word	0x3fb3b0f2
 8008b68:	fe231671 	.word	0xfe231671
 8008b6c:	3fbc71c6 	.word	0x3fbc71c6
 8008b70:	9998ebc4 	.word	0x9998ebc4
 8008b74:	3fc99999 	.word	0x3fc99999
 8008b78:	54442d18 	.word	0x54442d18
 8008b7c:	bff921fb 	.word	0xbff921fb
 8008b80:	440fffff 	.word	0x440fffff
 8008b84:	7ff00000 	.word	0x7ff00000
 8008b88:	3fdbffff 	.word	0x3fdbffff
 8008b8c:	3ff00000 	.word	0x3ff00000
 8008b90:	3ff2ffff 	.word	0x3ff2ffff
 8008b94:	40038000 	.word	0x40038000
 8008b98:	3ff80000 	.word	0x3ff80000
 8008b9c:	bff00000 	.word	0xbff00000
 8008ba0:	08009050 	.word	0x08009050
 8008ba4:	08009070 	.word	0x08009070

08008ba8 <_init>:
 8008ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008baa:	bf00      	nop
 8008bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bae:	bc08      	pop	{r3}
 8008bb0:	469e      	mov	lr, r3
 8008bb2:	4770      	bx	lr

08008bb4 <_fini>:
 8008bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bb6:	bf00      	nop
 8008bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bba:	bc08      	pop	{r3}
 8008bbc:	469e      	mov	lr, r3
 8008bbe:	4770      	bx	lr
